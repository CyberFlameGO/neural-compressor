trigger: none

pr:
  branches:
    include:
    - master
  paths:
    include:
    - neural_compressor
    exclude:
    - neural_compressor.ux

pool: suyue-test

variables:
  IMAGE_NAME: 'neural-compressor'
  IMAGE_TAG: 'py38'

stages:
- stage:
  displayName: Unit Test FWKs adaptor
  dependsOn: []
  jobs:
  - job:
    steps:
    - script: |
        # for test
        docker image rm ${IMAGE_NAME}:${IMAGE_TAG}
        if [[ ! $(docker images | grep -i '${IMAGE_NAME}:${IMAGE_TAG}' ) ]]; then
            docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
        fi
        docker images | grep -i ${IMAGE_NAME}
        if [[ $? -ne 0 ]]; then
          echo "NO Such Image ${IMAGE_NAME}"
          exit 1
        fi
      displayName: "Build Devel Docker Image"
    - script: |
        docker stop $(docker ps -aq)
        docker rm -vf $(docker ps -aq) || true
        env | sort
      displayName: 'Clean Docker'

    - script: |
        docker run --disable-content-trust --privileged --name="pr" --hostname="pr-host" -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor ${IMAGE_NAME}:${IMAGE_TAG} \
        bash -c "cd /neural-compressor/.azure-pipelines/scripts \
        && bash install_nc.sh \
        && bash ut/run_basic_adaptor.sh"
      displayName: 'Install Neural Compressor and Run UT'

- stage:
  displayName: Unit Test tf newAPI
  dependsOn: []
  jobs:
    - job:
      steps:
        - script: |
            if [[ ! $(docker images | grep -i '${IMAGE_NAME}:${IMAGE_TAG}' ) ]]; then
                docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
            fi
            docker images | grep -i ${IMAGE_NAME}
            if [[ $? -ne 0 ]]; then
              echo "NO Such Image ${IMAGE_NAME}"
              exit 1
            fi
          displayName: "Build Devel Docker Image"
        - script: |
            docker stop $(docker ps -aq)
            docker rm -vf $(docker ps -aq) || true
            env | sort
          displayName: 'Clean Docker'

        - script: |
            docker run --disable-content-trust --privileged --name="pr" --hostname="pr-host" -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor ${IMAGE_NAME}:${IMAGE_TAG} \
            bash -c "cd /neural-compressor/.azure-pipelines/scripts \
            && bash install_nc.sh \
            && bash ut/run_basic_adaptor_tfnewapi.sh"
          displayName: 'Install Neural Compressor and Run UT'

- stage:
  displayName: Unit Test other basic case
  dependsOn: []
  jobs:
    - job:
      steps:
        - script: |
            if [[ ! $(docker images | grep -i '${IMAGE_NAME}:${IMAGE_TAG}' ) ]]; then
                docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
            fi
            docker images | grep -i ${IMAGE_NAME}
            if [[ $? -ne 0 ]]; then
              echo "NO Such Image ${IMAGE_NAME}"
              exit 1
            fi
          displayName: "Build Devel Docker Image"
        - script: |
            docker stop $(docker ps -aq)
            docker rm -vf $(docker ps -aq) || true
            env | sort
          displayName: 'Clean Docker'

        - script: |
            docker run --disable-content-trust --privileged --name="pr" --hostname="pr-host" -v ${BUILD_SOURCESDIRECTORY}:/neural-compressor ${IMAGE_NAME}:${IMAGE_TAG} \
            bash -c "cd /neural-compressor/.azure-pipelines/scripts \
            && bash install_nc.sh \
            && bash ut/run_basic_others.sh"
          displayName: 'Install Neural Compressor and Run UT'
