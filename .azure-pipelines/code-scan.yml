trigger: 
  - code-scan

pr: 
  - master

# pr: none
#   # - master

pool: suyue-test

variables:
  IMAGE_NAME: 'code-scan'
  IMAGE_TAG: '1.0'
  VAL_PATH: /neural_compressor/.azure-pipelines/scripts/codeScan
  target_path: "neural_compressor"
  BUILD_DIRECTORY: $(Build.SourcesDirectory)
  TARGET_BRANCH: $(System.PullRequest.TargetBranch)

stages:
  - stage: bandit
    displayName: bandit code scan
    dependsOn: []
    jobs:
    - job: Build
      displayName: Build
      steps:
      - script: |
          echo ${BUILD_SOURCESDIRECTORY}
          sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          # sudo docker system prune || true
          # echo y | docker system prune
        displayName: 'Clean workspace'
      
      - checkout: self
        displayName: "Checkout out Repo"
      
      - script: |
          if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
              docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
          fi
          docker images | grep -i ${IMAGE_NAME}
          if [[ $? -ne 0 ]]; then
            echo "NO Such Image ${IMAGE_NAME}"
            exit 1
          fi
        displayName: "Build Devel Images"

      - script: |
          docker stop $(docker ps -aq)
          docker rm -vf $(docker ps -aq) || true
        displayName: 'Clean Docker'

      - script: |
          docker run --disable-content-trust --privileged --name="bandit" --hostname="bandit-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd /neural_compressor && bash $(VAL_PATH)/bandit/bandit.sh  $(VAL_PATH)"
        displayName: 'bandit code scan'


  - stage: pylint
    displayName: pylint code scan
    dependsOn: []
    jobs:
    - job: Build
      displayName: Build
      steps:
      - script: |
          echo ${BUILD_SOURCESDIRECTORY}
          sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          # echo y | docker system prune
        displayName: 'Clean workspace'
      
      - checkout: self
        displayName: "Checkout out Repo"
      
      - script: |
          if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
              docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
          fi
          docker images | grep -i ${IMAGE_NAME}
          if [[ $? -ne 0 ]]; then
            echo "NO Such Image ${IMAGE_NAME}"
            exit 1
          fi
        displayName: "Build Devel Images"

      - script: |
          docker stop $(docker ps -aq)
          docker rm -vf $(docker ps -aq) || true
        displayName: 'Clean Docker'

      - script: |
          docker run --disable-content-trust --privileged --name="pylint" --hostname="pylint-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  -x -c "cd /neural_compressor && bash $(VAL_PATH)/pylint/pylint.sh  $(VAL_PATH) $(target_path)"
        displayName: 'pylint code scan'

  - stage: pyspelling
    displayName: pyspelling code scan
    dependsOn: []
    jobs:
    - job: Build
      displayName: Build
      steps:
      - script: |
          echo ${BUILD_SOURCESDIRECTORY}
          sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          # echo y | docker system prune
        displayName: 'Clean workspace'
      
      - checkout: self
        displayName: "Checkout out Repo"
      
      - script: |
          if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
              docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
          fi
          docker images | grep -i ${IMAGE_NAME}
          if [[ $? -ne 0 ]]; then
            echo "NO Such Image ${IMAGE_NAME}"
            exit 1
          fi
        displayName: "Build Devel Images"

      - script: |
          docker stop $(docker ps -aq)
          docker rm -vf $(docker ps -aq) || true
        displayName: 'Clean Docker'

      - script: |
           docker run --disable-content-trust --privileged --name="pyspelling" --hostname="pyspelling-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash -x -c "cd /neural_compressor && bash $(VAL_PATH)/pyspelling/pyspelling.sh  $(VAL_PATH) $(BUILD_DIRECTORY)"
        displayName: 'pyspelling code scan'
        
  # - stage: copyright
  #   displayName: copyright code scan
  #   dependsOn: []
  #   jobs:
  #   - job: Build
  #     displayName: Build
  #     steps:
  #     - script: |
  #         echo ${BUILD_SOURCESDIRECTORY}
  #         sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #         # echo y | docker system prune
  #       displayName: 'Clean workspace'
      
  #     - checkout: self
  #       displayName: "Checkout out Repo"
      
  #     - script: |
  #         if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #             docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #         fi
  #         docker images | grep -i ${IMAGE_NAME}
  #         if [[ $? -ne 0 ]]; then
  #           echo "NO Such Image ${IMAGE_NAME}"
  #           exit 1
  #         fi
  #       displayName: "Build Devel Images"

  #     - script: |
  #         docker stop $(docker ps -aq)
  #         docker rm -vf $(docker ps -aq) || true
  #       displayName: 'Clean Docker'

  #     - script: |
  #         docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG}  /bin/bash +x $(VAL_PATH)/copyright/copy_right.sh  $(target_path)   $(TARGET_BRANCH)  $(VAL_PATH)          
  #         # docker run --disable-content-trust --privileged --name="copyright" --hostname="copyright-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd /neural_compressor && bash $(VAL_PATH)/copyright/copy_right.sh  $(target_path)   $(TARGET_BRANCH)  $(VAL_PATH)"
  #       displayName: 'copyright code scan'