trigger:
  - code-scan
pr: 
  - master
pool: suyue-test

variables:
  IMAGE_NAME: "code-scan"
  IMAGE_TAG: "1.0"

  TARGET_PATH: "/neural_compressor"
  CODE_SCAN_PATH: ".azure-pipelines/scripts/codeScan"
  CODE_SCAN_LOG_PATH: "scanLog"

  BANDIT_CONTAINER_NAME: "bandit"
  PYLINT_CONTAINER_NAME: "pylint"
  PYSPELLING_CONTAINER_NAME: "pyspelling"
  COPYRIGHT_CONTAINER_NAME: "copyright"

  TARGET_BRANCH: $(System.PullRequest.TargetBranch)
  CURRENT_PATH: $(Build.SourcesDirectory)

stages:
  # - stage: BanditCodeScan
  #   displayName: Bandit Code Scan
  #   dependsOn: []
  #   jobs:
  #     - job: Bandit
  #       displayName: Bandit
  #       steps:
  #         - script: |
  #             echo ${BUILD_SOURCESDIRECTORY}
  #             sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #             echo y | docker system prune
  #           displayName: "Clean workspace"
  #         - checkout: self
  #           displayName: "Checkout out Repo"
  #         - script: |
  #             if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #                 docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #             fi
  #             docker images | grep -i ${IMAGE_NAME}
  #             if [[ $? -ne 0 ]]; then
  #               echo "NO Such Image ${IMAGE_NAME}"
  #               exit 1
  #             fi
  #           displayName: "Build Devel Images"
  #         - script: |
  #             docker stop $(docker ps -aq)
  #             docker rm -vf $(docker ps -aq) || true
  #           displayName: "Clean Docker"

  #         - task: Bash@3
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               docker run --disable-content-trust --privileged --name=$(BANDIT_CONTAINER_NAME) -v ${BUILD_SOURCESDIRECTORY}:$(TARGET_PATH) ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd $(TARGET_PATH) && bash $(TARGET_PATH)/$(CODE_SCAN_PATH)/$(BANDIT_CONTAINER_NAME)/bandit.sh $(TARGET_PATH)"
  #               docker cp $(BANDIT_CONTAINER_NAME):/lpot-bandit.log $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot-bandit.log

  #         - task: PublishPipelineArtifact@1
  #           inputs:
  #             targetPath: $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot-bandit.log
  #             artifact: $(BANDIT_CONTAINER_NAME)
  #             publishLocation: "pipeline"

        
  # - stage: PylintCodeScan
  #   displayName: Pylint Code Scan
  #   dependsOn: []
  #   jobs:
  #     - job: Pylint
  #       displayName: Pylint
  #       steps:
  #         - script: |
  #             echo ${BUILD_SOURCESDIRECTORY}
  #             sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #             echo y | docker system prune
  #           displayName: "Clean workspace"
  #         - checkout: self
  #           displayName: "Checkout out Repo"
  #         - script: |
  #             if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #                 docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #             fi
  #             docker images | grep -i ${IMAGE_NAME}
  #             if [[ $? -ne 0 ]]; then
  #               echo "NO Such Image ${IMAGE_NAME}"
  #               exit 1
  #             fi
  #           displayName: "Build Devel Images"
  #         - script: |
  #             docker stop $(docker ps -aq)
  #             docker rm -vf $(docker ps -aq) || true
  #           displayName: "Clean Docker"

  #         - task: Bash@3
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               docker run --disable-content-trust --privileged --name=$(PYLINT_CONTAINER_NAME) -v ${BUILD_SOURCESDIRECTORY}:$(TARGET_PATH) ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd $(TARGET_PATH) && bash $(TARGET_PATH)/$(CODE_SCAN_PATH)/$(PYLINT_CONTAINER_NAME)/pylint.sh $(TARGET_PATH)"
  #               docker cp $(PYLINT_CONTAINER_NAME):/lpot-pylint.json $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot-pylint.json

  #         - task: PublishPipelineArtifact@1
  #           inputs:
  #             targetPath: $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot-pylint.json
  #             artifact: $(PYLINT_CONTAINER_NAME)
  #             publishLocation: "pipeline"

  # - stage: PyspellingCodeScan
  #   displayName: Pyspelling Code Scan
  #   dependsOn: []
  #   jobs:
  #     - job: Pyspelling
  #       displayName: Pyspelling
  #       steps:
  #         - script: |
  #             echo ${BUILD_SOURCESDIRECTORY}
  #             sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #             echo y | docker system prune
  #           displayName: "Clean workspace"
  #         - checkout: self
  #           displayName: "Checkout out Repo"
  #         - script: |
  #             if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #                 docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #             fi
  #             docker images | grep -i ${IMAGE_NAME}
  #             if [[ $? -ne 0 ]]; then
  #               echo "NO Such Image ${IMAGE_NAME}"
  #               exit 1
  #             fi
  #           displayName: "Build Devel Images"
  #         - script: |
  #             docker stop $(docker ps -aq)
  #             docker rm -vf $(docker ps -aq) || true
  #           displayName: "Clean Docker"

  #         - task: Bash@3
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               docker run --disable-content-trust --privileged --name=$(PYSPELLING_CONTAINER_NAME) -v ${BUILD_SOURCESDIRECTORY}:$(TARGET_PATH) ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd $(TARGET_PATH) && bash $(TARGET_PATH)/$(CODE_SCAN_PATH)/$(PYSPELLING_CONTAINER_NAME)/pyspelling.sh  $(TARGET_PATH)/$(CODE_SCAN_PATH)"
  #               docker cp $(PYSPELLING_CONTAINER_NAME):/lpot_pyspelling.log $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot_pyspelling.log

  #         - task: PublishPipelineArtifact@1
  #           inputs:
  #             targetPath: $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/lpot_pyspelling.log
  #             artifact: $(PYSPELLING_CONTAINER_NAME)
  #             publishLocation: "pipeline"              

  - stage: CopyRight
    displayName: CopyRight Code Scan
    dependsOn: []
    jobs:
      - job: CopyRight
        displayName: CopyRight
        steps:
          - script: |
              echo "--------Clean workspace-----------"
              git --no-pager diff --name-only --no-index $(git show-ref -s remotes/origin/master) /neural_compressor/neural_compressor                
              echo "-----------1-----------------"
              echo ${BUILD_SOURCESDIRECTORY}
              sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
              echo y | docker system prune
            displayName: "Clean workspace"
          - checkout: self
            displayName: "Checkout out Repo"
          - script: |
              echo "--------Build Devel Images-----------"
              git --no-pager diff --name-only --no-index $(git show-ref -s remotes/origin/master) /neural_compressor/neural_compressor                
              echo "-----------1-----------------"
              if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
                  docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
              fi
              docker images | grep -i ${IMAGE_NAME}
              if [[ $? -ne 0 ]]; then
                echo "NO Such Image ${IMAGE_NAME}"
                exit 1
              fi
            displayName: "Build Devel Images"
          - script: |
              echo "--------Clean Docker-----------"
              git --no-pager diff --name-only --no-index $(git show-ref -s remotes/origin/master) /neural_compressor/neural_compressor                
              echo "-----------1-----------------"
              docker stop $(docker ps -aq)
              docker rm -vf $(docker ps -aq) || true
            displayName: "Clean Docker"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                echo "--------BEFORE docker Run-----------"
                git --no-pager diff --name-only --no-index $(git show-ref -s remotes/origin/master) /neural_compressor/neural_compressor                
                echo "-----------1-----------------"
                $(System.PullRequest.TargetBranch)
                echo "-----------1--------------"

                docker run --disable-content-trust --privileged --name=$(PYSPELLING_CONTAINER_NAME) -v ${BUILD_SOURCESDIRECTORY}:$(TARGET_PATH) ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd $(TARGET_PATH) && bash $(TARGET_PATH)/$(CODE_SCAN_PATH)/$(COPYRIGHT_CONTAINER_NAME)/copy_right.sh "
                docker cp $(COPYRIGHT_CONTAINER_NAME):/copyright_issue_summary.log $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/copyright_issue_summary.log

                echo "--------after docker Run-----------"
                git show-ref -s remotes/origin/master
                echo "-------------------------"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(CURRENT_PATH)/$(CODE_SCAN_PATH)/$(CODE_SCAN_LOG_PATH)/copyright_issue_summary.log
              artifact: $(PYSPELLING_CONTAINER_NAME)
              publishLocation: "pipeline" 