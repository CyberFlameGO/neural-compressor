trigger:
  - code-scan
pr: none
pool: suyue-test

variables:
  IMAGE_NAME: "code-scan"
  IMAGE_TAG: "1.0"
  CODE_SCAN_PATH: "/neural_compressor/.azure-pipelines/scripts/codeScan"
  CODE_SCAN_LOG_PATH: "/neural_compressor/.azure-pipelines/scripts/codeScan/scanLog"
  TARGET_PATH: "/neural_compressor"
  TARGET_BRANCH: $(System.PullRequest.TargetBranch)
  BANDIT_CONTAINER_NAME: "bandit"
  CURRENT_PATH: $(Build.SourcesDirectory)

stages:
  - stage: BanditCodeScan
    displayName: Bandit Code Scan
    dependsOn: []
    jobs:
      - job: Bandit
        displayName: Bandit
        steps:
          - script: |
              echo ${BUILD_SOURCESDIRECTORY}
              sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
              echo y | docker system prune
            displayName: "Clean workspace"
          - checkout: self
            displayName: "Checkout out Repo"
          - script: |
              if [[  $(docker images | grep -i ${IMAGE_NAME}) ]]; then
                  docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} --no-cache.
              fi
              docker images | grep -i ${IMAGE_NAME}
              if [[ $? -ne 0 ]]; then
                echo "NO Such Image ${IMAGE_NAME}"
                exit 1
              fi
            displayName: "Build Devel Images"
          - script: |
              docker stop $(docker ps -aq)
              docker rm -vf $(docker ps -aq) || true
            displayName: "Clean Docker"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                docker run --disable-content-trust --privileged --name="bandit" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd $(TARGET_PATH) && bash $(CODE_SCAN_PATH)/bandit/bandit.sh  --TARGET_PATH"
                docker cp 'bandit':/lpot-bandit.log $(CURRENT_PATH)/$(CODE_SCAN_LOG_PATH)/lpot-bandit.log

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: (CURRENT_PATH)/$(CODE_SCAN_LOG_PATH)
              artifact: $(BANDIT_CONTAINER_NAME)
              publishLocation: "pipeline"

  # - stage: pylint
  #   displayName: pylint code scan
  #   dependsOn: []
  #   jobs:
  #   - job: Build
  #     displayName: Build
  #     steps:
  #     - script: |
  #         echo ${BUILD_SOURCESDIRECTORY}
  #         sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #         # echo y | docker system prune
  #       displayName: 'Clean workspace'

  #     - checkout: self
  #       displayName: "Checkout out Repo"

  #     - script: |
  #         if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #             docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #         fi
  #         docker images | grep -i ${IMAGE_NAME}
  #         if [[ $? -ne 0 ]]; then
  #           echo "NO Such Image ${IMAGE_NAME}"
  #           exit 1
  #         fi
  #       displayName: "Build Devel Images"

  #     - script: |
  #         docker stop $(docker ps -aq)
  #         docker rm -vf $(docker ps -aq) || true
  #       displayName: 'Clean Docker'

  #     - script: |
  #         docker run --disable-content-trust --privileged --name="pylint" --hostname="pylint-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  -x -c "cd /neural_compressor && bash $(VAL_PATH)/pylint/pylint.sh  $(VAL_PATH) $(target_path)"
  #       displayName: 'pylint code scan'

  # - stage: pyspelling
  #   displayName: pyspelling code scan
  #   dependsOn: []
  #   jobs:
  #   - job: Build
  #     displayName: Build
  #     steps:
  #     - script: |
  #         echo ${BUILD_SOURCESDIRECTORY}
  #         sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #         # echo y | docker system prune
  #       displayName: 'Clean workspace'

  #     - checkout: self
  #       displayName: "Checkout out Repo"

  #     - script: |
  #         if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #             docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #         fi
  #         docker images | grep -i ${IMAGE_NAME}
  #         if [[ $? -ne 0 ]]; then
  #           echo "NO Such Image ${IMAGE_NAME}"
  #           exit 1
  #         fi
  #       displayName: "Build Devel Images"

  #     - script: |
  #         docker stop $(docker ps -aq)
  #         docker rm -vf $(docker ps -aq) || true
  #       displayName: 'Clean Docker'

  #     - script: |
  #          docker run --disable-content-trust --privileged --name="pyspelling" --hostname="pyspelling-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash -x -c "cd /neural_compressor && bash $(VAL_PATH)/pyspelling/pyspelling.sh  $(VAL_PATH) $(CURRENT_PATH)"
  #       displayName: 'pyspelling code scan'

  # - stage: copyright
  #   displayName: copyright code scan
  #   dependsOn: []
  #   jobs:
  #   - job: Build
  #     displayName: Build
  #     steps:
  #     - script: |
  #         echo ${BUILD_SOURCESDIRECTORY}
  #         sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
  #         # echo y | docker system prune
  #       displayName: 'Clean workspace'

  #     - checkout: self
  #       displayName: "Checkout out Repo"

  #     - script: |
  #         if [[ ! $(docker images | grep -i ${IMAGE_NAME}) ]]; then
  #             docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
  #         fi
  #         docker images | grep -i ${IMAGE_NAME}
  #         if [[ $? -ne 0 ]]; then
  #           echo "NO Such Image ${IMAGE_NAME}"
  #           exit 1
  #         fi
  #       displayName: "Build Devel Images"

  #     - script: |
  #         docker stop $(docker ps -aq)
  #         docker rm -vf $(docker ps -aq) || true
  #       displayName: 'Clean Docker'

  #     - script: |
  #         docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG}  /bin/bash +x  -c "pwd && bash $(VAL_PATH)/copyright/copy_right.sh  $(target_path) $(TARGET_BRANCH) $(VAL_PATH)"
  #         # docker run --disable-content-trust --privileged --name="copyright" --hostname="copyright-host" -v ${BUILD_SOURCESDIRECTORY}:/neural_compressor  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash  +x -c "cd /neural_compressor && bash $(VAL_PATH)/copyright/copy_right.sh  $(target_path)   $(TARGET_BRANCH)  $(VAL_PATH)"
  #       displayName: 'copyright code scan'
