:orphan:

:py:mod:`neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base`
===============================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase
   neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase




.. py:class:: QuantizeGraphBase(output_node_names)

   This is the base class for quantize graph.

   .. py:method:: do_transform()

      This is the virtual interface need to be implemented by derived class
      :return:


   .. py:method:: remove_dead_nodes(input_graph, output_names)

      Removes nodes that are no longer needed for inference from the graph.



.. py:class:: QuantizeNodeBase(**kwargs)

   This is the base class for nodes fusion


   :param object {[type]} -- [description]:

   .. py:method:: apply_the_transform()

      This is the virtual interface to be implemented by derived class
      :return: transformed graphdef


   .. py:method:: get_longest_fuse()

      This is the virtual interface to be implemented by derived class



   .. py:method:: add_output_graph_node(output_node)

      Inserts one node into the new graph.


   .. py:method:: create_nodes_map(graph)

      Builds a mapping of node names to their defs from the graph.



