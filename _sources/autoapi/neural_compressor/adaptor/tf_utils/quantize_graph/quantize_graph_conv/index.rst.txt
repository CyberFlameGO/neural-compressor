:orphan:

:py:mod:`neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv`
===============================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d




.. py:class:: FuseNodeStartWithConv2d(**kwargs)

   Bases: :py:obj:`neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase`

   This is the base class for nodes fusion


   :param object {[type]} -- [description]:

   .. py:method:: apply_conv_biasadd_relu_fusion(match_node_name)

      Fuse the conv/biasadd/relu pattern.

      :param match_node_name {[type]} -- [description]:


   .. py:method:: get_longest_fuse()

      This is the virtual interface to be implemented by derived class



   .. py:method:: apply_the_transform()

      This is the virtual interface to be implemented by derived class
      :return: transformed graphdef



