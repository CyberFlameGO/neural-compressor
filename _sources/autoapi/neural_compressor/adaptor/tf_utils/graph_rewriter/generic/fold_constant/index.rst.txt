:orphan:

:py:mod:`neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant`
=================================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer




.. py:class:: GraphFoldConstantOptimizer(model=None)

   Bases: :py:obj:`neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase`

   Graph Rewrite Base class.
   We abstract this base class and define the interface only.

   :param object: the input model to be converted.
   :type object: model

   .. py:method:: check_all_folded()

      Check the node has been folded completely.

      :returns: True if the node has been folded else False.
      :rtype: bool


   .. py:method:: check_const_inputs(node_name)

      Check the node has the const input

      :param node_name: node name
      :type node_name: string

      :returns: True if the node has the const input else False
      :rtype: bool


   .. py:method:: do_transformation()

      fold all the sequences only consist of const and self.supported_op_type

      :param input_graph_def: graphdef object
      :type input_graph_def: graphdef

      :returns: optimized graph
      :rtype: [graphdef]



