:orphan:

:py:mod:`neural_compressor.model.model`
=======================================

.. py:module:: neural_compressor.model.model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.model.model.TensorflowBaseModel
   neural_compressor.model.model.TensorflowSavedModelModel
   neural_compressor.model.model.TensorflowCheckpointModel
   neural_compressor.model.model.MXNetModel



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.model.model.get_model_type
   neural_compressor.model.model.get_model_fwk_name
   neural_compressor.model.model.validate_graph_node
   neural_compressor.model.model.validate_and_inference_input_output
   neural_compressor.model.model.graph_session
   neural_compressor.model.model.graph_def_session
   neural_compressor.model.model.frozen_pb_session
   neural_compressor.model.model.load_saved_model
   neural_compressor.model.model.keras_session
   neural_compressor.model.model.slim_session
   neural_compressor.model.model.checkpoint_session
   neural_compressor.model.model.estimator_session
   neural_compressor.model.model.saved_model_session



.. py:function:: get_model_type(model)

   Get mode type

   :param model: model path or model object
   :type model: string or model object

   :returns: model type
   :rtype: type (string)


.. py:function:: get_model_fwk_name(model)

   Detect the input model belongs to which framework

   :param model: framework name that supported by Neural Compressor, if there's no available fwk info,
                 then return 'NA'.
   :type model: string


.. py:function:: validate_graph_node(graph_def, node_names)

   Validate nodes exist in the graph_def

   :param graph_def: tf.compat.v1.GraphDef object
   :type graph_def: tf.compat.v1.GraphDef
   :param node_names: node names to be validated
   :type node_names: list of string


.. py:function:: validate_and_inference_input_output(graph_def, input_tensor_names, output_tensor_names)

   validate and inference the input and output tensor names of graph_def

   :param graph_def: tf.compat.v1.GraphDef object
   :type graph_def: tf.compat.v1.GraphDef
   :param input_tensor_names: input_tensor_names of graph_def
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of graph_def
   :type output_tensor_names: list of string

   :returns: validated input_tensor_names
             output_tensor_names (list of string): validated output_tensor_names
   :rtype: input_tensor_names (list of string)


.. py:function:: graph_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with tf.compat.v1.Graph

   :param model: tf.compat.v1.Graph object
   :type model: tf.compat.v1.Graph
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: graph_def_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with tf.compat.v1.GraphDef

   :param model: tf.compat.v1.GraphDef object
   :type model: tf.compat.v1.GraphDef
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: frozen_pb_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with frozen pb

   :param model: model path
   :type model: string
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: load_saved_model(model, saved_model_tags, input_tensor_names, output_tensor_names)

   Load graph_def from saved model with the default serving signature key.

   :param saved_model_dir: Directory of the SavedModel.
   :param saved_model_tags: Set of tags identifying the MetaGraphDef within the
                            SavedModel to analyze.

   :returns: The loaded GraphDef.
             input_tensors: List of input tensors.
             output_tensors: List of output tensors.
   :rtype: graph_def


.. py:function:: keras_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with keras model

   :param model: model path or tf.keras.Model object
   :type model: string or tf.keras.Model
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: slim_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with slim model

   :param model: model path
   :type model: string
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: checkpoint_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with ckpt model

   :param model: model path
   :type model: string
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: validated output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: estimator_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with estimator model

   :param model: tf.estimator.Estimator object
   :type model: tf.estimator.Estimator
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string
   :param kwargs: other required parameters, like input_fn
   :type kwargs: dict

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:function:: saved_model_session(model, input_tensor_names, output_tensor_names, **kwargs)

   Build session with saved model

   :param model: model path
   :type model: string
   :param input_tensor_names: input_tensor_names of model
   :type input_tensor_names: list of string
   :param output_tensor_names: output_tensor_names of model
   :type output_tensor_names: list of string

    Returns:
       sess (tf.compat.v1.Session): tf.compat.v1.Session object
       input_tensor_names (list of string): validated input_tensor_names
       output_tensor_names (list of string): validated output_tensor_names


.. py:class:: TensorflowBaseModel(model, **kwargs)

   Bases: :py:obj:`neural_compressor.model.base_model.BaseModel`

   Build TensorflowBaseModel object

   :param model: model path or model object
   :type model: string or tensorflow model object
   :param kwargs: other required parameters, like input_fn
   :type kwargs: dict

   .. py:property:: weights

      Getter to weights

   .. py:property:: model

      return model itself

   .. py:property:: graph_info

      'conv2d'}

      :type: return {Node

      :type: Node_type} like {'conv0'

   .. py:method:: framework()

      abstract method of model framework


   .. py:method:: save(root=None)

      abstract method of model saving


   .. py:method:: convert(src_type='QDQ', dst_type='TFDO', *args, **kwargs)
      :abstractmethod:

      abstract method of model saving, Tensorflow model only



.. py:class:: TensorflowSavedModelModel(model, **kwargs)

   Bases: :py:obj:`TensorflowBaseModel`

   Build TensorflowBaseModel object

   :param model: model path or model object
   :type model: string or tensorflow model object
   :param kwargs: other required parameters, like input_fn
   :type kwargs: dict

   .. py:property:: model

      return model itself

   .. py:method:: report_sparsity()

      Get sparsity of the model

      Args:

      :returns: DataFrame of sparsity of each weight
                total_sparsity (float): total sparsity of model
      :rtype: df (DataFrame)


   .. py:method:: save(root=None)

      abstract method of model saving



.. py:class:: TensorflowCheckpointModel(model, **kwargs)

   Bases: :py:obj:`TensorflowBaseModel`

   Build TensorflowBaseModel object

   :param model: model path or model object
   :type model: string or tensorflow model object
   :param kwargs: other required parameters, like input_fn
   :type kwargs: dict


.. py:class:: MXNetModel(model, **kwargs)

   Bases: :py:obj:`neural_compressor.model.base_model.BaseModel`

   Build MXNetModel object

   :param model: model path
   :type model: mxnet model

   .. py:property:: model

      return model itself

   .. py:method:: framework()

      abstract method of model framework


   .. py:method:: save(root=None)

      abstract method of model saving



