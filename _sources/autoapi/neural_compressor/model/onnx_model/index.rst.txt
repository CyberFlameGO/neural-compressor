:orphan:

:py:mod:`neural_compressor.model.onnx_model`
============================================

.. py:module:: neural_compressor.model.onnx_model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.model.onnx_model.ONNXModel




.. py:class:: ONNXModel(model, **kwargs)

   Bases: :py:obj:`neural_compressor.model.base_model.BaseModel`

   base class of all neural_compressor.model, will play graph role

   .. py:property:: model

      return model itself

   .. py:property:: graph_info

      'conv2d'}

      :type: return {Node

      :type: Node_type} like {'conv0'

   .. py:method:: framework()

      abstract method of model framework


   .. py:method:: save(root)

      abstract method of model saving


   .. py:method:: find_node_by_name(node_name, new_nodes_list, graph)

      Find out if a node exists in a graph or a node is in the
      new set of nodes created during quantization. Return the node found.


   .. py:method:: find_nodes_by_initializer(graph, initializer)

      Find all nodes with given initializer as an input.


   .. py:method:: get_scale_zero(tensor)

      help function to get scale and zero_point


   .. py:method:: save_model_to_file(output_path, use_external_data_format=False)

      Save model to external data, which is needed for model size > 2GB



