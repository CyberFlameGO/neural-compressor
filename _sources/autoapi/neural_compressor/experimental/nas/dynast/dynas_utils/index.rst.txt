:orphan:

:py:mod:`neural_compressor.experimental.nas.dynast.dynas_utils`
===============================================================

.. py:module:: neural_compressor.experimental.nas.dynast.dynas_utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency



.. py:function:: measure_latency(model: torch, input_size: Tuple[int, int, int, int] = (1, 3, 224, 224), warmup_steps: int = None, measure_steps: int = None, device: str = 'cpu') -> Tuple[float, float]

   Measure Torch model's latency.

   Args:
   - model: Torch model
   - input_size: a tuple (batch size, channels, resolution, resolution).
   - warmup_steps - how many data batches to use to warm up the device.
       If 'None' it will be adjusted automatically w.r.t batch size.
   - measure_steps - how many data batches to use for latency measurement.
       If 'None' it will be adjusted automatically w.r.t batch size.
   - device: which device is being used for latency measurement.

   :returns: mean latency; std latency


.. py:class:: OFARunner(supernet: str, acc_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, macs_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, latency_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, imagenetpath: str, batch_size: int)

   Bases: :py:obj:`Runner`

   The OFARunner class manages the sub-network selection from the OFA super-network and
   the validation measurements of the sub-networks. ResNet50, MobileNetV3 w1.0, and MobileNetV3 w1.2
   are currently supported. Imagenet is required for these super-networks `imagenet-ilsvrc2012`.

   .. py:method:: validate_macs(subnet_cfg: dict) -> float

      Measure Torch model's FLOPs/MACs as per FVCore calculation
      :param subnet_cfg: sub-network Torch model

      :returns: `macs`


   .. py:method:: measure_latency(subnet_cfg: dict, warmup_steps: int = None, measure_steps: int = None) -> Tuple[float, float]

      Measure OFA model's latency.
      :param subnet_cfg: sub-network Torch model

      :returns: mean latency; std latency



.. py:class:: EvaluationInterface(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics: list = ['acc', 'macs'], predictor_mode: bool = False, csv_path: str = None)

   The interface class update is required to be updated for each unique SuperNetwork
   framework as it controls how evaluation calls are made from DyNAS-T

   :param evaluator: class
                     The 'runner' that performs the validation or prediction
   :param manager: class
                   The DyNAS-T manager that translates between PyMoo and the parameter dict
   :param csv_path: string
                    (Optional) The csv file that get written to during the subnetwork search


.. py:class:: EvaluationInterfaceResNet50(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics: list = ['acc', 'macs'], predictor_mode: bool = False, csv_path: str = None)

   Bases: :py:obj:`EvaluationInterface`

   The interface class update is required to be updated for each unique SuperNetwork
   framework as it controls how evaluation calls are made from DyNAS-T

   :param evaluator: class
                     The 'runner' that performs the validation or prediction
   :param manager: class
                   The DyNAS-T manager that translates between PyMoo and the parameter dict
   :param csv_path: string
                    (Optional) The csv file that get written to during the subnetwork search


.. py:class:: EvaluationInterfaceMobileNetV3(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics=['acc', 'macs'], predictor_mode=False, csv_path=None)

   Bases: :py:obj:`EvaluationInterface`

   The interface class update is required to be updated for each unique SuperNetwork
   framework as it controls how evaluation calls are made from DyNAS-T

   :param evaluator: class
                     The 'runner' that performs the validation or prediction
   :param manager: class
                   The DyNAS-T manager that translates between PyMoo and the parameter dict
   :param csv_path: string
                    (Optional) The csv file that get written to during the subnetwork search


