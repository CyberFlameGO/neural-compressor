:orphan:

:py:mod:`neural_compressor.experimental.data.dataloaders.sampler`
=================================================================

.. py:module:: neural_compressor.experimental.data.dataloaders.sampler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.data.dataloaders.sampler.Sampler
   neural_compressor.experimental.data.dataloaders.sampler.IterableSampler
   neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler
   neural_compressor.experimental.data.dataloaders.sampler.BatchSampler




.. py:class:: Sampler(data_source)

   Bases: :py:obj:`object`

   Base class for all Samplers. __iter__ is needed no matter whether you use IterableSampler
   or Squential sampler, if you want implement your own sampler, make clear what the type is
   your Dataset, if IterableDataset(method __iter__ implemented), try to use IterableSampler,
   else if you have an IndexDataset(method __getitem__ implemented), your dataset should have
   method __len__ implemented.



.. py:class:: IterableSampler(dataset)

   Bases: :py:obj:`Sampler`

   Interally samples elements, used for datasets retrieved element by interator.
      yield None to act as a placeholder for each iteration

   :param dataset: set to None
   :type dataset: Dataset


.. py:class:: SequentialSampler(dataset, distributed)

   Bases: :py:obj:`Sampler`

   Sequentially samples elements, used for datasets retrieved element by index.

   :param dataset: index dataset(implement method __len__) for sampling
   :type dataset: Dataset


.. py:class:: BatchSampler(sampler, batch_size, drop_last=True)

   Bases: :py:obj:`Sampler`

   yield a mini-batch of indices for SquentialSampler and batch size length of None list for
      IterableSampler.

   :param sampler: sampler used for generating batches.
   :type sampler: Sampler
   :param batch_size: Size of mini-batch.
   :type batch_size: int
   :param drop_last: BatchSampler will drop the last batch if drop_last is True, else
                     will return the last batch whose size will be less than batch_size
   :type drop_last: bool


