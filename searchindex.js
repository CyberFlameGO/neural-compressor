Search.setIndex({"docnames": ["autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruners/gradient_sensitivity/index", "autoapi/neural_compressor/pruners/group_lasso/index", "autoapi/neural_compressor/pruners/index", "autoapi/neural_compressor/pruners/magnitude/index", "autoapi/neural_compressor/pruners/pattern_lock/index", "autoapi/neural_compressor/pruners/pruner/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/st_utils/index", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "index", "source/CODE_OF_CONDUCT", "source/FX", "source/NAS", "source/PTQ", "source/QAT", "source/SECURITY", "source/Welcome", "source/adaptor", "source/api-documentation/adaptor", "source/api-documentation/apis", "source/api-documentation/common", "source/api-documentation/common/benchmark", "source/api-documentation/common/bleu", "source/api-documentation/common/criterion", "source/api-documentation/common/data", "source/api-documentation/common/data/dataloader", "source/api-documentation/common/data/datasets", "source/api-documentation/common/data/transforms", "source/api-documentation/common/metric", "source/api-documentation/common/model", "source/api-documentation/common/optimizer", "source/api-documentation/component", "source/api-documentation/component/Distillation", "source/api-documentation/component/MixedPrecision", "source/api-documentation/component/ModelConversion", "source/api-documentation/component/Nas", "source/api-documentation/component/Pruning", "source/api-documentation/component/Quantization", "source/api-documentation/component/Scheduler", "source/api-documentation/pythonic", "source/api-documentation/strategy", "source/backend_quant", "source/bench", "source/benchmark", "source/contributions", "source/dataloader", "source/dataset", "source/design", "source/distillation", "source/distillation_quantization", "source/distributed", "source/dynamic_quantization", "source/examples_readme", "source/faq", "source/framework_yaml", "source/graph_optimization", "source/incompatible_changes", "source/infrastructure", "source/installation_guide", "source/legal_information", "source/metric", "source/mixed_precision", "source/model", "source/model_conversion", "source/objective", "source/orchestration", "source/platform_configuration", "source/pruning", "source/publication_list", "source/pythonic_style", "source/quantization", "source/quantization_mixed_precision", "source/releases_info", "source/sigopt_strategy", "source/tensorboard", "source/transform", "source/tuning_strategies", "source/user_yaml", "source/validated_model_list"], "filenames": ["autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruners/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruners/group_lasso/index.rst", "autoapi/neural_compressor/pruners/index.rst", "autoapi/neural_compressor/pruners/magnitude/index.rst", "autoapi/neural_compressor/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/pruners/pruner/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/st_utils/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "index.rst", "source/CODE_OF_CONDUCT.md", "source/FX.md", "source/NAS.md", "source/PTQ.md", "source/QAT.md", "source/SECURITY.md", "source/Welcome.md", "source/adaptor.md", "source/api-documentation/adaptor.rst", "source/api-documentation/apis.rst", "source/api-documentation/common.rst", "source/api-documentation/common/benchmark.rst", "source/api-documentation/common/bleu.rst", "source/api-documentation/common/criterion.rst", "source/api-documentation/common/data.rst", "source/api-documentation/common/data/dataloader.rst", "source/api-documentation/common/data/datasets.rst", "source/api-documentation/common/data/transforms.rst", "source/api-documentation/common/metric.rst", "source/api-documentation/common/model.rst", "source/api-documentation/common/optimizer.rst", "source/api-documentation/component.rst", "source/api-documentation/component/Distillation.rst", "source/api-documentation/component/MixedPrecision.rst", "source/api-documentation/component/ModelConversion.rst", "source/api-documentation/component/Nas.rst", "source/api-documentation/component/Pruning.rst", "source/api-documentation/component/Quantization.rst", "source/api-documentation/component/Scheduler.rst", "source/api-documentation/pythonic.rst", "source/api-documentation/strategy.rst", "source/backend_quant.md", "source/bench.md", "source/benchmark.md", "source/contributions.md", "source/dataloader.md", "source/dataset.md", "source/design.md", "source/distillation.md", "source/distillation_quantization.md", "source/distributed.md", "source/dynamic_quantization.md", "source/examples_readme.md", "source/faq.md", "source/framework_yaml.md", "source/graph_optimization.md", "source/incompatible_changes.md", "source/infrastructure.md", "source/installation_guide.md", "source/legal_information.md", "source/metric.md", "source/mixed_precision.md", "source/model.md", "source/model_conversion.md", "source/objective.md", "source/orchestration.md", "source/platform_configuration.md", "source/pruning.md", "source/publication_list.md", "source/pythonic_style.md", "source/quantization.md", "source/quantization_mixed_precision.md", "source/releases_info.md", "source/sigopt_strategy.md", "source/tensorboard.md", "source/transform.md", "source/tuning_strategies.md", "source/user_yaml.md", "source/validated_model_list.md"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (45)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"v1": [0, 1, 2, 37, 121, 192, 193, 195, 228, 446, 480, 490, 492, 502, 503, 508], "14": [0, 1, 253, 508], "revis": [0, 1, 2], "id": [0, 1, 2, 149, 183, 188, 190, 191, 192, 193, 281, 282, 284, 285, 286, 288, 291, 292, 293, 294, 295, 297, 299, 300, 328, 329, 332, 397, 452, 490, 503, 506], "6ece06672ed3": 0, "6f0d0f71d92e": [0, 1], "creat": [0, 1, 2, 4, 37, 96, 115, 151, 152, 159, 169, 171, 185, 187, 191, 199, 200, 205, 206, 207, 222, 230, 243, 256, 280, 297, 306, 307, 311, 312, 390, 410, 423, 436, 440, 442, 447, 474, 476, 481, 485, 492, 493, 500, 503, 504, 506], "date": [0, 1, 2, 381], "2022": [0, 1, 2, 446, 508], "08": [0, 184, 505, 508], "31": [0, 508], "07": [0, 1, 507, 508], "16": [0, 443, 485, 497, 508], "24": [0, 443, 506, 508], "229939": 0, "update_dataload": 0, "db_session": [0, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 309, 311, 314], "sqlalchemi": [0, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 309, 311, 312, 314, 483, 488], "orm": [0, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 309, 311, 314], "session": [0, 121, 168, 228, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 309, 311, 312, 314, 504], "updat": [0, 52, 64, 96, 188, 194, 195, 203, 216, 218, 224, 231, 266, 281, 282, 283, 284, 292, 295, 297, 299, 301, 307, 309, 310, 311, 314, 381, 404, 412, 415, 417, 421, 443, 452, 472, 475, 490, 496, 497, 506], "dataload": [0, 5, 7, 9, 10, 11, 35, 37, 139, 140, 145, 149, 152, 158, 169, 180, 185, 187, 197, 209, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 256, 264, 269, 275, 279, 289, 302, 305, 307, 312, 314, 336, 377, 387, 390, 393, 401, 411, 412, 416, 446, 447, 454, 472, 476, 480, 485, 486, 490, 491, 493, 500, 504, 505, 506, 507], "exist": [0, 43, 115, 133, 149, 150, 191, 206, 228, 230, 282, 301, 307, 309, 310, 347, 395, 410, 411, 442, 485, 490, 497, 506], "databas": [0, 171, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 381, 395, 410], "update_transform": 0, "transform": [0, 10, 34, 40, 52, 80, 81, 83, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 116, 119, 120, 143, 145, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 187, 223, 275, 279, 284, 289, 302, 305, 307, 312, 314, 336, 411, 412, 413, 414, 441, 446, 454, 473, 475, 476, 478, 479, 480, 497, 498, 501, 504, 506, 507], "13": [1, 2, 240, 472, 508], "9e89549a08c8": [1, 2], "29": [1, 508], "41": [1, 485, 508], "291905": 1, "11": [2, 402, 446, 472, 485, 490, 491], "03": [2, 402, 508], "22": [2, 402, 405, 508], "34": [2, 508], "52": [2, 508], "916541": 2, "run_migrations_offlin": 4, "run": [4, 5, 7, 9, 11, 35, 96, 121, 139, 140, 149, 168, 183, 187, 200, 203, 217, 218, 240, 241, 242, 243, 244, 246, 247, 252, 362, 405, 426, 427, 428, 444, 446, 447, 472, 474, 480, 483, 484, 485, 491, 497, 498, 500, 502, 503, 504, 506, 507], "migrat": [4, 395], "offlin": [4, 263, 440, 474, 500], "mode": [4, 5, 7, 10, 34, 35, 37, 96, 149, 178, 187, 191, 228, 263, 281, 404, 443, 447, 472, 473, 485, 487, 500, 501], "thi": [4, 9, 34, 35, 37, 46, 47, 48, 49, 50, 51, 52, 53, 63, 68, 70, 71, 72, 73, 74, 76, 77, 80, 81, 90, 91, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 126, 130, 139, 140, 151, 152, 157, 158, 168, 169, 170, 171, 172, 173, 174, 176, 183, 184, 187, 188, 191, 192, 193, 195, 200, 208, 209, 216, 218, 219, 220, 221, 222, 223, 232, 239, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 440, 442, 443, 444, 446, 447, 452, 471, 472, 473, 474, 475, 476, 478, 480, 481, 484, 485, 487, 489, 490, 491, 492, 493, 497, 500, 501, 502, 503, 504, 505, 506], "configur": [4, 5, 7, 9, 10, 35, 36, 37, 96, 131, 132, 136, 139, 140, 141, 142, 143, 145, 149, 171, 174, 185, 186, 187, 191, 197, 198, 199, 200, 202, 205, 206, 209, 217, 219, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 262, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 302, 304, 307, 366, 368, 373, 377, 380, 393, 395, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 426, 428, 442, 443, 447, 472, 473, 476, 479, 490, 494, 502, 505, 508], "context": [4, 499], "just": [4, 151, 152, 153, 154, 156, 159, 184, 442, 443, 444, 485, 495, 500, 505, 506], "url": [4, 171, 361, 424, 489], "an": [4, 9, 52, 57, 58, 60, 115, 116, 130, 145, 152, 157, 158, 162, 167, 171, 175, 180, 184, 187, 188, 191, 192, 193, 200, 205, 206, 207, 222, 230, 324, 329, 402, 440, 442, 443, 444, 446, 447, 452, 473, 474, 475, 477, 481, 485, 490, 491, 494, 498, 503, 504, 505, 506], "engin": [4, 202, 280, 292, 312], "though": 4, "i": [4, 5, 7, 9, 10, 11, 35, 37, 43, 44, 50, 52, 54, 60, 71, 75, 76, 82, 83, 84, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 126, 130, 139, 140, 141, 142, 145, 147, 149, 151, 152, 155, 157, 158, 159, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 184, 187, 188, 191, 193, 194, 195, 197, 200, 203, 207, 209, 217, 218, 219, 222, 223, 224, 230, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 262, 280, 312, 324, 344, 347, 349, 350, 352, 354, 355, 357, 363, 398, 400, 402, 404, 405, 409, 411, 413, 419, 424, 426, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 461, 469, 470, 472, 473, 474, 475, 476, 478, 480, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507], "accept": [4, 440, 472, 474, 491], "here": [4, 60, 191, 198, 205, 441, 443, 444, 446, 472, 476, 480, 484, 490, 494, 497, 500, 502, 503, 506], "well": [4, 139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 442, 443, 476, 500, 502, 507], "By": [4, 188, 452, 490, 492], "skip": [4, 232, 504, 506], "creation": [4, 278], "we": [4, 34, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 63, 64, 68, 70, 71, 72, 73, 74, 77, 80, 81, 90, 91, 94, 95, 96, 115, 116, 130, 149, 151, 152, 168, 188, 191, 198, 205, 440, 441, 443, 444, 446, 447, 452, 474, 475, 480, 484, 485, 490, 493, 494, 495, 497, 499, 500, 503, 504, 506], "don": [4, 116, 130, 402, 441, 472, 506], "t": [4, 57, 58, 60, 96, 115, 116, 130, 151, 152, 184, 193, 202, 203, 222, 402, 410, 441, 443, 447, 472, 473, 475, 478, 480, 491, 497, 506, 507, 508], "even": [4, 52, 472, 497], "need": [4, 5, 7, 9, 10, 35, 37, 42, 43, 44, 45, 48, 49, 52, 54, 55, 56, 59, 61, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 107, 108, 112, 115, 139, 140, 145, 151, 152, 153, 154, 159, 167, 168, 171, 178, 179, 180, 184, 185, 187, 194, 195, 200, 209, 222, 224, 230, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 430, 441, 444, 447, 472, 473, 475, 476, 478, 480, 487, 491, 494, 497, 499, 500, 501, 502, 505, 506, 507], "dbapi": 4, "avail": [4, 228, 279, 283, 285, 286, 290, 293, 294, 298, 363, 440, 446, 448, 449, 450, 454, 461, 469, 470, 472, 487, 496, 503, 506], "call": [4, 9, 158, 187, 191, 202, 203, 209, 216, 218, 219, 223, 239, 280, 312, 397, 405, 406, 441, 442, 447, 472, 475, 486, 497, 500, 504, 505, 506], "execut": [4, 7, 10, 35, 37, 40, 43, 119, 158, 185, 187, 198, 199, 205, 209, 218, 221, 222, 240, 256, 262, 264, 265, 266, 281, 292, 295, 301, 307, 309, 310, 366, 368, 370, 373, 374, 377, 379, 380, 382, 387, 390, 394, 397, 405, 406, 427, 472, 478, 480, 485, 491, 495, 497, 500, 508], "emit": 4, "given": [4, 9, 10, 11, 37, 57, 58, 60, 121, 183, 184, 191, 230, 240, 324, 330, 344, 347, 349, 350, 352, 354, 355, 357, 398, 411, 424, 442, 475, 497, 505], "string": [4, 5, 7, 10, 35, 36, 37, 46, 53, 96, 115, 121, 131, 132, 150, 155, 169, 171, 185, 186, 187, 188, 191, 197, 198, 199, 202, 205, 206, 207, 209, 216, 217, 218, 219, 220, 221, 222, 223, 228, 231, 239, 240, 256, 257, 258, 263, 275, 390, 411, 435, 490, 505], "script": [4, 188, 189, 192, 193, 265, 266, 349, 366, 368, 370, 373, 374, 376, 377, 379, 380, 385, 443, 480, 487, 498], "output": [4, 11, 35, 37, 43, 49, 50, 60, 64, 75, 76, 82, 84, 89, 96, 115, 121, 133, 139, 140, 150, 152, 153, 157, 183, 185, 186, 187, 188, 191, 195, 200, 201, 216, 228, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 257, 281, 292, 295, 301, 307, 309, 310, 344, 354, 355, 356, 370, 374, 377, 397, 405, 412, 418, 441, 443, 444, 447, 452, 472, 475, 478, 480, 484, 485, 486, 490, 492, 497, 499, 500, 504, 505, 506, 507], "run_migrations_onlin": 4, "onlin": [4, 440, 446, 474, 503], "In": [4, 46, 158, 168, 187, 191, 216, 218, 440, 441, 442, 443, 447, 472, 473, 474, 475, 476, 478, 480, 485, 490, 493, 494, 495, 497, 500, 501, 503, 504, 505, 506], "scenario": [4, 279, 447, 472, 473, 478, 485, 497], "associ": [4, 191, 302, 303], "connect": [4, 218, 292, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 472, 497, 503], "adaptor_registri": [5, 447], "cl": [5, 28, 35, 127, 129, 145, 150, 155, 171, 175, 178, 179, 180, 182, 184, 207, 212, 216, 218, 220, 232, 238, 252], "The": [5, 7, 10, 11, 28, 35, 37, 43, 60, 64, 82, 83, 84, 96, 121, 126, 127, 128, 129, 131, 132, 133, 139, 140, 145, 146, 147, 150, 152, 153, 155, 158, 159, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 232, 238, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 256, 257, 258, 262, 263, 281, 282, 284, 287, 291, 292, 295, 296, 299, 300, 307, 312, 315, 317, 318, 319, 320, 321, 322, 323, 336, 343, 344, 393, 440, 441, 442, 443, 444, 447, 448, 449, 450, 452, 454, 461, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508], "decor": [5, 28, 57, 58, 60, 121, 127, 129, 145, 155, 180, 182, 184, 194, 195, 207, 212, 216, 218, 220, 224, 232, 238, 252, 263, 407, 441, 442, 447, 506], "us": [5, 7, 9, 10, 28, 34, 35, 37, 60, 127, 129, 131, 132, 133, 139, 140, 145, 149, 150, 155, 167, 168, 169, 170, 171, 172, 173, 176, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 195, 196, 197, 198, 201, 203, 205, 207, 209, 212, 216, 218, 219, 220, 221, 222, 223, 232, 238, 239, 240, 242, 243, 244, 246, 247, 252, 254, 257, 258, 263, 307, 312, 317, 318, 322, 324, 336, 343, 345, 370, 374, 395, 411, 413, 423, 424, 440, 441, 442, 443, 444, 446, 447, 452, 472, 474, 476, 478, 479, 480, 481, 484, 486, 488, 489, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508], "regist": [5, 28, 127, 129, 145, 150, 155, 158, 171, 175, 178, 179, 180, 182, 184, 185, 187, 194, 195, 207, 208, 209, 210, 211, 212, 216, 218, 220, 224, 232, 238, 243, 252, 442, 447, 473, 476, 480, 490, 494, 506], "all": [5, 10, 11, 28, 35, 37, 50, 53, 75, 76, 88, 127, 129, 141, 142, 145, 149, 150, 155, 158, 159, 167, 171, 175, 178, 179, 180, 182, 184, 187, 188, 191, 193, 194, 195, 207, 210, 211, 212, 213, 216, 219, 222, 224, 226, 227, 230, 231, 232, 238, 241, 242, 243, 246, 252, 257, 258, 267, 278, 280, 289, 305, 307, 312, 317, 318, 331, 333, 336, 337, 343, 344, 347, 349, 356, 362, 369, 371, 375, 376, 378, 384, 389, 393, 402, 406, 428, 440, 441, 443, 444, 446, 447, 472, 474, 475, 476, 480, 484, 485, 488, 495, 496, 497, 498, 500, 501, 505, 506], "subclass": [5, 28, 127, 129, 145, 155, 164, 168, 171, 175, 178, 179, 180, 182, 184, 194, 195, 207, 210, 211, 212, 216, 218, 220, 224, 232, 238, 252, 447, 506], "paramet": [5, 7, 9, 10, 11, 28, 34, 35, 37, 46, 47, 48, 49, 50, 51, 52, 53, 60, 63, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 90, 91, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 121, 126, 127, 129, 131, 132, 133, 136, 139, 140, 145, 147, 149, 150, 155, 159, 168, 169, 171, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 231, 232, 238, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 256, 257, 258, 262, 263, 275, 279, 283, 284, 302, 303, 304, 307, 313, 315, 324, 350, 368, 373, 377, 380, 392, 397, 402, 404, 405, 410, 411, 413, 423, 424, 443, 444, 452, 472, 475, 476, 480, 481, 487, 490, 497, 500, 503, 505, 506, 507], "framework_specific_info": [5, 7, 10, 35, 37, 447], "base": [5, 7, 9, 10, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 127, 128, 129, 130, 131, 132, 133, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 191, 194, 195, 196, 198, 199, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 216, 218, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 239, 240, 241, 242, 243, 244, 246, 247, 252, 254, 257, 258, 263, 268, 269, 270, 272, 273, 274, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 320, 321, 323, 326, 328, 329, 332, 342, 344, 347, 349, 351, 352, 354, 355, 356, 357, 365, 368, 373, 377, 380, 390, 394, 396, 398, 400, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 424, 425, 427, 429, 433, 434, 442, 447, 452, 476, 479, 480, 481, 484, 496, 503, 504, 506, 508], "object": [5, 7, 9, 10, 34, 35, 37, 46, 47, 48, 49, 50, 51, 52, 53, 63, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 126, 127, 129, 131, 132, 133, 139, 140, 141, 142, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 162, 167, 169, 170, 171, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 191, 194, 195, 196, 199, 200, 202, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 231, 239, 240, 241, 242, 243, 244, 246, 247, 252, 254, 256, 257, 258, 262, 263, 279, 293, 294, 297, 299, 340, 402, 405, 411, 421, 423, 424, 428, 441, 442, 443, 446, 452, 472, 473, 475, 476, 483, 490, 491, 492, 495, 499, 500, 505, 506], "framework": [5, 7, 10, 35, 37, 141, 142, 145, 150, 151, 152, 155, 160, 161, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 186, 187, 194, 195, 196, 203, 221, 222, 223, 224, 226, 227, 228, 230, 231, 240, 256, 265, 279, 289, 305, 307, 312, 314, 316, 336, 344, 347, 349, 350, 356, 363, 365, 370, 374, 379, 383, 394, 400, 411, 412, 446, 447, 471, 472, 475, 476, 480, 481, 482, 485, 486, 487, 488, 490, 491, 497, 498, 500, 505, 506, 507, 508], "layer": [5, 7, 10, 35, 36, 37, 60, 150, 157, 216, 217, 219, 254, 256, 257, 263, 423, 443, 447, 475, 479, 487, 497, 502, 506], "abstract": [5, 7, 36, 46, 47, 48, 49, 50, 51, 52, 53, 63, 68, 70, 71, 72, 73, 74, 77, 80, 81, 90, 91, 94, 95, 150, 184, 185, 186, 187, 194, 195, 206, 208, 212, 216, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 240, 252, 269, 344, 355, 356, 377, 386, 404, 427, 447, 486], "quantiz": [5, 7, 9, 10, 11, 34, 35, 36, 37, 79, 83, 85, 87, 93, 108, 131, 139, 140, 151, 152, 158, 181, 186, 187, 197, 222, 223, 230, 242, 243, 244, 246, 247, 252, 253, 254, 257, 258, 262, 263, 274, 279, 307, 309, 315, 393, 401, 412, 416, 443, 447, 461, 472, 473, 475, 476, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 498, 502, 504, 505, 506, 507], "tune_cfg": [5, 7, 9, 10, 35, 37, 447], "model": [5, 7, 9, 10, 11, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 115, 121, 126, 131, 136, 139, 140, 149, 150, 152, 153, 158, 165, 168, 169, 171, 184, 185, 186, 187, 195, 196, 197, 198, 199, 201, 203, 205, 206, 208, 209, 216, 217, 218, 219, 220, 221, 222, 223, 240, 241, 242, 243, 244, 246, 247, 252, 253, 256, 262, 263, 265, 266, 267, 269, 279, 281, 289, 292, 295, 297, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 319, 323, 324, 329, 330, 331, 334, 335, 336, 360, 361, 363, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 384, 386, 389, 390, 393, 394, 401, 409, 411, 416, 426, 427, 431, 441, 442, 444, 447, 450, 473, 475, 476, 478, 479, 480, 481, 485, 486, 487, 489, 490, 491, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 507], "q_func": [5, 7, 10, 35, 37, 139, 140, 187, 221, 222, 241, 242, 243, 244, 246, 247, 252, 444, 447, 506], "none": [5, 7, 9, 10, 11, 34, 35, 37, 53, 80, 96, 115, 121, 126, 132, 133, 136, 139, 140, 143, 149, 150, 151, 152, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 181, 184, 185, 186, 187, 188, 191, 194, 195, 196, 197, 198, 200, 202, 203, 205, 206, 209, 213, 217, 221, 222, 223, 224, 228, 231, 232, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 256, 257, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 288, 290, 292, 293, 294, 296, 298, 301, 302, 303, 306, 307, 310, 312, 313, 314, 329, 344, 347, 349, 356, 361, 363, 368, 370, 373, 374, 377, 379, 380, 381, 382, 386, 387, 390, 392, 395, 397, 398, 400, 403, 405, 406, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 428, 436, 442, 443, 447, 452, 476, 490, 500, 504, 505, 506], "do": [5, 7, 10, 35, 168, 169, 185, 187, 188, 191, 219, 222, 262, 440, 452, 472, 474, 476, 480, 484, 485, 487, 490, 494, 501, 502, 506], "calibr": [5, 7, 9, 10, 35, 131, 139, 140, 186, 187, 221, 222, 223, 240, 242, 243, 244, 246, 247, 252, 257, 258, 420, 443, 447, 475, 486, 487, 500, 506, 507], "quanit": [5, 7, 10], "post": [5, 7, 10, 139, 140, 158, 184, 187, 222, 240, 242, 243, 244, 246, 247, 252, 423, 440, 443, 444, 447, 474, 479, 480, 487, 488, 495, 504, 506], "train": [5, 7, 10, 35, 37, 52, 139, 140, 158, 169, 171, 184, 185, 187, 197, 198, 200, 201, 205, 209, 218, 219, 222, 240, 242, 243, 244, 246, 247, 252, 256, 419, 442, 443, 446, 447, 471, 476, 478, 479, 485, 487, 491, 493, 495, 497, 498, 506, 507, 508], "dict": [5, 7, 9, 10, 35, 37, 121, 132, 133, 139, 140, 149, 150, 155, 168, 171, 187, 190, 191, 192, 193, 195, 198, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 228, 240, 241, 242, 243, 244, 246, 247, 252, 254, 256, 257, 262, 263, 264, 266, 269, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 320, 321, 324, 332, 341, 344, 351, 359, 360, 361, 363, 365, 366, 367, 368, 373, 377, 380, 381, 382, 383, 385, 387, 388, 390, 397, 398, 400, 402, 404, 405, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 427, 428, 430, 432, 434, 435, 437, 441, 490, 499, 504, 506], "chosen": [5, 472], "tune": [5, 7, 9, 10, 35, 37, 131, 139, 140, 169, 171, 186, 187, 221, 223, 240, 241, 242, 243, 244, 246, 247, 252, 263, 274, 292, 299, 300, 307, 309, 313, 336, 366, 371, 381, 393, 401, 412, 416, 441, 444, 446, 447, 472, 475, 476, 480, 481, 487, 489, 491, 494, 497, 498, 501, 502, 503, 504, 507], "load": [5, 169, 171, 183, 184, 191, 201, 206, 228, 240, 262, 263, 385, 411, 412, 442, 443, 475, 499, 500], "dataset": [5, 7, 10, 35, 37, 139, 140, 145, 151, 152, 159, 161, 162, 164, 165, 166, 167, 168, 180, 186, 187, 191, 192, 193, 195, 197, 203, 221, 222, 223, 240, 241, 242, 243, 244, 246, 247, 252, 281, 289, 292, 295, 302, 307, 311, 312, 313, 324, 336, 409, 411, 412, 413, 442, 444, 446, 447, 454, 473, 475, 480, 481, 485, 490, 500, 506, 507, 508], "option": [5, 7, 10, 35, 37, 96, 115, 136, 139, 140, 150, 159, 169, 184, 187, 191, 197, 202, 203, 216, 222, 223, 240, 241, 242, 243, 244, 246, 247, 252, 253, 263, 269, 280, 281, 282, 284, 291, 292, 295, 297, 299, 300, 302, 307, 312, 315, 344, 351, 354, 355, 356, 361, 370, 374, 380, 381, 383, 388, 397, 398, 402, 405, 409, 411, 412, 414, 417, 419, 421, 430, 436, 442, 473, 475, 476, 481, 484, 485, 491, 505, 506, 507], "awar": [5, 7, 10, 35, 37, 141, 142, 145, 158, 187, 197, 216, 222, 447, 479, 480, 487, 491, 493, 495, 508], "evalu": [5, 7, 10, 35, 37, 131, 139, 140, 149, 169, 185, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 209, 218, 219, 222, 223, 224, 240, 241, 242, 243, 244, 246, 247, 252, 256, 268, 270, 272, 274, 275, 393, 401, 412, 416, 442, 443, 444, 447, 452, 475, 476, 478, 485, 486, 487, 490, 491, 493, 494, 497, 500, 503, 504, 506, 507], "postprocess": [5, 7, 10, 35, 37, 145, 149, 152, 180, 182, 184, 186, 187, 197, 221, 222, 223, 414, 447, 473, 475, 504, 505], "metric": [5, 7, 10, 35, 37, 139, 140, 149, 152, 185, 186, 187, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 256, 275, 279, 284, 289, 302, 305, 307, 312, 336, 393, 401, 404, 408, 411, 412, 414, 430, 442, 446, 447, 450, 452, 472, 473, 475, 480, 485, 491, 503, 504, 506, 507, 508], "measur": [5, 7, 10, 35, 37, 121, 149, 202, 203, 232, 430, 442, 447, 473, 478, 485, 490, 493, 504, 506], "iter": [5, 7, 9, 10, 11, 35, 37, 121, 139, 140, 145, 151, 152, 162, 167, 171, 172, 175, 180, 206, 218, 220, 240, 241, 242, 243, 244, 246, 247, 252, 256, 257, 258, 281, 405, 412, 441, 442, 444, 447, 475, 478, 497, 499, 504, 506, 507], "1": [5, 7, 10, 11, 34, 35, 37, 44, 64, 80, 119, 121, 128, 130, 147, 149, 150, 151, 152, 159, 161, 164, 165, 166, 168, 169, 170, 172, 173, 176, 177, 184, 186, 187, 191, 192, 193, 195, 200, 203, 209, 216, 218, 221, 222, 223, 239, 240, 256, 266, 382, 390, 440, 441, 443, 444, 446, 447, 471, 473, 474, 475, 476, 478, 481, 484, 485, 490, 491, 494, 495, 496, 497, 499, 500, 502, 504, 505, 506, 507], "tensorboard": [5, 7, 10, 35, 37, 253, 256, 446, 447, 506], "fals": [5, 7, 9, 10, 11, 35, 37, 53, 61, 62, 80, 83, 90, 96, 100, 107, 112, 116, 119, 120, 121, 140, 147, 149, 150, 151, 152, 157, 159, 161, 164, 165, 166, 168, 169, 171, 184, 191, 194, 195, 200, 201, 202, 203, 216, 224, 230, 252, 256, 332, 351, 397, 400, 405, 406, 411, 430, 436, 443, 444, 447, 475, 476, 484, 490, 494, 499, 500, 504, 505, 506, 507], "valid": [5, 7, 35, 36, 37, 44, 96, 115, 171, 191, 203, 217, 218, 228, 363, 428, 442, 447, 476, 478, 484, 487, 489, 497, 500, 502], "gener": [5, 9, 34, 37, 80, 81, 139, 140, 145, 149, 159, 168, 171, 172, 173, 174, 180, 182, 184, 187, 188, 196, 200, 209, 216, 219, 222, 240, 241, 242, 243, 244, 246, 247, 252, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 302, 307, 313, 368, 373, 377, 379, 380, 385, 386, 387, 396, 405, 436, 446, 447, 472, 475, 478, 485, 490, 491, 494, 496, 497, 498, 500, 501, 504, 505, 506], "data": [5, 7, 9, 10, 11, 34, 37, 45, 93, 96, 115, 121, 131, 139, 140, 149, 150, 151, 152, 187, 203, 216, 222, 223, 230, 240, 241, 242, 243, 244, 246, 247, 252, 263, 264, 266, 269, 275, 276, 277, 279, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 324, 340, 341, 344, 347, 351, 356, 359, 360, 361, 363, 366, 368, 373, 377, 380, 382, 387, 390, 397, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 427, 432, 434, 435, 437, 443, 446, 447, 450, 472, 475, 476, 480, 481, 484, 485, 488, 490, 491, 500, 501, 503, 504, 505, 506], "label": [5, 37, 139, 140, 147, 150, 152, 153, 169, 171, 172, 173, 174, 177, 181, 184, 188, 190, 194, 195, 200, 201, 224, 240, 241, 242, 243, 244, 246, 247, 252, 332, 441, 452, 476, 490, 497, 505], "process": [5, 7, 10, 35, 37, 139, 140, 145, 147, 149, 158, 169, 170, 171, 180, 181, 182, 184, 185, 187, 198, 199, 202, 205, 206, 209, 216, 218, 219, 220, 222, 223, 240, 241, 242, 243, 244, 246, 247, 252, 262, 278, 359, 360, 363, 393, 397, 401, 404, 405, 412, 442, 444, 447, 472, 473, 475, 476, 478, 479, 480, 485, 495, 497, 500, 504, 505, 506, 507], "result": [5, 7, 10, 35, 37, 121, 139, 147, 149, 150, 184, 187, 188, 191, 192, 193, 194, 195, 200, 202, 206, 224, 232, 241, 242, 243, 244, 246, 247, 252, 264, 266, 281, 282, 295, 296, 301, 307, 310, 313, 387, 427, 430, 440, 442, 443, 452, 472, 473, 474, 475, 478, 480, 481, 485, 487, 489, 490, 494, 497, 498, 500, 503, 504, 505, 506, 508], "from": [5, 7, 9, 34, 35, 37, 51, 57, 58, 60, 96, 108, 115, 121, 139, 140, 150, 151, 152, 158, 159, 162, 166, 169, 170, 171, 172, 173, 174, 176, 185, 187, 188, 191, 192, 193, 197, 200, 201, 202, 203, 207, 209, 216, 217, 218, 219, 220, 222, 228, 232, 241, 242, 243, 244, 246, 247, 252, 256, 262, 263, 281, 284, 285, 286, 288, 291, 292, 293, 294, 295, 297, 299, 301, 302, 304, 307, 308, 309, 310, 311, 313, 324, 329, 347, 350, 359, 360, 361, 363, 385, 390, 404, 405, 409, 411, 412, 413, 428, 430, 435, 436, 440, 441, 442, 443, 444, 446, 447, 452, 473, 474, 475, 476, 478, 479, 480, 482, 483, 485, 487, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506], "depend": [5, 9, 37, 52, 139, 140, 149, 187, 198, 205, 206, 240, 241, 242, 243, 244, 246, 247, 252, 442, 474, 483, 484, 485, 499, 506], "categori": [5, 37, 171, 190, 191, 476], "default": [5, 35, 37, 88, 96, 115, 121, 133, 136, 139, 140, 147, 150, 158, 159, 161, 169, 170, 171, 181, 184, 187, 188, 191, 194, 195, 197, 217, 223, 224, 228, 241, 242, 243, 244, 246, 247, 252, 263, 283, 285, 286, 288, 290, 293, 294, 298, 320, 321, 324, 341, 351, 400, 402, 413, 414, 418, 419, 446, 447, 452, 472, 473, 475, 476, 481, 484, 487, 490, 493, 494, 499, 501, 503, 505, 506, 507], "precis": [5, 7, 10, 35, 36, 37, 139, 140, 186, 187, 191, 193, 195, 196, 221, 223, 232, 240, 241, 242, 243, 244, 246, 247, 252, 279, 289, 292, 293, 302, 303, 304, 305, 306, 307, 312, 336, 365, 370, 372, 373, 374, 394, 412, 415, 417, 444, 446, 447, 471, 472, 473, 479, 480, 484, 487, 498, 499, 500, 506], "benchmark": [5, 7, 37, 151, 152, 187, 222, 223, 232, 282, 289, 292, 301, 307, 309, 312, 313, 336, 393, 394, 404, 409, 426, 431, 446, 450, 475, 485, 492, 493, 506, 507, 508], "int": [5, 7, 9, 10, 35, 37, 96, 115, 121, 147, 159, 168, 169, 170, 181, 184, 189, 191, 195, 200, 202, 203, 207, 232, 253, 269, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 306, 307, 308, 309, 310, 311, 312, 314, 358, 390, 397, 398, 400, 402, 403, 404, 405, 406, 411, 412, 414, 419, 421, 424, 436, 443, 476, 490, 497, 499, 505], "control": [5, 7, 37, 76, 127, 129, 203, 307, 312, 441, 472, 496, 506], "step": [5, 7, 37, 83, 158, 187, 216, 218, 219, 220, 232, 253, 443, 444, 472, 474, 478, 479, 480, 491, 497, 499, 501, 503, 504, 506], "mini": [5, 7, 37, 508], "batch": [5, 7, 9, 37, 52, 151, 152, 158, 159, 161, 162, 167, 168, 187, 203, 209, 223, 239, 253, 281, 292, 409, 443, 444, 472, 475, 478, 485, 497, 505, 508], "boolean": [5, 7, 9, 37, 46, 202, 411], "inspect": [5, 7, 10, 35, 37, 472, 502, 504], "tensor": [5, 7, 9, 10, 11, 34, 35, 37, 60, 96, 115, 121, 150, 184, 212, 213, 216, 218, 220, 228, 230, 231, 246, 257, 258, 304, 307, 315, 344, 441, 443, 476, 497, 500, 502, 504, 505, 506, 508], "query_fw_cap": [5, 7, 10, 35, 37, 447, 506], "return": [5, 7, 9, 10, 11, 34, 35, 37, 40, 43, 46, 47, 50, 51, 52, 53, 57, 58, 60, 64, 71, 75, 76, 80, 81, 82, 83, 84, 85, 93, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 126, 127, 129, 133, 139, 140, 145, 147, 149, 150, 155, 159, 161, 168, 171, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 212, 216, 217, 218, 219, 220, 222, 224, 226, 227, 228, 230, 231, 232, 238, 240, 241, 242, 243, 244, 246, 247, 252, 253, 256, 257, 258, 262, 263, 281, 282, 284, 291, 292, 293, 294, 295, 297, 299, 300, 324, 327, 328, 329, 330, 361, 397, 400, 402, 404, 405, 406, 411, 414, 423, 424, 427, 441, 442, 443, 444, 452, 476, 480, 490, 491, 492, 494, 500, 504, 506], "capabl": [5, 7, 10, 35, 36, 37, 484, 491, 499, 500, 506, 507], "queri": [5, 7, 9, 10, 35, 37, 96, 121, 283, 290, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 500], "query_fused_pattern": [5, 447], "fuse": [5, 9, 35, 37, 54, 55, 59, 60, 61, 62, 82, 83, 84, 85, 87, 111, 443, 444, 504], "pattern": [5, 7, 36, 37, 51, 52, 60, 83, 87, 93, 96, 111, 171, 187, 210, 214, 218, 223, 304, 307, 320, 329, 330, 404, 427, 447, 476, 484, 487, 495, 499, 508], "conv": [5, 11, 83, 111, 443, 499], "relu": [5, 64, 111, 443, 484, 504], "bn": [5, 52, 71, 443, 508], "inspect_tensor": [5, 7, 10, 35, 37, 447], "op_list": [5, 7, 10, 35, 37, 246, 447, 504], "iteration_list": [5, 7, 10, 35, 37, 447], "inspect_typ": [5, 7, 10, 35, 37, 315, 447], "activ": [5, 7, 10, 11, 35, 37, 104, 157, 246, 320, 443, 444, 446, 447, 471, 472, 479, 481, 484, 496, 499, 500, 504, 506, 507], "save_to_disk": [5, 7, 10, 35, 37, 447], "strategi": [5, 7, 9, 10, 35, 37, 171, 187, 221, 279, 299, 394, 411, 421, 446, 447, 449, 480, 487, 498, 499, 500, 501, 502, 507], "dump": [5, 7, 10, 11, 35, 37, 96, 263, 273, 381, 402, 412, 424, 500, 504, 506], "info": [5, 7, 10, 35, 96, 151, 152, 156, 216, 222, 228, 281, 282, 284, 291, 292, 295, 296, 300, 397, 400, 405, 411, 427, 441, 472, 474, 485, 492], "feed": [5, 35, 121, 168, 279, 443, 478], "list": [5, 7, 9, 10, 11, 34, 35, 37, 43, 46, 96, 115, 121, 139, 140, 147, 149, 150, 162, 169, 183, 184, 187, 188, 189, 191, 192, 193, 195, 200, 202, 203, 207, 209, 216, 219, 228, 231, 232, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 257, 258, 275, 277, 279, 281, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 324, 327, 329, 330, 332, 344, 347, 350, 351, 354, 355, 356, 358, 363, 366, 368, 370, 373, 374, 377, 380, 390, 397, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 417, 418, 419, 421, 423, 430, 443, 446, 447, 452, 471, 484, 494, 499, 501, 504, 506], "op": [5, 7, 10, 11, 35, 36, 37, 46, 50, 52, 55, 56, 59, 60, 61, 62, 64, 71, 75, 76, 79, 82, 83, 84, 85, 87, 93, 96, 115, 116, 119, 121, 241, 242, 246, 257, 258, 304, 307, 315, 320, 321, 329, 427, 447, 472, 484, 485, 491, 500, 501, 502, 504, 506, 507], "name": [5, 10, 11, 34, 35, 37, 43, 52, 53, 57, 58, 60, 96, 108, 115, 121, 127, 129, 133, 145, 149, 150, 152, 153, 155, 156, 157, 169, 170, 171, 174, 175, 178, 179, 180, 182, 184, 190, 191, 194, 195, 200, 201, 203, 209, 212, 216, 218, 220, 222, 224, 228, 231, 254, 257, 263, 281, 285, 286, 288, 291, 292, 293, 294, 295, 297, 315, 324, 326, 344, 347, 349, 350, 356, 363, 364, 365, 366, 377, 390, 397, 400, 411, 413, 414, 435, 441, 443, 446, 472, 473, 476, 480, 481, 484, 485, 489, 490, 492, 496, 502, 503, 504, 506, 507, 508], "fp32": [5, 7, 35, 36, 37, 82, 84, 116, 130, 139, 140, 195, 241, 242, 243, 244, 246, 247, 252, 262, 315, 446, 447, 484, 490, 491, 499, 500, 501, 502, 503, 504, 506, 507, 508], "contain": [5, 7, 10, 11, 35, 37, 46, 57, 58, 60, 64, 96, 115, 121, 131, 139, 140, 169, 170, 171, 185, 186, 187, 191, 192, 193, 197, 200, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 262, 267, 271, 278, 283, 285, 286, 288, 289, 290, 293, 294, 297, 298, 302, 307, 312, 317, 318, 322, 325, 331, 336, 337, 343, 362, 369, 371, 372, 375, 376, 378, 384, 389, 393, 397, 405, 475, 476, 478, 487, 490, 497, 504, 506], "str": [5, 9, 10, 35, 96, 115, 127, 129, 145, 150, 155, 159, 169, 170, 171, 175, 178, 179, 180, 181, 182, 184, 188, 189, 191, 193, 194, 195, 200, 202, 203, 207, 212, 224, 226, 227, 231, 253, 256, 264, 265, 266, 269, 275, 276, 277, 279, 280, 281, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 299, 302, 303, 304, 306, 307, 312, 313, 314, 315, 320, 321, 324, 326, 327, 328, 329, 330, 332, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 363, 365, 366, 368, 370, 373, 374, 377, 379, 380, 381, 382, 385, 386, 387, 390, 397, 399, 400, 402, 404, 405, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 427, 428, 435, 436, 443, 452, 476, 490, 499, 504, 505], "valu": [5, 7, 10, 11, 34, 35, 37, 45, 46, 52, 57, 58, 60, 80, 81, 96, 115, 116, 121, 130, 132, 133, 139, 140, 147, 149, 150, 169, 172, 173, 184, 191, 195, 201, 202, 216, 217, 219, 231, 232, 240, 241, 242, 244, 246, 247, 252, 254, 256, 257, 263, 275, 277, 279, 283, 285, 286, 288, 290, 293, 294, 298, 302, 303, 324, 326, 365, 394, 397, 398, 402, 404, 409, 411, 419, 421, 422, 424, 435, 441, 443, 444, 472, 475, 476, 481, 484, 490, 494, 497, 499, 500, 505, 506, 507], "ar": [5, 11, 35, 52, 64, 108, 136, 158, 169, 184, 187, 188, 191, 195, 201, 203, 207, 216, 217, 218, 219, 222, 223, 243, 256, 262, 263, 344, 347, 349, 356, 397, 406, 440, 442, 443, 444, 446, 447, 452, 472, 473, 474, 475, 476, 478, 479, 481, 482, 484, 486, 487, 489, 490, 491, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508], "weight": [5, 34, 35, 37, 50, 51, 52, 115, 116, 130, 194, 195, 213, 216, 218, 220, 224, 228, 231, 320, 421, 443, 444, 446, 447, 471, 472, 479, 484, 486, 490, 494, 497, 499, 500, 504, 506, 507, 508], "bool": [5, 9, 10, 11, 35, 52, 53, 96, 115, 121, 140, 147, 169, 171, 184, 189, 191, 195, 200, 202, 203, 216, 252, 291, 324, 329, 332, 344, 347, 349, 350, 351, 352, 354, 355, 357, 361, 363, 366, 381, 397, 398, 400, 405, 406, 411, 413, 414, 424, 430, 436, 476, 490, 499, 505], "save": [5, 7, 10, 35, 37, 96, 145, 171, 175, 180, 201, 206, 222, 226, 227, 228, 230, 231, 253, 254, 257, 263, 441, 442, 443, 447, 485, 486, 491, 492, 493, 497, 500], "disk": [5, 35, 37], "memori": [5, 35, 64, 186, 187, 209, 221, 223, 239, 240, 475, 479, 491, 494, 497, 500, 506], "numpi": [5, 7, 10, 35, 37, 57, 58, 60, 96, 121, 184, 191, 195, 200, 202, 207, 257, 258, 483, 505], "arrai": [5, 7, 10, 35, 37, 96, 115, 121, 184, 191, 195, 200, 202, 207, 231, 243, 257, 258, 505], "node0_nam": [5, 35, 37], "weight0_nam": [5, 7, 10, 35, 37], "bias0_nam": [5, 7, 10, 35, 37], "node1_nam": [5, 35, 37], "weight1_nam": [5, 35, 37], "bias1_nam": [5, 35, 37], "0": [5, 7, 11, 34, 35, 36, 43, 81, 115, 121, 128, 136, 147, 150, 151, 152, 159, 161, 164, 165, 166, 168, 169, 172, 173, 176, 181, 184, 186, 187, 195, 200, 202, 203, 207, 209, 216, 221, 223, 239, 240, 397, 405, 441, 443, 444, 446, 449, 472, 473, 475, 476, 478, 480, 481, 484, 489, 490, 491, 494, 496, 497, 499, 500, 503, 504, 505, 506, 507], "output0_nam": [5, 35, 37], "output1_nam": [5, 35, 37], "set_tensor": [5, 7, 10, 35, 37, 447], "tensor_dict": [5, 7, 10, 35, 37, 447], "set": [5, 7, 9, 10, 11, 35, 36, 37, 87, 96, 115, 121, 131, 133, 139, 140, 149, 155, 159, 161, 169, 171, 174, 184, 185, 186, 187, 191, 196, 197, 198, 200, 205, 209, 217, 222, 223, 228, 230, 232, 240, 241, 242, 243, 244, 246, 247, 252, 265, 302, 303, 304, 307, 324, 370, 374, 379, 400, 404, 409, 410, 412, 413, 414, 423, 424, 428, 440, 442, 443, 444, 446, 472, 473, 474, 475, 476, 480, 484, 485, 486, 487, 490, 491, 499, 500, 503, 506, 507], "back": [5, 7, 10, 35, 37, 184, 200, 443], "usual": [5, 7, 10, 35, 37, 169, 187, 209, 441, 444, 475, 478, 495, 500], "note": [5, 7, 10, 35, 37, 44, 191, 219, 243, 297, 307, 311, 442, 443, 446, 472, 473, 480, 481, 484, 485, 497, 500, 504, 506, 507, 508], "float": [5, 7, 10, 34, 35, 37, 96, 115, 147, 169, 181, 188, 189, 191, 192, 193, 200, 202, 203, 216, 218, 219, 220, 228, 231, 243, 266, 282, 291, 299, 300, 315, 321, 376, 381, 397, 398, 402, 404, 409, 411, 412, 419, 421, 422, 430, 443, 444, 452, 471, 476, 481, 490, 499, 500, 505], "ha": [5, 7, 10, 35, 37, 52, 53, 57, 58, 60, 64, 83, 96, 115, 149, 187, 188, 202, 216, 218, 241, 242, 442, 447, 452, 472, 475, 485, 487, 491, 499, 500, 501, 503], "respons": [5, 7, 10, 35, 37, 400, 404, 410, 423, 427, 428, 432, 434, 436, 437, 500], "int8": [5, 7, 10, 34, 35, 36, 37, 116, 130, 181, 246, 257, 258, 315, 441, 444, 447, 471, 472, 476, 479, 484, 499, 500, 501, 502, 503, 504, 505, 506, 507], "int32": [5, 7, 10, 35, 37, 476], "format": [5, 7, 10, 11, 34, 35, 37, 43, 121, 145, 169, 170, 171, 175, 180, 187, 191, 197, 200, 206, 366, 402, 443, 476, 478, 480, 490, 491, 492, 493, 500], "someth": [5, 7, 10, 35, 37, 139, 140, 171, 240, 241, 242, 243, 244, 246, 247, 252], "like": [5, 7, 10, 35, 37, 64, 87, 89, 96, 115, 121, 139, 140, 145, 159, 171, 175, 180, 186, 187, 195, 201, 218, 221, 222, 223, 226, 227, 228, 230, 231, 240, 241, 242, 243, 244, 246, 247, 252, 253, 441, 442, 447, 472, 474, 478, 481, 485, 487, 493, 495, 497, 500, 506], "quantize_input": [5, 37], "abl": [5, 37, 71, 139, 140, 183, 240, 241, 242, 243, 244, 246, 247, 252, 497, 500], "take": [5, 37, 139, 140, 152, 153, 162, 184, 216, 240, 241, 242, 243, 244, 246, 247, 252, 440, 442, 474, 475, 478, 484, 497, 500, 501, 505, 506, 507], "input": [5, 9, 11, 34, 35, 37, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 64, 68, 70, 71, 72, 73, 74, 75, 77, 80, 81, 90, 91, 93, 94, 95, 96, 115, 121, 126, 139, 140, 150, 152, 153, 158, 169, 170, 171, 173, 181, 183, 184, 185, 186, 187, 191, 196, 203, 209, 222, 228, 230, 231, 240, 241, 242, 243, 244, 246, 247, 252, 253, 263, 265, 275, 297, 301, 302, 304, 307, 308, 309, 310, 311, 344, 347, 354, 355, 356, 358, 370, 374, 379, 385, 409, 412, 418, 442, 447, 472, 475, 476, 478, 480, 484, 485, 486, 490, 491, 492, 497, 499, 500, 504, 505, 507], "scale": [5, 11, 34, 37, 52, 116, 130, 147, 181, 184, 230, 443, 444, 471, 481, 500, 505], "type": [5, 7, 9, 10, 11, 34, 35, 36, 37, 47, 50, 51, 52, 53, 60, 64, 75, 76, 82, 83, 84, 87, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 121, 126, 127, 129, 133, 140, 145, 150, 155, 159, 167, 169, 171, 175, 178, 179, 180, 182, 184, 187, 188, 189, 191, 194, 195, 197, 200, 202, 207, 210, 211, 212, 216, 218, 220, 222, 224, 226, 227, 228, 230, 231, 232, 238, 243, 252, 253, 256, 262, 275, 293, 294, 302, 303, 305, 307, 345, 397, 400, 402, 404, 407, 443, 447, 452, 472, 476, 484, 487, 491, 497, 500, 505, 507], "path": [5, 7, 10, 35, 37, 115, 121, 131, 132, 169, 170, 171, 184, 185, 186, 187, 197, 198, 199, 200, 203, 205, 206, 209, 217, 219, 221, 222, 223, 228, 231, 239, 240, 253, 263, 264, 269, 281, 284, 291, 292, 295, 301, 302, 307, 309, 310, 324, 330, 341, 344, 347, 349, 350, 352, 354, 355, 356, 357, 361, 368, 373, 377, 380, 381, 387, 397, 405, 409, 411, 412, 421, 436, 442, 443, 447, 472, 473, 475, 476, 478, 480, 485, 486, 490, 492, 493, 497, 505, 506, 507], "where": [5, 7, 11, 34, 35, 37, 191, 195, 206, 208, 216, 478, 481, 497, 504, 506], "convert": [5, 9, 34, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 63, 64, 68, 70, 71, 72, 73, 74, 77, 80, 81, 90, 91, 93, 94, 95, 169, 181, 183, 184, 187, 191, 195, 197, 206, 208, 217, 226, 227, 231, 253, 283, 290, 298, 390, 402, 441, 443, 444, 485, 491, 493, 500, 501, 505], "sourc": [5, 11, 37, 152, 187, 189, 197, 328, 441, 446, 489, 493, 498], "destinatin": 5, "anoth": [5, 37, 96, 184, 187, 188, 197, 253, 452, 475, 478, 493, 505, 506], "destin": [5, 11, 37, 187, 197, 493], "mxnetadaptor": 7, "specif": [7, 10, 35, 36, 37, 141, 142, 145, 149, 155, 169, 170, 171, 172, 176, 178, 179, 180, 187, 188, 191, 197, 198, 205, 206, 231, 292, 302, 303, 304, 307, 315, 330, 440, 442, 443, 447, 472, 474, 478, 481, 484, 486, 490, 491, 492, 494, 499, 507], "nc_model": [7, 9, 209], "function": [7, 10, 37, 52, 96, 115, 139, 140, 158, 170, 186, 187, 198, 205, 206, 209, 219, 222, 230, 241, 242, 244, 246, 247, 254, 257, 441, 442, 444, 447, 472, 473, 475, 478, 486, 487, 488, 490, 491, 497, 500, 503, 504, 506], "config": [7, 9, 10, 35, 36, 139, 140, 149, 158, 169, 186, 187, 200, 206, 209, 216, 217, 218, 219, 220, 223, 241, 242, 243, 244, 246, 247, 252, 253, 256, 262, 263, 264, 265, 268, 269, 270, 272, 274, 277, 301, 307, 309, 310, 314, 315, 359, 361, 368, 370, 373, 374, 377, 379, 380, 387, 390, 393, 401, 411, 414, 415, 416, 417, 421, 422, 424, 432, 434, 437, 442, 472, 476, 478, 480, 485, 487, 492, 497, 499, 501, 504, 506], "unimpl": [7, 10], "yet": [7, 10, 37, 472], "mxnetmodel": [7, 228], "data_x": [7, 9], "fp32_baselin": [7, 10, 35, 37, 256, 447], "loader": [7, 9, 139, 140, 222, 240, 241, 242, 243, 244, 246, 247, 252], "onli": [7, 10, 11, 35, 37, 43, 46, 47, 48, 49, 50, 51, 52, 53, 60, 63, 64, 68, 70, 71, 72, 73, 74, 77, 80, 81, 90, 91, 94, 95, 116, 130, 149, 151, 152, 155, 169, 187, 197, 216, 218, 411, 421, 423, 424, 443, 447, 473, 475, 480, 484, 485, 488, 491, 499, 504, 506, 507], "compare_label": [7, 10, 35, 37, 195, 490], "pipelin": [7, 10, 35, 37, 185, 187, 198, 199, 205, 222, 479, 495], "acc": [7, 10, 195, 203, 232, 442, 443, 504, 508], "level": [7, 10, 403, 424, 440, 443, 474, 506], "modelwis": [7, 241, 242], "opwis": [7, 246], "save_path": [7, 10, 37, 226, 227, 231, 253, 447, 492], "quantization_cfg": [7, 10, 37, 447], "includ": [7, 145, 150, 169, 171, 175, 178, 179, 180, 182, 184, 186, 187, 191, 196, 216, 220, 221, 223, 240, 257, 258, 440, 446, 447, 472, 474, 476, 488, 489, 490, 497, 500, 501, 504, 506], "recover_tuned_model": [7, 37], "q_config": [7, 10, 36, 37, 447], "recov": [7, 10, 37, 263, 447, 479], "specifi": [7, 10, 11, 35, 36, 37, 96, 115, 139, 140, 149, 184, 186, 187, 191, 194, 195, 198, 201, 203, 205, 206, 209, 221, 222, 223, 224, 239, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 279, 281, 284, 291, 292, 293, 295, 296, 297, 301, 302, 304, 305, 307, 309, 310, 314, 315, 316, 329, 361, 365, 366, 367, 383, 388, 404, 411, 424, 428, 443, 472, 479, 480, 481, 484, 490, 494, 499, 500, 505, 506, 507], "mxnetqueri": 7, "local_config_fil": [7, 10, 35, 37], "querybackendcap": [7, 10, 35, 36, 37, 447], "defin": [7, 9, 10, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 53, 63, 68, 70, 71, 72, 73, 74, 77, 80, 81, 83, 90, 91, 94, 95, 96, 115, 139, 140, 150, 198, 199, 202, 205, 206, 207, 208, 209, 216, 217, 218, 219, 220, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 338, 339, 340, 423, 440, 442, 443, 444, 447, 472, 474, 476, 478, 484, 487, 490, 494, 495, 497, 500, 503, 504, 506, 507], "interfac": [7, 10, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 77, 79, 80, 81, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 141, 142, 145, 186, 187, 202, 203, 209, 221, 222, 223, 232, 239, 240, 256, 257, 258, 264, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 377, 380, 387, 399, 442, 446, 487, 500, 502], "each": [7, 10, 11, 35, 36, 37, 42, 43, 44, 45, 48, 49, 54, 55, 56, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 116, 120, 147, 167, 171, 174, 181, 184, 189, 191, 192, 193, 202, 203, 218, 228, 231, 232, 246, 257, 258, 443, 444, 447, 472, 475, 476, 478, 481, 484, 494, 495, 497, 503, 504, 505, 506], "adapt": [7, 10, 35, 36, 37, 440, 474], "should": [7, 10, 11, 35, 36, 37, 44, 64, 116, 120, 139, 140, 145, 152, 153, 167, 169, 171, 175, 180, 183, 184, 189, 194, 195, 218, 222, 224, 240, 241, 242, 243, 244, 246, 247, 252, 263, 324, 402, 441, 442, 443, 447, 472, 476, 480, 490, 494, 500, 505, 506, 507], "implement": [7, 10, 35, 36, 37, 42, 43, 44, 45, 48, 49, 54, 55, 56, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 139, 140, 145, 164, 167, 168, 169, 171, 175, 180, 188, 194, 195, 212, 216, 220, 224, 240, 241, 242, 243, 244, 246, 247, 252, 444, 446, 452, 473, 475, 476, 502, 504, 506, 507], "inherit": [7, 10, 35, 36, 37, 150, 158, 166, 184, 187, 218, 220, 442, 447, 475], "backend": [7, 10, 35, 36, 37, 155, 160, 161, 163, 165, 169, 170, 172, 173, 174, 175, 176, 180, 182, 184, 196, 441, 471, 480, 481, 486, 487, 499, 500, 505, 507], "own": [7, 10, 35, 36, 37, 64, 167, 184, 442, 472, 475, 476, 487, 490, 494, 503, 506], "get_vers": [7, 10, 36, 37], "get": [7, 10, 35, 36, 37, 57, 58, 60, 96, 115, 121, 126, 131, 133, 145, 149, 155, 157, 158, 159, 162, 180, 182, 184, 186, 187, 196, 203, 208, 209, 216, 218, 220, 221, 222, 223, 228, 230, 231, 232, 246, 257, 258, 263, 264, 269, 275, 276, 277, 279, 281, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 301, 302, 304, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 323, 324, 329, 341, 344, 345, 347, 349, 350, 354, 355, 356, 358, 361, 363, 365, 366, 367, 368, 373, 377, 380, 381, 383, 387, 388, 390, 392, 399, 400, 404, 409, 411, 412, 414, 418, 421, 423, 424, 427, 428, 432, 434, 435, 436, 437, 441, 472, 473, 475, 476, 487, 488, 504, 506], "current": [7, 10, 36, 37, 52, 60, 64, 96, 187, 197, 203, 216, 218, 219, 220, 243, 442, 443, 447, 472, 480, 481, 484, 490, 494, 497, 500, 506], "": [7, 34, 36, 46, 52, 60, 96, 115, 116, 130, 133, 149, 151, 152, 153, 159, 168, 171, 183, 184, 187, 193, 201, 203, 216, 218, 228, 240, 241, 242, 244, 246, 252, 257, 258, 313, 344, 397, 398, 440, 442, 443, 473, 474, 478, 480, 481, 484, 485, 487, 488, 491, 495, 496, 497, 498, 499, 500, 502, 503, 507], "version": [7, 9, 10, 36, 37, 43, 139, 363, 395, 400, 411, 440, 441, 446, 447, 472, 474, 484, 488, 489, 496, 498, 506], "get_precis": [7, 10, 36, 37, 279], "support": [7, 10, 34, 35, 36, 37, 64, 71, 88, 139, 140, 145, 149, 150, 151, 152, 155, 158, 159, 168, 169, 171, 175, 178, 179, 180, 181, 182, 184, 187, 194, 195, 197, 202, 203, 207, 209, 210, 211, 212, 216, 218, 222, 224, 228, 232, 240, 241, 242, 243, 244, 246, 247, 252, 256, 257, 258, 279, 344, 347, 349, 350, 352, 354, 355, 357, 363, 394, 402, 411, 441, 442, 443, 472, 473, 481, 485, 493, 498, 501, 503, 506, 508], "low": [7, 36, 37, 139, 140, 172, 173, 186, 187, 196, 221, 223, 240, 241, 242, 243, 244, 246, 247, 252, 444, 446, 447, 473, 476, 480, 491, 498, 500, 506], "e": [7, 10, 36, 60, 200, 202, 222, 402, 404, 428, 440, 474, 478, 480, 485, 506], "g": [7, 10, 36, 200, 202, 222, 404, 478, 485, 497, 502, 506], "bf16": [7, 36, 71, 82, 84, 447, 484, 485, 491, 501, 506], "get_op_typ": [7, 10, 35, 36, 37], "per": [7, 10, 35, 36, 37, 149, 159, 168, 191, 203, 257, 258, 281, 443, 447, 472, 485, 496, 501, 508], "6": [7, 443, 446, 472, 484, 500, 508], "conv2d": [7, 36, 50, 51, 55, 56, 61, 62, 116, 226, 227, 228, 230, 231, 441, 443, 484, 504], "fully_connect": 7, "get_fuse_pattern": [7, 36, 37], "fusion": [7, 36, 60, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 443, 447, 484], "everi": [7, 36, 57, 58, 60, 216, 218, 219, 443, 447, 497, 506], "get_quantization_cap": [7, 10, 35, 36, 37], "granular": [7, 36, 447, 484, 487, 497, 506, 507], "scheme": [7, 34, 36, 428, 447, 475, 484, 506, 507], "etc": [7, 36, 131, 158, 183, 185, 186, 187, 193, 201, 202, 209, 221, 223, 239, 240, 262, 478, 487, 503], "get_mixed_precision_combin": [7, 36, 37], "combin": [7, 36, 139, 140, 147, 158, 187, 222, 240, 241, 242, 243, 244, 246, 247, 252, 263, 441, 447, 481, 487, 495, 498, 501, 505, 506], "hardwar": [7, 36, 400, 447, 478, 485, 487, 491, 496, 497, 498, 499], "user": [7, 36, 96, 131, 139, 140, 141, 142, 145, 149, 155, 158, 171, 174, 178, 179, 180, 184, 186, 187, 200, 202, 209, 219, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 263, 396, 441, 442, 443, 446, 447, 478, 481, 484, 485, 487, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506], "optyp": 9, "enum": [9, 34, 263, 365, 394], "enumer": [9, 34, 207, 253, 263, 267, 365, 371, 394, 447, 480, 497, 504], "deriv": [9, 34, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 158, 185, 187, 216, 218, 220, 263], "new": [9, 34, 46, 96, 108, 121, 145, 149, 159, 171, 180, 182, 184, 216, 217, 220, 222, 230, 263, 306, 307, 311, 423, 446, 473, 474, 480, 491, 498, 500, 502, 503, 505, 507], "isiter": 9, "obj": [9, 131, 168, 185, 186, 187, 197, 198, 199, 205, 206, 209, 217, 221, 222, 223, 239, 240, 256, 263], "check": [9, 35, 52, 53, 96, 121, 140, 171, 187, 197, 217, 222, 252, 263, 302, 307, 344, 347, 349, 350, 352, 354, 355, 357, 363, 366, 381, 397, 398, 400, 405, 411, 413, 443, 444, 446, 472, 474, 480, 485, 488], "whether": [9, 10, 11, 35, 121, 147, 159, 167, 169, 184, 185, 187, 189, 191, 195, 209, 216, 218, 263, 366, 447, 476, 490, 505], "true": [9, 52, 53, 75, 96, 119, 121, 140, 149, 159, 167, 169, 171, 172, 183, 184, 189, 191, 195, 200, 212, 216, 252, 361, 397, 400, 405, 406, 411, 443, 444, 476, 480, 484, 490, 494, 499, 500, 501, 504, 505, 506, 507], "els": [9, 52, 53, 121, 167, 397, 411, 443, 504], "ensure_list": 9, "x": [9, 168, 184, 203, 243, 443, 478, 480, 492, 497, 500, 504, 505], "ensur": [9, 11, 184, 219, 243, 280, 312, 344, 347, 349, 356, 395, 443, 472, 480, 481, 500, 505], "check_mx_vers": 9, "mxnet": [9, 145, 164, 168, 171, 174, 175, 178, 179, 180, 182, 184, 186, 187, 194, 195, 221, 223, 224, 228, 240, 446, 447, 482, 484, 487, 491, 492, 499, 506, 507], "mx": [9, 475], "__version__": 9, "make_nc_model": 9, "target": [9, 34, 80, 81, 96, 115, 150, 200, 217, 220, 328, 329, 443, 444, 475, 476, 478, 480, 491, 497, 504, 505, 507], "sym_model": 9, "ctx": [9, 475], "input_desc": 9, "symbol": [9, 126, 188, 240, 441, 492], "neural": [9, 35, 149, 152, 155, 158, 181, 182, 184, 187, 194, 195, 197, 209, 216, 219, 221, 222, 224, 228, 319, 323, 347, 356, 392, 399, 411, 441, 447, 461, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 498, 500, 502, 504, 505, 506, 507], "compressor": [9, 35, 149, 152, 155, 158, 181, 182, 184, 187, 194, 195, 197, 216, 219, 221, 222, 224, 228, 319, 323, 347, 356, 392, 399, 411, 441, 442, 447, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 497, 498, 500, 502, 504, 505, 506, 507], "tupl": [9, 35, 96, 139, 140, 147, 150, 181, 184, 191, 200, 203, 240, 241, 242, 243, 244, 246, 247, 252, 330, 361, 411, 430, 476, 490, 497, 505], "symnet": 9, "arg": [9, 35, 43, 93, 169, 170, 171, 186, 187, 197, 216, 221, 222, 226, 227, 228, 231, 232, 243, 253, 268, 270, 272, 273, 274, 283, 285, 286, 288, 290, 293, 294, 298, 397, 405, 424, 441, 442, 443, 475, 476, 478, 480, 492, 497, 500, 504, 505], "aux": 9, "descript": [9, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 191, 206], "ncmodel": 9, "suppli": 9, "prepare_model_data": 9, "prepar": [9, 35, 158, 185, 187, 209, 221, 302, 307, 392, 443, 444, 446, 476, 480, 500], "dataloaderwrap": 9, "is_model_quant": 9, "query_quantizable_nod": 9, "node": [9, 11, 34, 37, 40, 43, 44, 45, 46, 52, 53, 54, 57, 58, 60, 64, 76, 89, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 121, 226, 227, 228, 230, 231, 313, 326, 327, 328, 329, 330, 331, 336, 344, 347, 354, 355, 356, 390, 391, 393, 447, 472, 480, 504], "map": [9, 11, 37, 108, 184, 186, 187, 190, 191, 192, 193, 195, 200, 209, 216, 218, 221, 223, 239, 240, 365, 473, 476, 480, 490, 497, 500], "quantize_sym_model": 9, "qconfig": [9, 443, 444, 504], "accord": [9, 139, 145, 169, 170, 171, 180, 182, 184, 187, 220, 221, 231, 241, 242, 243, 244, 246, 247, 252, 410, 442, 447, 476, 480, 497, 501, 505, 506], "run_forward": 9, "b_filter": 9, "collector": 9, "pre_batch": 9, "post_batch": 9, "forward": [9, 150, 443, 444, 499, 500, 504], "propag": 9, "filter": [9, 143, 145, 169, 170, 171, 172, 173, 174, 176, 180, 187, 223, 284, 324, 347, 413, 476, 487, 497, 504, 506], "which": [9, 10, 35, 37, 45, 96, 115, 139, 147, 149, 169, 170, 171, 187, 188, 191, 193, 201, 203, 206, 207, 210, 211, 212, 216, 217, 218, 219, 220, 228, 230, 241, 242, 252, 409, 440, 442, 444, 446, 447, 452, 472, 473, 474, 475, 476, 478, 480, 481, 484, 485, 487, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508], "infer": [9, 11, 108, 115, 186, 187, 221, 223, 228, 240, 443, 444, 446, 447, 471, 475, 478, 485, 491, 494, 497, 498, 500, 504, 506], "collect": [9, 37, 145, 151, 152, 153, 154, 156, 180, 182, 184, 188, 193, 194, 195, 224, 254, 257, 263, 264, 366, 387, 398, 400, 411, 412, 443, 500, 504, 506], "inform": [9, 37, 139, 140, 151, 152, 153, 154, 191, 216, 218, 219, 220, 222, 241, 242, 243, 244, 246, 247, 252, 279, 315, 344, 399, 400, 405, 406, 439, 440, 445, 446, 447, 448, 449, 450, 454, 461, 469, 470, 474, 478, 481, 484, 492, 497, 501, 502, 504, 507, 508], "dure": [9, 37, 52, 200, 203, 216, 220, 222, 230, 406, 444, 491, 492, 494, 495, 497, 500, 504, 507], "prior": [9, 79, 443, 506], "after": [9, 11, 35, 147, 151, 152, 158, 169, 184, 185, 187, 200, 216, 218, 219, 220, 246, 398, 442, 443, 444, 472, 473, 475, 476, 478, 487, 490, 493, 494, 495, 497, 500, 501, 503, 504, 505, 506], "count": [9, 206, 442, 443, 476], "make_symbol_block": 9, "gluon": [9, 240, 492], "symbolblock": 9, "make_modul": 9, "parse_tune_config": 9, "quantizable_nod": 9, "distribute_calib_tensor": 9, "calib_tensor": 9, "calib_cfg": 9, "tensor_to_nod": 9, "distribut": [9, 116, 130, 151, 152, 159, 161, 162, 164, 165, 166, 167, 168, 185, 187, 209, 400, 443, 446, 478, 488, 500, 502, 506], "algorithm": [9, 132, 183, 188, 195, 198, 202, 205, 206, 208, 246, 257, 258, 442, 446, 447, 452, 478, 484, 487, 497, 500, 504, 506, 507], "kl": [9, 254, 257, 258, 484, 506, 507], "minmax": [9, 484, 506, 507], "calib_model": 9, "qsym_model": 9, "calib_data": [9, 475], "gather": [9, 11, 216, 400], "calibdata": 9, "threshold": [9, 11, 128, 191, 216, 254, 257, 258, 490], "calibcollector": 9, "include_tensors_kl": 9, "include_tensors_minmax": 9, "num_bin": [9, 254, 257, 258], "8001": [9, 254, 257], "collectorbas": 9, "tensorcollector": 9, "include_nod": 9, "qtensor_to_tensor": 9, "build": [9, 108, 198, 200, 205, 206, 228, 231, 281, 282, 284, 295, 296, 300, 324, 381, 390, 411, 428, 443, 447, 472, 488, 492, 506], "up": [9, 60, 91, 184, 187, 203, 209, 217, 232, 301, 443, 446, 472, 480, 484, 485, 487, 498, 499, 500, 503, 505, 507], "onnxrtadaptor": 10, "onnx": [10, 11, 34, 165, 226, 227, 231, 253, 266, 366, 447, 482, 484, 487, 491, 492, 498, 499, 500], "rt": 10, "data_load": [10, 37, 443, 444, 447], "todo": [10, 169, 172, 191, 257, 258, 409], "replac": [10, 75, 76, 96, 193, 411, 441, 443, 480, 485, 502], "api": [10, 35, 60, 65, 96, 186, 187, 191, 221, 223, 240, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 427, 428, 439, 444, 448, 450, 454, 469, 470, 475, 485, 487, 493, 502, 503, 506], "input_graph": [10, 107, 108, 112, 115, 116, 265, 370, 374, 379, 386, 447], "eval": [10, 158, 187, 191, 197, 441, 443, 444, 504], "func": [10, 150, 222, 411, 428, 507], "onnxdataload": 10, "evalut": 10, "onnxtransform": 10, "onnxmetr": 10, "max": [10, 11, 34, 37, 116, 130, 184, 192, 193, 243, 421, 443, 471, 472, 500, 505, 506], "evaluaton": 10, "visualizaton": 10, "boolen": [10, 35, 37], "f1": [10, 187, 192, 194, 195, 223, 473, 480, 490, 503, 508], "modelproto": [10, 492], "onnxrt_qlinearopsadaptor": [10, 447], "onnxrt_qoperatoradaptor": 10, "onnxrt_integeropsadaptor": 10, "onnxrt_qdqadaptor": 10, "onnxrtqueri": 10, "infom": [10, 37, 151, 152], "A": [10, 35, 37, 44, 46, 60, 64, 65, 96, 115, 121, 145, 151, 152, 153, 154, 171, 175, 180, 183, 184, 185, 187, 188, 191, 192, 193, 195, 198, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 243, 442, 443, 446, 475, 482, 484, 490, 492, 497, 498, 505, 506, 507], "compos": [10, 35, 37, 115, 184, 475, 505], "dictionari": [10, 11, 35, 37, 57, 58, 60, 132, 133, 136, 183, 191, 198, 200, 203, 205, 206, 208, 223, 283, 285, 286, 288, 290, 293, 294, 298, 302, 303, 305], "kei": [10, 35, 37, 96, 115, 121, 133, 191, 207, 217, 219, 228, 254, 256, 257, 263, 404, 419, 472, 504], "describ": [10, 35, 37, 203, 447, 472, 484, 504], "get_op_types_by_precis": [10, 35, 37], "get_graph_optim": 10, "onnxruntim": [10, 165, 187, 196, 319, 323, 446, 447, 481, 487, 499], "graph": [10, 11, 35, 37, 40, 46, 47, 48, 49, 50, 51, 52, 53, 60, 63, 64, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 90, 91, 94, 95, 96, 108, 115, 116, 119, 120, 121, 168, 186, 223, 226, 227, 228, 230, 231, 270, 272, 336, 344, 347, 355, 356, 358, 368, 369, 370, 375, 376, 390, 391, 393, 412, 415, 427, 447, 476, 478, 480, 486, 490, 492, 500, 501, 504], "optim": [10, 35, 43, 47, 50, 51, 53, 64, 65, 75, 76, 82, 83, 84, 85, 115, 136, 152, 158, 185, 186, 187, 201, 208, 218, 219, 221, 223, 240, 253, 254, 257, 264, 266, 270, 272, 289, 293, 294, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 319, 322, 323, 336, 387, 393, 394, 404, 409, 412, 415, 419, 426, 431, 442, 443, 444, 446, 450, 478, 480, 484, 487, 488, 489, 492, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507], "onnxrtaug": 11, "model_wrapp": 11, "dump_op_typ": 11, "black_nod": 11, "white_nod": 11, "augment": 11, "augment_graph": 11, "activation_onli": 11, "weight_onli": 11, "add": [11, 34, 42, 54, 96, 104, 121, 155, 169, 171, 188, 195, 217, 219, 222, 275, 281, 282, 284, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 313, 329, 411, 436, 443, 452, 472, 474, 476, 480, 484, 485, 490, 493, 494, 503, 504, 506], "quantization_candid": 11, "store": [11, 171, 191, 210, 211, 212, 216, 218, 443, 486], "part": [11, 185, 187, 191, 216, 218, 441, 475, 478, 485, 488, 491, 497], "param": [11, 34, 35, 36, 37, 51, 57, 58, 60, 80, 81, 96, 115, 121, 149, 155, 159, 191, 194, 195, 224, 263, 283, 314, 411, 414, 443, 447, 492, 506], "get_intermediate_output": 11, "calib_mod": 11, "intermedi": [11, 34, 150, 487, 497, 500], "dump_calibr": 11, "naiv": 11, "give": [11, 475, 506], "min": [11, 37, 116, 130, 443, 471, 472, 500, 505], "pair": [11, 93, 491], "across": [11, 186, 187, 196, 221, 223, 240, 446, 477, 497], "test": [11, 184, 200, 441, 446, 472, 474, 488, 508], "first": [11, 37, 83, 116, 130, 133, 169, 183, 185, 187, 191, 324, 442, 443, 444, 447, 472, 476, 485, 488, 491, 499, 500, 501, 503, 504, 506, 507], "element": [11, 167, 191, 216, 219, 443, 476, 487, 490, 497], "minimum": [11, 34, 506], "second": [11, 54, 169, 324, 404, 472, 481, 494, 506, 507], "maximum": [11, 34, 44, 169, 184, 189, 216, 218, 243, 476, 500, 505], "ad": [11, 169, 188, 243, 281, 282, 284, 291, 292, 293, 294, 295, 299, 300, 472, 485, 491, 504], "reducemin": 11, "reducemax": 11, "calculate_quantization_param": 11, "quantization_threshold": 11, "calcul": [11, 37, 150, 172, 173, 192, 193, 203, 213, 216, 218, 219, 232, 246, 254, 257, 315, 404, 409, 476, 490, 494, 497, 500, 503, 506, 507], "matmul": [11, 36, 42, 55, 75, 76, 85, 104, 216, 484], "follow": [11, 60, 76, 79, 82, 83, 84, 85, 96, 171, 187, 188, 191, 209, 440, 442, 443, 444, 447, 449, 471, 472, 473, 474, 476, 478, 481, 484, 485, 488, 489, 490, 492, 493, 495, 497, 499, 500, 504, 506], "param_nam": [11, 275], "exampl": [11, 169, 170, 171, 181, 183, 184, 191, 192, 193, 195, 201, 219, 253, 289, 306, 312, 336, 360, 361, 362, 363, 405, 411, 439, 440, 441, 446, 472, 474, 476, 481, 486, 487, 493, 501, 502, 505, 506], "conv_3": 11, "np": [11, 96, 115, 184, 243, 480, 505], "float32": [11, 172, 173, 184, 191, 409, 447, 473, 476, 500, 505], "5": [11, 147, 150, 173, 191, 195, 443, 447, 476, 484, 490, 496, 499, 505, 507, 508], "conv_4": 11, "3": [11, 36, 37, 60, 121, 145, 171, 175, 180, 182, 184, 191, 203, 402, 443, 444, 446, 476, 478, 480, 484, 485, 490, 491, 494, 497, 499, 500, 505, 506, 508], "zero": [11, 34, 184, 195, 216, 218, 219, 444, 471, 497, 505, 506], "point": [11, 34, 181, 192, 193, 207, 232, 243, 443, 444, 471, 481, 490, 500, 505, 506], "zero_point": [11, 34, 230, 443], "calculate_scale_zeropoint": 11, "last_nod": 11, "next_nod": 11, "rmin": [11, 34, 471], "rmax": [11, 34, 471], "op_registri": 28, "op_typ": [28, 246], "class": [28, 207, 238, 338, 339, 441, 442, 443, 473, 475, 476, 478, 481, 485, 490, 494, 495, 504, 506, 507], "quanttyp": 34, "cast_tensor": 34, "dtype": [34, 96, 115, 172, 173, 181, 184, 443, 475, 476, 484, 499, 504, 505, 506, 507], "tensorproto": 34, "tensor_target_dtyp": 34, "quantize_data_with_scale_zero": 34, "qtype": [34, 447], "uint8": [34, 181, 191, 257, 258, 447, 471, 476, 484, 499, 500, 505, 506, 507], "sym": [34, 484, 506, 507], "asym": [34, 484, 506, 507], "comput": [34, 52, 158, 185, 187, 188, 189, 191, 192, 193, 195, 201, 443, 444, 452, 479, 490, 491, 497, 500, 506], "To": [34, 191, 212, 216, 220, 402, 472, 474, 480, 491, 499, 501, 502, 507], "pack": [34, 51], "linear": [34, 216, 443, 478], "when": [34, 43, 54, 60, 121, 145, 169, 170, 178, 179, 180, 184, 188, 189, 201, 216, 217, 218, 409, 411, 424, 428, 440, 442, 444, 452, 472, 474, 475, 476, 481, 485, 497, 500, 505, 506], "2": [34, 36, 37, 43, 64, 128, 149, 170, 191, 193, 195, 203, 212, 213, 218, 241, 242, 443, 444, 446, 447, 449, 471, 476, 478, 480, 484, 485, 487, 489, 490, 491, 494, 495, 496, 497, 500, 502, 505, 506], "b": [34, 60, 64, 169, 476, 490], "m": [34, 60, 216, 443, 478, 485, 508], "ab": [34, 218, 471, 500], "quantize_data": 34, "quantize_rang": 34, "necessari": [34, 185, 187, 440, 442, 474, 492, 503, 506], "trasnform": 34, "full": [34, 149, 169, 170, 171, 187, 446, 472, 476, 483, 488, 489], "equat": [34, 193, 195, 500], "r": [34, 60, 116, 130, 203, 446, 472, 488, 496, 500, 508], "q": [34, 93], "z": [34, 478], "real": [34, 151, 152, 172, 480, 498, 500], "origin": [34, 126, 149, 169, 184, 187, 200, 216, 217, 218, 219, 266, 443, 476, 485, 497, 500, 505, 507], "quantizedvalu": 34, "new_quantized_nam": 34, "scale_nam": 34, "zero_point_nam": 34, "quantized_value_typ": 34, "axi": 34, "quint8": 34, "repres": [34, 171, 176, 191, 193, 195, 283, 285, 286, 288, 290, 293, 294, 297, 298, 409, 440, 474, 476, 500, 506], "linearli": 34, "inputoutputinti": 34, "quantizediniti": 34, "initi": [34, 121, 139, 140, 150, 158, 166, 169, 185, 187, 198, 199, 205, 206, 217, 218, 222, 230, 241, 242, 243, 244, 246, 247, 252, 280, 302, 303, 312, 361, 390, 392, 400, 412, 442, 443, 475, 476, 485, 490, 491, 497, 506], "quantized_data": 34, "oper": [34, 96, 121, 147, 216, 423, 427, 441, 443, 472, 494, 500, 505, 506], "quantizationmod": 34, "quantizedvaluetyp": 34, "quantformat": 34, "attribute_to_kwarg": 34, "attribut": [34, 52, 96, 115, 126, 132, 133, 158, 221, 331, 332, 336, 393, 409, 447, 484, 486, 491, 499, 507], "kwarg": [34, 35, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 152, 153, 156, 171, 184, 186, 187, 197, 219, 221, 222, 226, 227, 228, 230, 231, 240, 253, 262, 263, 268, 270, 272, 273, 274, 283, 285, 286, 288, 290, 293, 294, 298, 442], "helper": [34, 35, 126, 169, 170, 171, 183, 406], "make_nod": 34, "find_by_nam": 34, "item_list": 34, "find": [34, 57, 58, 60, 121, 195, 206, 207, 230, 243, 263, 361, 427, 442, 446, 447, 472, 497, 503, 504, 506], "item": [34, 133, 183, 217, 313, 398, 430, 480, 503], "get_ops_recurs": 35, "prefix": [35, 121, 149, 187, 188, 424, 485, 504], "graph_info": [35, 37, 226, 227, 228, 230, 231], "templateadaptor": 35, "tampl": 35, "yaml": [35, 36, 37, 131, 132, 133, 139, 140, 149, 158, 169, 171, 185, 186, 187, 197, 198, 199, 205, 206, 209, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 264, 268, 269, 270, 271, 272, 274, 276, 277, 359, 361, 368, 373, 377, 380, 422, 441, 444, 447, 476, 478, 481, 485, 486, 490, 493, 494, 497, 499, 504, 505, 506], "file": [35, 115, 121, 131, 132, 139, 140, 157, 169, 170, 171, 174, 183, 184, 185, 186, 187, 191, 197, 198, 199, 200, 201, 203, 205, 206, 209, 217, 219, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 262, 263, 268, 269, 270, 271, 272, 273, 274, 324, 361, 370, 374, 381, 397, 404, 405, 410, 411, 412, 424, 428, 432, 434, 436, 437, 442, 447, 472, 476, 480, 483, 485, 486, 489, 490, 492, 494, 497, 499, 504, 505, 506], "is_fused_modul": 35, "_propagate_qconfig_help": 35, "detect": [35, 191, 195, 228, 344, 347, 356, 411, 441, 472], "pytorchadaptor": 35, "objext": 35, "number": [35, 57, 58, 159, 167, 170, 181, 184, 192, 193, 195, 202, 206, 216, 243, 257, 258, 347, 400, 409, 412, 443, 444, 472, 476, 480, 481, 490, 497, 500, 503, 505, 506], "summari": [35, 88, 89, 149, 187, 472, 474, 496, 504], "accuraci": [35, 131, 139, 140, 149, 185, 186, 187, 195, 199, 200, 201, 203, 205, 209, 221, 223, 232, 239, 240, 241, 242, 243, 244, 246, 247, 252, 268, 282, 292, 301, 307, 309, 380, 404, 409, 412, 414, 430, 442, 443, 444, 446, 472, 473, 475, 479, 480, 481, 485, 490, 491, 493, 494, 495, 497, 498, 499, 502, 503, 504, 506, 507, 508], "optimizer_tupl": 35, "criterion_tupl": 35, "hook": [35, 139, 150, 157, 158, 185, 187, 209, 241, 252, 256, 444, 478, 497, 504], "It": [35, 43, 52, 139, 140, 157, 187, 193, 195, 200, 201, 207, 216, 221, 222, 240, 241, 242, 243, 244, 246, 247, 252, 443, 446, 447, 472, 473, 478, 485, 497, 500, 503, 506, 507], "criterion": [35, 136, 152, 155, 185, 187, 223, 380, 419, 443, 444, 450, 478, 485, 497, 500, 506, 507], "other": [35, 57, 58, 60, 115, 168, 193, 222, 228, 402, 406, 428, 440, 441, 472, 474, 481, 484, 485, 487, 489, 492, 494, 496, 497, 500, 505, 506, 508], "is_fused_child": 35, "op_nam": [35, 246, 315, 320, 321, 329, 330, 504], "_post_eval_hook": [35, 504], "is_fused_op": 35, "is_last_fused_child": 35, "last": [35, 37, 83, 139, 159, 216, 241, 242, 243, 244, 246, 247, 252, 381, 443, 472, 491, 500, 506], "q_capabl": 35, "get_non_quant_modul": 35, "model_kwarg": 35, "non_quant_modul": 35, "custom": [35, 200, 222, 262, 302, 307, 478, 497, 503], "keyword": 35, "custom_non_quant_dict": 35, "pytorch_ipexadaptor": 35, "intel": [35, 152, 155, 187, 194, 195, 216, 219, 224, 392, 405, 440, 442, 445, 447, 474, 477, 478, 479, 482, 484, 485, 488, 489, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 506, 507], "extens": [35, 222, 350, 411, 442, 447, 484, 487, 491, 492, 498, 506, 507], "ipex": [35, 487, 500, 508], "unspport": 35, "best": [35, 184, 185, 186, 187, 198, 199, 205, 206, 221, 223, 240, 440, 442, 444, 446, 474, 488, 494, 500, 505, 506], "No": [35, 483, 496, 498], "pytorch_fxadaptor": 35, "fx": [35, 126, 240, 487, 498, 500, 501, 508], "static": [35, 96, 115, 200, 222, 240, 275, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 344, 347, 349, 350, 352, 354, 355, 356, 357, 367, 381, 383, 388, 390, 395, 397, 402, 404, 409, 410, 412, 424, 428, 435, 436, 443, 444, 447, 487, 506, 508], "prepare_sub_graph": 35, "sub_module_list": 35, "fx_op_cfg": 35, "is_qat": 35, "example_input": 35, "method": [35, 96, 115, 116, 126, 145, 151, 152, 162, 167, 168, 169, 171, 175, 178, 179, 180, 182, 184, 194, 195, 200, 203, 206, 207, 208, 212, 224, 226, 227, 228, 230, 231, 397, 402, 406, 423, 441, 442, 443, 444, 446, 473, 475, 478, 479, 481, 490, 495, 497, 500, 501, 505, 506], "sub": [35, 42, 43, 44, 45, 48, 49, 54, 55, 56, 59, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 149, 187, 203, 442, 473], "recurs": [35, 263], "traceabl": [35, 441], "qconfigmap": 35, "prepare_fx": 35, "dir": [35, 126, 169, 262, 476, 483, 486], "qat": [35, 187, 197, 444, 479, 480, 487, 493, 500], "convert_sub_graph": 35, "fuse_fx_model": 35, "approach": [35, 132, 187, 198, 199, 200, 205, 206, 279, 412, 419, 441, 442, 446, 478, 481, 487, 498, 499, 506, 507], "graphmodul": [35, 126, 441, 501], "torch": [35, 126, 150, 195, 203, 231, 240, 441, 443, 444, 480, 491, 492, 497, 500, 504], "fused_model": 35, "pytorchqueri": 35, "set_quantization_config": 36, "organ": [36, 472, 507], "unsupported_precis": 36, "tensorflowadaptor": 37, "graphdef": [37, 46, 47, 50, 51, 53, 60, 64, 75, 76, 82, 83, 84, 85, 96, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114, 115, 121, 228, 390, 492], "could": [37, 139, 140, 171, 222, 240, 241, 242, 243, 244, 246, 247, 252, 440, 474, 479, 485, 493, 495, 497, 500, 506], "graph_def": [37, 43, 121, 228, 240, 358, 390, 391], "frozen": [37, 46, 228, 240, 352, 355, 472, 492], "pb": [37, 228, 240, 352, 355, 366, 446, 480, 485, 492, 504, 508], "ckpt": [37, 121, 228, 240, 508], "savedmodel": [37, 228, 240, 508], "folder": [37, 121, 171, 176, 240, 262, 476, 504], "larger": 37, "better": [37, 87, 139, 140, 207, 240, 241, 242, 243, 244, 246, 247, 252, 444, 479, 490, 491, 497, 498, 500, 503, 506], "tuning_cfg_to_fw": 37, "tuning_cfg": 37, "pars": [37, 115, 169, 170, 181, 184, 265, 275, 301, 302, 304, 307, 308, 309, 310, 313, 366, 370, 374, 379, 385, 404, 411, 419, 430, 505], "wrap": [37, 150, 191, 275, 441, 480], "tf": [37, 121, 168, 169, 170, 171, 184, 228, 266, 443, 446, 472, 480, 492, 501, 505], "compat": [37, 71, 121, 191, 200, 228, 480, 492, 502], "enabl": [37, 218, 400, 443, 446, 472, 480, 485, 491, 496, 497, 498, 501], "wise": [37, 116, 130, 216, 243, 304, 307, 411, 472, 475, 487, 497, 504, 506, 507], "definit": [37, 96, 162, 167, 329, 342, 351, 397, 427], "inspect_weight_and_bia": 37, "node_list": 37, "graph_node_name_map": [37, 121], "fused_node_map": 37, "pattern_map": 37, "between": [37, 116, 130, 150, 184, 192, 194, 195, 200, 202, 203, 224, 246, 315, 423, 427, 441, 443, 447, 473, 478, 485, 487, 490, 500, 502, 503, 505, 506], "sequenc": [37, 53, 169, 183, 184, 188, 189, 193, 216, 447, 452, 476, 484, 505], "val": [37, 121, 143, 171, 217, 443, 494], "detail": [37, 184, 281, 284, 291, 292, 295, 297, 299, 301, 302, 304, 307, 308, 309, 310, 311, 315, 320, 380, 385, 399, 440, 446, 474, 484, 486, 490, 491, 497, 502, 503, 504, 506, 508], "seq": 37, "fused_mapping_revers": 37, "fused_map": 37, "inspect_activ": 37, "local": [37, 216, 263, 277, 307, 312, 325, 345, 472, 503], "correspond": [37, 169, 188, 191, 195, 216, 218, 222, 243, 447, 452, 484, 497, 499, 500, 503, 506], "actual": [37, 195, 444, 480], "bia": [37, 115, 116, 443, 504], "4": [37, 43, 145, 178, 179, 180, 182, 184, 188, 189, 191, 402, 440, 443, 446, 447, 452, 473, 474, 475, 483, 484, 487, 488, 490, 496, 497, 505, 506, 508], "tensorflowbasemodel": [37, 228, 356], "start": [37, 184, 188, 191, 202, 232, 405, 424, 443, 488, 504, 505], "remov": [37, 52, 64, 75, 87, 89, 96, 108, 115, 150, 193, 281, 284, 291, 292, 295, 297, 299, 301, 347, 405, 406, 412, 440, 443, 473, 474, 485, 497, 504], "quantizedv2": 37, "move": [37, 441, 499, 502], "its": [37, 87, 96, 165, 171, 183, 184, 189, 190, 194, 195, 218, 222, 224, 243, 440, 442, 472, 474, 475, 478, 489, 490, 491, 496, 497, 503, 505, 506], "quantizedconv2d": [37, 443], "get_optype_wise_": 37, "union": [37, 189, 191, 195, 253, 275, 277, 292, 313, 351, 397, 400, 402, 404, 405, 411, 414, 415, 417, 419, 423, 490], "while": [37, 218, 243, 444, 446, 447, 472, 475, 485, 487, 491, 499, 500], "tensorflow_itexadaptor": 37, "tensorflowqueri": [37, 447], "performance_onli": [37, 93, 107, 112, 120, 421, 506], "mix": [37, 241, 372, 373, 374, 417, 446, 447, 487], "get_eightbit_pattern": 37, "qdq_enabl": 37, "eightbit": [37, 504], "same": [37, 46, 121, 169, 184, 191, 209, 263, 443, 447, 473, 475, 476, 478, 480, 484, 496, 499, 500, 504, 505, 506], "generate_internal_pattern": 37, "translat": [37, 188, 189, 200, 203, 452], "intern": [37, 96, 396, 475], "express": [37, 188, 440, 474], "bf16convert": [40, 501], "fp32_op": [40, 93], "bf16_op": [40, 93, 501], "graph_bas": [40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95], "graphrewriterbas": [40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95], "do_transform": [40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 100, 107, 108, 112, 116, 119, 120], "convertaddtobiasaddoptim": 42, "addv2": [42, 59, 60, 484], "biasadd": [42, 54, 56, 104, 111, 484], "convertlayoutoptim": 43, "layout": 43, "nchw": 43, "nhwc": 43, "tensorflow": [43, 65, 67, 71, 96, 121, 145, 150, 155, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 182, 184, 186, 187, 189, 191, 194, 195, 196, 197, 221, 223, 224, 228, 240, 322, 323, 335, 336, 343, 389, 390, 391, 393, 443, 446, 447, 472, 478, 480, 482, 484, 485, 487, 488, 489, 491, 492, 493, 497, 498, 499, 500, 503, 506, 507], "abov": [43, 191, 447, 473, 485, 497], "convertleakyreluoptim": 44, "below": [44, 56, 64, 222, 241, 242, 441, 442, 444, 447, 471, 474, 478, 480, 485, 486, 490, 494, 495, 497, 499, 500, 504, 506], "subgraph": [44, 52, 56, 60], "leakyrelu": 44, "mul": [44, 55, 56, 59, 60, 104], "coeffici": [44, 201], "less": [44, 478, 497], "than": [44, 52, 169, 184, 191, 442, 443, 444, 476, 486, 490, 494, 495, 497, 500, 503, 505], "convers": [44, 71, 187, 197, 446, 447, 491, 500, 501], "convertnantorandom": 45, "const": [45, 53, 54, 57, 58, 60, 75, 76, 89, 96, 223, 281, 292, 295, 301, 307, 309, 310, 314, 393, 401, 410], "consist": [45, 53, 441, 472, 474, 506], "nan": 45, "random": [45, 115, 121, 147, 184, 200, 208, 243, 421, 442, 481, 499, 505, 507], "convertplaceholdertoconst": 46, "rewrit": [46, 47, 48, 49, 50, 51, 52, 53, 63, 68, 70, 71, 72, 73, 74, 77, 80, 81, 90, 91, 94, 95], "renam": [46, 71, 502], "placeholderwithdefault": 46, "constant": [46, 52, 96, 115, 243, 394, 475, 484, 505], "can": [46, 116, 130, 131, 139, 140, 149, 151, 152, 168, 171, 184, 187, 191, 193, 195, 216, 218, 219, 220, 223, 232, 240, 241, 242, 243, 244, 246, 247, 252, 366, 395, 402, 411, 441, 442, 443, 444, 446, 447, 472, 473, 475, 476, 478, 480, 481, 484, 485, 487, 488, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507], "help": [46, 157, 197, 230, 279, 411, 443, 446, 475, 492, 506], "simplifi": 46, "input_graph_def": [46, 47, 50, 51, 53, 60, 64, 75, 76, 96, 115], "nodes_to_convert": 46, "placehold": [46, 167], "modifi": [46, 52, 60, 71, 171, 219, 391, 441, 472, 473, 480, 484, 507], "strtobool": 46, "val_str": 46, "equival": [46, 200], "represent": [46, 200, 281, 282, 284, 287, 291, 292, 295, 296, 299, 300, 422, 440, 474, 479, 494, 500], "dequantizecastoptim": 47, "dilatedcontract": 48, "injectdummybiasaddoptim": 49, "expanddimsoptim": 50, "handl": [50, 52, 121, 200, 201, 202, 402, 427, 428, 441, 445, 475], "expanddim": 50, "whose": [50, 75, 76, 217, 486, 497, 506], "fetchweightfromreshapeoptim": 51, "fetch": [51, 162, 191, 475], "reshap": [51, 60, 212], "foldbatchnormnodesoptim": 52, "scale_after_norm": 52, "batchnormwithglobalnorm": 52, "nodedef": [52, 57, 58, 60, 96, 115, 390], "normal": [52, 60, 184, 193, 411, 473, 475, 494, 505], "fold": [52, 53, 484], "them": [52, 96, 169, 441, 475, 484, 486, 495, 497, 506], "convolut": [52, 478, 497, 498], "multipl": [52, 155, 160, 161, 163, 169, 170, 172, 173, 174, 175, 176, 180, 182, 184, 196, 218, 241, 242, 397, 443, 476, 495, 503, 506], "dynam": [52, 159, 222, 271, 444, 447, 475, 478, 487, 498, 508], "onc": [52, 96, 121, 155, 220, 472, 475, 498], "final": [52, 218, 246, 404, 444, 494, 497, 500, 502, 506], "becom": [52, 447], "That": [52, 472, 475], "mean": [52, 60, 147, 159, 184, 191, 193, 195, 201, 203, 216, 232, 443, 444, 473, 475, 480, 481, 484, 490, 497, 500, 505, 506, 507], "opportun": 52, "reduc": [52, 212, 443, 447, 475, 479, 491, 498, 500, 501, 506, 507], "down": [52, 443], "addit": [52, 60, 126, 139, 253, 397, 443, 472, 478, 485, 502], "rather": [52, 486], "more": [52, 115, 121, 139, 184, 191, 216, 241, 252, 442, 443, 444, 445, 446, 472, 476, 478, 480, 485, 487, 488, 490, 491, 494, 495, 497, 501, 506, 508], "expens": [52, 478, 506], "bake": 52, "identifi": [52, 57, 58, 60, 191, 228], "typic": [52, 187, 197, 222, 442, 479, 497], "perform": [52, 87, 131, 149, 169, 183, 186, 187, 198, 199, 201, 203, 205, 206, 209, 221, 223, 232, 239, 240, 268, 282, 292, 301, 307, 309, 395, 404, 412, 414, 421, 430, 442, 444, 446, 447, 472, 473, 475, 477, 479, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 506, 507, 508], "simpler": 52, "form": [52, 60, 71, 191, 193, 405, 472, 478], "spot": 52, "fusedbatchnorm": [52, 71], "fusedbatchnormv3": 52, "_fusedbatchnormex": 52, "extend": [52, 443], "futur": [52, 139, 140, 151, 152, 242, 243, 244, 246, 247, 252, 446, 487, 491, 493], "newer": 52, "style": [52, 162, 176, 474, 476, 486], "rais": [52, 57, 58, 60, 71, 96, 150, 188, 191, 194, 195, 216, 217, 218, 224, 243, 411, 424, 443, 452, 497], "valueerror": [52, 57, 58, 60, 71, 96, 188, 191, 195, 443, 452, 483], "If": [52, 57, 58, 60, 64, 71, 96, 139, 140, 171, 184, 191, 203, 216, 217, 218, 240, 241, 242, 243, 244, 246, 247, 252, 441, 472, 474, 476, 480, 485, 488, 489, 490, 491, 494, 495, 500, 503, 504, 505, 506], "badli": [52, 60, 71], "duplic": [52, 60, 89, 243], "graphfoldconstantoptim": 53, "check_all_fold": 53, "been": [53, 183, 188, 202, 216, 218, 442, 452, 472, 478, 485, 491], "complet": [53, 447, 472, 506, 507, 508], "check_const_input": 53, "node_nam": [53, 57, 58, 60, 96, 115, 121, 228, 230, 296, 390], "self": [53, 83, 187, 191, 209, 218, 243, 424, 442, 443, 447, 472, 476, 487, 490, 494, 503, 504, 506], "supported_op_typ": 53, "fusebiasaddandaddoptim": 54, "fusecolumnwisemuloptim": 55, "depthwiseconv2dn": [55, 484], "fuseconvwithmathoptim": 56, "elimin": [56, 485], "math": [56, 500], "realdiv": [56, 59], "node_name_from_input": [57, 58, 60, 96, 115], "strip": [57, 58, 60, 121, 504], "off": [57, 58, 60, 443, 501], "port": [57, 58, 60, 115, 424, 428, 472], "underli": [57, 58, 60, 201], "node_from_map": [57, 58, 60], "node_map": [57, 58, 60], "pull": [57, 58, 60, 405], "def": [57, 58, 60, 108, 139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 441, 442, 443, 444, 447, 476, 478, 480, 490, 494, 497, 500, 504, 506], "entri": [57, 58, 60, 155, 186, 222, 321, 324, 404, 411, 489], "index": [57, 58, 60, 145, 149, 162, 167, 171, 175, 180, 187, 207, 232, 263, 428, 475, 490], "want": [57, 58, 60, 96, 167, 169, 218, 253, 441, 447, 472, 473, 476, 480, 490, 494, 495, 503, 504, 506], "isn": [57, 58, 60, 96], "present": [57, 58, 60, 472, 498], "values_from_const": [57, 58, 60, 96], "node_def": [57, 58, 60, 96], "extract": [57, 58, 60, 96, 171, 430, 476], "ndarrai": [57, 58, 60, 96, 184, 200, 202, 231, 243, 254, 257, 483, 505], "access": [57, 58, 60, 96, 132, 133, 396, 411, 424, 428, 472], "get_const_dim_count": [57, 58], "dimens": [57, 58, 161, 184, 203, 213, 243, 476, 478, 497, 505], "fusegeluoptim": 59, "sqrt": 59, "erf": 59, "gelu": 59, "fuselayernormoptim": 60, "remap": 60, "smaller": [60, 184, 478, 497, 505], "layernorm": 60, "case": [60, 64, 149, 168, 183, 184, 186, 187, 195, 209, 221, 222, 223, 239, 240, 402, 406, 411, 472, 473, 475, 478, 480, 484, 486, 490, 494, 497, 498, 500, 505, 507], "fusedbatcnormv3": 60, "And": [60, 158, 187], "further": [60, 440, 474, 491, 492], "restrict": [60, 497, 503], "2d": 60, "3d": [60, 498, 508], "kera": [60, 155, 228, 336, 343, 353, 480, 492], "search": [60, 132, 139, 140, 186, 187, 188, 198, 199, 200, 202, 203, 205, 206, 207, 208, 221, 223, 240, 243, 244, 247, 302, 303, 330, 446, 452, 461, 487, 490, 498, 504, 506], "contraint": 60, "ani": [60, 115, 185, 187, 191, 193, 265, 266, 268, 270, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 291, 292, 293, 294, 295, 296, 300, 302, 303, 313, 315, 320, 321, 324, 326, 332, 341, 344, 347, 351, 354, 355, 356, 358, 361, 363, 366, 370, 374, 376, 379, 382, 385, 390, 391, 397, 398, 400, 402, 404, 405, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 427, 428, 435, 436, 440, 441, 472, 474, 475, 480], "fusedop": 60, "fill": [60, 283, 285, 286, 288, 290, 293, 294, 298, 472, 503, 505], "gamma": 60, "beta": 60, "f": [60, 443, 478, 480, 500], "u": [60, 116, 130, 443], "d": [60, 64, 200, 443, 444, 478, 486], "c": [60, 64, 171, 443, 472, 476, 483, 488], "h": [60, 184, 480, 505], "n": [60, 170, 184, 189, 216, 400, 443, 476, 478, 497, 505], "o": [60, 324, 443, 446, 474, 496], "v": [60, 443, 485, 507], "_mkllayernorm": 60, "individu": [60, 199, 200, 205, 216, 440, 442, 474], "made": [60, 201, 203, 444, 447, 500, 502], "fusepadwithconv2doptim": 61, "excluded_op_nam": [61, 62], "cfg": [61, 62, 132], "new_api": [61, 62, 67, 83, 90, 107, 112, 116], "itex_qdq_mod": [61, 62], "pad": [61, 62, 169, 184, 443, 476, 505], "fusepadwithfp32conv2doptim": 62, "fusetransposereshapeoptim": 63, "graphcseoptim": 64, "introduc": [64, 447, 484, 497, 500, 502], "cse": 64, "ident": [64, 70, 96, 115, 216, 440, 443, 474, 478, 485], "three": [64, 169, 219, 447, 472, 475, 485, 488, 491, 495, 500, 501, 503, 504, 506], "those": [64, 246, 263, 478, 485, 486, 495, 497, 500, 506], "child": [64, 504], "b1": 64, "c1c2": 64, "d1": [64, 263], "c1": 64, "c2": 64, "have": [64, 96, 121, 151, 152, 167, 183, 188, 191, 195, 202, 216, 218, 440, 443, 452, 472, 474, 475, 480, 484, 489, 490, 491, 494, 497, 500], "bound": [64, 149, 184, 187, 191, 200, 243, 490, 505], "relu6": [64, 443, 484], "multi": [64, 149, 187, 191, 202, 275, 442, 475, 476, 487, 494, 497], "elim": 64, "grappleroptim": 65, "input_output_nam": 65, "opt_cfg": 65, "python": [65, 121, 152, 171, 187, 191, 263, 363, 441, 449, 472, 474, 476, 480, 488, 498, 501, 505], "wrapper": [65, 145, 150, 151, 152, 153, 154, 168, 180, 182, 184, 191, 195, 428, 436, 501], "leverag": [65, 442, 478, 485, 495, 500], "built": [65, 152, 153, 155, 160, 163, 165, 169, 170, 175, 177, 179, 180, 181, 182, 184, 222, 442, 447, 473, 480, 494, 505, 506, 507], "grappler": [65, 484], "insertprintminmaxnod": 67, "pre_node_nam": 67, "post_node_nam": 67, "pass": [67, 71, 121, 183, 219, 222, 263, 358, 410, 423, 424, 441, 443, 444, 447, 473, 475, 476, 478, 480, 486, 490, 494, 497, 499, 500, 501, 506, 507], "sampl": [67, 93, 145, 159, 162, 167, 169, 170, 171, 175, 180, 184, 194, 195, 207, 224, 243, 292, 347, 412, 442, 446, 475, 476, 487, 500, 505, 506, 507, 508], "movesqueezeafterreluoptim": 68, "removetrainingnodesoptim": 70, "protected_nod": [70, 115], "types_to_splic": [70, 115], "checknumer": [70, 115], "stopgradi": 70, "renamebatchnormoptim": 71, "fusedbatchnormv2": 71, "due": [71, 497, 500, 504], "histor": 71, "reason": [71, 151, 152, 440, 474, 475, 504, 506], "As": [71, 191, 441, 472, 475, 478, 481, 497, 506], "latter": 71, "former": 71, "chang": [71, 87, 116, 130, 218, 220, 263, 277, 282, 381, 403, 409, 443, 474, 475, 480, 483, 490, 504, 505, 506], "platform": [71, 400, 485, 487, 498, 500, 503, 508], "vnni_bf16": 71, "amx": 71, "instruct": [71, 472, 478, 488, 491, 498, 499, 500], "splitsharedinputoptim": 72, "stripequivalentnodesoptim": 73, "output_node_nam": [73, 74, 107, 108, 112, 115, 121], "stripunusednodesoptim": 74, "input_node_nam": [74, 107, 112, 115, 121], "switchoptim": 75, "switch": [75, 444, 504], "condit": [75, 169, 170, 171, 184, 476, 489, 505, 506], "enter": [75, 76], "updateenteroptim": 76, "workaround": 76, "exclud": [76, 447], "freezefakequantopoptim": 79, "freez": [79, 444, 497], "fake_qu": [79, 93, 107, 112], "dequant": [79, 82, 84, 85, 87, 104, 246, 315, 441, 443, 504], "freezevaluetransform": 80, "max_min_data": [80, 81], "postfix": [80, 81], "tensor_data": 80, "th": [80, 81], "devic": [80, 81, 82, 83, 84, 85, 88, 93, 96, 107, 112, 115, 120, 150, 203, 444, 478, 497, 499], "gpu": [80, 81, 93, 96, 115, 487, 497, 499, 500], "itex_mod": [80, 93, 107, 112], "generate_output_graph": [80, 81], "max_name_valu": [80, 81], "freeze_max": [80, 81], "freeze_min": [80, 81], "generate_output_graph_rang": [80, 81], "freezevaluewithoutcalibtransform": 81, "95": [81, 191, 195, 490, 508], "fuseconvredundantdequantizetransform": 82, "cpu": [82, 83, 84, 85, 93, 96, 115, 203, 443, 444, 474, 487, 491, 496, 498, 499, 501, 504], "_quantizedconv": 82, "_quantizeddeconv": 82, "successor": [82, 83, 84, 85], "fuseconvrequantizetransform": 83, "requant": [83, 85, 504], "two": [83, 96, 145, 149, 171, 175, 176, 180, 191, 216, 220, 222, 263, 441, 442, 472, 473, 476, 478, 480, 484, 485, 490, 491, 495, 497, 500, 501, 503, 506, 507], "stage": [83, 405, 478, 504], "fuse_pattern": 83, "sum_pattern": 83, "fusematmulredundantdequantizetransform": 84, "_quantizedmatmul": [84, 85], "fusematmulrequantizedequantizetransform": 85, "quantizedmatmul": 85, "quantizedmatmulwithbiasanddequant": 85, "fusematmulrequantizetransform": 85, "rtype": [85, 243, 406], "fusematmulrequantizedequantizenewapitransform": 85, "fusematmulrequantizenewapitransform": 85, "newapi": 85, "metainfochangingmemopoptim": 87, "metaop": 87, "With": [87, 441, 444, 447, 475, 494, 497, 498, 500, 508], "posthostconstconvert": 88, "hostconst": 88, "postcseoptim": 89, "share": [89, 115, 483, 484, 506], "quantizev2": [89, 104], "decreas": [89, 443], "size": [89, 145, 147, 159, 161, 162, 168, 171, 175, 177, 180, 184, 191, 200, 203, 216, 230, 263, 281, 291, 292, 409, 411, 412, 440, 443, 472, 473, 474, 475, 476, 480, 483, 485, 494, 497, 505, 506, 507, 508], "quantizedrnnconvert": 90, "calibration_data": [90, 93], "rnn_detail": 90, "scalepropagationtransform": 91, "direct": [91, 216, 365], "generategraphwithqdqpattern": 93, "op_wise_config": [93, 107, 112], "quantized_nod": 93, "insert": [93, 96, 108, 119, 441, 443, 487, 500, 501, 504], "dq": 93, "befor": [93, 158, 169, 185, 187, 209, 216, 218, 219, 220, 246, 301, 472, 474, 475, 476, 478, 480, 483, 484, 485, 494, 497, 500, 503, 504, 506], "mergeduplicatedqdqoptim": 94, "shareqdqforitexypatternoptim": 95, "graphanalyz": 96, "extend_engin": 96, "analyz": [96, 115, 228, 444, 497, 503, 504], "under": [96, 171, 262, 442, 443, 472, 476, 485, 489, 490, 495, 497, 500, 504, 506], "singleton": [96, 223, 393, 401], "provid": [96, 139, 140, 145, 158, 180, 182, 184, 186, 187, 191, 200, 209, 221, 222, 223, 239, 240, 241, 242, 243, 244, 246, 247, 252, 324, 344, 350, 397, 406, 430, 442, 447, 471, 472, 473, 474, 475, 479, 480, 481, 482, 487, 488, 491, 492, 499, 500, 504, 507, 508], "properti": [96, 149, 150, 158, 159, 161, 169, 171, 185, 186, 187, 194, 195, 196, 197, 206, 209, 221, 222, 224, 226, 227, 228, 230, 231, 264, 280, 312, 319, 323, 328, 329, 332, 344, 347, 352, 356, 365, 368, 373, 377, 380, 387, 397, 404, 405, 406, 409, 414, 418, 421, 423, 424, 489, 496], "getter": [96, 158, 185, 187, 206, 209, 222, 228, 231, 345], "_graph": 96, "has_positive_input": 96, "posit": [96, 184, 440, 472, 474, 490], "retrun": 96, "neg": 96, "get_graph_input_output": 96, "sometim": [96, 115, 441, 497, 500], "doesn": [96, 184, 222, 410, 447, 473, 475, 480, 507], "know": [96, 151, 152, 185, 187, 209, 398, 443, 480, 502], "clearli": 96, "similar": [96, 485, 499, 506, 507], "featur": [96, 136, 150, 169, 170, 181, 184, 223, 443, 473, 474, 475, 477, 478, 485, 491, 492, 498, 502, 505], "summarize_graph": 96, "py": [96, 121, 189, 191, 192, 193, 218, 427, 441, 442, 443, 447, 472, 480, 488, 493, 500, 502, 504], "writtern": 96, "googl": [96, 491, 498], "query_fusion_pattern_nod": 96, "public": [96, 440, 474], "aggreg": [96, 406], "statu": [96, 281, 292, 295, 299, 301, 307, 309, 310, 395, 423, 436, 440, 474, 494], "pleas": [96, 169, 170, 171, 174, 216, 218, 219, 442, 444, 445, 446, 447, 472, 476, 479, 480, 488, 490, 491, 494, 497, 501, 502, 503], "_search_pattern": 96, "match": [96, 183, 191, 192, 444, 478, 481], "remove_node_with_single_input_output": 96, "one": [96, 108, 141, 142, 145, 158, 184, 187, 188, 191, 194, 195, 197, 200, 216, 219, 220, 224, 253, 406, 442, 446, 447, 452, 472, 475, 478, 479, 480, 484, 485, 487, 488, 490, 491, 494, 495, 497, 499, 500, 502, 505, 506], "rebuild": 96, "structur": [96, 218, 340, 443, 487, 497, 500, 504, 508], "without": [96, 121, 184, 191, 218, 411, 440, 441, 472, 474, 475, 478, 480, 485, 490, 497, 498, 499, 500, 506], "except": [96, 223, 263, 393, 401, 402, 411, 426, 436, 508], "fail": [96, 406, 441], "remove_nod": 96, "replace_const_nod": 96, "new_const_nod": 96, "target_nod": 96, "old_constant_node_nam": 96, "replace_al": 96, "outdat": 96, "replace_constant_graph_with_constant_nod": 96, "new_nod": 96, "old_end_node_nam": 96, "end": [96, 121, 158, 169, 183, 184, 187, 200, 218, 219, 223, 232, 239, 443, 444, 447, 478, 484, 485, 488, 494, 497, 504, 505, 506], "replace_single_nod": 96, "old_output_node_nam": 96, "old_output_nam": 96, "old_input_node_nam": 96, "old_input_nam": 96, "would": [96, 443, 474, 485, 491, 500], "top": [96, 184, 186, 187, 195, 209, 221, 223, 239, 240, 241, 242, 443, 490, 505, 508], "bottom": [96, 241, 242, 472], "replace_nod": 96, "old_node_nam": 96, "output_nodes_nam": 96, "node_name_detail": 96, "parent": [96, 213, 218, 220, 504], "add_nod": [96, 329], "start_node_nam": 96, "end_node_nam": 96, "dump_graph": 96, "parse_graph": 96, "graphrewriterhelp": 96, "encapsul": [96, 139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 492], "compare_node_attr": 96, "node_a": 96, "node_b": 96, "compar": [96, 195, 246, 472, 475, 479, 485, 490, 500, 503, 504, 506], "create_nod": [96, 115], "create_constant_nod": [96, 115], "shape": [96, 115, 147, 172, 173, 184, 191, 216, 336, 343, 344, 347, 356, 358, 393, 446, 472, 476, 484, 485, 505], "datatyp": [96, 115, 501, 506], "mai": [96, 115, 121, 232, 440, 474, 475, 483, 489, 491, 496, 498, 500], "set_attr_dtyp": [96, 115], "set_attr_tensor": [96, 115], "field": [96, 115, 171, 191, 222, 447, 472, 473, 480, 481, 485, 506, 507], "set_attr_type_list": [96, 115], "attr": [96, 115, 121], "set_attr_string_list": [96, 115], "set_attr_str": [96, 115], "set_attr_int_list": 96, "set_attr_int": [96, 115], "set_attr_float": [96, 115], "set_attr_bool": [96, 115], "fusenodestartwithfusedbatchnormv3": [99, 109], "quantize_graph_bas": [99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114], "quantizenodebas": [99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114], "get_longest_fus": [99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114], "virtual": [99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120], "apply_the_transform": [99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 113, 114], "fusenodestartwithconcatv2": [100, 110], "fusenodestartwithconv2d": [101, 111], "fusenodestartwithdeconv2d": 102, "fusenodestartwithfusedinstancenorm": 103, "fusenodestartwithmatmul": [104, 113], "apply_matmul_biasadd_relu_fus": 104, "match_node_nam": [104, 111], "appli": [104, 158, 187, 189, 216, 218, 440, 444, 472, 474, 495, 497, 500, 501, 503, 506, 507], "apply_matmul_biasadd_fus": 104, "apply_batchmatmulv2_fus": 104, "batchmatmul": 104, "batchmatmulv2": 104, "apply_batchmatmulv2_mul_add_fus": 104, "fusenodestartwithpool": [105, 114], "optimizeqdqgraph": 107, "op_wise_sequ": [107, 112], "quantizegraphbas": [107, 108, 112], "remove_dead_nod": 108, "output_nam": 108, "longer": [108, 169, 184, 476, 505], "add_output_graph_nod": 108, "output_nod": [108, 291], "create_nodes_map": 108, "apply_conv_biasadd_relu_fus": 111, "quantizegraphforintel": 112, "quantizegraphhelp": 115, "sever": [115, 184, 220, 442, 443, 472, 478, 487, 491, 497, 499, 505, 507], "staticmethod": 115, "get_sorted_graph": 115, "sort": [115, 324, 506], "wa": [115, 381, 446, 447, 472, 498, 506], "reorder": 115, "make": [115, 116, 130, 167, 216, 218, 220, 280, 312, 344, 440, 441, 443, 447, 472, 474, 475, 484, 490, 500, 501, 506], "easier": [115, 472, 498], "split_shared_input": 115, "split": [115, 183, 184, 200, 441, 505], "in_graph": [115, 121], "ouput": 115, "remove_training_nod": 115, "prune": [115, 158, 187, 210, 211, 212, 214, 216, 217, 218, 220, 222, 223, 231, 253, 393, 401, 416, 446, 461, 480, 484, 487, 495, 498, 500, 507], "out": [115, 169, 170, 171, 186, 187, 216, 221, 223, 230, 240, 441, 446, 474, 476, 499, 500], "aren": 115, "uncondition": 115, "copy_attr": 115, "attr_valu": 115, "copi": [115, 217], "unique_node_name_from_input": 115, "ensure_tensor_name_has_port": 115, "sure": [115, 216, 218, 220, 344, 441, 443, 472], "explicit": [115, 440, 474], "biascorrect": 116, "fp32_graph": 116, "weight_empir": 116, "graph_transform_bas": [116, 119, 120], "graphtransformbas": [116, 119, 120], "correct": [116, 130, 191, 192, 193, 195, 217, 365, 440, 443, 472, 474], "Will": [116, 141, 142, 145, 424, 478, 487], "our": [116, 442, 443, 446], "task": [116, 169, 176, 195, 476, 478, 487, 490], "close": [116, 130, 444], "w_int8": [116, 130], "w_fp32": [116, 130], "varianc": [116, 130, 444], "ratio": [116, 130, 181, 184, 216, 218, 219, 220, 476, 497, 505, 508], "differ": [116, 127, 129, 130, 150, 162, 171, 184, 186, 187, 188, 194, 195, 202, 205, 206, 208, 211, 216, 221, 222, 223, 224, 240, 440, 441, 442, 443, 446, 452, 472, 474, 475, 476, 478, 480, 482, 485, 486, 487, 490, 492, 493, 494, 497, 500, 504, 505, 506], "channel": [116, 130, 147, 184, 203, 216, 344, 347, 356, 443, 447, 487, 488, 497, 505, 508], "equal": [116, 130, 490], "minim": [116, 130, 243, 446, 478, 490, 497, 500, 506], "round": [116, 130, 443, 444, 471, 481, 500], "scale_c": [116, 130], "shift": [116, 130, 181, 505], "notic": [116, 130, 149, 187, 489], "empir": [116, 130], "solut": [116, 130, 200, 447, 483, 498, 506], "insertlog": 119, "input_pb": [119, 120], "node_name_list": 119, "show_nam": 119, "show_op": 119, "first_n": 119, "summar": [119, 478], "1024": [119, 171], "messag": [119, 411, 423, 428, 506], "dump_fp32": 119, "log": [119, 209, 266, 281, 292, 295, 301, 307, 309, 310, 366, 397, 403, 404, 405, 406, 410, 424, 441, 472, 503, 504, 506], "rerangequantizedconcat": 120, "rerange_quant": 120, "concat": [120, 397], "disable_random": 121, "seed": [121, 200, 202, 208, 421, 442, 475, 481, 506, 507], "disabl": [121, 400, 428, 440, 474], "read_graph": 121, "in_graph_is_binari": 121, "read": [121, 171, 174, 184, 217, 219, 330, 334, 335, 476, 501, 503], "binari": [121, 195, 446, 483, 490], "write_graph": 121, "out_graph_def": 121, "out_graph_fil": 121, "write": [121, 145, 178, 179, 180, 191, 263, 480, 486, 503, 504], "is_ckpt_format": 121, "model_path": [121, 330, 345, 350, 411], "is_saved_model_format": 121, "saved_model": [121, 187, 197, 336, 343, 353, 493], "get_tensor_by_nam": 121, "try_cnt": 121, "consid": [121, 195, 440, 441, 474, 475, 478, 506], "import": [121, 187, 197, 200, 253, 263, 441, 442, 443, 444, 446, 473, 475, 476, 478, 480, 485, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 504, 505], "scope": [121, 158, 187], "both": [121, 206, 208, 440, 442, 444, 447, 474, 475, 479, 499, 500], "tensor_nam": [121, 231], "suffix": 121, "time": [121, 184, 195, 232, 243, 263, 398, 404, 405, 409, 424, 443, 444, 480, 483, 494, 497, 498, 500, 503, 504, 505, 506], "got": [121, 241, 242, 443, 483, 485, 504], "iterator_sess_run": 121, "sess": 121, "iter_op": 121, "feed_dict": [121, 168], "output_tensor": [121, 228], "integr": [121, 150, 447, 472], "makeiter": 121, "predict": [121, 152, 153, 184, 188, 192, 193, 194, 195, 201, 203, 224, 442, 443, 452, 478, 490, 504, 505], "pred": [121, 194, 195, 224, 443, 490], "strip_unused_nod": 121, "tool": [121, 263, 441, 446, 447, 475, 485, 489, 498, 500], "strip_unused_lib": 121, "offici": [121, 188, 192, 193, 440, 472, 474, 490], "r1": 121, "15": [121, 202, 484, 485, 508], "branch": 121, "strip_equivalent_nod": 121, "get_tensor_val_from_graph_nod": 121, "tensor_v": 121, "get_embedding_contigu": 126, "nn": [126, 150, 203, 240, 441, 443, 444, 492, 497, 504], "embed": 126, "contigu": [126, 497], "append_attr": 126, "fx_model": 126, "append": [126, 222, 243, 441, 443, 494, 495], "trace": [126, 240, 441], "algorithm_registri": [127, 129], "algorithm_typ": [127, 129], "registr": [127, 129, 145, 155, 171, 175, 178, 179, 180, 182, 184, 212], "algorithmschedul": [127, 129], "conf": [127, 129, 139, 140, 149, 187, 196, 197, 209, 222, 226, 227, 231, 240, 241, 242, 243, 244, 246, 247, 252, 253, 422, 441, 442, 444, 473, 475, 478, 485, 486, 506], "phase": [127, 129, 222, 442, 497, 500, 501, 506], "fastbiascorrect": 128, "channel_axi": [128, 130], "weightcorrect": 130, "ep": 130, "1e": [130, 507], "05": [130, 191, 195, 405, 485, 490, 508], "conf_fname_or_obj": [131, 149, 158, 185, 186, 187, 196, 197, 198, 199, 205, 206, 209, 221, 222, 223, 239, 240, 442], "what": [131, 167, 223, 253, 440, 472, 474], "thei": [131, 149, 187, 223, 440, 473, 474, 478, 484, 490, 494, 497], "benchmark_conf": [131, 132, 223], "goal": [131, 140, 185, 186, 187, 209, 221, 223, 239, 240, 252, 412, 446, 495, 500, 506], "prefer": [131, 186, 187, 221, 223, 240], "space": [131, 139, 140, 186, 187, 193, 198, 200, 202, 205, 206, 207, 208, 221, 223, 240, 243, 244, 246, 247, 252, 411, 440, 442, 447, 474, 475, 497, 500, 506, 507], "cfg_fname": 132, "parser": [132, 223, 275, 393, 397, 401, 430], "quantization_conf": [132, 223, 240], "dotdict": 132, "pruning_conf": [132, 223, 239], "graph_optimization_conf": [132, 186, 187, 485], "mixedprecision_conf": 132, "distillation_conf": [132, 185, 187], "nasconfig": [132, 187, 199, 205, 206, 442], "search_spac": [132, 198, 205, 206, 207, 208, 442], "search_algorithm": [132, 187, 205, 206, 223, 442], "na": [132, 187, 223, 228, 461, 487], "procedur": [132, 442], "defaultconf": 132, "instead": [132, 133, 168, 263, 443], "notat": [132, 133], "deep_get": 133, "dot": [133, 411, 491, 500], "nest": 133, "eg": [133, 145, 171, 175, 180, 476, 499], "person": [133, 440, 446, 474, 498], "john": 133, "deep": [133, 446, 447, 471, 475, 487, 488, 491, 498, 500, 506], "deep_set": 133, "sex": [133, 440, 474], "male": 133, "distillationconfig": [136, 223], "teacher_model": [136, 150, 185, 187, 223, 478], "sgd": [136, 155, 223, 444, 499, 507], "learning_r": [136, 223, 499, 507], "0001": [136, 223, 444, 499], "distil": [136, 150, 157, 158, 187, 223, 253, 446, 461, 487, 495, 507], "callabl": [136, 193, 223, 253, 411, 427, 428, 442], "teacher": [136, 150, 185, 187, 223, 446, 478, 479, 508], "altern": [136, 223], "loss": [136, 150, 158, 186, 187, 195, 209, 221, 223, 239, 240, 253, 443, 444, 446, 478, 479, 480, 481, 490, 491, 497, 500, 506, 507], "sigopttunestrategi": 139, "q_dataload": [139, 140, 241, 242, 243, 244, 246, 247, 252, 486, 506], "eval_dataload": [139, 140, 158, 186, 187, 197, 222, 240, 241, 242, 243, 244, 246, 247, 252, 444, 475, 486, 506], "eval_func": [139, 140, 158, 186, 187, 197, 222, 240, 241, 242, 243, 244, 246, 247, 252, 473, 475, 476, 480, 491, 500, 506, 507], "q_hook": [139, 140, 241, 242, 243, 244, 246, 247, 252], "tunestrategi": [139, 140, 241, 242, 243, 244, 246, 247, 252, 506], "hpo": 139, "instanc": [139, 140, 149, 169, 187, 192, 193, 195, 198, 205, 206, 240, 241, 242, 243, 244, 246, 247, 252, 253, 281, 319, 323, 347, 356, 440, 441, 442, 447, 472, 474, 506, 507, 508], "mandatori": [139, 140, 240, 242, 243, 244, 246, 247, 252, 481, 507], "yield": [139, 140, 151, 152, 167, 240, 241, 242, 243, 244, 246, 247, 252, 444, 500, 506], "_": [139, 140, 240, 242, 243, 244, 246, 247, 252, 441, 443, 444, 447, 471, 478, 480, 481, 484, 485, 490, 491, 492, 494, 497, 500, 501, 502, 503, 504, 506, 507], "free": [139, 140, 240, 242, 243, 244, 246, 247, 252, 440, 474, 490, 494, 503], "taken": [139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 443], "reserv": [139, 140, 158, 187, 222, 242, 243, 244, 246, 247, 252], "pre": [139, 140, 169, 240, 241, 242, 243, 244, 246, 247, 252, 443, 476, 478, 485, 491, 497, 498, 500, 504, 506, 508], "through": [139, 140, 183, 240, 241, 242, 243, 244, 246, 247, 252, 442, 443, 484, 486, 487, 488, 490, 494, 495, 499, 503], "tuner": [139, 140, 186, 187, 221, 223, 240, 241, 242, 243, 244, 246, 247, 252], "higher": [139, 140, 207, 240, 241, 242, 243, 244, 246, 247, 252, 441, 444, 478, 490, 491, 497, 500, 503], "scalar": [139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 257, 258, 490, 491, 500], "pseudo": [139, 140, 240, 241, 242, 243, 244, 246, 247, 252, 504], "code": [139, 140, 149, 187, 197, 219, 222, 240, 241, 242, 243, 244, 246, 247, 252, 302, 307, 325, 343, 405, 406, 436, 437, 441, 446, 447, 475, 476, 478, 480, 486, 487, 489, 490, 494, 495, 497, 498, 499, 500, 503, 504, 505, 506], "resum": [139, 140, 241, 242, 243, 244, 246, 247, 252, 253, 446], "next_tune_cfg": [139, 241, 242, 243, 244, 246, 247, 252, 506], "next": [139, 162, 206, 220, 241, 242, 243, 244, 246, 247, 252, 442, 472, 491, 499, 506], "travers": [139, 140, 241, 242, 243, 244, 246, 247, 252, 506], "concret": [139, 241, 242, 243, 244, 246, 247, 252], "main": [139, 155, 219, 241, 252, 392, 428, 443, 446, 480, 500], "logic": [139, 140, 241, 252, 423, 506, 507], "overrid": [139, 158, 187, 241, 252, 263, 402], "some": [139, 158, 169, 187, 217, 241, 252, 411, 472, 481, 488, 490, 494, 497, 500, 501, 504, 506], "constraint": [139, 186, 187, 221, 223, 240, 475, 503, 506, 507], "tpetunestrategi": 140, "stop": [140, 252, 381, 405, 481, 506, 507], "timeout": [140, 252, 421, 444, 481, 499, 503, 506, 507], "trials_count": [140, 252], "either": [140, 191, 252, 444, 491, 495, 499, 500], "met": [140, 252, 442, 484, 491, 500, 504, 506], "reach": [140, 216, 220, 252, 474, 497, 506], "otherwis": [140, 171, 184, 252, 440, 474, 476, 499, 505], "entranc": [141, 142, 145], "dispatch": [141, 142, 145, 487], "unifi": [141, 142, 145, 186, 187, 221, 223, 240, 404, 446, 447, 475, 486, 487, 492], "tensorflowimagenetdataset": 143, "experiment": [143, 146, 147, 223, 390, 441, 442, 444, 446, 452, 473, 476, 478, 480, 485, 491, 492, 493, 494, 495, 497, 499, 501, 502, 505], "iterabledataset": [143, 145, 167, 170, 171, 173, 175, 180], "imagenet": [143, 147, 171, 174, 181, 203, 442, 444, 504, 505, 507, 508], "onnxrtimagenetdataset": 143, "root": [143, 169, 170, 171, 195, 201, 226, 227, 228, 230, 231, 253, 428, 473, 475, 476, 480, 490, 506, 507], "subset": [143, 171, 476], "num_cor": [143, 169, 170, 476], "28": [143, 169, 170, 476, 485, 508], "tensorflow_itex": [145, 171, 174, 175, 176, 178, 179, 180, 499], "onnxrt_qdq": [145, 171, 175, 178, 179, 180, 499], "onnxrt_qlinearop": [145, 171, 175, 178, 179, 180, 184, 499], "onnxrt_integerop": [145, 171, 175, 178, 179, 180, 184, 481, 499], "pytorch": [145, 150, 155, 157, 168, 169, 171, 174, 175, 178, 179, 180, 182, 184, 186, 187, 194, 195, 196, 214, 216, 219, 221, 223, 224, 231, 240, 266, 336, 343, 366, 376, 393, 441, 446, 447, 478, 480, 481, 482, 484, 487, 488, 491, 492, 497, 498, 499, 500, 502, 506, 507], "pytorch_ipex": [145, 171, 175, 178, 179, 180, 499, 507], "pytorch_fx": [145, 171, 175, 178, 179, 180, 441, 499], "onnxrt_qoper": [145, 171, 175, 178, 179, 180, 499], "overwrit": [145, 171, 175, 180], "__getitem__": [145, 167, 171, 175, 180, 182, 184, 473, 475, 476], "__len__": [145, 167, 171, 175, 180, 475, 476], "also": [145, 168, 171, 175, 180, 184, 188, 240, 442, 443, 446, 447, 452, 472, 473, 474, 475, 478, 485, 487, 490, 494, 495, 497, 500, 501, 506], "__iter__": [145, 167, 171, 175, 180, 473, 475], "inter": [145, 167, 171, 175, 180], "over": [145, 171, 175, 180, 191, 195, 443, 444, 446, 487, 490, 499, 506], "dataset_registri": [145, 171, 175, 180], "dataset_typ": [145, 171, 175, 180, 186, 187, 197, 221, 284], "dataset_format": [145, 171, 175, 180], "data_format": [145, 147, 171, 175, 180], "raw_imag": [145, 171, 175, 180], "tfrecord": [145, 169, 170, 171, 175, 180, 476], "transform_cl": [145, 180, 182, 184], "basetransform": [145, 146, 147, 180, 181, 182, 184], "transform_registri": [145, 180, 182, 184], "transform_typ": [145, 180, 182, 184], "preprocess": [145, 169, 180, 182, 184, 185, 187, 441, 475, 480, 505], "onnxrt": [145, 169, 171, 178, 179, 180, 182, 184, 194, 195, 224, 318, 319, 334, 336, 343, 393, 447], "__call__": [145, 178, 179, 180, 475], "filter_registri": [145, 178, 179, 180], "filter_typ": [145, 178, 179, 180], "parsedecodecocotransform": 146, "parsedecodeimagenettransform": 147, "tensorflowresizecropimagenettransform": 147, "height": [147, 184, 203, 216, 480, 497, 505, 507], "width": [147, 184, 203, 216, 443, 480, 500, 505, 507], "random_crop": [147, 505], "resize_sid": [147, 505], "256": [147, 176, 443, 473, 475, 476, 480, 505, 506, 508], "resize_method": 147, "bilinear": [147, 184, 505], "random_flip_left_right": [147, 505], "mean_valu": [147, 505], "channels_last": 147, "subpixel": 147, "rgb": 147, "seri": [147, 446, 505], "applic": [147, 396, 424, 426, 428, 472, 498, 504, 505], "imag": [147, 170, 171, 174, 176, 181, 184, 191, 203, 409, 443, 444, 472, 476, 480, 485, 499, 504, 505, 508], "crop": [147, 184, 476, 505], "desir": [147, 181, 184, 505], "resiz": [147, 169, 170, 184, 473, 475, 476, 505, 506], "flip": [147, 184, 505], "left": [147, 184, 472, 505], "right": [147, 191, 409, 440, 441, 472, 474, 475, 505], "std": [147, 184, 203, 473, 475, 505], "bilinearimagenettransform": 147, "central_fract": [147, 505], "875": [147, 505], "fraction": [147, 505], "onnxbilinearimagenettransform": 147, "onnxresizecropimagenettransform": 147, "std_valu": 147, "229": [147, 473, 475], "224": [147, 203, 446, 473, 475, 476, 480, 485, 505, 506, 507], "225": [147, 473, 475], "resizewithaspectratio": 147, "87": [147, 508], "inter_pol": 147, "cv2": 147, "inter_area": 147, "set_env_var": 149, "env_var": 149, "overwrite_exist": 149, "environ": [149, 223, 363, 392, 393, 401, 424, 440, 472, 474, 506], "variabl": [149, 171, 187, 196, 202, 243, 400, 424, 446, 472], "env": [149, 397, 405], "alreadi": [149, 171, 183, 398, 424, 444, 447, 472, 476, 487], "set_all_env_var": 149, "physic": [149, 440, 474], "core": [149, 187, 202, 281, 472, 489, 496, 508], "get_architectur": 149, "architectur": [149, 198, 199, 205, 206, 208, 461, 478, 488, 497, 498], "system": [149, 263, 400, 426, 427, 497], "get_threads_per_cor": 149, "thread": [149, 427, 472, 475, 496], "get_thread": 149, "get_physical_id": 149, "socket": [149, 400, 428, 496, 508], "get_core_id": 149, "get_bounded_thread": 149, "core_id": 149, "bind": 149, "command": [149, 187, 281, 292, 295, 301, 307, 309, 310, 377, 397, 405, 424, 472, 480, 485], "possibl": [149, 187, 200, 279, 344, 472, 481, 485, 495, 501, 506], "unnecessari": [149, 187], "b_dataload": [149, 187, 473, 493], "b_func": [149, 187], "Not": [149, 158, 187, 209, 396], "summary_benchmark": [149, 187], "config_inst": [149, 187], "trigger": [149, 187, 218, 485], "generate_prefix": [149, 187], "core_list": [149, 187], "numactl": [149, 187], "run_inst": [149, 187], "critet": 150, "tensorflowcrossentropyloss": 150, "pytorchcrossentropyloss": 150, "tensorflowknowledgedistillationloss": 150, "pytorchknowledgedistillationloss": [150, 478], "pytorchintermediatelayersknowledgedistillationloss": 150, "tensorflowcriterion": 150, "record": [150, 157, 169, 170, 171, 177, 441, 443, 476, 503, 504, 506], "pytorchcriterion": 150, "criterion_cl": 150, "criterion_registri": 150, "criterion_typ": 150, "registry_criterion": 150, "param_dict": [150, 155, 200], "crossentropyloss": 150, "tensorflowsparsecategoricalcrossentropi": 150, "sparsecategoricalcrossentropyloss": 150, "knowledgedistillationframework": 150, "student_model": [150, 185, 187, 478], "knowledg": [150, 185, 187, 446, 479, 487, 492, 507], "student": [150, 157, 169, 185, 187, 446, 476, 478, 479, 508], "knowledgedistillationloss": [150, 507], "temperatur": [150, 507], "loss_typ": [150, 507], "ce": [150, 507], "loss_weight": [150, 507], "teacher_model_forward": 150, "notimplementederror": [150, 194, 195, 224], "teacher_student_loss_c": 150, "student_output": [150, 158, 187, 478], "teacher_output": [150, 158, 185, 187], "student_targets_loss_c": 150, "groud": 150, "truth": [150, 192, 193], "loss_cal": 150, "loss_cal_sloss": 150, "student_loss": [150, 158, 187, 478], "softcrossentropi": 150, "logit": [150, 478], "ground": [150, 192, 193], "kullbackleiblerdiverg": 150, "pytorchknowledgedistillationlosswrapp": 150, "tensorflowknowledgedistillationlosswrapp": 150, "tensorflowknowledgedistillationlossextern": 150, "intermediatelayersknowledgedistillationloss": 150, "layer_map": 150, "add_origin_loss": 150, "init_loss_func": 150, "init": [150, 443, 476, 490, 494], "init_feature_match": 150, "student_featur": 150, "teacher_featur": 150, "matcher": 150, "clear_featur": 150, "clean": [150, 183, 281, 292, 295, 301, 302, 307, 309, 310, 311, 395, 410, 474], "register_hooks_for_model": 150, "attributeerror": 150, "remove_all_hook": 150, "pytorch_linear_feature_match": 150, "pytorchintermediatelayersknowledgedistillationlosswrapp": 150, "selfknowledgedistillationloss": 150, "selfknowledg": 150, "pytorchselfknowledgedistillationloss": 150, "l2diverg": 150, "feature1": 150, "feature2": 150, "pytorchselfknowledgedistillationlosswrapp": 150, "construct": [151, 152, 153, 154, 156, 169, 172, 173, 176, 256, 440, 473, 474, 476, 480, 506], "batch_siz": [151, 152, 159, 161, 164, 165, 166, 167, 168, 169, 170, 203, 269, 281, 292, 390, 412, 442, 443, 473, 475, 476, 480, 485, 486, 500], "collate_fn": [151, 152, 159, 161, 162, 164, 165, 166, 168, 476], "last_batch": [151, 152, 159, 161, 164, 165, 166, 168], "rollov": [151, 152, 159, 161, 164, 165, 166, 168], "sampler": [151, 152, 159, 161, 163, 164, 165, 166, 168, 180, 187, 480], "batch_sampl": [151, 152, 159, 161, 164, 165, 166, 168], "num_work": [151, 152, 159, 161, 164, 165, 166, 168, 500], "pin_memori": [151, 152, 159, 161, 164, 165, 166, 168], "shuffl": [151, 152, 159, 161, 164, 165, 166, 168, 475, 500], "setter": [151, 152, 442], "calib_dataload": [151, 152, 187, 221, 222, 240, 446, 475, 476, 486, 490, 500], "known": [151, 152, 243, 446, 497, 504, 506], "open": [152, 187, 405, 440, 446, 472, 474, 483, 498], "librari": [152, 187, 446, 471, 488, 498], "torch_util": [152, 187, 223], "postprocess_cl": [152, 156, 473], "user_postprocess": [152, 156], "metric_cl": [152, 153, 194, 195, 224, 473], "user_metr": [152, 153], "alwai": [152, 153, 191, 473, 490, 497], "recommend": [152, 153, 443, 447, 475, 484, 497, 499, 506], "design": [152, 153, 158, 168, 187, 202, 221, 442, 497, 500], "tensorflowoptim": 155, "pytorchoptim": 155, "optimizer_cl": 155, "allow": [155, 243, 428, 443, 444, 472, 473, 478, 480, 481, 485, 490, 491, 499, 506, 507], "non": [155, 217, 441, 443, 496, 497, 506], "optimizer_registri": 155, "optimizer_typ": 155, "cross": [155, 194, 195, 224, 486, 506], "tensorflowsgd": 155, "tensorflowadamw": 155, "tensorflow_addon": 155, "adamw": 155, "tensorflowadam": 155, "adam": [155, 507], "pytorchsgd": 155, "util": [157, 189, 217, 223, 268, 269, 270, 272, 274, 277, 281, 292, 295, 301, 302, 307, 309, 310, 312, 320, 321, 326, 328, 329, 332, 336, 342, 343, 351, 353, 377, 380, 384, 389, 393, 425, 480, 497, 500], "record_output": 157, "output_process": 157, "get_activ": 157, "mainli": [158, 187, 220, 500], "shot": [158, 187, 218, 220, 442, 446, 487, 497, 498], "train_func": [158, 187, 222, 478, 480, 497], "train_dataload": [158, 187, 478, 497], "prepare_qat": [158, 187, 444], "pre_process": [158, 185, 187, 198, 205, 209, 221, 480], "adaptor": [158, 187, 256, 446, 449, 487, 501, 502, 504, 506], "requir": [158, 187, 191, 203, 222, 228, 265, 267, 275, 278, 331, 337, 344, 347, 349, 356, 362, 369, 370, 371, 372, 374, 375, 376, 378, 379, 384, 389, 393, 442, 443, 444, 447, 472, 473, 475, 479, 480, 484, 485, 488, 491, 492, 496, 500, 502, 504, 506, 507], "compress": [158, 187, 209, 253, 446, 478, 487, 494, 495, 497, 498, 500], "post_process": [158, 187], "For": [158, 171, 183, 184, 187, 191, 192, 193, 195, 200, 216, 219, 240, 402, 440, 441, 443, 444, 445, 447, 472, 474, 479, 480, 484, 485, 487, 497, 501, 504, 506, 507, 508], "on_train_begin": [158, 187, 209, 218, 219, 253, 478], "Be": [158, 187, 191], "begin": [158, 187, 209, 218, 219, 223, 239, 443, 478, 497, 506], "epoch": [158, 185, 187, 209, 218, 219, 223, 239, 253, 444, 478, 480, 497, 507], "on_train_end": [158, 187, 209, 218, 219, 253], "pre_epoch_begin": [158, 187, 209], "post_epoch_end": [158, 187, 209], "on_epoch_begin": [158, 187, 209, 218, 219, 223, 239, 253, 256, 497], "on_step_begin": [158, 187, 209, 218, 219, 223, 239, 256, 497], "batch_id": [158, 187, 223, 239], "on_batch_begin": [158, 187, 209], "on_after_compute_loss": [158, 187, 209, 253, 478], "on_before_optimizer_step": [158, 187, 218, 219, 253, 497], "on_post_grad": [158, 187], "on_step_end": [158, 187, 209, 218, 219, 223, 239, 253, 256, 497], "on_batch_end": [158, 187, 209], "on_epoch_end": [158, 187, 209, 218, 219, 223, 239, 253, 256, 478, 497], "register_hook": [158, 187], "input_arg": [158, 187], "input_kwarg": [158, 187], "basedatalod": 159, "basedataload": [159, 161, 164, 165, 166, 168], "_generate_dataload": 159, "drop": [159, 191, 217, 491, 497, 508], "incomplet": 159, "discard": 159, "default_col": 161, "merg": [161, 504, 506], "outer": 161, "defaultdataload": [161, 165, 168], "base_dataload": [161, 163, 164, 165, 166, 168, 180, 187], "drop_last": [162, 167], "iterablefetch": 162, "indexfetch": 162, "singl": [162, 169, 183, 184, 191, 200, 202, 218, 220, 243, 297, 313, 332, 397, 430, 476, 497], "indic": [162, 167, 169, 185, 187, 191, 207, 208, 472, 473, 483, 504], "default_dataload": [163, 165, 168, 180, 187], "fetcher": [163, 180, 187], "mxnet_dataload": [163, 180, 187], "onnxrt_dataload": [163, 180, 187], "pytorch_dataload": [163, 180, 187], "tensorflow_dataload": [163, 180, 187, 390], "mxnetdataload": 164, "onnxrtbertdataload": 165, "bert": [165, 168, 169, 184, 476, 478, 481, 490, 497, 505, 508], "varient": 165, "onnxrtdataload": 165, "pytorchdataload": 166, "data_sourc": 167, "matter": [167, 501], "you": [167, 169, 191, 218, 441, 444, 446, 472, 473, 474, 475, 476, 480, 488, 489, 490, 502, 503, 504, 506], "iterablesampl": 167, "squential": 167, "your": [167, 169, 191, 446, 472, 473, 474, 476, 480, 489, 503, 504, 506], "clear": [167, 188, 194, 195, 203, 224, 447, 452, 484, 490], "try": [167, 344, 347, 356, 424, 441, 500], "indexdataset": 167, "retriev": [167, 406], "act": [167, 440, 474], "sequentialsampl": 167, "sequenti": [167, 222, 443, 495, 506], "batchsampl": 167, "tfdatadataload": 168, "tensorflow1": 168, "coupl": 168, "satisfi": [168, 488], "usag": [168, 187, 191, 197, 222, 411, 472, 476, 480, 482, 485, 490, 493, 494, 499, 505], "tf1": [168, 492], "although": [168, 503], "tensorflowbertdataload": 168, "tensorflowmodelzoobertdataload": 168, "zoo": [168, 184, 508], "tensorflowdataload": [168, 390], "directli": [168, 191, 195, 217, 490, 499, 500, 504], "pytorchbertdataset": 169, "model_typ": [169, 315, 345, 476], "tensordataset": [169, 476], "repo": [169, 443, 476, 482], "link": [169, 472, 476, 508], "http": [169, 171, 188, 189, 191, 192, 193, 216, 218, 219, 436, 440, 443, 446, 472, 476, 485, 488, 489, 502], "github": [169, 188, 189, 192, 193, 216, 219, 359, 361, 399, 443, 446, 472, 474, 476, 482, 488, 489, 502], "com": [169, 188, 189, 192, 193, 216, 219, 405, 440, 443, 446, 472, 474, 476, 485, 488, 489, 502, 503, 508], "huggingfac": [169, 476], "easi": [169, 187, 221, 472, 475, 498, 500, 503], "classifi": [169, 195, 443, 476, 478], "squad": [169, 184, 192, 193, 195, 476, 490, 505, 508], "distilbert": [169, 476, 508], "xlnet": [169, 476], "xlm": [169, 476, 508], "101": [169, 195, 490, 508], "2043": 169, "2001": 169, "onnxrtbertdataset": 169, "data_dir": [169, 476], "model_name_or_path": [169, 476], "max_seq_length": [169, 184, 476, 505], "128": [169, 172, 173, 184, 476, 500, 505, 508], "do_lower_cas": [169, 183, 184, 476, 505], "mrpc": [169, 195, 476, 490, 508], "dynamic_length": [169, 476], "shortcut": [169, 476], "select": [169, 199, 203, 205, 441, 442, 472, 487, 488, 500, 504, 506], "length": [169, 184, 188, 191, 452, 476, 490, 500, 505], "token": [169, 180, 182, 184, 187, 188, 189, 424, 428, 452, 472, 476, 490, 503, 505, 506], "truncat": [169, 184, 476, 505], "shorter": [169, 184, 476, 505], "lowercas": [169, 476], "fine": [169, 444, 446, 476, 497, 498, 500], "choic": [169, 447, 472, 476, 490], "qqp": [169, 476, 490, 508], "qnli": [169, 476, 490, 508], "rte": [169, 476, 490, 508], "st": [169, 476, 490], "cola": [169, 476, 490, 508], "mnli": [169, 476, 490, 508], "wnli": [169, 476, 490, 508], "mobilebert": [169, 476, 478, 508], "roberta": [169, 476, 508], "fix": [169, 218, 474, 476, 506], "uncas": [169, 184, 476, 505, 508], "load_and_cache_exampl": 169, "cach": [169, 188, 345, 428, 452, 483, 500], "convert_examples_to_featur": [169, 184], "max_length": 169, "label_list": [169, 195], "output_mod": 169, "classif": [169, 184, 195, 219, 446, 478, 490, 498], "pad_token": 169, "pad_token_segment_id": 169, "mask_padding_with_zero": 169, "inputfeatur": [169, 184], "input_id": [169, 184, 478, 497], "vocabulari": [169, 183, 184, 505], "attention_mask": [169, 497], "mask": [169, 191, 213, 216, 218, 220, 231, 497, 508], "avoid": [169, 441, 504], "attent": [169, 440, 474, 478], "NOT": [169, 484], "token_type_id": [169, 497], "segment": [169, 189, 191], "portion": 169, "problem": [169, 195, 202, 490, 491], "regress": [169, 474], "seq_length": 169, "to_json_str": 169, "serial": [169, 313, 320, 321, 351, 400, 402, 413, 414, 418, 419, 475], "json": [169, 170, 184, 273, 385, 387, 395, 402, 411, 476, 492, 505], "tensorflowbertdataset": 169, "label_fil": [169, 184, 476, 505], "refer": [169, 188, 189, 194, 195, 216, 218, 219, 224, 444, 446, 447, 452, 473, 476, 479, 480, 486, 489, 490, 491, 494, 497, 499, 500, 502, 505, 506], "guid": [169, 446, 476, 478, 488], "parsedecodebert": 169, "tensorflowmodelzoobertdataset": [169, 170], "coco": [170, 177, 191, 195, 490], "parsedecodecoco": 170, "cocorecorddataset": 170, "directori": [170, 171, 228, 262, 263, 324, 377, 395, 411, 424, 476, 480, 483, 504], "interleav": [170, 476], "parallel": [170, 476, 497], "cocoraw": [170, 476], "img_dir": [170, 476], "val2017": [170, 476], "anno_dir": [170, 476], "annot": [170, 191, 476, 490], "instances_val2017": [170, 476], "raw": [170, 174, 177, 446, 490, 506], "arrang": [170, 171, 174, 476, 497], "wai": [170, 171, 174, 442, 472, 475, 476, 490, 495, 497, 500, 506, 507], "jpg": [170, 174, 176, 476], "coconpi": [170, 476], "npy_dir": [170, 476], "npy": [170, 476], "tensorflowdataset": 171, "pytorchdataset": 171, "mxnetdataset": 171, "onnxrtqldataset": 171, "qlinear": [171, 178, 195, 447, 508], "onnxrtitdataset": 171, "IT": [171, 178], "pytorchmxnetwrapdataset": 171, "datafunc": 171, "pytorchmxnetwrapfunct": [171, 184], "framework_dataset": 171, "convent": [171, 191, 478], "imageclassifi": 171, "choos": [171, 472, 487, 502, 506, 507], "download_url": 171, "filenam": [171, 201, 263, 264, 361, 377, 381, 387, 397, 405, 476], "md5": 171, "download": [171, 336, 359, 360, 362, 363, 393, 472, 476, 485, 488, 502], "address": [171, 428, 440, 472, 474, 491, 498], "gen_bar_updat": 171, "progress": [171, 220], "bar": [171, 472], "check_integr": 171, "fpath": 171, "checksum": 171, "calculate_md5": 171, "chunk_siz": 171, "cifar10": [171, 476], "cifar100": [171, 476], "automat": [171, 174, 186, 187, 196, 203, 221, 223, 240, 441, 446, 472, 476, 487, 491, 495, 505, 506], "www": [171, 440, 476, 508], "toronto": [171, 476], "edu": [171, 476], "kriz": [171, 476], "cifar": [171, 476, 508], "10": [171, 191, 243, 390, 443, 446, 472, 476, 488, 499, 505], "tar": [171, 476], "gz": [171, 476], "manual": [171, 476], "100": [171, 191, 200, 443, 475, 476, 480, 485, 486, 499, 500, 505, 506, 507, 508], "internet": [171, 472, 476], "put": [171, 476, 478, 497], "again": [171, 476, 485, 501], "load_meta": 171, "meta": 171, "pytorchcifar10": 171, "mxnetcifar10": 171, "tensorflowcifar10": 171, "pytorchcifar100": 171, "mxnetcifar100": 171, "tensorflowcifar100": 171, "mnist": [171, 476, 480], "nation": [171, 440, 474], "institut": 171, "standard": [171, 184, 490, 505, 506], "technologi": [171, 446, 496], "fashionmnist": [171, 476], "npz": [171, 476], "idx1": [171, 476], "ubyt": [171, 476], "idx3": [171, 476], "t10k": [171, 476], "class_to_idx": 171, "read_data": 171, "pytorchmnist": 171, "mxnetmnist": 171, "tensorflowmnist": 171, "pytorchfashionmnist": 171, "mxnetfashionmnist": 171, "tensorflowfashionmnist": 171, "imagefold": [171, 473, 475, 476, 480], "expect": [171, 266, 382, 405, 440, 474, 483, 500, 506], "subfold": 171, "belong": [171, 228, 500], "class_1": [171, 476], "xxx": [171, 476, 478], "png": [171, 476], "xxy": [171, 476], "xxz": [171, 476], "class_n": [171, 476], "123": [171, 476, 505], "nsdf3": [171, 476], "asd932_": [171, 476], "mxnetimagefold": 171, "tensorflowimagefold": 171, "tensorflowtfrecorddataset": 171, "tensorflowimagerecord": 171, "000": [171, 476], "001": [171, 476, 480, 507], "099": [171, 476], "tensorflowvocrecord": 171, "pascal": 171, "voc": [171, 195], "2012": 171, "00000": 171, "00004": 171, "00001": 171, "00003": 171, "dummi": [172, 173, 195, 307, 311, 413, 446, 472, 476, 485, 490], "dummydataset": [172, 173], "high": [172, 173, 444, 476, 488, 498, 506], "127": [172, 173, 476, 500, 508], "rang": [172, 173, 184, 191, 200, 253, 443, 444, 447, 476, 478, 480, 481, 497, 500, 505], "stand_norm": [172, 173, 476], "dummy_v2": [173, 476], "sparse_dummy_v2": [173, 476], "input_shap": [173, 344, 347, 356, 476], "label_shap": [173, 476], "sparsedummydataset": 173, "dense_shap": [173, 476], "sparse_ratio": [173, 476], "imagenetraw": [174, 476], "data_path": [174, 476], "image_list": [174, 476], "img1": [174, 476], "img2": [174, 476], "imgx": [174, 476], "val_map": [174, 476], "txt": [174, 405, 446, 472, 476, 488], "pytorchimagenetraw": 174, "mxnetimagenetraw": 174, "tensorflowimagenetraw": 174, "inteltensorflow": [174, 176], "bert_dataset": [175, 180, 187], "coco_dataset": [175, 180, 187], "dummy_dataset": [175, 180, 187], "dummy_dataset_v2": [175, 180, 187], "imagenet_dataset": [175, 180, 187], "style_transfer_dataset": [175, 180, 187], "transfer": [176, 185, 187, 476, 478, 479], "styletransferdataset": 176, "content_fold": [176, 476], "style_fold": [176, 476], "crop_ratio": [176, 476], "resize_shap": [176, 476], "image_format": [176, 476], "holder": [176, 476], "labelbalancecocorecordfilt": 177, "balanc": [177, 496], "labelbalancecocorawfilt": 177, "tensorflowfilt": 178, "onnxrtqlfilt": 178, "onnxrtitfilt": 178, "pytorchfilt": 178, "mxnetfilt": 178, "coco_filt": [179, 180, 187], "imagenet_transform": [180, 182, 187], "quantizedinput": [181, 505], "labelshift": [181, 505], "label_shift": [181, 505], "parsedecodeimagenet": [181, 505], "proto": [181, 184, 505], "convert_to_unicod": 183, "text": [183, 184, 188, 193, 219, 452, 489, 498, 505, 508], "unicod": [183, 188], "assum": [183, 191, 207, 443, 447, 484], "utf": 183, "8": [183, 402, 441, 443, 444, 446, 484, 488, 494, 498, 508], "load_vocab": 183, "vocab_fil": [183, 184, 505], "convert_by_vocab": 183, "vocab": 183, "whitespace_token": 183, "basic": [183, 198, 205, 216, 446, 487, 488, 499, 503], "whitespac": [183, 193], "piec": [183, 188, 452, 490], "fulltoken": 183, "tokenzi": 183, "convert_tokens_to_id": 183, "convert_ids_to_token": 183, "basictoken": 183, "punctuat": [183, 188, 193], "lower": [183, 184, 193, 411, 443, 471, 479, 497, 498, 500, 505], "wordpiecetoken": 183, "unk_token": 183, "unk": 183, "max_input_chars_per_word": 183, "200": [183, 441, 506, 508], "wordpiec": [183, 184, 505], "word": [183, 188, 452, 485, 490, 508], "greedi": 183, "longest": [183, 184, 505], "unaff": 183, "un": 183, "aff": 183, "separ": [183, 427, 440, 472, 474, 486, 489, 495, 499], "concat_gener": 184, "inc": [184, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 444, 446, 498, 499, 502], "tensorflowtransform": 184, "mxnettransform": 184, "pytorchtransform": 184, "onnxrtqltransform": 184, "onnxrtittransform": 184, "tensorflowwrapfunct": 184, "transform_func": 184, "pytorchmxnettransform": 184, "get_torchvision_map": 184, "interpol": [184, 490, 505], "torchvis": [184, 203], "composetransform": 184, "transform_list": [184, 505], "togeth": [184, 216, 222, 475, 478, 488, 504, 505], "croptoboundingbox": [184, 505], "offset_height": [184, 505], "offset_width": [184, 505], "target_height": [184, 505], "target_width": [184, 505], "box": [184, 191, 195, 441, 472, 490, 504, 505, 506], "vertic": [184, 216, 505], "coordin": [184, 243, 505], "corner": [184, 447, 505], "horizont": [184, 505], "mxnetcroptoboundingbox": 184, "onnxrtcroptoboundingbox": 184, "tensorflowcroptoboundingbox": 184, "resizewithratio": [184, 505], "min_dim": [184, 505], "800": [184, 505], "max_dim": [184, 505], "1365": [184, 505], "constant_valu": 184, "aspect": [184, 505], "side": [184, 472, 476, 505], "exce": [184, 505], "so": [184, 218, 253, 441, 447, 481, 483, 487, 490, 500, 501, 504, 505, 506], "tensorflowresizewithratio": 184, "transpos": [184, 216, 505], "perm": [184, 505], "permut": [184, 505], "tensorflowtranspos": 184, "mxnettranspos": 184, "pytorchtranspos": 184, "randomverticalflip": [184, 505], "randomli": [184, 208, 243, 442, 505, 506], "tensorflowrandomverticalflip": 184, "randomhorizontalflip": [184, 475, 505], "tensorflowrandomhorizontalflip": 184, "toarrai": [184, 505], "pil": [184, 505], "casttftransform": 184, "castonnxtransform": 184, "castpytorchtransform": 184, "centercroptftransform": 184, "center": [184, 445, 446, 505, 506], "paddedcentercroptransform": 184, "crop_pad": 184, "resizetftransform": 184, "nearest": [184, 505], "bicub": [184, 505], "resizepytorchtransform": 184, "randomcroptftransform": 184, "locat": [184, 473, 480, 500, 502, 505, 506, 507], "randomresizedcroppytorchtransform": 184, "randomresizedcropmxnettransform": 184, "randomresizedcroptftransform": 184, "get_param": 184, "pramet": 184, "normalizetftransform": 184, "rescal": [184, 505], "deviat": [184, 505], "len": [184, 243, 443, 476, 480, 497, 505], "broadcast": [184, 480, 505], "rescalekeraspretraintransform": 184, "rescaletftransform": 184, "rescaletransform": 184, "alignimagechanneltransform": 184, "dim": [184, 212, 243, 505], "align": [184, 440, 474, 505], "now": [184, 409, 441, 442, 476, 480, 485, 493, 499, 505, 506], "w": [184, 203, 497, 505], "must": [184, 191, 195, 441, 485, 488, 505, 506], "pytorchalignimagechannel": 184, "tondarraytransform": 184, "resizemxnettransform": 184, "resizetransform": 184, "cropresizetftransform": 184, "y": [184, 243, 505], "boundari": [184, 313, 505], "area": [184, 191, 490, 505], "pytorchcropresizetransform": 184, "mxnetcropresizetransform": 184, "cropresizetransform": 184, "centercroptransform": 184, "mxnetnormalizetransform": 184, "pytorchnormalizetransform": 184, "normalizetransform": 184, "randomcroptransform": 184, "randomresizedcroptransform": 184, "get_final_text": 184, "pred_text": 184, "orig_text": 184, "project": [184, 281, 284, 289, 291, 292, 295, 301, 302, 306, 307, 308, 309, 310, 311, 312, 336, 439, 440, 474, 498, 503, 506], "squadexampl": 184, "qas_id": 184, "question_text": 184, "doc_token": 184, "orig_answer_text": 184, "start_posit": 184, "end_posit": 184, "is_imposs": 184, "simpl": [184, 443, 446, 472, 488, 503, 506], "answer": [184, 192, 193, 440, 474, 505, 508], "unique_id": 184, "example_index": 184, "doc_span_index": 184, "token_to_orig_map": 184, "token_is_max_context": 184, "input_mask": [184, 478], "segment_id": [184, 478], "read_squad_exampl": 184, "input_fil": 184, "doc_strid": [184, 505], "max_query_length": [184, 505], "output_fn": 184, "inputbatch": 184, "collecttransform": 184, "10833": 184, "tfsquadv1posttransform": 184, "n_best_siz": [184, 505], "20": [184, 202, 444, 446, 496, 505, 507, 508], "384": [184, 505], "64": [184, 442, 443, 505, 508], "max_answer_length": [184, 505], "30": [184, 444, 446, 473, 475, 487, 505, 508], "total": [184, 195, 218, 220, 228, 231, 232, 476, 505], "nbest_predict": [184, 505], "question": [184, 192, 193, 440, 447, 474, 488, 505, 508], "becaus": [184, 191, 216, 441, 497, 500, 505, 506], "long": [184, 483, 505], "document": [184, 471, 480, 481, 491, 502, 505], "chunk": [184, 505], "how": [184, 185, 187, 202, 203, 216, 443, 445, 447, 472, 473, 474, 476, 478, 480, 486, 497, 500, 505, 506, 507], "much": [184, 185, 187, 478, 481, 485, 497, 505], "stride": [184, 443, 505], "process_result": 184, "get_postprocess_result": 184, "tfmodelzoocollecttransform": 184, "tfsquadv1modelzooposttransform": 184, "squadv1": [184, 505], "see": [184, 188, 191, 440, 441, 443, 445, 472, 474, 485, 489, 493, 497, 504, 508], "parsedecodevoctransform": 184, "compon": [185, 187, 198, 205, 209, 221, 222, 223, 253, 393, 427, 430, 442, 446, 449, 474, 475, 480, 489, 495, 496], "relat": [185, 187, 191, 209, 216, 223, 239, 256, 343, 346, 348, 353, 429, 432, 433, 434, 437, 444, 507], "_epoch_ran": [185, 187], "integ": [185, 187, 191, 195, 207, 216, 218, 220, 257, 258, 447, 500, 506], "ran": [185, 187], "eval_frequ": [185, 187], "frequenc": [185, 187, 218, 496, 507], "term": [185, 187, 478, 489, 490, 494, 495, 506], "best_scor": [185, 187], "best_model": [185, 187], "found": [185, 187, 198, 199, 205, 206, 230, 243, 396, 411, 428, 446, 491, 506], "train_cfg": [185, 187, 256], "evaluation_distribut": [185, 187, 209], "train_distribut": [185, 187, 209], "on_post_forward": [185, 187], "deprec": [185, 187, 411, 449, 505], "init_train_cfg": [185, 187], "create_criterion": [185, 187], "create_optim": [185, 187], "disil": [185, 187], "generate_hook": [185, 187, 209], "recip": [186, 187, 221, 223, 240, 506], "achiev": [186, 187, 221, 223, 240, 446, 490, 495, 497, 498, 500, 504, 506], "within": [186, 187, 191, 221, 223, 228, 240, 243, 440, 441, 474, 491, 498], "variou": [186, 187, 196, 221, 223, 240, 487, 499], "dl": [186, 187, 196, 209, 221, 223, 239, 240, 440, 474, 486, 498], "bring": [186, 187, 221, 223, 240, 474, 500], "work": [186, 187, 209, 221, 223, 240, 445, 475, 478, 497, 501, 502, 504], "sinc": [186, 187, 188, 209, 221, 223, 239, 240, 381, 444, 452, 478, 481, 490, 495], "vari": [186, 187, 209, 221, 223, 239, 240, 496, 508], "roc": [186, 187, 195, 209, 221, 223, 239, 240], "criteria": [186, 187, 209, 216, 218, 221, 223, 239, 240, 441, 506], "footprint": [186, 187, 209, 221, 223, 232, 239, 240, 479, 494, 497, 499, 506], "flexibl": [186, 187, 209, 221, 223, 239, 240, 473, 478, 497], "via": [186, 187, 209, 221, 223, 239, 240, 428, 440, 474, 480, 485, 487, 503], "set_config_by_model": [186, 187, 196], "model_obj": [186, 187, 196], "popular": [187, 446, 447, 476, 478, 497, 500, 506], "techniqu": [187, 443, 444, 446, 487, 495, 497, 499, 500, 507], "common": [187, 197, 203, 206, 207, 208, 216, 222, 223, 256, 405, 406, 411, 440, 444, 446, 449, 473, 474, 475, 476, 478, 480, 485, 486, 488, 492, 493, 497, 500], "bleu": [187, 189, 194, 223, 490], "bleu_util": [187, 194, 223], "coco_label_map": [187, 194, 223], "coco_tool": [187, 194, 223], "evaluate_squad": [187, 194, 223], "dynast": [187, 205, 223], "dynas_manag": [187, 203, 204, 205], "dynas_predictor": [187, 203, 204, 205], "dynas_search": [187, 204, 205], "dynas_util": [187, 202, 204, 205], "basic_na": [187, 205, 223, 442], "dyna": [187, 200, 201, 202, 203, 204, 205, 223, 442, 487, 499], "nas_util": [187, 205, 223], "pruning_recip": [187, 223], "tile_pattern": [187, 210, 211], "pytorch_prun": [187, 223], "logger": [187, 214, 223, 254, 257, 393, 397, 401], "prune_util": [187, 214, 223], "pruner": [187, 209, 214, 216, 219, 223, 422, 507], "schedul": [187, 214, 218, 223, 253, 461, 495], "graph_optim": [187, 196, 223, 270, 336, 371, 375, 376, 393, 401, 416, 485], "mixed_precis": [187, 223, 272, 336, 371, 393, 401, 416], "model_convers": [187, 223], "quantconf": [187, 221, 240], "qfunc": [187, 221], "routinu": [187, 221], "pruningconf": [187, 209], "pruning_func": [187, 209, 497], "generate_prun": [187, 209], "flow": [187, 192, 193, 209, 441, 442], "dens": [187, 209, 220, 497, 508], "spars": [187, 209, 218, 476, 497, 498], "mixedprecis": [187, 196, 272, 373, 417, 461, 491], "graphoptim": [187, 196, 270, 368, 415], "privat": [187, 196, 440, 474], "member": [187, 196, 440, 447, 474], "modelconvers": [187, 197, 461, 493], "q_model": [187, 197, 441, 444, 475, 476, 480, 486, 490, 492, 493, 494, 500], "unicoderegex": 188, "hoc": 188, "hack": 188, "recogn": 188, "nondigit_punct_r": 188, "compil": [188, 496], "regular": [188, 217, 497], "preced": 188, "digit": [188, 498], "punct_nondigit_r": 188, "symbol_r": 188, "property_char": 188, "join": 188, "bleu_token": 188, "mose": 188, "smt": 188, "mosesdecod": 188, "blob": [188, 189, 192, 193, 216, 443], "master": [188, 189, 192, 193, 216, 219, 443], "mteval": 188, "v14": 188, "pl": 188, "l954": 188, "l983": 188, "bilingu": [188, 452], "understudi": [188, 452], "score": [188, 189, 191, 192, 193, 195, 216, 218, 441, 452, 490, 494, 497, 503, 506], "qualiti": [188, 452], "machin": [188, 277, 452, 472, 488, 498, 504], "natur": [188, 452], "languag": [188, 440, 452, 474, 498], "approxim": [188, 189, 452, 490], "glue": [188, 195, 452, 476, 490], "decod": [188, 452, 490, 505], "ngram": [188, 452, 490], "order": [188, 189, 222, 241, 242, 246, 344, 347, 356, 413, 441, 452, 490, 497, 499, 504, 506], "breviti": [188, 189, 452, 490], "penalti": [188, 189, 452, 490], "doe": [188, 191, 200, 443, 444, 452, 476, 481, 490, 502, 505, 506], "beam": [188, 452, 490], "reset": [188, 194, 195, 224, 232, 424, 443, 452, 490], "error": [188, 195, 201, 222, 396, 423, 452, 490, 506], "occur": [188, 452], "bleu_scor": [188, 189, 452], "tensor2tensor": 189, "bleu_hook": 189, "compute_bleu": 189, "reference_corpu": 189, "translation_corpu": 189, "max_ord": 189, "use_bp": 189, "against": 189, "gram": 189, "flag": [189, 253, 421], "decid": [189, 218, 241, 242, 246, 324, 447, 481, 502, 506], "third": [191, 475], "parti": [191, 500], "pycocotool": [191, 483, 488], "object_detect": 191, "noth": [191, 405], "thu": [191, 444, 500], "cannot": [191, 400, 441, 483, 504], "slim": [191, 228, 443, 492], "jonathanhuang": 191, "image_id": [191, 490], "encod": [191, 200, 505], "groundtruth": 191, "invok": 191, "groundtruth_dict": 191, "exportgroundtruthtococo": 191, "groundtruth_boxes_list": 191, "groundtruth_classes_list": 191, "max_num_class": 191, "output_path": [191, 230, 405, 491], "detections_list": 191, "exportdetectionstococo": 191, "detection_boxes_list": 191, "detection_scores_list": 191, "detection_classes_list": 191, "cocowrapp": 191, "loadannot": 191, "cocoevalwrapp": 191, "agnostic_mod": 191, "computemetr": 191, "detection_typ": 191, "bbox": [191, 441, 490], "hold": [191, 243, 475], "being": [191, 203, 222, 257, 258, 332], "datastructur": 191, "mscoco": 191, "org": [191, 218, 440, 446, 472, 488], "replic": 191, "behavior": [191, 440, 447, 474, 478, 484, 492, 504, 506, 507], "extern": [191, 230, 472], "storag": [191, 446, 485, 490], "category_id": 191, "iou_typ": 191, "iou_thr": [191, 195, 490], "map_point": [191, 195, 490], "cocoev": 191, "Then": [191, 441, 472, 485], "getcategori": 191, "getagnosticmod": 191, "agnost": [191, 478], "getcategoryidlist": 191, "accumul": 191, "p": [191, 443, 472], "include_metrics_per_categori": 191, "all_metrics_per_categori": 191, "summeri": 191, "per_category_ap": 191, "care": 191, "hand": [191, 442, 472], "pollut": 191, "mldash": 191, "summary_metr": 191, "averag": [191, 192, 193, 195, 443, 478, 490, 494, 497, 506], "iou": [191, 195], "increment": [191, 241, 242, 506], "50iou": 191, "50": [191, 193, 202, 442, 485, 508], "75iou": 191, "75": [191, 508], "small": [191, 442, 444, 472, 506], "32": [191, 443, 480, 486, 497, 508], "pixel": [191, 505], "medium": 191, "96": [191, 443, 508], "larg": [191, 475, 478, 508], "10000": [191, 243], "recal": [191, 193, 195], "bycategori": 191, "supercategori": 191, "backward": [191, 253, 444, 478, 480, 497, 500, 502], "performancebycategori": 191, "regardless": [191, 440, 474], "empti": [191, 443], "category_stat": 191, "exportsingleimagegroundtruthtococo": 191, "next_annotation_id": 191, "category_id_set": 191, "groundtruth_box": 191, "groundtruth_class": 191, "groundtruth_mask": 191, "groundtruth_is_crowd": 191, "export": [191, 226, 227, 231, 253, 411, 504], "ingest": 191, "ones": 191, "exportsingleimagedetectionstococo": 191, "uniqu": [191, 203, 222, 243, 302, 303, 500], "assign": [191, 263, 301, 302, 307, 308, 309, 310, 472, 480, 491, 499], "continu": [191, 216, 442, 497], "num_gt_box": 191, "num_detect": [191, 195, 490, 507], "image_height": 191, "image_width": 191, "detection_mask": 191, "crowd": 191, "insid": [191, 478, 497], "exportsingleimagedetectionboxestococo": 191, "detection_box": [191, 507], "detection_scor": [191, 507], "detection_class": [191, 507], "exporsingleimagedetectionboxestococo": 191, "exportsingleimagedetectionmaskstococo": 191, "allenai": [192, 193], "bi": [192, 193], "att": [192, 193], "f1_score": [192, 193], "ground_truth": [192, 193], "metric_max_over_ground_truth": [192, 193], "metric_fn": [192, 193], "exact_match_scor": 192, "exact": 192, "articl": [192, 193], "paragraph": [192, 193], "qa": [192, 193], "cantain": [192, 193], "normalize_answ": 193, "extra": 193, "newlin": 193, "tab": [193, 304, 307, 313, 427, 504], "abc": [193, 344, 404, 447, 504, 506], "harmon": [193, 195], "answer_start": 193, "177": 193, "denver": 193, "bronco": 193, "nfl": 193, "team": [193, 440, 474, 501], "afc": 193, "super": [193, 200, 203, 442, 443, 444, 494], "bowl": 193, "56be4db0acb8001400a502ec": 193, "percentag": [193, 201, 507], "basemetr": [194, 195, 224], "single_output": [194, 195, 224], "hvd": [194, 195, 224, 480], "sample_weight": [194, 195, 224], "state": [194, 195, 224, 497], "metric_registri": [194, 195, 224], "metric_typ": [194, 195, 224], "decorator_metr": [194, 195, 224], "tensorflowmetr": 195, "maintain": [195, 440, 446, 474, 492, 497, 502], "pytorchmetr": 195, "mxnetmetr": 195, "onnxrtqlmetr": 195, "onnxrtitmetr": 195, "wrappytorchmetr": 195, "wrapmxnetmetr": 195, "wraponnxrtmetr": 195, "proport": 195, "were": 195, "pred_list": 195, "pytorchloss": 195, "print": [195, 443, 444, 472, 478, 480, 490, 506], "There": [195, 222, 472, 478, 484, 487, 490, 491, 507], "least": [195, 219, 406, 497, 506], "sum": [195, 443, 478], "mae": [195, 490], "absolut": [195, 201, 405, 481, 490, 496, 497, 500, 506], "magnitud": [195, 487, 497, 508], "numer": [195, 443, 444, 471, 491, 498], "rmse": [195, 201, 490, 506], "squar": [195, 201, 490, 506], "mse": [195, 315, 321, 472, 490, 499, 502], "estim": [195, 198, 199, 203, 205, 206, 228, 442, 443, 444, 506], "tensorflowtopk": 195, "k": [195, 443, 490, 497], "among": 195, "most": [195, 472, 491, 497, 500, 506], "outcom": 195, "num_correct": 195, "num_sampl": 195, "generaltopk": 195, "cocomapv2": [195, 490], "anno_path": [195, 490], "map_kei": 195, "detectionboxes_precis": 195, "output_index_map": [195, 490], "tensorflowmap": 195, "tensorflowcocomap": 195, "tensorflowvocmap": 195, "squadf1": [195, 490], "miou": 195, "num_class": [195, 443], "21": [195, 508], "intersect": [195, 447, 490], "hist": [195, 257, 258], "onnxrtglu": 195, "dlrm": [195, 508], "basicna": [198, 205, 442], "model_build": [198, 205, 206, 442], "nasbas": [198, 199, 205, 206, 442], "conf_fnam": [198, 205], "init_by_cfg": [198, 205], "init_for_search": [199, 205], "select_model_arch": [199, 205, 206, 442], "create_acc_predictor": [199, 205, 442], "predictor": [199, 200, 201, 203, 205, 442], "create_macs_predictor": [199, 205, 442], "mac": [199, 201, 203, 205, 442], "create_latency_predictor": [199, 205, 442], "latenc": [199, 200, 201, 203, 205, 409, 442, 485, 503, 506], "init_cfg": [199, 205], "manag": [200, 201, 202, 203, 280, 312, 314, 337, 395, 410, 446], "parametermanag": [200, 203], "verbos": [200, 201, 202], "network": [200, 203, 218, 442, 443, 446, 472, 478, 479, 498, 500], "hot": 200, "pymoo": [200, 202, 203], "process_param_dict": 200, "upper": [200, 202], "vector": [200, 206, 208], "onehot_gener": 200, "in_arrai": 200, "onehot": 200, "account": [200, 440, 474, 503, 506], "unus": 200, "block": [200, 216, 219, 428, 443, 487, 494, 497], "depth": [200, 478, 501], "input_arrai": 200, "elast": 200, "supernetwork": [200, 203], "mapper": [200, 301, 364, 365], "random_sampl": [200, 243], "subnetwork": [200, 203], "trial_limit": 200, "100000": 200, "translate2param": 200, "pymoo_vector": 200, "translate2pymoo": 200, "import_csv": 200, "filepath": 200, "column_nam": 200, "drop_dupl": 200, "panda": 200, "datafram": [200, 228, 231], "csv": [200, 203, 411, 442, 472], "purpos": [200, 484, 491, 499, 506], "subnet": [200, 203], "column": [200, 472, 497], "df": [200, 228, 231], "set_se": 200, "create_training_set": 200, "train_with_al": 200, "33": [200, 508], "sklearn": 200, "alpha": 201, "default_alpha": 201, "cost_factor": 201, "default_cost_factor": 201, "max_iter": 201, "default_max_iter": 201, "regressor": 201, "get_paramet": 201, "get_metr": [201, 279], "mape": 201, "kendal": 201, "rank": [201, 480], "correl": 201, "spearman": 201, "searcher": [201, 208], "searchalgomanag": 202, "nsga2": [202, 442], "optuna": 202, "configure_nsga2": 202, "popul": [202, 442], "num_ev": [202, 442], "1000": [202, 409, 443, 485, 506, 507], "warm_pop": 202, "crossover_prob": 202, "9": [202, 441, 443, 444, 446, 488, 497, 499, 507, 508], "crossover_eta": 202, "mutation_prob": 202, "02": [202, 508], "mutation_eta": 202, "configure_ag": 202, "ag": [202, 440, 474], "run_search": 202, "save_histori": 202, "previous": [202, 475], "problemmultiobject": 202, "evaluation_interfac": 202, "evaluationinterfac": [202, 203], "param_count": 202, "param_upperbound": 202, "supernet": [202, 203, 442], "ofa": [202, 203], "mobilenetv3": [202, 203, 442], "45": [202, 441, 508], "mani": [202, 203, 232, 475, 488, 506, 507], "get_mac": 203, "input_s": 203, "measure_lat": 203, "warmup_step": 203, "measure_step": 203, "resolut": 203, "warm": [203, 232], "adjust": [203, 443, 444, 500], "runner": 203, "ofarunn": 203, "acc_predictor": 203, "macs_predictor": 203, "latency_predictor": 203, "imagenetpath": 203, "resnet50": [203, 443, 446, 480, 485, 500, 503, 508], "w1": 203, "ilsvrc2012": [203, 442], "estimate_accuracy_top1": 203, "subnet_cfg": 203, "top1": [203, 443, 444, 500], "estimate_mac": 203, "estimate_lat": 203, "validate_top1": 203, "validate_mac": 203, "flop": 203, "fvcore": 203, "get_subnet": 203, "predictor_mod": 203, "csv_path": 203, "written": 203, "eval_subnet": 203, "clear_csv": 203, "evaluationinterfaceresnet50": 203, "evaluationinterfacemobilenetv3": 203, "get_torchvision_model": 203, "model_nam": [203, 291, 297, 411], "torchvisionrefer": 203, "dataset_path": [203, 412, 442], "baselin": [203, 503, 504], "modul": [204, 205, 214, 215, 401, 408, 416, 441, 443, 444, 472, 473, 478, 487, 490, 492, 499, 501, 504], "builder": 206, "propos": [206, 442, 447, 478, 491, 497], "res_save_path": [206, 442], "count_model_paramet": 206, "load_search_result": [206, 442], "previou": [206, 472, 502, 504, 506], "dump_search_result": [206, 442], "params_vec2params_dict": [206, 208], "paras_vec": 206, "find_best_model_arch": [206, 442], "lie": [206, 442], "pareto": [206, 207, 442], "front": [206, 207, 442], "metrics_convers": 206, "init_search_cfg": 206, "nas_registri": [207, 442], "nas_method": 207, "create_search_space_pool": 207, "idx": [207, 443, 476], "find_pareto_front": 207, "n_point": 207, "n_metric": 207, "n_pareto_point": 207, "suggest": [208, 441, 503], "get_feedback": 208, "feedback": 208, "para_vec": 208, "gridsearch": 208, "grid": [208, 442], "whole": [208, 426, 472, 481, 500, 508], "exhaust": [208, 499], "randomsearch": 208, "42": [208, 442, 496, 508], "bayesianoptimizationsearch": 208, "bayesian": [208, 442, 489, 499], "indices2params_vec": 208, "tfpruningcallback": 209, "input_model": [209, 492, 504], "callback": [209, 254, 256, 257, 427], "pure": 209, "s_output": 209, "s_loss": 209, "t_output": 209, "classmethod": [210, 211, 212, 399, 432, 434, 437], "support_pattern": [210, 211, 212], "pattern_registri": 212, "pattern_typ": 212, "patternbas": [212, 213], "mask_shap": [212, 213], "is_contigu": 212, "compute_spars": [212, 213], "abs_sum": 212, "abs_max": 212, "tile": 213, "tilepatternbas": 213, "nxm": [213, 216], "sparsiti": [213, 216, 218, 219, 220, 228, 231, 446, 476, 487, 497, 508], "matrix": 213, "repeat_mask": 213, "ori_shap": 213, "repeat": [213, 443, 506], "tilepattern_1x1": 213, "1x1": [213, 478], "unstructur": [213, 487, 497, 508], "tilepattern_2x2": 213, "2x2": 213, "tilepattern_1x16": 213, "1x16": 213, "tilepattern_4x1": 213, "4x1": [213, 508], "tilepattern_1x2": 213, "1x2": 213, "register_pattern": 216, "registri": [216, 218, 220], "get_pattern": 216, "assertionerror": [216, 217, 218], "unit": [216, 404, 411, 474], "is_glob": 216, "global": [216, 424, 441, 499, 506], "contrast": [216, 505], "get_mask": 216, "target_sparsity_ratio": [216, 218], "pre_mask": 216, "max_sparsity_ratio_per_lay": [216, 218, 499], "layer_nam": 216, "get_masks_glob": 216, "get_mask_singl": 216, "exact_sparsity_ratio": 216, "obtain": [216, 217, 220, 503, 506], "get_block_size_dict": 216, "get_masks_loc": 216, "get_sparsity_ratio": [216, 219], "calul": 216, "ration": 216, "get_pattern_lock_mask": 216, "lock": [216, 487, 495, 497], "patternnxm": 216, "kept": 216, "block_siz": 216, "hidden": [216, 411, 447, 497], "block_size_1": 216, "block_size_2": 216, "keep_pre_mask": 216, "keep": [216, 217, 441, 447, 502], "unchang": 216, "patternninm": 216, "doc": [216, 490, 497], "md": [216, 480], "check_config": 217, "prune_config": 217, "everyth": 217, "reset_non_value_to_default": 217, "undefin": 217, "process_and_check_config": 217, "obejct": 217, "process_config": 217, "parse_to_prun": 217, "parse_not_to_prun": 217, "register_prun": 218, "get_prun": 218, "module_nam": [218, 220, 263, 411], "cuurent": 218, "current_sparsity_ratio": 218, "global_step": 218, "start_step": [218, 499], "end_step": [218, 499], "update_frequency_on_step": [218, 499], "mask_weight": 218, "formal": 218, "local_step": [218, 219], "judg": 218, "Or": [218, 446], "simpli": [218, 443, 480, 492], "on_after_optimizer_step": [218, 219], "on_before_ev": [218, 219], "on_after_ev": [218, 219], "check_is_pruned_step": 218, "update_scor": 218, "magnitudeprun": 218, "snipprun": 218, "snip": [218, 487, 497, 508], "sensit": [218, 487, 497], "arxiv": 218, "1810": 218, "02340": 218, "gradient": [218, 231, 487, 497, 508], "snipmomentumprun": 218, "moreoev": 218, "momentum": [218, 443, 487, 497, 507], "patternlockprun": 218, "templat": [219, 223, 284, 302, 307, 393, 401, 437, 472, 506], "tree": 219, "nlp": [219, 481, 497, 500], "huggingface_model": 219, "eager": [219, 265, 370, 374, 379, 480, 487, 500, 501, 504, 508], "config_file_path": 219, "pruner_info": 219, "update_items_for_all_prun": 219, "argument": [219, 222, 265, 370, 374, 379, 385, 397, 405, 424, 442, 473, 478, 485], "howev": [219, 497], "still": [219, 444, 500, 501], "analys": 219, "elementwise_over_matmul_gemm_conv": 219, "elementwise_over_al": 219, "blockwise_over_matmul_gemm_conv": 219, "register_schedul": 220, "get_schedul": 220, "gradual": [220, 497], "update_sparsity_ratio": 220, "aggressive_ratio": 220, "current_prune_step": 220, "total_prune_step": 220, "oneshotschedul": 220, "aggress": 220, "iterativeschedul": 220, "target_ratio": 220, "server": [222, 223, 336, 343, 392, 393, 400, 401, 408, 411, 422, 424, 426, 472], "seper": [222, 246], "opt_model": [222, 495], "fulli": [222, 500, 506], "meet": [222, 441, 446, 485, 494, 498, 499, 500, 504, 506], "saniti": 222, "illeg": 222, "sync": 222, "accordingli": [222, 506], "ux": 223, "config_gener": [223, 336, 393], "configuration_wizard": [223, 336, 393], "db_manag": [223, 336, 393, 430], "diagnosi": [223, 304, 307, 313, 336, 393, 421, 427], "file_brows": [223, 336, 393], "jobs_manag": [223, 336, 393], "model_zoo": [223, 336, 393], "names_mapp": [223, 336, 393], "profil": [223, 273, 289, 296, 307, 310, 312, 313, 336, 344, 352, 393, 394, 404, 409, 426, 431], "manage_workspac": [223, 336, 393], "workload": [223, 268, 269, 270, 272, 274, 277, 302, 307, 367, 381, 388, 393, 395, 401, 410, 411, 426, 429, 431, 432, 433, 434, 498], "executor": [223, 266, 393, 401], "expiring_dict": [223, 393, 401], "github_info": [223, 393, 401], "hw_info": [223, 393, 401], "json_seri": [223, 269, 320, 321, 326, 328, 329, 332, 342, 351, 377, 380, 393, 400, 401, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421], "proc": [223, 393, 401], "yaml_util": [223, 393, 401], "web": [223, 392, 393, 472, 504], "servic": [223, 393, 425, 426, 496], "commun": [223, 393, 426, 427, 428, 440, 472, 474], "router": [223, 393, 426], "inc_bench": [223, 393, 446, 472], "basemodel": [226, 227, 228, 230, 231], "plai": [226, 227, 230, 231, 497, 498], "role": [226, 227, 230, 231, 497], "itself": [226, 227, 228, 230], "node_typ": [226, 227, 228, 230, 231], "conv0": [226, 227, 228, 230, 231, 504], "get_model_typ": [228, 345], "get_model_fwk_nam": 228, "fwk": 228, "validate_graph_nod": 228, "validate_and_inference_input_output": 228, "input_tensor_nam": 228, "output_tensor_nam": 228, "graph_sess": 228, "graph_def_sess": 228, "frozen_pb_sess": 228, "load_saved_model": 228, "saved_model_tag": 228, "serv": [228, 428, 436], "signatur": 228, "saved_model_dir": [228, 443], "tag": [228, 399, 411, 504], "metagraphdef": 228, "input_tensor": [228, 231], "keras_sess": 228, "slim_sess": 228, "checkpoint_sess": 228, "estimator_sess": 228, "input_fn": 228, "saved_model_sess": 228, "base_model": [228, 230, 231], "tensorflowsavedmodelmodel": 228, "report_spars": [228, 231], "total_spars": [228, 231], "tensorflowcheckpointmodel": 228, "onnxmodel": [230, 347], "find_node_by_nam": 230, "new_nodes_list": 230, "find_nodes_by_initi": 230, "get_scale_zero": 230, "save_model_to_fil": 230, "use_external_data_format": 230, "2gb": 230, "pytorchbasemodel": 231, "get_all_weight_nam": 231, "get_weight": 231, "update_weight": 231, "new_tensor": 231, "update_gradi": 231, "grad_nam": 231, "new_grad": 231, "grad": 231, "prune_weights_": 231, "place": [231, 488, 504], "get_input": 231, "input_nam": 231, "get_gradi": 231, "pytorchmodel": 231, "pytorchfxmodel": 231, "pytorchipexmodel": 231, "objective_registri": 232, "sart": 232, "result_list": 232, "loop": [232, 253, 442, 444, 484, 503, 506], "models": [232, 494, 499, 506], "pruner_registri": 238, "fit": [240, 243, 441, 444, 446, 475, 476, 478, 480, 486, 490, 492, 494, 495, 497, 500], "calib_func": 240, "eval_metr": 240, "hybirdblock": 240, "entir": [240, 441, 443, 444, 497], "paramt": 240, "automixedprecisiontunestrategi": 241, "auto": [241, 263, 441], "tunabl": 241, "fallback": [241, 242, 485, 491, 501, 506], "prioriti": [241, 242, 246], "biggest": [241, 242], "impact": [241, 242, 246, 502, 506], "tune_config": [241, 242, 244, 246, 252], "basictunestrategi": 242, "bayesiantunestrategi": 243, "acq_max": 243, "ac": 243, "gp": 243, "y_max": 243, "random_se": [243, 253, 299, 421, 481, 503, 506, 507], "n_warmup": 243, "n_iter": 243, "acquisit": 243, "gaussian": [243, 506], "relev": 243, "limit": [243, 444, 474, 478, 497, 504], "acq": 243, "random_st": 243, "randomst": 243, "scipi": 243, "x_max": 243, "targetspac": 243, "pbound": 243, "9527": [243, 481, 503, 506, 507], "keyerror": 243, "amort": 243, "get_target": 243, "num": [243, 263, 490], "_kei": 243, "re": [243, 443, 485, 506], "exhaustivetunestrategi": 244, "msetunestrategi": 246, "polici": [246, 440, 446, 474, 485, 496, 507], "distanc": [246, 315, 478], "tuningspac": 246, "mse_metric_gap": [246, 315], "fp32_tensor": [246, 315], "dequantize_tensor": [246, 315], "euclidean": [246, 315, 478], "mse_impact_lst": 246, "fp32_model": [246, 263, 447, 475], "best_qmodel": 246, "_summary_": [246, 253], "current_best_model": 246, "randomtunestrategi": 247, "strategy_registri": [252, 506], "compressionmanag": 253, "uesd": 253, "deal": 253, "commpon": 253, "prepare_compress": 253, "compression_manag": 253, "train_loop": 253, "path_to_sav": 253, "target_model_typ": 253, "quant_mod": 253, "qdq": [253, 447, 487, 500], "opset_vers": 253, "orchestr": [253, 446, 487], "workspac": [253, 262, 301, 302, 307, 309, 310, 311, 341, 410, 412, 421, 492], "layerhistogramcollector": [254, 257], "layer_tensor": [254, 257], "include_lay": [254, 257], "histogram": [254, 257, 263, 304, 307, 315, 443, 504], "diverg": [254, 257, 258, 478], "create_eval_func": 256, "postprocess_cfg": 256, "create_train_func": 256, "Their": 256, "kl_diverg": 257, "expand_quantized_bin": [257, 258], "quantized_bin": [257, 258], "reference_bin": [257, 258], "expand": [257, 258], "bin": [257, 258], "safe_entropi": [257, 258], "reference_distr_p": [257, 258], "p_sum": [257, 258], "candidate_distr_q": [257, 258], "q_sum": [257, 258], "safe": [257, 258, 474], "entropi": [257, 258, 506], "get_threshold": [257, 258], "hist_edg": [257, 258], "min_val": [257, 258, 443], "max_val": [257, 258, 443], "quantized_typ": [257, 258], "num_quantized_bin": [257, 258], "255": [257, 258, 500], "historgram": [257, 258], "number_bin": [257, 258], "checkpoint_dir": 262, "history_cfg": 262, "checkpoint": [262, 492], "best_configur": 262, "best_model_weight": 262, "pt": [262, 492, 498, 501], "histori": [262, 300, 307, 309, 313, 366, 381, 430, 506], "snapshot": [262, 313, 430], "cfg_from_fil": 263, "yaml_fil": [263, 476, 480, 490, 494], "lazyimport": 263, "lazi": 263, "till": [263, 506], "later": [263, 485, 504], "get_siz": [263, 411], "seen": [263, 443, 447], "equal_dict": 263, "d2": 263, "compare_kei": 263, "ignore_kei": 263, "ignor": [263, 476], "dump_elapsed_tim": [263, 447], "customized_msg": 263, "elaps": 263, "combine_histogram": 263, "old_hist": 263, "arr": 263, "old": [263, 502], "get_tuning_histori": 263, "tuning_history_path": [263, 381], "load_data_from_pkl": 263, "pkl": 263, "dump_data_to_loc": 263, "project_data": [264, 367, 368, 373, 377, 380, 387], "benchmark_data": 264, "workdir": [264, 377, 387, 393, 397, 401, 408], "config_filenam": [264, 377, 387], "configuration_data": [264, 368, 373, 377, 380], "generate_config": [264, 368, 373, 377, 380, 387], "dataloaderinterfac": [264, 377, 387], "dataloader_data": [264, 275, 302, 307, 377, 387], "parse_arg": [265, 370, 374, 379, 385], "benchmark_mod": [265, 404], "set_eager_execut": [265, 370, 374, 379], "request_id": [266, 366, 381, 382, 397, 405], "asd": [266, 382], "benchmark_id": [266, 281, 282, 292], "benchmark_result_upd": 266, "benchmark_result_update_pytorch_script": 266, "neural_coder_perform": 266, "neural_coder_tim": 266, "pytorch_script_bench_optim": 266, "command_line_of_script": 266, "pytorch_script_bench_original_model": 266, "execute_real_benchmark": 266, "project_detail": [266, 297, 366, 382], "benchmark_detail": 266, "benchmark_model": [267, 336, 393], "execute_benchmark": [267, 336, 393], "benchmarkconfiggener": 268, "configgener": [268, 269, 270, 272, 273, 274], "generate_evaluation_config": [268, 270, 272, 274], "generate_accuracy_config": 268, "generate_performance_config": 268, "workload_directori": 269, "configuration_path": 269, "jsonseri": [269, 320, 321, 326, 328, 329, 332, 342, 351, 377, 380, 400, 402, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421], "get_predefined_config_path": [269, 411], "predefin": [269, 302, 306, 307, 411, 446], "generate_model_config": 269, "generate_dataloader_config": 269, "graphoptimizationconfiggener": 270, "generate_graph_optimization_config": 270, "packag": [271, 278, 283, 285, 286, 288, 289, 290, 293, 294, 297, 298, 317, 318, 322, 325, 331, 333, 336, 337, 343, 362, 364, 369, 372, 375, 376, 378, 384, 389, 393, 426, 447, 472, 483, 488, 502, 506], "benchmark_config_gener": [271, 336, 393], "graph_optimization_config_gener": [271, 336, 393], "mixed_precision_config_gener": [271, 336, 393], "profiling_config_gener": [271, 336, 393], "quantization_config_gener": [271, 336, 393], "mixedprecisionconfiggener": 272, "generate_mixed_precision_config": 272, "profilingconfiggener": 273, "quantizationconfiggener": 274, "generate_tuning_config": 274, "generate_quantization_config": 274, "configurationpars": 275, "input_data": 275, "parse_evaluation_data": 275, "evaluation_data": 275, "parse_transform": 275, "transforms_data": [275, 302, 307], "parse_dataload": 275, "parse_metr": 275, "metric_data": 275, "get_param_typ": 275, "param_group": 275, "parse_valu": 275, "required_typ": 275, "parse_list_valu": 275, "parse_multidim_list": 275, "dimension": 275, "normalize_string_list": 275, "string_list": 275, "bracket": 275, "miss": [275, 500], "get_predefined_configur": 277, "update_config_to_machine_specif": 277, "configuration_pars": [278, 336, 393], "get_boundary_nod": [278, 336, 393], "get_configur": [278, 336, 393], "params_feed": [278, 336, 393], "feeder": 279, "get_framework": [279, 350], "get_domain": 279, "domain": [279, 286, 289, 305, 307, 312, 336, 343, 344, 347, 365, 393, 394, 396, 411, 423, 428, 472, 497, 506], "get_model": [279, 350, 432], "get_dataload": 279, "get_transform": 279, "get_object": 279, "get_strategi": 279, "get_quantization_approach": 279, "get_possible_valu": 279, "bench": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 366, 392], "dbmanag": [280, 312], "database_loc": [280, 312], "log_level": [280, 312, 403], "initialize_databas": [280, 312], "create_sqlalchemy_engin": [280, 312], "create_al": [280, 312], "tabl": [280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 312], "project_id": [281, 284, 291, 292, 295, 297, 302, 306, 307], "model_id": [281, 291, 292, 295], "dataset_id": [281, 284, 292, 295, 302, 306, 307], "warmup_iter": 281, "number_of_inst": 281, "cores_per_inst": [281, 412, 473, 475, 485, 499], "execution_command": [281, 292, 295], "benchark": 281, "delete_benchmark": [281, 301, 307], "benchmark_nam": 281, "update_statu": [281, 292, 295], "execution_statu": [281, 292, 295], "executionstatu": [281, 292, 295, 301, 307, 309, 310, 394, 410], "update_dur": [281, 292, 295], "durat": [281, 292, 295, 301, 307, 309, 310, 397, 494, 503], "update_execution_command": [281, 292, 295, 301, 307, 309, 310], "update_log_path": [281, 292, 295, 307, 310], "update_config_path": [281, 292], "update_dataset": [281, 292, 295], "update_batch_s": [281, 292], "update_mod": 281, "update_cores_per_inst": 281, "update_number_of_inst": 281, "clean_statu": [281, 292, 295, 301, 307, 309, 310, 410], "status_to_clean": [281, 292, 295, 301, 307, 309, 310, 410], "build_info": [281, 282, 284, 291, 292, 295, 296, 300], "benchmark_result": [281, 289, 312, 336], "benchmarkresult": [281, 282], "update_accuraci": 282, "update_perform": 282, "list_by_framework": [283, 290, 298], "framework_id": [283, 290, 291, 298, 314], "query_to_list": [283, 290, 298], "dataloaders_queri": 283, "update_param": 283, "dataloader_id": 283, "fill_dictionari": [283, 285, 286, 288, 290, 293, 294, 298], "dataset_nam": [284, 302, 307], "template_path": 284, "delete_dataset": [284, 302, 307], "update_template_path": 284, "get_domain_id": 285, "domain_nam": 285, "domainflavour": [286, 394], "db": [286, 293, 294, 313, 314], "get_domain_flavour_id": 286, "domain_flavour_nam": 286, "flavour": [286, 305, 307, 365, 394], "get_framework_id": 288, "framework_nam": [288, 363, 400], "domain_flavour": [289, 312, 336, 342, 411], "optimization_typ": [289, 292, 312, 336], "profiling_result": [289, 295, 312, 336], "tuning_detail": [289, 292, 312, 336], "tuning_histori": [289, 292, 307, 309, 312, 336, 371, 393], "metrics_queri": 290, "input_nod": 291, "precision_id": [291, 292, 293, 294], "domain_id": [291, 298], "domain_flavour_id": 291, "supports_profil": [291, 344, 352], "supports_graph": [291, 344], "delete_model": [291, 307, 308], "optimization_type_id": 292, "sampling_s": [292, 412, 475, 506, 507], "tuning_details_id": [292, 299], "diagnosis_config": 292, "delete_optim": [292, 307, 309], "optimization_id": [292, 293, 307, 309, 366], "optimization_nam": [292, 293, 306, 307], "update_optimized_model": [292, 307, 309], "optimized_model_id": 292, "update_sampling_s": 292, "update_precis": 292, "update_tuning_detail": 292, "pin_accuracy_benchmark": [292, 307, 309], "pin": [292, 307, 309], "pin_performance_benchmark": [292, 307, 309], "get_optimization_by_project_and_model": 292, "unpin_benchmark": 292, "db_connect": 292, "unpin": 292, "optimizationtyp": [292, 293, 394], "tuningdetail": [292, 299, 380], "tuninghistori": [292, 300, 381], "optimized_model": [292, 485], "get_pinned_benchmark": 292, "list_for_precis": 293, "precision_nam": [293, 294], "get_optimization_type_for_precis": 293, "get_optimization_type_id": 293, "get_optimization_type_by_nam": 293, "get_optimization_type_by_id": 293, "get_precision_id": 294, "get_precision_by_nam": 294, "get_precision_by_id": 294, "num_thread": 295, "delete_profil": [295, 307, 310], "profiling_id": [295, 296, 307, 310, 382], "profiling_nam": 295, "update_num_thread": 295, "profilingresult": [295, 296], "total_execution_tim": 296, "accelerator_execution_tim": 296, "cpu_execution_tim": 296, "op_run": 296, "op_defin": 296, "get_result": 296, "bulk_add": 296, "params_interfac": [296, 301, 302, 304, 306, 307, 308, 309, 310, 312, 336, 393, 430], "profilingresultaddparamsinterfac": [296, 307, 310, 313], "bulk": [296, 307, 310], "delete_result": 296, "delet": [296, 301, 302, 307, 308, 309, 310, 311, 497], "create_project": [297, 306, 307, 311], "delete_project": [297, 307, 311], "project_nam": [297, 302, 307], "get_model_by_nam": 297, "list_project": [297, 307, 311], "update_not": 297, "list_by_domain": 298, "transforms_queri": 298, "accuracy_criterion_typ": 299, "accuracy_criterion_threshold": 299, "exit_polici": [299, 481, 503, 506, 507], "tuning_details_data": 299, "delete_tuning_detail": 299, "update_tuning_histori": 299, "tuning_history_id": 299, "minimal_accuraci": 300, "baseline_accuraci": 300, "baseline_perform": 300, "last_tune_accuraci": 300, "last_tune_perform": 300, "best_tune_accuraci": 300, "best_tune_perform": 300, "benchmarkapiinterfac": [301, 307], "get_benchmark_detail": [301, 307], "list_benchmark": [301, 307], "update_benchmark_accuraci": [301, 307], "update_benchmark_perform": [301, 307], "update_benchmark_statu": [301, 307], "update_benchmark_dur": [301, 307], "update_path": [301, 307, 309], "add_benchmark": [301, 307], "add_result": [301, 307, 310], "edit_benchmark": [301, 307], "edit": [301, 307, 309, 310, 313, 440, 441, 474], "parse_benchmark_data": [301, 307], "benchmarkaddparamsinterfac": [301, 307, 313], "parse_benchmark_edit_data": [301, 307], "benchmarkeditparamsinterfac": [301, 307, 313], "before_delete_benchmark_entri": 301, "sqlite3": 301, "db_model": [301, 312, 336, 393], "datasetapiinterfac": [302, 307], "get_dataset_detail": [302, 307], "list_dataset": [302, 307], "add_dataset": [302, 307], "set_template_path": [302, 307], "parsed_dataset_data": [302, 307], "datasetaddparamsinterfac": [302, 307, 313], "check_if_custom_metric_or_dataload": [302, 307], "dataset_data": [302, 307, 367, 368, 373, 377, 380, 413], "generate_custom_templ": [302, 307], "dataloader_path": [302, 307], "generate_templ": [302, 307], "template_typ": [302, 307], "parse_dataset_data": [302, 307], "get_predefined_dataset": [302, 307], "prepare_predefined_dataload": [302, 307], "prepare_predefined_transform": [302, 307], "ordereddict": [302, 307, 412], "set_database_vers": [302, 303], "version_num": [302, 303], "alembic_vers": [302, 303], "initialize_associ": [302, 303], "initialize_precision_optimization_types_associ": [302, 303], "search_in_list_of_dict_for_unique_valu": [302, 303], "list_of_dict": [302, 303], "search_in_list_of_dict": [302, 303], "diagnosisapiinterfac": [304, 307], "get_op_list": [304, 307, 315], "get_op_detail": [304, 307, 315], "generate_optim": [304, 307], "model_wise_param": [304, 307], "parse_optimization_data": [304, 307, 309], "diagnosisoptimizationparamsinterfac": [304, 307, 313], "parse_op_wise_config": [304, 307], "op_wise_param": [304, 307], "parse_wise_paramet": [304, 307], "params_per_typ": [304, 307], "set_op_wise_pattern_precis": [304, 307], "parse_model_wise_config": [304, 307], "dictionariesapiinterfac": [305, 307], "dictonari": [305, 307], "list_domain": [305, 307], "list_domain_flavour": [305, 307], "list_optimization_typ": [305, 307], "list_optimization_types_for_precis": [305, 307], "list_precis": [305, 307], "list_dataload": [305, 307], "list_dataloaders_by_framework": [305, 307], "list_transform": [305, 307], "list_transforms_by_framework": [305, 307], "list_transforms_by_domain": [305, 307], "list_metr": [305, 307], "list_metrics_by_framework": [305, 307], "examplesapiinterfac": [306, 307], "get_optimization_data": [306, 307], "optimizationaddparamsinterfac": [306, 307, 309, 313], "benchmark_api_interfac": [307, 312, 336], "dataset_api_interfac": [307, 312, 336], "diagnosis_api_interfac": [307, 312, 336], "dictionaries_api_interfac": [307, 312, 336], "examples_api_interfac": [307, 312, 336], "model_api_interfac": [307, 312, 336], "optimization_api_interfac": [307, 312, 336], "profiling_api_interfac": [307, 312, 336], "project_api_interfac": [307, 312, 336], "modelapiinterfac": [307, 308], "add_model": [307, 308, 311], "get_model_detail": [307, 308], "list_model": [307, 308, 336, 362, 393], "parse_model_data": [307, 308], "modeladdparamsinterfac": [307, 308, 313], "optimizationapiinterfac": [307, 309], "get_optimization_detail": [307, 309], "list_optim": [307, 309], "update_optimization_statu": [307, 309], "update_optimization_dur": [307, 309], "add_optim": [307, 309], "add_quantization_optim": [307, 309], "optimization_data": [307, 309, 367, 368, 373, 377, 380], "add_standard_optim": [307, 309], "edit_optim": [307, 309], "add_tuning_histori": [307, 309], "parse_tuning_histori": [307, 309], "tuninghistoryinterfac": [307, 309, 313, 430], "parse_optimization_edit_data": [307, 309], "optimizationeditparamsinterfac": [307, 309, 313], "profilingapiinterfac": [307, 310], "get_profiling_detail": [307, 310], "list_profil": [307, 310], "update_profiling_statu": [307, 310], "update_profiling_dur": [307, 310], "add_profil": [307, 310], "edit_profil": [307, 310], "bulk_add_result": [307, 310], "parse_profiling_data": [307, 310], "profilingaddparamsinterfac": [307, 310, 313], "parse_profiling_result_data": [307, 310], "parse_profiling_edit_data": [307, 310], "profilingeditparamsinterfac": [307, 310, 313], "projectapiinterfac": [307, 311], "get_project_detail": [307, 311], "add_dummy_dataset": [307, 311], "update_project_not": [307, 311], "db_oper": [312, 336, 393], "parse_nod": 313, "tuninghistoryiteminterfac": [313, 430], "update_dataloaders_param": 314, "dataloaders_to_upd": 314, "framework_dataloaders_config": 314, "get_framework_dataloaders_config": 314, "get_framework_transforms_config": 314, "get_tensors_info": [315, 344], "about": [315, 344, 397, 399, 400, 405, 406, 440, 472, 474, 475, 481, 501, 508], "load_quantization_config": 315, "calculate_ms": 315, "input_model_tensor": 315, "optimized_model_tensor": 315, "op_detail": [315, 317, 336, 393], "opdetail": [315, 320], "get_histogram_data": 315, "draw": [315, 503, 506], "diagnosisfactori": 316, "get_diagnosi": 316, "debug": [317, 318, 322, 444, 472, 506], "onnx_diagnosi": [317, 336, 393], "onnxrt_diagnosi": [317, 318, 336], "tensorflow_diagnosi": [317, 336, 393], "factori": [317, 336, 371, 384, 389, 393, 404], "op_entri": [317, 336, 393], "onnxrtdiagnosi": 319, "onnxrtmodel": [319, 347], "serialization_typ": [320, 321, 351, 400, 402, 413, 414, 418, 419], "oppattern": 320, "pattern_data": 320, "opweight": 320, "weights_data": 320, "opactiv": 320, "op_activ": 320, "opentri": 321, "activation_min": 321, "activation_max": 321, "tensorflowdiagnosi": 323, "tensorflowmodel": [323, 352, 354, 355, 356, 357], "browser": [324, 472], "get_directory_entri": 324, "get_requested_path": 324, "request": [324, 336, 337, 338, 359, 360, 363, 381, 393, 397, 423, 425, 427, 428, 432, 434, 435, 437, 472, 475, 500], "get_non_hidden_directory_entri": 324, "create_dir_entri": 324, "direntri": 324, "create_file_entri": 324, "create_entri": 324, "is_directori": 324, "sort_entri": 324, "should_show_fil": 324, "should_show_only_model_fil": 324, "get_setting_valu": 324, "get_filter_valu": 324, "filter_requested_entri": 324, "filter_nam": 324, "is_directory_entri": 324, "is_model_or_directory_entri": 324, "shown": [324, 441, 442, 472, 478, 485, 490, 494, 495, 506], "is_dataset_or_directory_entri": 324, "brows": 325, "filesystem": [325, 411, 436], "attribute_typ": 326, "expanded_group": [327, 330], "edg": [329, 331, 336, 393, 505], "add_edg": 329, "source_id": 329, "target_id": 329, "get_nod": 329, "highlight_pattern": 329, "highlight": [329, 332, 472], "get_target_nod": 329, "reader": [330, 331, 336, 393], "graphread": 330, "find_pattern_in_graph": [330, 427], "displai": [331, 344], "onnxrt_read": [331, 333, 336], "tensorflow_read": [331, 333, 336], "collaps": [331, 336, 393, 472], "graph_read": [331, 336, 393], "group": [332, 443, 487, 497, 504, 505, 506, 508], "groupnod": 332, "group_nam": 332, "onnxrtread": 334, "tensorflowread": 335, "jobs_control_queu": [336, 337, 393], "frozen_pb": [336, 343, 353], "meta_graph": [336, 343, 353], "model_type_gett": [336, 343, 393], "repositori": [336, 341, 343, 393, 399, 439], "download_config": [336, 361, 362, 393], "download_model": [336, 361, 362, 393], "optimize_model": [336, 369, 371, 372, 375], "neural_coder_optim": [336, 371, 393], "tune_model": [336, 371, 378], "execute_optim": [336, 371, 393], "tensorflow_profil": [336, 384, 393], "execute_profil": [336, 384, 393], "profile_model": [336, 384, 386, 390, 393], "job": 337, "_jobscontrolqueu": 338, "queu": 338, "jobsmanag": 338, "_jobsmmanag": 339, "_job": 339, "get_default_path": 341, "shape_elements_ord": [344, 347, 356, 411], "get_input_nod": [344, 354, 355, 356], "get_output_nod": [344, 354, 355, 356], "ensure_supported_path": 344, "get_model_graph": [344, 347, 355, 356, 427], "get_framework_nam": [344, 347, 349, 356], "supports_path": [344, 347, 349, 352, 354, 355, 357], "guard_requirements_instal": [344, 347, 349, 356], "instal": [344, 347, 349, 356, 363, 483, 496], "nc_model_inst": [347, 356], "onnx_model": 347, "filtered_input_nod": 347, "remove_number_of_samples_from_shap": 347, "pytorchscriptmodel": 349, "modelrepositori": 350, "get_framework_from_path": [350, 411], "get_supported_framework": 350, "is_model_path": 350, "trust": [351, 472], "frozenpbmodel": 352, "kerasmodel": 354, "metagraphmodel": 355, "metagraph": 355, "savedmodelmodel": 357, "get_input_shap": 358, "fix_dynamic_shap": 358, "resourc": [361, 478, 497], "download_yaml_config": 361, "model_info": 361, "download_fil": 361, "download_path": 361, "header": [361, 436, 483], "report_progress": 361, "unpack_arch": 361, "archive_path": 361, "unpack": 361, "archiv": 361, "get_yaml_url": 361, "model_src_dir": 361, "yaml_relative_loc": 361, "get_available_model": 363, "check_vers": 363, "framework_vers": 363, "supported_vers": 363, "validate_model_list": 363, "model_list": 363, "get_framework_module_nam": 363, "get_installed_framework": 363, "mappingdirect": 365, "namesmapp": 365, "framework_map": 365, "domain_map": 365, "domain_flavour_map": 365, "precision_map": 365, "map_nam": 365, "parameter_typ": 365, "execute_optimization_pytorch_script": 366, "execute_optimization_regular": 366, "parse_model_data_to_bench_nam": 366, "parse_log": 366, "optimization_detail": 366, "check_if_collect_tuning_histori": 366, "optimizationfactori": 367, "get_optim": 367, "optimization_script": [368, 373, 377, 380], "optimize_graph": [370, 374], "output_graph": [370, 374, 379, 485], "optimize_graph_config": [370, 374], "optimize_pt_script": 376, "output_model_nam": 377, "output_model_dir": 377, "optimizationinterfac": 377, "accuracycriterion": 380, "optimization_workdir": 381, "watcher": 381, "send": [381, 423, 428, 446, 474], "process_succeed": 381, "signal": [381, 411, 481], "was_history_file_chang": 381, "history_file_modification_tim": 381, "modif": [381, 443, 447, 475, 484], "send_history_snapshot": 381, "execute_real_profil": 382, "profiling_detail": 382, "profilerfactori": [383, 388], "get_profil": [383, 388], "profiling_data": [383, 387, 388, 390, 409], "load_profiling_detail": 385, "json_path": 385, "config_path": 387, "initialize_graph": 390, "tf_modul": 390, "create_tf_config": 390, "num_warmup": 390, "get_node_by_nam": 390, "convert_nodes_to_list": 390, "build_dataload": 390, "delete_assign": 391, "wsgi": 392, "prepare_environ": 392, "app": [393, 426], "history_snapshot_pars": [393, 426, 431], "request_data_processor": [393, 426, 431], "response_gener": [393, 426, 431, 432, 434, 437], "status": [394, 406, 410], "ensure_workdir_exists_and_writ": 395, "clean_workloads_wip_statu": 395, "wip": 395, "workloads_list": 395, "migrate_databas": 395, "latest": [395, 405, 488, 498, 502], "alemb": [395, 483, 488], "notfoundexcept": [396, 424, 425], "accessdeniedexcept": 396, "deni": 396, "clienterrorexcept": 396, "internalexcept": 396, "workspace_path": [397, 411], "subject": [397, 423, 489], "send_respons": 397, "log_nam": 397, "additional_log_nam": [397, 405], "shell": [397, 405, 504], "process_dur": 397, "call_on": 397, "cwd": [397, 405], "universal_newlin": [397, 405], "startupinfo": [397, 405], "creationflag": [397, 405], "ignore_exit_cod": [397, 405], "pid": [397, 405], "env_arg": 397, "ncprocess": [397, 406], "refresh_workdir": 397, "is_multi_command": 397, "expir": 398, "expiringdictitem": 398, "expires_at": 398, "is_expir": 398, "expiringdict": 398, "initial_valu": 398, "ttl": 398, "120": 398, "userdict": 398, "githubinfo": 399, "releas": [399, 411, 439, 446, 488], "hw": 400, "hwinfo": 400, "get_number_of_socket": 400, "get_distribut": 400, "distibut": 400, "get_bios_vers": 400, "bio": [400, 496], "is_turbo_boost_en": 400, "turbo": [400, 496], "boost": [400, 491, 498], "get_kernel_vers": 400, "kernel": [400, 447, 496, 497, 506], "get_framework_info": 400, "get_framework_dependency_info": 400, "subdepend": 400, "serializ": 402, "serialize_item": 402, "datetim": 402, "throw": 402, "typeerror": 402, "2016": 402, "84913": 402, "04": [402, 446, 496, 508], "08t11": 402, "084913": 402, "change_log_level": 403, "line": [404, 405, 424, 472, 480, 487, 504], "optimizationpars": 404, "performancepars": 404, "update_parti": 404, "partial": [404, 443, 500], "parsed_result": 404, "summarize_parti": 404, "summarize_valu": 404, "accuracypars": 404, "benchmarkparserfactori": 404, "get_pars": 404, "profilingpars": 404, "unify_tim": 404, "string_valu": 404, "micro": 404, "125": [404, 508], "6m": 404, "microsecond": 404, "output_dir": 405, "cmd": [405, 485], "docker": 405, "hub": 405, "aibt_tensorflow": 405, "cento": [405, 446], "7_3_mkldnn_tensorflow": 405, "111224": 405, "pull_imag": 405, "0c750a01": 405, "90e0": 405, "4aa8": 405, "99fe": 405, "a194d55a2046": 405, "time_start": 405, "2018": 405, "17t14": 405, "47": [405, 508], "352502": 405, "time_stop": 405, "25": [405, 508], "110410": 405, "info_path": 405, "runtim": [405, 447, 481, 482, 484, 487, 499, 500], "tail": 405, "along": [405, 488], "is_ok": [405, 406], "subprocess": [405, 427], "popen": 405, "remove_log": 405, "properli": 406, "return_code_al": 406, "remove_successful_log": 406, "success": [406, 423, 488], "sent": 409, "throughput": [409, 485], "acc_input_model": 409, "acc_optimized_model": 409, "size_input_model": 409, "size_optimized_model": 409, "path_optimized_model": 409, "optimization_tim": 409, "insert_data": 409, "calculate_throughput": 409, "readi": 409, "ensure_working_path_exist": 410, "clean_log": 410, "workdir_path": 410, "is_hidden": 411, "get_dataset_path": 411, "get_file_extens": 411, "lead": [411, 478, 491, 497], "is_dataset_fil": 411, "normalize_domain": 411, "underscor": 411, "normalize_framework": 411, "normalize_str": 411, "string_to_norm": 411, "get_model_zoo_config_path": 411, "model_dict": 411, "get_model_zoo_model_path": 411, "check_modul": 411, "get_module_vers": 411, "mb": [411, 443], "add_unit": 411, "load_model_config": 411, "load_dataloader_config": 411, "load_transforms_config": 411, "load_transforms_filter_config": 411, "meaning": [411, 495], "load_precisions_config": 411, "load_model_wise_param": 411, "load_metrics_config": 411, "get_metrics_dict": 411, "load_help_nc_param": 411, "replace_with_valu": 411, "file_path": 411, "verify_file_path": 411, "determine_ip": 411, "ip": 411, "is_development_env": 411, "nc_mode": 411, "develop": [411, 441, 446, 474, 488, 491, 498, 500, 501, 503], "filter_transform": 411, "parse_bool_valu": 411, "release_tag": 411, "get_shape_from_transform": 411, "get_height_width_from_s": 411, "parse_to_string_list": 411, "parse_to_float_list": 411, "export_to_csv": 411, "parse_vers": 411, "string_vers": 411, "remove_dataload": 412, "datalad": 412, "remove_accuracy_metr": 412, "set_evaluation_dataload": 412, "udpat": 412, "set_evaluation_dataset_path": 412, "get_performance_config": 412, "set_performance_cores_per_inst": 412, "get_performance_cores_per_inst": 412, "set_performance_num_of_inst": 412, "num_of_inst": [412, 473, 475, 485, 499], "get_performance_num_of_inst": 412, "set_accuracy_and_performance_batch_s": 412, "set_quantization_dataload": 412, "set_quantization_dataset_path": 412, "set_quantization_batch_s": 412, "set_workspac": [412, 421], "set_accuracy_go": 412, "accuracy_go": 412, "set_accuracy_metr": 412, "set_transform": 412, "process_transform": 412, "set_quantization_approach": 412, "set_input": 412, "set_output": 412, "set_quantization_sampling_s": 412, "set_performance_warmup": 412, "warmup": [412, 499], "set_performance_iter": 412, "set_optimization_precis": 412, "yaml_path": 412, "is_dummi": 413, "labelbal": 413, "set_transforms_from_list": 413, "transforms_list": 413, "set_dataset": 413, "postprocessschema": 414, "set_accuracy_postprocess_transform": 414, "set_precis": [415, 417], "sgdoptim": 419, "adamwoptim": 419, "adamoptim": 419, "crossentropylosscriterion": 419, "sparsecategoricalcrossentropycriterion": 419, "knowledgedistillationlosscriterion": 419, "weightcompressionapproach": 419, "parse_dict_value_to_float": 419, "parse_dict_value_to_int": 419, "wiseconfigdetail": 420, "wiseconfig": 420, "advanc": [420, 440, 446, 474, 475, 500, 506, 507], "multiobject": 421, "acccriterion": 421, "exitpolici": 421, "set_timeout": 421, "set_max_tri": 421, "max_trial": [421, 481, 506], "trial": [421, 506], "set_performance_onli": 421, "set_random_se": 421, "float_represent": 422, "dumper": 422, "pruner_represent": 422, "outsid": 423, "create_simple_respons": 423, "gui": [423, 424, 428, 472, 487, 488], "messagequeu": 423, "queue": [423, 428], "post_failur": 423, "failur": [423, 441], "post_success": 423, "post_error": 423, "wait": 423, "global_config_directori": 424, "set_up": 424, "determine_values_from_environ": 424, "get_command_line_arg": 424, "determine_server_port": 424, "tri": [424, 506], "max_ports_tri": 424, "port_default": 424, "determine_gui_port": 424, "client": [424, 472], "server_port": 424, "unless": [424, 484], "is_port_taken": 424, "determine_log_level": 424, "determin": [424, 440, 443, 474, 481], "determine_url_prefix": 424, "get_url": 424, "dump_token_to_fil": 424, "servicenotfoundexcept": 425, "unknown": 425, "connector": 427, "routingdefinit": 427, "rout": 427, "realtimeroutingdefinit": 427, "realtim": 427, "deferredroutingdefinit": 427, "deferredsubprocessroutingdefinit": 427, "spawn": 427, "get_system_info": 427, "endpoint": 428, "run_serv": 428, "webserv": 428, "get_tls_arg": 428, "tl": [428, 472], "block_ifram": 428, "werkzeug": [428, 436], "ifram": 428, "csp": 428, "block_snif": 428, "mime": 428, "snif": 428, "require_api_token": 428, "author": [428, 489], "j": 428, "handle_api_cal": 428, "subpath": 428, "allow_api_cal": 428, "page_not_found": 428, "disable_cach": 428, "build_paramet": 428, "flask": [428, 472], "web_socket_publish": 428, "web_socket": 428, "flask_socketio": 428, "socketio": [428, 472], "benchmarkservic": 429, "workloadservic": [429, 433, 434, 437], "historysnapshotpars": 430, "history_snapshot": 430, "provide_perform": 430, "parse_history_snapshot": 430, "parse_history_item": 430, "history_item": 430, "extract_accuraci": 430, "extract_perform": 430, "modelservic": 432, "optimizationservic": 433, "profilingservic": 434, "generate_csv": 434, "processor": [435, 485, 491, 496, 498, 500, 501, 508], "requestdataprocessor": 435, "get_string_valu": 435, "responsegener": 436, "serve_from_filesystem": 436, "mimetyp": 436, "as_attach": 436, "add_refresh": 436, "refresh_tim": 436, "refresh": 436, "from_except": 436, "get_status_code_for_except": 436, "get_config": 437, "get_code_templ": 437, "get_output": 437, "welcom": [439, 440, 474], "contribut": [439, 440, 446], "guidelin": [439, 445, 446], "legal": [439, 446], "interest": [440, 446, 474, 504], "foster": [440, 474], "particip": [440, 474], "harass": [440, 474], "experi": [440, 474, 503, 506], "everyon": [440, 474], "bodi": [440, 474], "ethnic": [440, 474], "characterist": [440, 474], "gender": [440, 474], "educ": [440, 474], "socio": [440, 474], "econom": [440, 474], "appear": [440, 472, 474], "race": [440, 474], "religion": [440, 474], "sexual": [440, 474], "orient": [440, 474], "inclus": [440, 474], "Being": [440, 474], "respect": [440, 474, 479, 484, 497, 507], "viewpoint": [440, 474], "gracefulli": [440, 474], "critic": [440, 446, 474], "focus": [440, 447, 474, 485], "show": [440, 443, 472, 473, 474, 478, 480, 497, 506], "empathi": [440, 474], "toward": [440, 444, 474, 478], "unaccept": [440, 474], "imageri": [440, 474], "unwelcom": [440, 474], "troll": [440, 474], "insult": [440, 474], "derogatori": [440, 474], "comment": [440, 474, 476, 490, 505], "polit": [440, 474], "attack": [440, 474], "publish": [440, 474, 489, 491], "electron": [440, 474], "permiss": [440, 474], "inappropri": [440, 474], "profession": [440, 474], "clarifi": [440, 474], "appropri": [440, 474], "fair": [440, 474], "action": [440, 474, 485], "reject": [440, 474], "commit": [440, 474], "wiki": [440, 474], "issu": [440, 445, 472, 474, 488, 500, 504], "ban": [440, 474], "temporarili": [440, 474], "perman": [440, 474], "deem": [440, 474], "threaten": [440, 474], "offens": [440, 474], "harm": [440, 474], "mail": [440, 474], "social": [440, 474], "media": [440, 474], "appoint": [440, 474], "event": [440, 474, 504], "abus": [440, 474], "report": [440, 472, 474, 503], "contact": [440, 474, 502, 503], "mlp": [440, 474], "mlpc": [440, 474], "complaint": [440, 474], "review": [440, 474], "investig": [440, 474], "circumst": [440, 474, 499], "oblig": [440, 474], "confidenti": [440, 472, 474], "regard": [440, 474, 501], "incid": [440, 474], "who": [440, 474], "good": [440, 474, 481, 500, 506], "faith": [440, 474], "face": [440, 446, 474, 498, 502], "temporari": [440, 474], "repercuss": [440, 474], "leadership": [440, 474], "html": 440, "faq": [440, 446, 474], "toolkit": [441, 446, 488, 498], "quant": [441, 443, 500], "symbolic_trac": 441, "fake": [441, 444, 500], "proxi": 441, "fed": 441, "neural_compressor": [441, 442, 444, 446, 452, 473, 475, 476, 478, 480, 485, 486, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 505, 506, 507], "tuned_checkpoint": 441, "conduct": 441, "imper": 441, "therefor": [441, 444, 500, 502], "lot": [441, 481], "might": [441, 472, 474, 506], "successfulli": [441, 446, 480, 498], "These": [441, 443, 487], "won": 441, "maskrcnn": 441, "net": [441, 443], "prepare_custom_config_dict": 441, "non_traceable_module_class": 441, "anchorgener": 441, "rpnpostprocessor": 441, "pooler": 441, "postprocessor": 441, "maskrcnnfpnfeatureextractor": 441, "maskpostprocessor": 441, "fpn": 441, "rpnhead": 441, "untrac": 441, "ssd": [441, 508], "resnet34": [441, 508], "ptq": [441, 480, 487, 500, 504], "r34": 441, "bboxes_labels_scor": 441, "prob": 441, "max_output": 441, "zip": 441, "squeez": 441, "dbox": 441, "dlabel": 441, "dscore": 441, "decode_singl": 441, "autom": 442, "artifici": 442, "ann": 442, "par": 442, "outperform": 442, "simplest": [442, 478], "launcher": [442, 478, 497], "agent": 442, "syntax": [442, 484], "section": [442, 472, 478, 497, 499, 507], "ofa_mbv3_d234_e346_k357_w1": 442, "250": 442, "results_csv_path": 442, "search_result": 442, "aim": [442, 475, 506], "__new__": 442, "__init__": [442, 443, 447, 476, 490, 494, 506], "pragma": 442, "cover": [442, 446, 474, 486, 498], "potenti": 442, "4x": [442, 443, 500], "effici": [442, 475, 478, 495, 498], "figur": [442, 497], "inner": 442, "evolutionari": 442, "cycl": [442, 475], "until": [442, 485, 506], "conclud": 442, "involv": 443, "done": [443, 444, 478, 493, 497, 500], "observ": [443, 481, 503, 504, 506], "divid": [443, 506], "sophist": 443, "signific": [443, 446, 498, 500], "speed": [443, 446, 485, 498, 500], "notabl": 443, "floatfunct": 443, "quantstub": 443, "dequantstub": 443, "_make_divis": 443, "divisor": 443, "min_valu": 443, "divis": 443, "research": [443, 489], "mobilenet": [443, 503, 508], "new_v": 443, "go": [443, 484, 499, 505], "convbnrelu": 443, "in_plan": 443, "out_plan": 443, "kernel_s": 443, "batchnorm2d": 443, "inplac": [443, 444], "invertedresidu": 443, "inp": 443, "oup": 443, "expand_ratio": 443, "assert": [443, 494], "hidden_dim": 443, "use_res_connect": 443, "pw": 443, "dw": 443, "skip_add": 443, "width_mult": 443, "inverted_residual_set": 443, "round_nearest": 443, "v2": [443, 446, 480, 508], "multipli": [443, 481], "amount": 443, "turn": [443, 490], "input_channel": 443, "last_channel": 443, "1280": 443, "160": 443, "320": 443, "invert": 443, "residu": 443, "output_channel": 443, "dropout": 443, "isinst": 443, "kaiming_normal_": 443, "fan_out": 443, "zeros_": 443, "elif": 443, "ones_": 443, "normal_": 443, "01": [443, 481, 499, 503, 506, 507, 508], "fuse_model": [443, 444], "fuse_modul": 443, "averagemet": 443, "fmt": 443, "avg": [443, 444, 500], "__str__": 443, "fmtstr": 443, "__dict__": 443, "topk": [443, 473, 475, 480, 490], "no_grad": 443, "maxk": 443, "eq": 443, "view": [443, 446, 472, 474, 482, 502], "expand_a": 443, "correct_k": 443, "keepdim": 443, "mul_": 443, "neval_batch": [443, 444], "2f": [443, 444], "top5": [443, 444], "cnt": [443, 444, 478], "acc1": 443, "acc5": 443, "load_model": 443, "model_fil": 443, "state_dict": [443, 480, 504], "load_state_dict": 443, "print_size_of_model": 443, "temp": 443, "getsiz": 443, "1e6": 443, "num_calibration_batch": 443, "mymodel": 443, "float_model_fil": 443, "default_qconfig": 443, "data_loader_test": [443, 444], "num_eval_batch": [443, 444], "eval_batch_s": [443, 444], "functool": 443, "minmaxobserv": 443, "reduce_rang": [443, 499], "qint8": 443, "qscheme": 443, "per_tensor_symmetr": 443, "convrelu2d": 443, "activation_post_process": [443, 504], "quantizedconvrelu2d": 443, "15583468973636627": 443, "19358506798744202": 443, "74": [443, 508], "631847": 443, "300": [443, 475], "67": [443, 508], "significantli": [443, 491, 497], "62": [443, 508], "nevertheless": [443, 444], "did": 443, "almost": 443, "improv": [443, 474, 485, 497, 500, 501, 506, 508], "exercis": 443, "x86": [443, 491], "basi": 443, "pick": 443, "manner": [443, 478, 492], "per_channel_quantized_model": 443, "get_default_qconfig": 443, "fbgemm": [443, 444, 471], "jit": [443, 504], "scripted_quantized_model_fil": 443, "histogramobserv": 443, "perchannelminmaxobserv": 443, "per_channel_symmetr": 443, "76": [443, 508], "increas": [443, 477, 487], "simul": 444, "mimic": [444, 500], "fact": [444, 500], "ultim": [444, 500], "training_func_for_nc": 444, "lr": [444, 480], "nepoch": [444, 478], "train_load": [444, 480], "zero_grad": [444, 478, 480, 497], "break": [444, 478, 480], "disable_observ": 444, "norm": 444, "intrins": 444, "freeze_bn_stat": 444, "get_default_qat_qconfig": 444, "accur": 444, "num_train_batch": 444, "train_one_epoch": 444, "qat_model": 444, "quantized_model": 444, "val_load": [444, 500], "constrain": 444, "71": [444, 508], "arithmet": [444, 484], "easili": [444, 447, 494, 497], "resolv": 445, "mainstream": 446, "learn": [446, 447, 471, 475, 476, 486, 487, 488, 491, 497, 498, 500, 504, 506], "formerli": 446, "deliv": [446, 498], "driven": [446, 491, 494, 504], "quickli": [446, 506], "ai": [446, 498, 501], "oneapi": [446, 488, 498], "analyt": [446, 488, 498], "visit": [446, 508], "websit": [446, 488], "io": [446, 475], "7": [446, 473, 475, 483, 484, 485, 488, 500, 502, 506], "stabl": [446, 472, 488, 498], "pip": [446, 472, 480, 483, 488, 502], "nightli": [446, 472, 488], "git": [446, 472, 488], "clone": [446, 472, 488], "cd": [446, 472, 480, 488], "pypi": [446, 472, 488], "wget": [446, 485], "googleapi": [446, 485], "v1_6": [446, 485], "mobilenet_v1_1": 446, "0_224_frozen": 446, "jupyt": 446, "lab": 446, "click": [446, 472, 487, 498, 504], "12": [446, 472], "vision": 446, "resnet": [446, 480, 485, 508], "xeon": [446, 485, 489, 491, 496, 498, 500, 501, 508], "scalabl": [446, 485, 491, 496, 498, 500, 501, 508], "skylak": 446, "cascad": [446, 485], "lake": [446, 485, 491, 498], "cooper": [446, 491], "icelak": 446, "sapphir": 446, "rapid": 446, "flex": 446, "amd": [446, 487, 508], "arm": [446, 487, 508], "nvidia": [446, 487, 497, 500, 508], "ubuntu": [446, 496], "tf_enable_onednn_opt": [446, 472], "onednn": [446, 471], "420": [446, 487], "speedup": [446, 487, 500], "geomean": [446, 487], "2x": [446, 487, 496], "vnni": [446, 487, 499, 500], "overview": 446, "dive": [446, 484], "coder": [446, 487, 498], "topic": 446, "nov": [446, 498], "fast": [446, 498], "sota": [446, 498], "diffus": [446, 498], "few": [446, 472, 498, 506], "innov": [446, 498], "oct": [446, 498], "acceler": [446, 478, 497, 498, 501, 506], "plug": [446, 498], "twitter": [446, 498], "linkedin": [446, 498], "zone": [446, 498], "hug": [446, 498], "land": [446, 498], "gcp": [446, 498], "aw": [446, 498, 508], "azur": [446, 498], "marketplac": [446, 498], "secur": [446, 496, 498], "bridg": [447, 487], "vanilla": [447, 487], "10004": [447, 478, 484, 487, 491, 495, 499, 507], "abcadaptor": 447, "he": 447, "besid": [447, 474, 478, 495], "past": 447, "effect": [447, 497], "mainten": 447, "difficult": 447, "abil": [447, 475, 484], "fragment": 447, "semant": [447, 484], "look": [447, 484, 490, 494, 507], "microsoft": 447, "mla": [447, 471], "explor": 447, "diagnosis_help": 447, "int8_model": 447, "experiement": 449, "symmetr": [471, 500, 505], "asymmetr": [471, 500], "conda": [472, 483, 488, 502], "forg": [472, 483, 488], "setup": [472, 484, 488], "sign": [472, 500, 503], "certif": 472, "ui": 472, "5000": 472, "338174d13706855fc6924cec7b3a8ae8": 472, "listen": 472, "firewal": 472, "8080": 472, "cert": 472, "path_to_cert": 472, "crt": 472, "path_to_private_kei": 472, "encrypt": 472, "insecur": 472, "expos": 472, "forfeit": 472, "threat": 472, "button": [472, 487], "pop": 472, "recognit": [472, 480, 504], "finish": [472, 506], "synthet": 472, "plu": 472, "icon": 472, "unfold": 472, "On": [472, 500], "panel": 472, "navig": 472, "trash": 472, "visibl": 472, "cursor": 472, "prompt": [472, 480], "confirm": 472, "revers": 472, "exit": [472, 481, 485, 491, 506, 507], "pencil": 472, "light": [472, 479], "blue": 472, "color": 472, "row": [472, 497], "arrow": 472, "checkbox": 472, "chart": [472, 500, 503, 504], "offer": [472, 476], "conveni": 472, "variat": 472, "yellow": 472, "warn": 472, "remind": 472, "One": [472, 475, 480, 487, 497, 498], "dialog": 472, "cryptographi": 472, "centercrop": [473, 475, 505, 506], "totensor": [473, 475, 505], "485": [473, 475, 508], "456": [473, 475], "406": [473, 475], "enough": [473, 500], "benchmarkconf": 473, "lpot": [473, 485, 498, 502], "pylint": 474, "flake8": 474, "autopep8": 474, "motiv": 474, "explan": 474, "bug": 474, "reproduc": 474, "submit": 474, "page": 474, "intend": 474, "collabor": 474, "adher": 474, "often": [475, 478, 495, 497], "encount": 475, "consum": 475, "lack": 475, "faster": [475, 477, 498, 508], "dataloadermodul": 475, "hard": 475, "treat": 475, "eas": [475, 488, 498], "advantag": [475, 499], "life": 475, "launch": [475, 491], "__next__": 475, "randomresizedcrop": [475, 505], "imagerecordit": 475, "path_imgrec": 475, "label_width": 475, "preprocess_thread": 475, "data_nthread": 475, "data_shap": 475, "label_nam": 475, "rand_crop": 475, "rand_mirror": 475, "shuffle_dataset": 475, "shuffle_chunk_se": 475, "shuffle_se": 475, "data_layer_typ": 475, "combine_mean_std": 475, "industri": [476, 490], "helloworld": [476, 505], "ensp": [476, 490, 505], "imagerecord": [476, 480, 507], "image_nam": 476, "cocorecord": 476, "gt": [476, 505], "lt": [476, 496], "float16": 476, "int64": 476, "style_transf": 476, "content": 476, "tfrecorddataset": [476, 506], "aid": 477, "deploy": 477, "infrastructur": 477, "deploi": [478, 506], "power": [478, 496], "mobil": [478, 508], "workflow": [478, 488, 491, 504], "produc": 478, "softmax": 478, "l": [478, 504, 506], "kd": 478, "kullback": 478, "leibler": 478, "patient": 478, "compact": [478, 497], "ia": 478, "attach": 478, "shallow": 478, "deepest": 478, "deeper": 478, "paper": [478, 497], "10006": 478, "distillationconf": 478, "blendcnn": [478, 508], "loss_sum": 478, "iter_bar": 478, "tqdm": 478, "desc": [478, 497], "teacher_logit": 478, "promis": [479, 497], "huge": 479, "bit": [479, 491, 498, 500], "heavi": 479, "booster": 479, "degrad": 479, "retrain": 479, "incorpor": [479, 506], "novel": 479, "builtin": 480, "program": [480, 485, 491], "addition": [480, 506], "enable_eager_execut": 480, "yaml_file_path": 480, "evaluation_result": 480, "evaluation_time_cost": 480, "partit": 480, "distributedsampl": 480, "train_sampl": 480, "train_dataset": 480, "num_replica": 480, "train_kwarg": 480, "adadelta": 480, "distributedoptim": 480, "named_paramet": 480, "broadcast_paramet": 480, "root_rank": 480, "broadcast_optimizer_st": 480, "set_epoch": 480, "batch_idx": 480, "nll_loss": 480, "log_interv": 480, "0f": 480, "tloss": 480, "6f": 480, "dry_run": 480, "test_func": 480, "host": 480, "num_of_process": 480, "002": 480, "ssh": 480, "readm": 480, "exactli": 480, "resnet50_v1": [480, 485], "resizecropimagenet": [480, 505], "realiz": [480, 490, 494, 501, 503], "tow": 480, "situat": 480, "node1": 480, "node2": 480, "TO": 480, "your_node1_nam": 480, "your_node2_nam": 480, "resnet50_fp32_pretrained_model": [480, 485], "nc_resnet50_v1": 480, "factor": [481, 496, 508], "oppos": 481, "entail": 481, "preserv": 481, "post_training_dynamic_qu": [481, 499], "post_training_static_qu": [481, 499, 506], "accuracy_criterion": [481, 494, 499, 503, 506, 507], "rel": [481, 499, 503, 506, 507, 508], "earli": [481, 500, 506, 507], "determinist": [481, 506], "wide": [482, 491, 500], "varieti": [482, 499, 506], "demonstr": [482, 485, 493, 497, 504], "incompat": 483, "88": [483, 503, 508], "80": [483, 504, 508], "pyobject": 483, "reinstal": 483, "importerror": 483, "libgl": 483, "apt": [483, 488], "yum": [483, 488], "opencv": 483, "conflict": 483, "pend": 483, "27": [483, 488, 508], "quick": [484, 507], "friendli": [484, 507], "let": [484, 499, 507], "up1": 484, "up2": 484, "valid_mixed_precis": 484, "concatv2": 484, "maxpool": 484, "avgpool": 484, "per_channel": [484, 506, 507], "per_tensor": [484, 506, 507], "addn": 484, "grappler_optim": 484, "constfold": 484, "debug_stripp": 484, "primarili": 485, "subexpress": 485, "bfloat16": [485, 491, 501], "explicitli": [485, 486], "op_to_stor": 485, "cpx": 485, "clx": 485, "force_bf16": 485, "executable_nc_wrapp": 485, "consequ": [485, 491], "resnet50_measur": 485, "8280": 485, "2021": 485, "165": 485, "139": 485, "567": [485, 508], "sec": [485, 508], "fp32_optimized_model": 485, "3x": 485, "325": 485, "99": [485, 508], "56": [485, 508], "068": 485, "992": 485, "major": [486, 500], "concept": [486, 503], "custom_metr": 486, "refin": 486, "broad": 487, "snippet": 487, "product": [487, 491, 496, 498, 500, 503, 506], "upload": 487, "qlinearop": [487, 500], "qintegerop": [487, 500], "lasso": [487, 497], "plan": [487, 491], "frequent": 488, "ask": 488, "consolid": 488, "streamlin": 488, "scienc": 488, "anaconda": 488, "suit": [488, 504], "esri": 488, "apach": 489, "softwar": [489, 491, 496, 498, 502], "copyright": 489, "mit": 489, "accompani": 489, "wish": 489, "bibtex": 489, "misc": 489, "feng": 489, "tian": 489, "chuanqi": 489, "wang": 489, "guom": 489, "zhang": 489, "penghui": 489, "cheng": 489, "pengxin": 489, "yuan": 489, "haihao": 489, "shen": 489, "jiong": 489, "gong": 489, "titl": 489, "howpublish": 489, "year": 489, "2020": 489, "logo": [489, 496], "atom": 489, "phi": 489, "pentium": 489, "vtune": 489, "corpor": [489, 496], "subsidiari": [489, 496], "brand": [489, 496], "claim": [489, 496], "special": [490, 494], "popularli": 490, "label_map": 490, "decis": 490, "ap": 490, "pr": 490, "curv": 490, "target_boxes_num": 490, "str_label": 490, "int_label": 490, "inturn": 490, "cocomap": 490, "vocmap": 490, "categor": 490, "multiclass": 490, "multilabel": 490, "multi_metr": 490, "higher_is_bett": [490, 494, 507], "newmetr": 490, "reflect": [490, 496, 505], "recent": 491, "growth": 491, "complex": 491, "fp16": [491, 500], "ieee": 491, "half": 491, "sixteen": 491, "bandwidth": 491, "3rd": [491, 498, 500, 501], "gen": [491, 498, 501], "codenam": 491, "avx512": [491, 500], "vcvtne2ps2bf16": 491, "vcvtneps2bf16": 491, "vdpbf16p": 491, "forc": [491, 501], "user_defined_funct": 491, "converted_model": 491, "avx512_bf16": 491, "persist": 492, "gap": 492, "brought": [492, 500], "tf2": 492, "h5": 492, "onnx_ml_pb2": 492, "hybridblock": 492, "0000": 492, "inc_model": 492, "saved_result": 492, "tflite": 493, "multi_object": 494, "peak": 494, "start_tim": 494, "_result_list": 494, "customobj": 494, "simultan": [495, 499], "arbitrari": 495, "gain": [495, 498], "benefit": [495, 497], "Of": 495, "cours": 495, "instanti": 495, "prune_conf": 495, "post_training_quantization_conf": 495, "quantization_aware_training_conf": 495, "configurationintel": 496, "platinum": [496, 508], "8380": [496, 508], "manufactur": 496, "m50cyp2sbstd": 496, "se5c6200": 496, "86b": 496, "0022": 496, "d64": 496, "2105220049": 496, "microcod": 496, "0xd0002b1": 496, "30ghz": 496, "3ghz": 496, "40": [496, 507, 508], "perf": 496, "256gb": 496, "16x16gb": 496, "ddr4": 496, "3200mt": 496, "nic": 496, "ethernet": 496, "10g": 496, "x550t": 496, "drive": 496, "1x": 496, "intel_ssdsc2kw01": 496, "953": 496, "9g": 496, "ct1000mx500ssd1": 496, "931": 496, "5g": 496, "publicli": 496, "degre": 496, "mark": 496, "trademark": 496, "briefli": 497, "maxim": [497, 506], "art": 497, "increasingli": 497, "crucial": 497, "rule": 497, "salient": 497, "nonzero": 497, "irregular": 497, "anywher": 497, "2in4": 497, "amper": 497, "gemm": 497, "ic": [497, 498], "oc": 497, "kh": 497, "kw": 497, "examin": 497, "lowest": 497, "head": 497, "fastform": 497, "formula": 497, "caus": 497, "num_train_epoch": 497, "pbar": 497, "progressbar": 497, "n_total": 497, "n_gpu": 497, "gradient_accumulation_step": 497, "clip_grad_norm_": 497, "max_grad_norm": 497, "rate": [497, 500], "cv": 497, "pat": 498, "keynot": 498, "intelon": 498, "sep": 498, "alibaba": 498, "cloud": 498, "chines": 498, "grain": 498, "aug": 498, "purif": 498, "sacrif": 498, "jun": 498, "partner": 498, "democrat": 498, "apr": 498, "ecosystem": 498, "mar": 498, "feb": 498, "sigopt": 498, "jan": 498, "tutori": 498, "bilibili": 498, "dec": 498, "ml": 498, "doubl": 498, "mlperf": 498, "reconstruct": 498, "abound": 498, "cern": 498, "gan": 498, "3dgan": 498, "4th": 498, "iml": 498, "workshop": 498, "highli": 498, "intelcaff": 498, "aris": 499, "tell": 499, "henc": 499, "quant_aware_train": 499, "op_type_list": 499, "use_bf16": [499, 501], "weight_compress": [499, 507], "initial_spars": [499, 507], "target_spars": [499, 507], "98": [499, 508], "prune_typ": [499, 507], "basic_magnitud": [499, 507], "start_epoch": [499, 507], "end_epoch": [499, 507], "update_frequ": 499, "prune_domain": 499, "tile_pattern_1x1": 499, "inter_num_of_thread": 499, "intra_num_of_thread": 499, "graph_optimization_level": 499, "disable_al": 499, "veri": [500, 506], "invent": 500, "int4": 500, "cost": 500, "theoret": 500, "affin": 500, "zeropoint": 500, "overflow": 500, "solv": [500, 502], "unseen": 500, "peopl": 500, "emul": 500, "pain": 500, "lossi": 500, "understand": [500, 504], "philosophi": 500, "val_dataset": 500, "val_dataload": 500, "worker": 500, "ping_memori": 500, "enhanc": 501, "cast": [501, 505], "bf16wrapper": 501, "retrac": 501, "site": 502, "assist": 502, "comparison": [502, 504], "sed": 502, "your_script": 502, "backbon": 503, "interact": 503, "mechan": 503, "sigopt_api_token": [503, 506], "sigopt_project_id": [503, 506], "sigopt_experiment_id": 503, "nc": [503, 506], "login": 503, "certain": 503, "suffici": 503, "ordinari": 503, "capac": 503, "sigopt_experiment_nam": [503, 506], "receiv": 503, "analysi": 503, "8266": 503, "8372": 503, "2132": 503, "83": [503, 508], "7495": 503, "8299": 503, "8294": 503, "85": [503, 508], "0837": 503, "8291": 503, "4469": 503, "visual": [504, 506], "discov": 504, "why": 504, "valuabl": 504, "instrument": 504, "writer": 504, "_pre_eval_hook": 504, "submodul": 504, "whitelist": 504, "_recordingobserv": 504, "output_tensors_dict": 504, "current_it": 504, "get_tensor_valu": 504, "_observer_forward_hook": 504, "_add_observer_": 504, "named_children": 504, "leaf": 504, "add_modul": 504, "register_forward_hook": 504, "dump_tim": 504, "summarywrit": 504, "_acc": 504, "tune_": 504, "add_graph": 504, "get_observer_dict": 504, "observer_dict": 504, "is_quant": 504, "add_histogram": 504, "bind_al": 504, "logdir_spec": 504, "tune_0_acc0": 504, "tune_1": 504, "tune_1_acc0": 504, "79": [504, 508], "image_recognit": 504, "run_tuning_dump_tensor": 504, "sh": 504, "four": 504, "baseline_acc_0": 504, "776": 504, "tune_1_acc_0": 504, "095": 504, "runs_v3": 504, "inceptionv3": 504, "v0": 504, "cg": 504, "op_wis": [504, 506, 507], "bash": 504, "run_tun": 504, "topologi": 504, "inception_v3": 504, "dataset_loc": 504, "inceptionv3_fp32_pretrained_model": 504, "output_model": 504, "nc_inceptionv3": 504, "inceptionv3_dump_tensor": 504, "poor": 504, "disappear": 504, "randomcrop": 505, "cropres": 505, "decodeimag": 505, "jpeg": 505, "encodejp": 505, "alignimagechannel": 505, "68": [505, 508], "116": 505, "78": [505, 508], "103": 505, "94": [505, 508], "017": 505, "bilinearimagenet": [505, 507], "topilimag": 505, "padding_mod": 505, "border": 505, "colorjitt": 505, "bright": 505, "satur": 505, "hue": 505, "jitter": 505, "tondarrai": 505, "max_trail": 506, "scale_propagation_max_pool": 506, "scale_propagation_concat": 506, "first_conv_or_matmul_quant": 506, "2000": 506, "tf_record": 506, "model_wis": [506, 507], "conv1": [506, 507], "pool1": 506, "conv2": 506, "guarante": 506, "classic": 506, "black": 506, "come": 506, "discret": 506, "compli": 506, "posterior": 506, "focu": 506, "short": 506, "never": 506, "loglevel": 506, "endlessli": 506, "idea": 506, "primari": 506, "smbo": 506, "hyperparamet": 506, "appl": 506, "surrog": 506, "quantil": 506, "x1": 506, "x2": 506, "densiti": 506, "parzen": 506, "greatest": 506, "hour": 506, "dai": 506, "perspect": 506, "abctunestrategi": 506, "mobilenet_v1": 507, "onnxrt_integ": 507, "onnxrt_qlinear": 507, "image_tensor": 507, "subsect": 507, "hyper": 507, "06": [507, 508], "beta_1": 507, "beta_2": 507, "999": 507, "epsilon": 507, "sparsecategoricalcrossentropi": 507, "reduct": 507, "sum_over_batch_s": 507, "from_logit": 507, "54": [507, 508], "19": [507, 508], "90": [507, 508], "nesterov": 507, "weight_decai": 507, "overal": 507, "ye": 508, "rnn": 508, "unet": 508, "09": 508, "performancethroughput": 508, "efficientnet": 508, "91": 508, "43": 508, "69": 508, "32x": 508, "cnn": 508, "incept": 508, "37": 508, "65": 508, "38": 508, "77": 508, "53": 508, "57x": 508, "46": 508, "61": 508, "58x": 508, "resnet101": 508, "39": 508, "63": 508, "11x": 508, "51x": 508, "26": 508, "59": 508, "23": 508, "06x": 508, "25x": 508, "70": 508, "44": 508, "00": 508, "163": 508, "133": 508, "22x": 508, "73": 508, "97": 508, "49": 508, "111": 508, "20x": 508, "v3": 508, "43x": 508, "v4": 508, "18": 508, "53x": 508, "36": 508, "33x": 508, "44x": 508, "374": 508, "226": 508, "66x": 508, "92": 508, "41x": 508, "fashion": 508, "359": 508, "244": 508, "47x": 508, "172": 508, "66": 508, "98x": 508, "153": 508, "76x": 508, "151": 508, "112": 508, "35x": 508, "26x": 508, "72": 508, "56x": 508, "82": 508, "93x": 508, "vgg16": 508, "89": 508, "178": 508, "14x": 508, "vgg19": 508, "156": 508, "18x": 508, "albert": 508, "23x": 508, "barthez": 508, "81": 508, "86": 508, "82x": 508, "203": 508, "01x": 508, "216": 508, "102": 508, "10x": 508, "sst2": 508, "218": 508, "stsb": 508, "57": 508, "48": 508, "49x": 508, "93": 508, "70x": 508, "50x": 508, "40x": 508, "3878": 508, "3717": 508, "04x": 508, "camembert": 508, "188": 508, "91x": 508, "ctrl": 508, "deberta": 508, "124": 508, "81x": 508, "347": 508, "73x": 508, "382": 508, "198": 508, "flaubert": 508, "561": 508, "35": 508, "370": 508, "52x": 508, "hubert": 508, "84": 508, "36x": 508, "409": 508, "181": 508, "longform": 508, "28x": 508, "mbart": 508, "16x": 508, "639": 508, "490": 508, "31x": 508, "lvwerra": 508, "pegasu": 508, "samsum": 508, "19x": 508, "peleenet": 508, "419": 508, "316": 508, "resnet18": 508, "686": 508, "332": 508, "07x": 508, "611": 508, "333": 508, "83x": 508, "327": 508, "162": 508, "resnext101_32x8d": 508, "175": 508, "88x": 508, "197": 508, "99x": 508, "se_resnext50_32x4d": 508, "308": 508, "144": 508, "13x": 508, "squeezebert": 508, "186": 508, "155": 508, "78x": 508, "transfo": 508, "xl": 508, "37x": 508, "wave2vec2": 508, "60": 508, "58": 508, "21x": 508, "114": 508, "15x": 508, "yolo": 508, "29x": 508, "690": 508, "330": 508, "09x": 508, "614": 508, "334": 508, "84x": 508, "54x": 508, "410": 508, "168": 508, "finetun": 508, "resnext101_32x16d_wsl": 508, "1189": 508, "680": 508, "75x": 508, "677": 508, "381": 508, "59x": 508, "alexnet": 508, "960": 508, "469": 508, "17": 508, "05x": 508, "962": 508, "466": 508, "arcfac": 508, "235": 508, "130": 508, "294": 508, "34x": 508, "604": 508, "51": 508, "80x": 508, "caffenet": 508, "1501": 508, "536": 508, "1493": 508, "533": 508, "1372": 508, "541": 508, "480": 508, "1250": 508, "753": 508, "1130": 508, "748": 508, "emot": 508, "ferplu": 508, "336": 508, "65x": 508, "fcn": 508, "googlenet": 508, "740": 508, "587": 508, "770": 508, "824": 508, "601": 508, "819": 508, "597": 508, "45x": 508, "613": 508, "506": 508, "2454": 508, "1543": 508, "2164": 508, "1564": 508, "38x": 508, "2147": 508, "1046": 508, "1877": 508, "1054": 508, "mobilenetv2": 508, "2751": 508, "1797": 508, "2656": 508, "1835": 508, "7615": 508, "7646": 508, "764": 508, "901": 508, "434": 508, "141": 508, "7614": 508, "575": 508, "952": 508, "433": 508, "7226": 508, "7229": 508, "761": 508, "432": 508, "615": 508, "722": 508, "032": 508, "894": 508, "885": 508, "454": 508, "95x": 508, "603": 508, "455": 508, "644": 508, "636": 508, "254": 508, "791": 508, "shufflenet": 508, "2298": 508, "55": 508, "1480": 508, "55x": 508, "1951": 508, "1490": 508, "squeezenet": 508, "2588": 508, "1605": 508, "61x": 508, "2566": 508, "1936": 508, "725": 508, "570": 508, "27x": 508, "666": 508, "539": 508, "641": 508, "519": 508, "633": 508, "492": 508, "542": 508, "401": 508, "68x": 508, "tini": 508, "yolov3": 508, "648": 508, "518": 508, "221": 508, "319": 508, "307": 508, "30x": 508, "yolov4": 508, "zfnet": 508, "459": 508, "261": 508, "460": 508, "264": 508, "74x": 508, "441": 508, "337": 508, "272": 508, "211": 508, "152": 508, "423": 508, "180": 508, "311": 508, "69x": 508, "taskdataset": 508, "accuracyspars": 508, "ratiospars": 508, "commentsbalanc": 508, "unbalanc": 508, "classificationimagenet": 508, "76top": 508, "13top": 508, "magnitudepost": 508, "magnitudequant": 508, "answeringsquad": 508, "34f1": 508, "2x1": 508, "lassounbalanc": 508, "classificationmnli": 508, "mm": 508, "lockbalanc": 508, "classificationsst": 508, "32accuraci": 508, "sensitivitybalanc": 508, "classificationqqp": 508, "classificationqnli": 508, "54accuraci": 508, "em": 508, "87f1": 508, "momentumunbalanc": 508, "momentumbalanc": 508, "classificationmrpc": 508, "52f1": 508, "61accuraci": 508, "7965": 508, "wideresnet40": 508, "9522": 508, "8178": 508, "0213": 508, "5494": 508, "7153": 508, "5540": 508, "0046": 508, "vgg": 508, "7022": 508, "7415": 508, "7025": 508, "0003": 508, "6739": 508, "7399": 508, "6845": 508, "0106": 508, "7034": 508, "8382": 508, "bilstm": 508, "sst": 508, "8314": 508, "9403": 508, "9048": 508, "0734": 508, "7323": 508, "8256": 508, "8084": 508, "8814": 508, "7442": 508, "8371": 508, "0119": 508, "0115": 508, "tinybert": 508, "8018": 508, "8044": 508, "8363": 508, "8411": 508, "8025": 508, "8074": 508, "0007": 508, "0030": 508, "8626": 508, "8213": 508, "9091": 508, "8782": 508, "8684": 508, "8259": 508, "0058": 508, "distilroberta": 508, "6057": 508, "6455": 508, "6187": 508, "0130": 508, "c6i": 508, "2xlarg": 508, "c6a": 508, "c6g": 508, "a100cuda": 508}, "objects": {"": [[0, 0, 0, "-", "6ece06672ed3_v1_14"], [1, 0, 0, "-", "6f0d0f71d92e_v1_13"], [2, 0, 0, "-", "9e89549a08c8_v1_11"], [3, 0, 0, "-", "block_mask"], [4, 0, 0, "-", "env"], [223, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[0, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [0, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[4, 1, 1, "", "run_migrations_offline"], [4, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[223, 2, 1, "", "Benchmark"], [223, 2, 1, "", "DistillationConfig"], [223, 2, 1, "", "Pruning"], [223, 2, 1, "", "Quantization"], [6, 0, 0, "-", "adaptor"], [129, 0, 0, "-", "algorithm"], [131, 0, 0, "-", "benchmark"], [134, 0, 0, "-", "conf"], [136, 0, 0, "-", "config"], [137, 0, 0, "-", "contrib"], [145, 0, 0, "-", "data"], [187, 0, 0, "-", "experimental"], [224, 0, 0, "-", "metric"], [225, 0, 0, "-", "mix_precision"], [227, 0, 0, "-", "model"], [232, 0, 0, "-", "objective"], [235, 0, 0, "-", "pruners"], [239, 0, 0, "-", "pruning"], [240, 0, 0, "-", "quantization"], [245, 0, 0, "-", "strategy"], [253, 0, 0, "-", "training"], [257, 0, 0, "-", "utils"], [393, 0, 0, "-", "ux"], [438, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[223, 3, 1, "", "on_epoch_begin"], [223, 3, 1, "", "on_epoch_end"], [223, 3, 1, "", "on_step_begin"], [223, 3, 1, "", "on_step_end"]], "neural_compressor.adaptor": [[5, 0, 0, "-", "adaptor"], [7, 0, 0, "-", "mxnet"], [8, 0, 0, "-", "mxnet_utils"], [10, 0, 0, "-", "onnxrt"], [12, 0, 0, "-", "ox_utils"], [35, 0, 0, "-", "pytorch"], [36, 0, 0, "-", "query"], [37, 0, 0, "-", "tensorflow"], [97, 0, 0, "-", "tf_utils"], [123, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[5, 2, 1, "", "Adaptor"], [5, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[5, 3, 1, "", "convert"], [5, 3, 1, "", "evaluate"], [5, 3, 1, "", "inspect_tensor"], [5, 3, 1, "", "quantize"], [5, 3, 1, "", "quantize_input"], [5, 3, 1, "", "query_fused_patterns"], [5, 3, 1, "", "query_fw_capability"], [5, 3, 1, "", "save"], [5, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet": [[7, 2, 1, "", "MXNetQuery"], [7, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[7, 3, 1, "", "get_fuse_patterns"], [7, 3, 1, "", "get_mixed_precision_combination"], [7, 3, 1, "", "get_op_types"], [7, 3, 1, "", "get_precisions"], [7, 3, 1, "", "get_quantization_capability"], [7, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[7, 3, 1, "", "evaluate"], [7, 3, 1, "", "inspect_tensor"], [7, 3, 1, "", "quantize"], [7, 3, 1, "", "query_fw_capability"], [7, 3, 1, "", "recover_tuned_model"], [7, 3, 1, "", "save"], [7, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[9, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[9, 2, 1, "", "CalibCollector"], [9, 2, 1, "", "OpType"], [9, 2, 1, "", "TensorCollector"], [9, 1, 1, "", "calib_model"], [9, 1, 1, "", "check_mx_version"], [9, 1, 1, "", "distribute_calib_tensors"], [9, 1, 1, "", "ensure_list"], [9, 1, 1, "", "fuse"], [9, 1, 1, "", "is_model_quantized"], [9, 1, 1, "", "isiterable"], [9, 1, 1, "", "make_module"], [9, 1, 1, "", "make_nc_model"], [9, 1, 1, "", "make_symbol_block"], [9, 1, 1, "", "parse_tune_config"], [9, 1, 1, "", "prepare_model_data"], [9, 1, 1, "", "quantize_sym_model"], [9, 1, 1, "", "query_quantizable_nodes"], [9, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[10, 2, 1, "", "ONNXRTAdaptor"], [10, 2, 1, "", "ONNXRTQuery"], [10, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [10, 2, 1, "", "ONNXRT_QDQAdaptor"], [10, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [10, 2, 1, "", "ONNXRT_QOperatorAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor": [[10, 3, 1, "", "evaluate"], [10, 3, 1, "", "inspect_tensor"], [10, 3, 1, "", "quantize"], [10, 3, 1, "", "query_fw_capability"], [10, 3, 1, "", "recover"], [10, 3, 1, "", "save"], [10, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[10, 3, 1, "", "get_graph_optimization"], [10, 3, 1, "", "get_op_types"], [10, 3, 1, "", "get_op_types_by_precision"], [10, 3, 1, "", "get_precisions"], [10, 3, 1, "", "get_quantization_capability"], [10, 3, 1, "", "get_version"]], "neural_compressor.adaptor.ox_utils": [[11, 0, 0, "-", "calibration"], [24, 0, 0, "-", "operators"], [33, 0, 0, "-", "quantizer"], [34, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[11, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[11, 3, 1, "", "augment_graph"], [11, 3, 1, "", "calculate_quantization_params"], [11, 3, 1, "", "calculate_scale_zeropoint"], [11, 3, 1, "", "dump_calibration"], [11, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[13, 0, 0, "-", "activation"], [14, 0, 0, "-", "argmax"], [15, 0, 0, "-", "attention"], [16, 0, 0, "-", "binary_op"], [17, 0, 0, "-", "concat"], [18, 0, 0, "-", "conv"], [19, 0, 0, "-", "direct_q8"], [20, 0, 0, "-", "embed_layernorm"], [21, 0, 0, "-", "gather"], [22, 0, 0, "-", "gavgpool"], [23, 0, 0, "-", "gemm"], [25, 0, 0, "-", "lstm"], [26, 0, 0, "-", "matmul"], [27, 0, 0, "-", "maxpool"], [28, 0, 0, "-", "ops"], [29, 0, 0, "-", "pad"], [30, 0, 0, "-", "pooling"], [31, 0, 0, "-", "resize"], [32, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[28, 1, 1, "", "op_registry"]], "neural_compressor.adaptor.ox_utils.util": [[34, 2, 1, "", "QuantFormat"], [34, 2, 1, "", "QuantType"], [34, 2, 1, "", "QuantizationMode"], [34, 2, 1, "", "QuantizedInitializer"], [34, 2, 1, "", "QuantizedValue"], [34, 2, 1, "", "QuantizedValueType"], [34, 1, 1, "", "attribute_to_kwarg"], [34, 1, 1, "", "cast_tensor"], [34, 1, 1, "", "find_by_name"], [34, 1, 1, "", "quantize_data"], [34, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[35, 2, 1, "", "PyTorchAdaptor"], [35, 2, 1, "", "PyTorchQuery"], [35, 2, 1, "", "PyTorch_FXAdaptor"], [35, 2, 1, "", "PyTorch_IPEXAdaptor"], [35, 2, 1, "", "TemplateAdaptor"], [35, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[35, 3, 1, "", "evaluate"], [35, 3, 1, "", "get_non_quant_modules"], [35, 3, 1, "", "inspect_tensor"], [35, 3, 1, "", "is_fused_child"], [35, 3, 1, "", "is_fused_op"], [35, 3, 1, "", "is_last_fused_child"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "query_fw_capability"], [35, 3, 1, "", "save"], [35, 3, 1, "", "set_tensor"], [35, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[35, 3, 1, "", "get_op_types"], [35, 3, 1, "", "get_op_types_by_precision"], [35, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[35, 3, 1, "", "convert_sub_graph"], [35, 3, 1, "", "evaluate"], [35, 3, 1, "", "fuse_fx_model"], [35, 3, 1, "", "prepare_sub_graph"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "query_fw_capability"], [35, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[35, 3, 1, "", "evaluate"], [35, 3, 1, "", "inspect_tensor"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "query_fw_capability"], [35, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[35, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[36, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[36, 3, 1, "", "get_fuse_patterns"], [36, 3, 1, "", "get_mixed_precision_combination"], [36, 3, 1, "", "get_op_types"], [36, 3, 1, "", "get_precisions"], [36, 3, 1, "", "get_quantization_capability"], [36, 3, 1, "", "get_version"], [36, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[37, 2, 1, "", "TensorFlowAdaptor"], [37, 2, 1, "", "TensorflowQuery"], [37, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[37, 3, 1, "", "convert"], [37, 3, 1, "", "evaluate"], [37, 3, 1, "", "fused_node_mapping"], [37, 3, 1, "", "get_optype_wise_ability"], [37, 3, 1, "", "inspect_activation"], [37, 3, 1, "", "inspect_tensor"], [37, 3, 1, "", "inspect_weight_and_bias"], [37, 3, 1, "", "quantize"], [37, 3, 1, "", "quantize_input"], [37, 3, 1, "", "query_fw_capability"], [37, 3, 1, "", "recover_tuned_model"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set_tensor"], [37, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[37, 3, 1, "", "generate_internal_patterns"], [37, 3, 1, "", "get_eightbit_patterns"], [37, 3, 1, "", "get_fuse_patterns"], [37, 3, 1, "", "get_mixed_precision_combination"], [37, 3, 1, "", "get_op_types"], [37, 3, 1, "", "get_op_types_by_precision"], [37, 3, 1, "", "get_precisions"], [37, 3, 1, "", "get_quantization_capability"], [37, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[37, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[38, 0, 0, "-", "graph_converter"], [39, 0, 0, "-", "graph_converter_without_calib"], [78, 0, 0, "-", "graph_rewriter"], [96, 0, 0, "-", "graph_util"], [98, 0, 0, "-", "quantize_graph"], [115, 0, 0, "-", "quantize_graph_common"], [118, 0, 0, "-", "transform_graph"], [121, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[41, 0, 0, "-", "bf16"], [66, 0, 0, "-", "generic"], [77, 0, 0, "-", "graph_base"], [86, 0, 0, "-", "int8"], [92, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[40, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[40, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[40, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[42, 0, 0, "-", "convert_add_to_biasadd"], [43, 0, 0, "-", "convert_layout"], [44, 0, 0, "-", "convert_leakyrelu"], [45, 0, 0, "-", "convert_nan_to_random"], [46, 0, 0, "-", "convert_placeholder_to_const"], [47, 0, 0, "-", "dequantize_cast_optimizer"], [48, 0, 0, "-", "dilated_contraction"], [49, 0, 0, "-", "dummy_biasadd"], [50, 0, 0, "-", "expanddims_optimizer"], [51, 0, 0, "-", "fetch_weight_from_reshape"], [52, 0, 0, "-", "fold_batch_norm"], [53, 0, 0, "-", "fold_constant"], [54, 0, 0, "-", "fuse_biasadd_add"], [55, 0, 0, "-", "fuse_column_wise_mul"], [56, 0, 0, "-", "fuse_conv_with_math"], [57, 0, 0, "-", "fuse_decomposed_bn"], [58, 0, 0, "-", "fuse_decomposed_in"], [59, 0, 0, "-", "fuse_gelu"], [60, 0, 0, "-", "fuse_layer_norm"], [61, 0, 0, "-", "fuse_pad_with_conv"], [62, 0, 0, "-", "fuse_pad_with_fp32_conv"], [63, 0, 0, "-", "fuse_reshape_transpose"], [64, 0, 0, "-", "graph_cse_optimizer"], [65, 0, 0, "-", "grappler_pass"], [67, 0, 0, "-", "insert_print_node"], [68, 0, 0, "-", "move_squeeze_after_relu"], [69, 0, 0, "-", "pre_optimize"], [70, 0, 0, "-", "remove_training_nodes"], [71, 0, 0, "-", "rename_batch_norm"], [72, 0, 0, "-", "split_shared_input"], [73, 0, 0, "-", "strip_equivalent_nodes"], [74, 0, 0, "-", "strip_unused_nodes"], [75, 0, 0, "-", "switch_optimizer"], [76, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[42, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[42, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[43, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[43, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[44, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[44, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[45, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[45, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[46, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[46, 3, 1, "", "do_transformation"], [46, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[47, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[47, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[48, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[48, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[49, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[49, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[50, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[50, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[51, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[51, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[52, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[52, 3, 1, "", "do_transformation"], [52, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[53, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[53, 3, 1, "", "check_all_folded"], [53, 3, 1, "", "check_const_inputs"], [53, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[54, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[54, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[55, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[55, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[56, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[56, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[57, 1, 1, "", "get_const_dim_count"], [57, 1, 1, "", "node_from_map"], [57, 1, 1, "", "node_name_from_input"], [57, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[58, 1, 1, "", "get_const_dim_count"], [58, 1, 1, "", "node_from_map"], [58, 1, 1, "", "node_name_from_input"], [58, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[59, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[59, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[60, 2, 1, "", "FuseLayerNormOptimizer"], [60, 1, 1, "", "node_from_map"], [60, 1, 1, "", "node_name_from_input"], [60, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[60, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[61, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[61, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[62, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[62, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[63, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[63, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[64, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[64, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[65, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[65, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[67, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[67, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[68, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[68, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[70, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[70, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[71, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[72, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[72, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[73, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[73, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[74, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[75, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[76, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[77, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[79, 0, 0, "-", "freeze_fake_quant"], [80, 0, 0, "-", "freeze_value"], [81, 0, 0, "-", "freeze_value_without_calib"], [82, 0, 0, "-", "fuse_conv_redundant_dequantize"], [83, 0, 0, "-", "fuse_conv_requantize"], [84, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [85, 0, 0, "-", "fuse_matmul_requantize"], [87, 0, 0, "-", "meta_op_optimizer"], [88, 0, 0, "-", "post_hostconst_converter"], [89, 0, 0, "-", "post_quantized_op_cse"], [90, 0, 0, "-", "rnn_convert"], [91, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[79, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[80, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[80, 3, 1, "", "do_transformation"], [80, 3, 1, "", "generate_output_graph"], [80, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[81, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[81, 3, 1, "", "generate_output_graph"], [81, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[82, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[83, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[84, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[85, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [85, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [85, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [85, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[87, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[88, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[89, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[90, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[91, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[93, 0, 0, "-", "insert_qdq_pattern"], [94, 0, 0, "-", "merge_duplicated_qdq"], [95, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, 2, 1, "", "GraphAnalyzer"], [96, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[96, 3, 1, "", "add_node"], [96, 3, 1, "", "dump_graph"], [96, 3, 1, "", "get_graph_input_output"], [96, 4, 1, "", "graph"], [96, 3, 1, "", "has_positive_input"], [96, 3, 1, "", "parse_graph"], [96, 3, 1, "", "query_fusion_pattern_nodes"], [96, 3, 1, "", "remove_node"], [96, 3, 1, "", "remove_node_with_single_input_output"], [96, 3, 1, "", "replace_const_node"], [96, 3, 1, "", "replace_constant_graph_with_constant_node"], [96, 3, 1, "", "replace_node"], [96, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[96, 3, 1, "", "compare_node_attr"], [96, 3, 1, "", "create_constant_node"], [96, 3, 1, "", "create_node"], [96, 3, 1, "", "node_name_from_input"], [96, 3, 1, "", "set_attr_bool"], [96, 3, 1, "", "set_attr_dtype"], [96, 3, 1, "", "set_attr_float"], [96, 3, 1, "", "set_attr_int"], [96, 3, 1, "", "set_attr_int_list"], [96, 3, 1, "", "set_attr_string"], [96, 3, 1, "", "set_attr_string_list"], [96, 3, 1, "", "set_attr_tensor"], [96, 3, 1, "", "set_attr_type_list"], [96, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[106, 0, 0, "-", "qdq"], [108, 0, 0, "-", "quantize_graph_base"], [109, 0, 0, "-", "quantize_graph_bn"], [110, 0, 0, "-", "quantize_graph_concatv2"], [111, 0, 0, "-", "quantize_graph_conv"], [112, 0, 0, "-", "quantize_graph_for_intel_cpu"], [113, 0, 0, "-", "quantize_graph_matmul"], [114, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[99, 0, 0, "-", "fuse_qdq_bn"], [100, 0, 0, "-", "fuse_qdq_concatv2"], [101, 0, 0, "-", "fuse_qdq_conv"], [102, 0, 0, "-", "fuse_qdq_deconv"], [103, 0, 0, "-", "fuse_qdq_in"], [104, 0, 0, "-", "fuse_qdq_matmul"], [105, 0, 0, "-", "fuse_qdq_pooling"], [107, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[99, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[99, 3, 1, "", "apply_the_transform"], [99, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[100, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[100, 3, 1, "", "apply_the_transform"], [100, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[101, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[101, 3, 1, "", "apply_the_transform"], [101, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[102, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[102, 3, 1, "", "apply_the_transform"], [102, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[103, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[103, 3, 1, "", "apply_the_transform"], [103, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[104, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[104, 3, 1, "", "apply_batchmatmulv2_fusion"], [104, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [104, 3, 1, "", "apply_matmul_biasadd_fusion"], [104, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [104, 3, 1, "", "apply_the_transform"], [104, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[105, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[105, 3, 1, "", "apply_the_transform"], [105, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[107, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[107, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[108, 2, 1, "", "QuantizeGraphBase"], [108, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[108, 3, 1, "", "do_transform"], [108, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[108, 3, 1, "", "add_output_graph_node"], [108, 3, 1, "", "apply_the_transform"], [108, 3, 1, "", "create_nodes_map"], [108, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[109, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[109, 3, 1, "", "apply_the_transform"], [109, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[110, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[110, 3, 1, "", "apply_the_transform"], [110, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[111, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[111, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [111, 3, 1, "", "apply_the_transform"], [111, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[112, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[112, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[113, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[113, 3, 1, "", "apply_the_transform"], [113, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[114, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[114, 3, 1, "", "apply_the_transform"], [114, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[115, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[115, 3, 1, "", "copy_attr"], [115, 3, 1, "", "create_constant_node"], [115, 3, 1, "", "create_node"], [115, 3, 1, "", "ensure_tensor_name_has_port"], [115, 3, 1, "", "get_sorted_graph"], [115, 3, 1, "", "node_name_from_input"], [115, 3, 1, "", "remove_training_nodes"], [115, 3, 1, "", "set_attr_bool"], [115, 3, 1, "", "set_attr_dtype"], [115, 3, 1, "", "set_attr_float"], [115, 3, 1, "", "set_attr_int"], [115, 3, 1, "", "set_attr_string"], [115, 3, 1, "", "set_attr_string_list"], [115, 3, 1, "", "set_attr_tensor"], [115, 3, 1, "", "set_attr_type_list"], [115, 3, 1, "", "split_shared_inputs"], [115, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[116, 0, 0, "-", "bias_correction"], [117, 0, 0, "-", "graph_transform_base"], [119, 0, 0, "-", "insert_logging"], [120, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[116, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[119, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[120, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[121, 1, 1, "", "disable_random"], [121, 1, 1, "", "get_tensor_by_name"], [121, 1, 1, "", "get_tensor_val_from_graph_node"], [121, 1, 1, "", "is_ckpt_format"], [121, 1, 1, "", "is_saved_model_format"], [121, 1, 1, "", "iterator_sess_run"], [121, 1, 1, "", "read_graph"], [121, 1, 1, "", "strip_equivalent_nodes"], [121, 1, 1, "", "strip_unused_nodes"], [121, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[122, 0, 0, "-", "bf16_convert"], [124, 0, 0, "-", "onnx"], [125, 0, 0, "-", "symbolic_trace"], [126, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.util": [[126, 1, 1, "", "append_attr"], [126, 1, 1, "", "get_embedding_contiguous"]], "neural_compressor.algorithm": [[129, 2, 1, "", "Algorithm"], [129, 2, 1, "", "AlgorithmScheduler"], [127, 0, 0, "-", "algorithm"], [129, 1, 1, "", "algorithm_registry"], [128, 0, 0, "-", "fast_bias_correction"], [130, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[127, 2, 1, "", "Algorithm"], [127, 2, 1, "", "AlgorithmScheduler"], [127, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[128, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[130, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[131, 2, 1, "", "Benchmark"]], "neural_compressor.conf": [[132, 0, 0, "-", "config"], [133, 0, 0, "-", "dotdict"], [135, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[132, 2, 1, "", "Benchmark_Conf"], [132, 2, 1, "", "Conf"], [132, 2, 1, "", "DefaultConf"], [132, 2, 1, "", "Distillation_Conf"], [132, 2, 1, "", "Graph_Optimization_Conf"], [132, 2, 1, "", "MixedPrecision_Conf"], [132, 2, 1, "", "NASConfig"], [132, 2, 1, "", "Pruning_Conf"], [132, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[133, 2, 1, "", "DotDict"], [133, 1, 1, "", "deep_get"], [133, 1, 1, "", "deep_set"]], "neural_compressor.config": [[136, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[138, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[139, 0, 0, "-", "sigopt"], [140, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[139, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[139, 3, 1, "", "next_tune_cfg"], [139, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[140, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[140, 3, 1, "", "stop"], [140, 3, 1, "", "traverse"]], "neural_compressor.data": [[145, 2, 1, "", "BaseTransform"], [145, 2, 1, "", "DATASETS"], [145, 2, 1, "", "DataLoader"], [145, 2, 1, "", "Dataset"], [145, 2, 1, "", "FILTERS"], [145, 2, 1, "", "Filter"], [145, 2, 1, "", "IterableDataset"], [145, 2, 1, "", "TRANSFORMS"], [142, 0, 0, "-", "dataloaders"], [145, 1, 1, "", "dataset_registry"], [144, 0, 0, "-", "datasets"], [145, 1, 1, "", "filter_registry"], [145, 1, 1, "", "transform_registry"], [148, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[145, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[142, 2, 1, "", "DataLoader"], [141, 0, 0, "-", "dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[141, 2, 1, "", "DataLoader"]], "neural_compressor.data.datasets": [[143, 0, 0, "-", "imagenet_dataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[143, 2, 1, "", "ONNXRTImagenetDataset"], [143, 2, 1, "", "TensorflowImagenetDataset"]], "neural_compressor.data.transforms": [[146, 0, 0, "-", "coco_transform"], [147, 0, 0, "-", "imagenet_transform"]], "neural_compressor.data.transforms.coco_transform": [[146, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[147, 2, 1, "", "BilinearImagenetTransform"], [147, 2, 1, "", "ONNXResizeCropImagenetTransform"], [147, 2, 1, "", "OnnxBilinearImagenetTransform"], [147, 2, 1, "", "ParseDecodeImagenetTransform"], [147, 2, 1, "", "ResizeWithAspectRatio"], [147, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental": [[187, 2, 1, "", "Benchmark"], [187, 2, 1, "", "Component"], [187, 2, 1, "", "Distillation"], [187, 2, 1, "", "Graph_Optimization"], [187, 2, 1, "", "MixedPrecision"], [187, 2, 1, "", "ModelConversion"], [187, 2, 1, "", "NAS"], [187, 2, 1, "", "Pruning"], [187, 2, 1, "", "Quantization"], [149, 0, 0, "-", "benchmark"], [152, 0, 0, "-", "common"], [158, 0, 0, "-", "component"], [180, 0, 0, "-", "data"], [185, 0, 0, "-", "distillation"], [186, 0, 0, "-", "graph_optimization"], [194, 0, 0, "-", "metric"], [196, 0, 0, "-", "mixed_precision"], [197, 0, 0, "-", "model_conversion"], [205, 0, 0, "-", "nas"], [209, 0, 0, "-", "pruning"], [210, 0, 0, "-", "pruning_recipes"], [214, 0, 0, "-", "pytorch_pruner"], [221, 0, 0, "-", "quantization"], [222, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[187, 4, 1, "", "b_dataloader"], [187, 4, 1, "", "b_func"], [187, 3, 1, "", "config_instance"], [187, 3, 1, "", "generate_prefix"], [187, 4, 1, "", "metric"], [187, 4, 1, "", "model"], [187, 4, 1, "", "postprocess"], [187, 4, 1, "", "results"], [187, 3, 1, "", "run_instance"], [187, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[187, 4, 1, "", "eval_dataloader"], [187, 4, 1, "", "eval_func"], [187, 3, 1, "", "execute"], [187, 4, 1, "", "model"], [187, 3, 1, "", "on_after_compute_loss"], [187, 3, 1, "", "on_batch_begin"], [187, 3, 1, "", "on_batch_end"], [187, 3, 1, "", "on_before_optimizer_step"], [187, 3, 1, "", "on_epoch_begin"], [187, 3, 1, "", "on_epoch_end"], [187, 3, 1, "", "on_post_grad"], [187, 3, 1, "", "on_step_begin"], [187, 3, 1, "", "on_step_end"], [187, 3, 1, "", "on_train_begin"], [187, 3, 1, "", "on_train_end"], [187, 3, 1, "", "post_epoch_end"], [187, 3, 1, "", "post_process"], [187, 3, 1, "", "pre_epoch_begin"], [187, 3, 1, "", "pre_process"], [187, 3, 1, "", "prepare"], [187, 3, 1, "", "prepare_qat"], [187, 3, 1, "", "register_hook"], [187, 4, 1, "", "train_dataloader"], [187, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[187, 5, 1, "", "_epoch_ran"], [187, 5, 1, "", "best_model"], [187, 5, 1, "", "best_score"], [187, 3, 1, "", "create_criterion"], [187, 3, 1, "", "create_optimizer"], [187, 4, 1, "", "criterion"], [187, 5, 1, "", "eval_frequency"], [187, 4, 1, "", "evaluation_distributed"], [187, 3, 1, "", "execute"], [187, 3, 1, "", "generate_hooks"], [187, 3, 1, "", "init_train_cfg"], [187, 3, 1, "", "on_post_forward"], [187, 4, 1, "", "optimizer"], [187, 3, 1, "", "pre_process"], [187, 3, 1, "", "prepare"], [187, 4, 1, "", "student_model"], [187, 4, 1, "", "teacher_model"], [187, 4, 1, "", "train_cfg"], [187, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[187, 3, 1, "", "dataset"], [187, 4, 1, "", "eval_dataloader"], [187, 4, 1, "", "eval_func"], [187, 4, 1, "", "input"], [187, 4, 1, "", "metric"], [187, 4, 1, "", "model"], [187, 4, 1, "", "output"], [187, 4, 1, "", "postprocess"], [187, 4, 1, "", "precisions"], [187, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[187, 4, 1, "", "precisions"], [187, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[187, 3, 1, "", "dataset"], [187, 4, 1, "", "destination"], [187, 4, 1, "", "eval_dataloader"], [187, 4, 1, "", "eval_func"], [187, 4, 1, "", "metric"], [187, 4, 1, "", "model"], [187, 4, 1, "", "postprocess"], [187, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[187, 5, 1, "", "conf"], [187, 4, 1, "", "evaluation_distributed"], [187, 3, 1, "", "execute"], [187, 3, 1, "", "generate_hooks"], [187, 3, 1, "", "generate_pruners"], [187, 3, 1, "", "pre_process"], [187, 3, 1, "", "prepare"], [187, 5, 1, "", "pruners"], [187, 4, 1, "", "pruning_func"], [187, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[187, 4, 1, "", "calib_dataloader"], [187, 3, 1, "", "dataset"], [187, 3, 1, "", "execute"], [187, 4, 1, "", "metric"], [187, 4, 1, "", "objective"], [187, 4, 1, "", "postprocess"], [187, 3, 1, "", "pre_process"], [187, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[149, 2, 1, "", "Benchmark"], [149, 1, 1, "", "get_architecture"], [149, 1, 1, "", "get_bounded_threads"], [149, 1, 1, "", "get_core_ids"], [149, 1, 1, "", "get_physical_ids"], [149, 1, 1, "", "get_threads"], [149, 1, 1, "", "get_threads_per_core"], [149, 1, 1, "", "set_all_env_var"], [149, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[149, 4, 1, "", "b_dataloader"], [149, 4, 1, "", "b_func"], [149, 3, 1, "", "config_instance"], [149, 3, 1, "", "generate_prefix"], [149, 4, 1, "", "metric"], [149, 4, 1, "", "model"], [149, 4, 1, "", "postprocess"], [149, 4, 1, "", "results"], [149, 3, 1, "", "run_instance"], [149, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[152, 2, 1, "", "DataLoader"], [152, 2, 1, "", "Metric"], [152, 2, 1, "", "Model"], [152, 2, 1, "", "Postprocess"], [150, 0, 0, "-", "criterion"], [151, 0, 0, "-", "dataloader"], [153, 0, 0, "-", "metric"], [154, 0, 0, "-", "model"], [155, 0, 0, "-", "optimizer"], [156, 0, 0, "-", "postprocess"], [157, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[150, 2, 1, "", "Criterions"], [150, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [150, 2, 1, "", "KnowledgeDistillationFramework"], [150, 2, 1, "", "KnowledgeDistillationLoss"], [150, 2, 1, "", "PyTorchCriterions"], [150, 2, 1, "", "PyTorchCrossEntropyLoss"], [150, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [150, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [150, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [150, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [150, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [150, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [150, 2, 1, "", "SelfKnowledgeDistillationLoss"], [150, 2, 1, "", "TensorFlowCrossEntropyLoss"], [150, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [150, 2, 1, "", "TensorflowCriterions"], [150, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [150, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [150, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [150, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[150, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[150, 3, 1, "", "clear_features"], [150, 3, 1, "", "init_feature_matcher"], [150, 3, 1, "", "init_loss_funcs"], [150, 3, 1, "", "loss_cal"], [150, 3, 1, "", "loss_cal_sloss"], [150, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[150, 4, 1, "", "student_model"], [150, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[150, 3, 1, "", "loss_cal"], [150, 3, 1, "", "loss_cal_sloss"], [150, 3, 1, "", "student_targets_loss_cal"], [150, 3, 1, "", "teacher_model_forward"], [150, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[150, 3, 1, "", "init_feature_matcher"], [150, 3, 1, "", "init_loss_funcs"], [150, 3, 1, "", "loss_cal"], [150, 3, 1, "", "loss_cal_sloss"], [150, 3, 1, "", "register_hooks_for_models"], [150, 3, 1, "", "remove_all_hooks"], [150, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[150, 3, 1, "", "KullbackLeiblerDivergence"], [150, 3, 1, "", "SoftCrossEntropy"], [150, 3, 1, "", "student_targets_loss_cal"], [150, 3, 1, "", "teacher_model_forward"], [150, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[150, 3, 1, "", "KullbackLeiblerDivergence"], [150, 3, 1, "", "L2Divergence"], [150, 3, 1, "", "SoftCrossEntropy"], [150, 3, 1, "", "init_loss_funcs"], [150, 3, 1, "", "loss_cal"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[150, 3, 1, "", "init_loss_funcs"], [150, 3, 1, "", "loss_cal"], [150, 3, 1, "", "loss_cal_sloss"], [150, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[150, 3, 1, "", "SoftCrossEntropy"], [150, 3, 1, "", "student_targets_loss_cal"], [150, 3, 1, "", "teacher_model_forward"], [150, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[150, 3, 1, "", "student_targets_loss_cal"], [150, 3, 1, "", "teacher_model_forward"], [150, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[151, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[153, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[154, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[155, 2, 1, "", "Optimizers"], [155, 2, 1, "", "PyTorchOptimizers"], [155, 2, 1, "", "PyTorchSGD"], [155, 2, 1, "", "TensorFlowAdam"], [155, 2, 1, "", "TensorFlowAdamW"], [155, 2, 1, "", "TensorFlowSGD"], [155, 2, 1, "", "TensorflowOptimizers"], [155, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[155, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[156, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[157, 1, 1, "", "get_activation"], [157, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[158, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[158, 4, 1, "", "eval_dataloader"], [158, 4, 1, "", "eval_func"], [158, 3, 1, "", "execute"], [158, 4, 1, "", "model"], [158, 3, 1, "", "on_after_compute_loss"], [158, 3, 1, "", "on_batch_begin"], [158, 3, 1, "", "on_batch_end"], [158, 3, 1, "", "on_before_optimizer_step"], [158, 3, 1, "", "on_epoch_begin"], [158, 3, 1, "", "on_epoch_end"], [158, 3, 1, "", "on_post_grad"], [158, 3, 1, "", "on_step_begin"], [158, 3, 1, "", "on_step_end"], [158, 3, 1, "", "on_train_begin"], [158, 3, 1, "", "on_train_end"], [158, 3, 1, "", "post_epoch_end"], [158, 3, 1, "", "post_process"], [158, 3, 1, "", "pre_epoch_begin"], [158, 3, 1, "", "pre_process"], [158, 3, 1, "", "prepare"], [158, 3, 1, "", "prepare_qat"], [158, 3, 1, "", "register_hook"], [158, 4, 1, "", "train_dataloader"], [158, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[180, 2, 1, "", "BaseTransform"], [180, 2, 1, "", "DATASETS"], [180, 2, 1, "", "Dataset"], [180, 2, 1, "", "FILTERS"], [180, 2, 1, "", "Filter"], [180, 2, 1, "", "IterableDataset"], [180, 2, 1, "", "TRANSFORMS"], [163, 0, 0, "-", "dataloaders"], [180, 1, 1, "", "dataset_registry"], [175, 0, 0, "-", "datasets"], [180, 1, 1, "", "filter_registry"], [179, 0, 0, "-", "filters"], [180, 1, 1, "", "transform_registry"], [182, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[180, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[159, 0, 0, "-", "base_dataloader"], [160, 0, 0, "-", "dataloader"], [161, 0, 0, "-", "default_dataloader"], [162, 0, 0, "-", "fetcher"], [164, 0, 0, "-", "mxnet_dataloader"], [165, 0, 0, "-", "onnxrt_dataloader"], [166, 0, 0, "-", "pytorch_dataloader"], [167, 0, 0, "-", "sampler"], [168, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[159, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[159, 3, 1, "", "batch"], [159, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[161, 2, 1, "", "DefaultDataLoader"], [161, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[161, 3, 1, "", "batch"], [161, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[162, 2, 1, "", "Fetcher"], [162, 2, 1, "", "IndexFetcher"], [162, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[164, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[165, 2, 1, "", "ONNXRTBertDataLoader"], [165, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[166, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[167, 2, 1, "", "BatchSampler"], [167, 2, 1, "", "IterableSampler"], [167, 2, 1, "", "Sampler"], [167, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[168, 2, 1, "", "TFDataDataLoader"], [168, 2, 1, "", "TensorflowBertDataLoader"], [168, 2, 1, "", "TensorflowDataLoader"], [168, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[168, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[175, 2, 1, "", "DATASETS"], [175, 2, 1, "", "Dataset"], [175, 2, 1, "", "IterableDataset"], [169, 0, 0, "-", "bert_dataset"], [170, 0, 0, "-", "coco_dataset"], [171, 0, 0, "-", "dataset"], [175, 1, 1, "", "dataset_registry"], [172, 0, 0, "-", "dummy_dataset"], [173, 0, 0, "-", "dummy_dataset_v2"], [174, 0, 0, "-", "imagenet_dataset"], [176, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[169, 2, 1, "", "InputFeatures"], [169, 2, 1, "", "ONNXRTBertDataset"], [169, 2, 1, "", "ParseDecodeBert"], [169, 2, 1, "", "PytorchBertDataset"], [169, 2, 1, "", "TensorflowBertDataset"], [169, 2, 1, "", "TensorflowModelZooBertDataset"], [169, 1, 1, "", "convert_examples_to_features"], [169, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[169, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[170, 2, 1, "", "COCONpy"], [170, 2, 1, "", "COCORaw"], [170, 2, 1, "", "COCORecordDataset"], [170, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[171, 2, 1, "", "CIFAR10"], [171, 2, 1, "", "CIFAR100"], [171, 2, 1, "", "DATASETS"], [171, 2, 1, "", "Dataset"], [171, 2, 1, "", "FashionMNIST"], [171, 2, 1, "", "ImageFolder"], [171, 2, 1, "", "IterableDataset"], [171, 2, 1, "", "MNIST"], [171, 2, 1, "", "MXNetCIFAR10"], [171, 2, 1, "", "MXNetCIFAR100"], [171, 2, 1, "", "MXNetDatasets"], [171, 2, 1, "", "MXNetFashionMNIST"], [171, 2, 1, "", "MXNetImageFolder"], [171, 2, 1, "", "MXNetMNIST"], [171, 2, 1, "", "ONNXRTITDatasets"], [171, 2, 1, "", "ONNXRTQLDatasets"], [171, 2, 1, "", "PyTorchDatasets"], [171, 2, 1, "", "PytorchCIFAR10"], [171, 2, 1, "", "PytorchCIFAR100"], [171, 2, 1, "", "PytorchFashionMNIST"], [171, 2, 1, "", "PytorchMNIST"], [171, 2, 1, "", "PytorchMxnetWrapDataset"], [171, 2, 1, "", "PytorchMxnetWrapFunction"], [171, 2, 1, "", "TensorflowCIFAR10"], [171, 2, 1, "", "TensorflowCIFAR100"], [171, 2, 1, "", "TensorflowDatasets"], [171, 2, 1, "", "TensorflowFashionMNIST"], [171, 2, 1, "", "TensorflowImageFolder"], [171, 2, 1, "", "TensorflowImageRecord"], [171, 2, 1, "", "TensorflowMNIST"], [171, 2, 1, "", "TensorflowTFRecordDataset"], [171, 2, 1, "", "TensorflowVOCRecord"], [171, 1, 1, "", "calculate_md5"], [171, 1, 1, "", "check_integrity"], [171, 1, 1, "", "dataset_registry"], [171, 1, 1, "", "download_url"], [171, 6, 1, "", "framework_datasets"], [171, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[171, 3, 1, "", "download"], [171, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[171, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[171, 4, 1, "", "class_to_idx"], [171, 3, 1, "", "download"], [171, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[172, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[173, 2, 1, "", "DummyDataset"], [173, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[174, 2, 1, "", "ImagenetRaw"], [174, 2, 1, "", "MXNetImagenetRaw"], [174, 2, 1, "", "PytorchImagenetRaw"], [174, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[176, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[179, 2, 1, "", "FILTERS"], [179, 2, 1, "", "Filter"], [177, 0, 0, "-", "coco_filter"], [178, 0, 0, "-", "filter"], [179, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[177, 2, 1, "", "LabelBalanceCOCORawFilter"], [177, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[178, 2, 1, "", "FILTERS"], [178, 2, 1, "", "Filter"], [178, 2, 1, "", "MXNetFilters"], [178, 2, 1, "", "ONNXRTITFilters"], [178, 2, 1, "", "ONNXRTQLFilters"], [178, 2, 1, "", "PyTorchFilters"], [178, 2, 1, "", "TensorflowFilters"], [178, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[182, 2, 1, "", "BaseTransform"], [182, 2, 1, "", "TRANSFORMS"], [181, 0, 0, "-", "imagenet_transform"], [183, 0, 0, "-", "tokenization"], [184, 0, 0, "-", "transform"], [182, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[182, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[181, 2, 1, "", "LabelShift"], [181, 2, 1, "", "ParseDecodeImagenet"], [181, 2, 1, "", "QuantizedInput"]], "neural_compressor.experimental.data.transforms.tokenization": [[183, 2, 1, "", "BasicTokenizer"], [183, 2, 1, "", "FullTokenizer"], [183, 2, 1, "", "WordpieceTokenizer"], [183, 1, 1, "", "convert_by_vocab"], [183, 1, 1, "", "convert_to_unicode"], [183, 1, 1, "", "load_vocab"], [183, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[183, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[183, 3, 1, "", "convert_ids_to_tokens"], [183, 3, 1, "", "convert_tokens_to_ids"], [183, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[183, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[184, 2, 1, "", "AlignImageChannelTransform"], [184, 2, 1, "", "BaseTransform"], [184, 2, 1, "", "CastONNXTransform"], [184, 2, 1, "", "CastPyTorchTransform"], [184, 2, 1, "", "CastTFTransform"], [184, 2, 1, "", "CenterCropTFTransform"], [184, 2, 1, "", "CenterCropTransform"], [184, 2, 1, "", "CollectTransform"], [184, 2, 1, "", "ComposeTransform"], [184, 2, 1, "", "CropResizeTFTransform"], [184, 2, 1, "", "CropResizeTransform"], [184, 2, 1, "", "CropToBoundingBox"], [184, 2, 1, "", "InputFeatures"], [184, 2, 1, "", "MXNetCropResizeTransform"], [184, 2, 1, "", "MXNetCropToBoundingBox"], [184, 2, 1, "", "MXNetNormalizeTransform"], [184, 2, 1, "", "MXNetTransforms"], [184, 2, 1, "", "MXNetTranspose"], [184, 2, 1, "", "NormalizeTFTransform"], [184, 2, 1, "", "NormalizeTransform"], [184, 2, 1, "", "ONNXRTCropToBoundingBox"], [184, 2, 1, "", "ONNXRTITTransforms"], [184, 2, 1, "", "ONNXRTQLTransforms"], [184, 2, 1, "", "PaddedCenterCropTransform"], [184, 2, 1, "", "ParseDecodeVocTransform"], [184, 2, 1, "", "PyTorchAlignImageChannel"], [184, 2, 1, "", "PyTorchCropResizeTransform"], [184, 2, 1, "", "PyTorchNormalizeTransform"], [184, 2, 1, "", "PyTorchTransforms"], [184, 2, 1, "", "PyTorchTranspose"], [184, 2, 1, "", "PytorchMxnetTransform"], [184, 2, 1, "", "PytorchMxnetWrapFunction"], [184, 2, 1, "", "RandomCropTFTransform"], [184, 2, 1, "", "RandomCropTransform"], [184, 2, 1, "", "RandomHorizontalFlip"], [184, 2, 1, "", "RandomResizedCropMXNetTransform"], [184, 2, 1, "", "RandomResizedCropPytorchTransform"], [184, 2, 1, "", "RandomResizedCropTFTransform"], [184, 2, 1, "", "RandomResizedCropTransform"], [184, 2, 1, "", "RandomVerticalFlip"], [184, 2, 1, "", "RescaleKerasPretrainTransform"], [184, 2, 1, "", "RescaleTFTransform"], [184, 2, 1, "", "RescaleTransform"], [184, 2, 1, "", "ResizeMXNetTransform"], [184, 2, 1, "", "ResizePytorchTransform"], [184, 2, 1, "", "ResizeTFTransform"], [184, 2, 1, "", "ResizeTransform"], [184, 2, 1, "", "ResizeWithRatio"], [184, 2, 1, "", "SquadExample"], [184, 2, 1, "", "TFModelZooCollectTransform"], [184, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [184, 2, 1, "", "TFSquadV1PostTransform"], [184, 2, 1, "", "TRANSFORMS"], [184, 2, 1, "", "TensorflowCropToBoundingBox"], [184, 2, 1, "", "TensorflowRandomHorizontalFlip"], [184, 2, 1, "", "TensorflowRandomVerticalFlip"], [184, 2, 1, "", "TensorflowResizeWithRatio"], [184, 2, 1, "", "TensorflowTransform"], [184, 2, 1, "", "TensorflowTransforms"], [184, 2, 1, "", "TensorflowTranspose"], [184, 2, 1, "", "TensorflowWrapFunction"], [184, 2, 1, "", "ToArray"], [184, 2, 1, "", "ToNDArrayTransform"], [184, 2, 1, "", "Transforms"], [184, 2, 1, "", "Transpose"], [184, 1, 1, "", "convert_examples_to_features"], [184, 1, 1, "", "get_final_text"], [184, 1, 1, "", "get_torchvision_map"], [184, 1, 1, "", "read_squad_examples"], [184, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[184, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[184, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[184, 3, 1, "", "get_postprocess_result"], [184, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[184, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[185, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[185, 5, 1, "", "_epoch_ran"], [185, 5, 1, "", "best_model"], [185, 5, 1, "", "best_score"], [185, 3, 1, "", "create_criterion"], [185, 3, 1, "", "create_optimizer"], [185, 4, 1, "", "criterion"], [185, 5, 1, "", "eval_frequency"], [185, 4, 1, "", "evaluation_distributed"], [185, 3, 1, "", "execute"], [185, 3, 1, "", "generate_hooks"], [185, 3, 1, "", "init_train_cfg"], [185, 3, 1, "", "on_post_forward"], [185, 4, 1, "", "optimizer"], [185, 3, 1, "", "pre_process"], [185, 3, 1, "", "prepare"], [185, 4, 1, "", "student_model"], [185, 4, 1, "", "teacher_model"], [185, 4, 1, "", "train_cfg"], [185, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.graph_optimization": [[186, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[186, 3, 1, "", "dataset"], [186, 4, 1, "", "eval_dataloader"], [186, 4, 1, "", "eval_func"], [186, 4, 1, "", "input"], [186, 4, 1, "", "metric"], [186, 4, 1, "", "model"], [186, 4, 1, "", "output"], [186, 4, 1, "", "postprocess"], [186, 4, 1, "", "precisions"], [186, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[194, 2, 1, "", "BaseMetric"], [194, 2, 1, "", "METRICS"], [452, 0, 0, "-", "bleu"], [189, 0, 0, "-", "bleu_util"], [190, 0, 0, "-", "coco_label_map"], [191, 0, 0, "-", "coco_tools"], [192, 0, 0, "-", "evaluate_squad"], [193, 0, 0, "-", "f1"], [195, 0, 0, "-", "metric"], [194, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[194, 4, 1, "", "hvd"], [194, 4, 1, "", "metric"], [194, 3, 1, "", "reset"], [194, 3, 1, "", "result"], [194, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[194, 5, 1, "", "metrics"], [194, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[452, 2, 1, "", "BLEU"], [188, 2, 1, "", "UnicodeRegex"], [188, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[452, 5, 1, "", "labels"], [452, 5, 1, "", "predictions"], [452, 3, 1, "", "reset"], [452, 3, 1, "", "result"], [452, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[188, 5, 1, "", "nondigit_punct_re"], [188, 3, 1, "", "property_chars"], [188, 5, 1, "", "punct_nondigit_re"], [188, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[189, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[191, 2, 1, "", "COCOEvalWrapper"], [191, 2, 1, "", "COCOWrapper"], [191, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [191, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [191, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[191, 3, 1, "", "ComputeMetrics"], [191, 3, 1, "", "GetAgnosticMode"], [191, 3, 1, "", "GetCategory"], [191, 3, 1, "", "GetCategoryIdList"], [191, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[191, 3, 1, "", "LoadAnnotations"], [191, 5, 1, "", "dataset"], [191, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[192, 1, 1, "", "evaluate"], [192, 1, 1, "", "exact_match_score"], [192, 1, 1, "", "f1_score"], [192, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[193, 1, 1, "", "evaluate"], [193, 1, 1, "", "f1_score"], [193, 1, 1, "", "metric_max_over_ground_truths"], [193, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[195, 2, 1, "", "Accuracy"], [195, 2, 1, "", "BaseMetric"], [195, 2, 1, "", "COCOmAPv2"], [195, 2, 1, "", "F1"], [195, 2, 1, "", "GeneralTopK"], [195, 2, 1, "", "Loss"], [195, 2, 1, "", "MAE"], [195, 2, 1, "", "METRICS"], [195, 2, 1, "", "MSE"], [195, 2, 1, "", "MXNetMetrics"], [195, 2, 1, "", "ONNXRTGLUE"], [195, 2, 1, "", "ONNXRTITMetrics"], [195, 2, 1, "", "ONNXRTQLMetrics"], [195, 2, 1, "", "PyTorchLoss"], [195, 2, 1, "", "PyTorchMetrics"], [195, 2, 1, "", "RMSE"], [195, 2, 1, "", "ROC"], [195, 2, 1, "", "SquadF1"], [195, 2, 1, "", "TensorflowCOCOMAP"], [195, 2, 1, "", "TensorflowMAP"], [195, 2, 1, "", "TensorflowMetrics"], [195, 2, 1, "", "TensorflowTopK"], [195, 2, 1, "", "TensorflowVOCMAP"], [195, 2, 1, "", "WrapMXNetMetric"], [195, 2, 1, "", "WrapONNXRTMetric"], [195, 2, 1, "", "WrapPyTorchMetric"], [195, 2, 1, "", "mIOU"], [195, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[195, 5, 1, "", "label_list"], [195, 5, 1, "", "pred_list"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 5, 1, "", "sample"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[195, 4, 1, "", "hvd"], [195, 4, 1, "", "metric"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[195, 5, 1, "", "k"], [195, 5, 1, "", "num_correct"], [195, 5, 1, "", "num_sample"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 5, 1, "", "sample"], [195, 5, 1, "", "sum"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[195, 5, 1, "", "compare_label"], [195, 5, 1, "", "label_list"], [195, 5, 1, "", "pred_list"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[195, 5, 1, "", "metrics"], [195, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[195, 5, 1, "", "compare_label"], [195, 5, 1, "", "label_list"], [195, 5, 1, "", "pred_list"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[195, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[195, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[195, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[195, 3, 1, "", "compute"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[195, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[195, 5, 1, "", "mse"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[195, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[195, 5, 1, "", "k"], [195, 5, 1, "", "num_correct"], [195, 5, 1, "", "num_sample"], [195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[195, 3, 1, "", "reset"], [195, 3, 1, "", "result"], [195, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[196, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[196, 4, 1, "", "precisions"], [196, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[197, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[197, 3, 1, "", "dataset"], [197, 4, 1, "", "destination"], [197, 4, 1, "", "eval_dataloader"], [197, 4, 1, "", "eval_func"], [197, 4, 1, "", "metric"], [197, 4, 1, "", "model"], [197, 4, 1, "", "postprocess"], [197, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[205, 2, 1, "", "BasicNAS"], [205, 2, 1, "", "DyNAS"], [205, 2, 1, "", "NAS"], [198, 0, 0, "-", "basic_nas"], [199, 0, 0, "-", "dynas"], [204, 0, 0, "-", "dynast"], [206, 0, 0, "-", "nas"], [207, 0, 0, "-", "nas_utils"], [208, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[205, 3, 1, "", "estimate"], [205, 3, 1, "", "execute"], [205, 3, 1, "", "init_by_cfg"], [205, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[205, 3, 1, "", "create_acc_predictor"], [205, 3, 1, "", "create_latency_predictor"], [205, 3, 1, "", "create_macs_predictor"], [205, 3, 1, "", "estimate"], [205, 3, 1, "", "init_cfg"], [205, 3, 1, "", "init_for_search"], [205, 3, 1, "", "search"], [205, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[198, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[198, 3, 1, "", "estimate"], [198, 3, 1, "", "execute"], [198, 3, 1, "", "init_by_cfg"], [198, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[199, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[199, 3, 1, "", "create_acc_predictor"], [199, 3, 1, "", "create_latency_predictor"], [199, 3, 1, "", "create_macs_predictor"], [199, 3, 1, "", "estimate"], [199, 3, 1, "", "init_cfg"], [199, 3, 1, "", "init_for_search"], [199, 3, 1, "", "search"], [199, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[200, 0, 0, "-", "dynas_manager"], [201, 0, 0, "-", "dynas_predictor"], [202, 0, 0, "-", "dynas_search"], [203, 0, 0, "-", "dynas_utils"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[200, 2, 1, "", "ParameterManager"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[200, 3, 1, "", "create_training_set"], [200, 3, 1, "", "import_csv"], [200, 3, 1, "", "onehot_generic"], [200, 3, 1, "", "process_param_dict"], [200, 3, 1, "", "random_sample"], [200, 3, 1, "", "random_samples"], [200, 3, 1, "", "set_seed"], [200, 3, 1, "", "translate2param"], [200, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[201, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[201, 3, 1, "", "get_metrics"], [201, 3, 1, "", "get_parameters"], [201, 3, 1, "", "load"], [201, 3, 1, "", "predict"], [201, 3, 1, "", "save"], [201, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[202, 2, 1, "", "ProblemMultiObjective"], [202, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[202, 3, 1, "", "configure_age"], [202, 3, 1, "", "configure_nsga2"], [202, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[203, 2, 1, "", "EvaluationInterface"], [203, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [203, 2, 1, "", "EvaluationInterfaceResNet50"], [203, 2, 1, "", "OFARunner"], [203, 2, 1, "", "Runner"], [203, 2, 1, "", "TorchVisionReference"], [203, 1, 1, "", "get_macs"], [203, 1, 1, "", "get_torchvision_model"], [203, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[203, 3, 1, "", "clear_csv"], [203, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[203, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[203, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[203, 3, 1, "", "estimate_accuracy_top1"], [203, 3, 1, "", "estimate_latency"], [203, 3, 1, "", "estimate_macs"], [203, 3, 1, "", "get_subnet"], [203, 3, 1, "", "measure_latency"], [203, 3, 1, "", "validate_macs"], [203, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[203, 3, 1, "", "measure_latency"], [203, 3, 1, "", "validate_macs"], [203, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.nas": [[206, 2, 1, "", "NAS"], [206, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[206, 3, 1, "", "count_model_parameters"], [206, 3, 1, "", "dump_search_results"], [206, 3, 1, "", "estimate"], [206, 3, 1, "", "find_best_model_archs"], [206, 3, 1, "", "init_search_cfg"], [206, 3, 1, "", "load_search_results"], [206, 3, 1, "", "metrics_conversion"], [206, 4, 1, "", "model_builder"], [206, 3, 1, "", "params_vec2params_dict"], [206, 3, 1, "", "search"], [206, 4, 1, "", "search_algorithm"], [206, 4, 1, "", "search_space"], [206, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[207, 1, 1, "", "create_search_space_pool"], [207, 1, 1, "", "find_pareto_front"], [207, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[208, 2, 1, "", "BayesianOptimizationSearcher"], [208, 2, 1, "", "GridSearcher"], [208, 2, 1, "", "RandomSearcher"], [208, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[208, 3, 1, "", "get_feedback"], [208, 3, 1, "", "indices2params_vec"], [208, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[208, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[208, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[208, 3, 1, "", "get_feedback"], [208, 3, 1, "", "params_vec2params_dict"], [208, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[209, 2, 1, "", "Pruning"], [209, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[209, 5, 1, "", "conf"], [209, 4, 1, "", "evaluation_distributed"], [209, 3, 1, "", "execute"], [209, 3, 1, "", "generate_hooks"], [209, 3, 1, "", "generate_pruners"], [209, 3, 1, "", "pre_process"], [209, 3, 1, "", "prepare"], [209, 5, 1, "", "pruners"], [209, 4, 1, "", "pruning_func"], [209, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[209, 3, 1, "", "on_after_compute_loss"], [209, 3, 1, "", "on_batch_begin"], [209, 3, 1, "", "on_batch_end"], [209, 3, 1, "", "on_epoch_begin"], [209, 3, 1, "", "on_epoch_end"], [209, 3, 1, "", "on_step_begin"], [209, 3, 1, "", "on_step_end"], [209, 3, 1, "", "on_train_begin"], [209, 3, 1, "", "on_train_end"], [209, 3, 1, "", "post_epoch_end"], [209, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[210, 2, 1, "", "PATTERNS"], [211, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[210, 5, 1, "", "patterns"], [210, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[211, 2, 1, "", "PATTERNS"], [212, 0, 0, "-", "pattern"], [213, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[211, 5, 1, "", "patterns"], [211, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[212, 2, 1, "", "PATTERNS"], [212, 2, 1, "", "PatternBase"], [212, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[212, 5, 1, "", "patterns"], [212, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[212, 3, 1, "", "compute_sparsity"], [212, 3, 1, "", "reduce"], [212, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[213, 2, 1, "", "TilePatternBase"], [213, 2, 1, "", "TilePattern_1x1"], [213, 2, 1, "", "TilePattern_1x16"], [213, 2, 1, "", "TilePattern_1x2"], [213, 2, 1, "", "TilePattern_2x2"], [213, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[213, 3, 1, "", "compute_sparsity"], [213, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[215, 0, 0, "-", "logger"], [216, 0, 0, "-", "patterns"], [217, 0, 0, "-", "prune_utils"], [218, 0, 0, "-", "pruner"], [219, 0, 0, "-", "pruning"], [220, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[216, 2, 1, "", "Pattern"], [216, 2, 1, "", "PatternNInM"], [216, 2, 1, "", "PatternNxM"], [216, 1, 1, "", "get_pattern"], [216, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[216, 3, 1, "", "get_block_size_dict"], [216, 3, 1, "", "get_mask_single"], [216, 3, 1, "", "get_masks"], [216, 3, 1, "", "get_masks_global"], [216, 3, 1, "", "get_masks_local"], [216, 3, 1, "", "get_pattern_lock_masks"], [216, 3, 1, "", "get_sparsity_ratio"], [216, 5, 1, "", "is_global"], [216, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[216, 5, 1, "", "M"], [216, 5, 1, "", "N"], [216, 3, 1, "", "get_masks_global"], [216, 3, 1, "", "get_pattern_lock_masks"], [216, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[216, 5, 1, "", "block_size"], [216, 3, 1, "", "get_block_size_dict"], [216, 3, 1, "", "get_masks_global"], [216, 3, 1, "", "get_pattern_lock_masks"], [216, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[217, 1, 1, "", "check_config"], [217, 1, 1, "", "parse_not_to_prune"], [217, 1, 1, "", "parse_to_prune"], [217, 1, 1, "", "process_and_check_config"], [217, 1, 1, "", "process_config"], [217, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[218, 2, 1, "", "MagnitudePruner"], [218, 2, 1, "", "PatternLockPruner"], [218, 2, 1, "", "Pruner"], [218, 2, 1, "", "SnipMomentumPruner"], [218, 2, 1, "", "SnipPruner"], [218, 1, 1, "", "get_pruner"], [218, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[218, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[218, 3, 1, "", "on_after_optimizer_step"], [218, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[218, 3, 1, "", "check_is_pruned_step"], [218, 5, 1, "", "config"], [218, 5, 1, "", "current_sparsity_ratio"], [218, 5, 1, "", "end_step"], [218, 5, 1, "", "global_step"], [218, 3, 1, "", "mask_weights"], [218, 5, 1, "", "masks"], [218, 5, 1, "", "max_sparsity_ratio_per_layer"], [218, 5, 1, "", "modules"], [218, 3, 1, "", "on_after_eval"], [218, 3, 1, "", "on_after_optimizer_step"], [218, 3, 1, "", "on_before_eval"], [218, 3, 1, "", "on_before_optimizer_step"], [218, 3, 1, "", "on_epoch_begin"], [218, 3, 1, "", "on_epoch_end"], [218, 3, 1, "", "on_step_begin"], [218, 3, 1, "", "on_step_end"], [218, 3, 1, "", "on_train_begin"], [218, 3, 1, "", "on_train_end"], [218, 5, 1, "", "pattern"], [218, 5, 1, "", "scheduler"], [218, 5, 1, "", "scores"], [218, 5, 1, "", "start_step"], [218, 5, 1, "", "target_sparsity_ratio"], [218, 5, 1, "", "update_frequency_on_step"], [218, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[218, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[218, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[219, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[219, 5, 1, "", "config_file_path"], [219, 3, 1, "", "get_sparsity_ratio"], [219, 5, 1, "", "model"], [219, 3, 1, "", "on_after_eval"], [219, 3, 1, "", "on_after_optimizer_step"], [219, 3, 1, "", "on_before_eval"], [219, 3, 1, "", "on_before_optimizer_step"], [219, 3, 1, "", "on_epoch_begin"], [219, 3, 1, "", "on_epoch_end"], [219, 3, 1, "", "on_step_begin"], [219, 3, 1, "", "on_step_end"], [219, 3, 1, "", "on_train_begin"], [219, 3, 1, "", "on_train_end"], [219, 5, 1, "", "pruner_info"], [219, 5, 1, "", "pruners"], [219, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[220, 2, 1, "", "IterativeScheduler"], [220, 2, 1, "", "OneshotScheduler"], [220, 2, 1, "", "Scheduler"], [220, 1, 1, "", "get_scheduler"], [220, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[220, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[220, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[220, 5, 1, "", "config"], [220, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[221, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[221, 4, 1, "", "calib_dataloader"], [221, 3, 1, "", "dataset"], [221, 3, 1, "", "execute"], [221, 4, 1, "", "metric"], [221, 4, 1, "", "objective"], [221, 4, 1, "", "postprocess"], [221, 3, 1, "", "pre_process"], [221, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[222, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[222, 3, 1, "", "append"], [222, 3, 1, "", "combine"], [222, 4, 1, "", "eval_func"], [222, 4, 1, "", "model"], [222, 4, 1, "", "train_func"]], "neural_compressor.metric": [[224, 2, 1, "", "BaseMetric"], [224, 2, 1, "", "METRICS"], [224, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[224, 4, 1, "", "hvd"], [224, 4, 1, "", "metric"], [224, 3, 1, "", "reset"], [224, 3, 1, "", "result"], [224, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[224, 5, 1, "", "metrics"], [224, 3, 1, "", "register"]], "neural_compressor.model": [[227, 2, 1, "", "BaseModel"], [226, 0, 0, "-", "base_model"], [228, 0, 0, "-", "model"], [229, 0, 0, "-", "nets_factory"], [230, 0, 0, "-", "onnx_model"], [231, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[227, 3, 1, "", "export"], [227, 3, 1, "", "framework"], [227, 4, 1, "", "graph_info"], [227, 4, 1, "", "model"], [227, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[226, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[226, 3, 1, "", "export"], [226, 3, 1, "", "framework"], [226, 4, 1, "", "graph_info"], [226, 4, 1, "", "model"], [226, 3, 1, "", "save"]], "neural_compressor.model.model": [[228, 2, 1, "", "MXNetModel"], [228, 2, 1, "", "TensorflowBaseModel"], [228, 2, 1, "", "TensorflowCheckpointModel"], [228, 2, 1, "", "TensorflowSavedModelModel"], [228, 1, 1, "", "checkpoint_session"], [228, 1, 1, "", "estimator_session"], [228, 1, 1, "", "frozen_pb_session"], [228, 1, 1, "", "get_model_fwk_name"], [228, 1, 1, "", "get_model_type"], [228, 1, 1, "", "graph_def_session"], [228, 1, 1, "", "graph_session"], [228, 1, 1, "", "keras_session"], [228, 1, 1, "", "load_saved_model"], [228, 1, 1, "", "saved_model_session"], [228, 1, 1, "", "slim_session"], [228, 1, 1, "", "validate_and_inference_input_output"], [228, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.model.MXNetModel": [[228, 3, 1, "", "framework"], [228, 4, 1, "", "model"], [228, 3, 1, "", "save"]], "neural_compressor.model.model.TensorflowBaseModel": [[228, 3, 1, "", "framework"], [228, 4, 1, "", "graph_info"], [228, 4, 1, "", "model"], [228, 3, 1, "", "save"], [228, 4, 1, "", "weights"]], "neural_compressor.model.model.TensorflowSavedModelModel": [[228, 4, 1, "", "model"], [228, 3, 1, "", "report_sparsity"], [228, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[230, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[230, 3, 1, "", "find_node_by_name"], [230, 3, 1, "", "find_nodes_by_initializer"], [230, 3, 1, "", "framework"], [230, 3, 1, "", "get_scale_zero"], [230, 4, 1, "", "graph_info"], [230, 4, 1, "", "model"], [230, 3, 1, "", "save"], [230, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.torch_model": [[231, 2, 1, "", "PyTorchBaseModel"], [231, 2, 1, "", "PyTorchFXModel"], [231, 2, 1, "", "PyTorchIpexModel"], [231, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[231, 3, 1, "", "framework"], [231, 3, 1, "", "get_all_weight_names"], [231, 3, 1, "", "get_gradient"], [231, 3, 1, "", "get_inputs"], [231, 3, 1, "", "get_weight"], [231, 4, 1, "", "model"], [231, 3, 1, "", "prune_weights_"], [231, 3, 1, "", "report_sparsity"], [231, 3, 1, "", "update_gradient"], [231, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchIpexModel": [[231, 4, 1, "", "graph_info"], [231, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchModel": [[231, 3, 1, "", "export"], [231, 4, 1, "", "graph_info"], [231, 3, 1, "", "save"]], "neural_compressor.objective": [[232, 2, 1, "", "Accuracy"], [232, 2, 1, "", "Footprint"], [232, 2, 1, "", "ModelSize"], [232, 2, 1, "", "Objective"], [232, 2, 1, "", "Performance"], [232, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[232, 3, 1, "", "end"], [232, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[232, 3, 1, "", "end"], [232, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[232, 3, 1, "", "end"], [232, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[232, 3, 1, "", "end"], [232, 3, 1, "", "reset"], [232, 3, 1, "", "result"], [232, 3, 1, "", "result_list"], [232, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[232, 3, 1, "", "end"], [232, 3, 1, "", "start"]], "neural_compressor.pruners": [[233, 0, 0, "-", "gradient_sensitivity"], [234, 0, 0, "-", "group_lasso"], [236, 0, 0, "-", "magnitude"], [237, 0, 0, "-", "pattern_lock"], [238, 0, 0, "-", "pruner"]], "neural_compressor.pruners.pruner": [[238, 1, 1, "", "pruner_registry"]], "neural_compressor.pruning": [[239, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[239, 3, 1, "", "on_epoch_begin"], [239, 3, 1, "", "on_epoch_end"], [239, 3, 1, "", "on_step_begin"], [239, 3, 1, "", "on_step_end"]], "neural_compressor.quantization": [[240, 2, 1, "", "Quantization"], [240, 1, 1, "", "fit"]], "neural_compressor.strategy": [[241, 0, 0, "-", "auto_mixed_precision"], [242, 0, 0, "-", "basic"], [243, 0, 0, "-", "bayesian"], [244, 0, 0, "-", "exhaustive"], [246, 0, 0, "-", "mse"], [247, 0, 0, "-", "random"], [248, 0, 0, "-", "st_utils"], [252, 0, 0, "-", "strategy"]], "neural_compressor.strategy.auto_mixed_precision": [[241, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[241, 3, 1, "", "next_tune_cfg"], [241, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[242, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[242, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[243, 2, 1, "", "BayesianTuneStrategy"], [243, 2, 1, "", "TargetSpace"], [243, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[243, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[243, 3, 1, "", "get_target"], [243, 3, 1, "", "max"], [243, 3, 1, "", "random_sample"], [243, 3, 1, "", "register"], [243, 3, 1, "", "res"]], "neural_compressor.strategy.exhaustive": [[244, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[244, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[246, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[246, 3, 1, "", "mse_impact_lst"], [246, 3, 1, "", "mse_metric_gap"], [246, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[247, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[247, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[249, 0, 0, "-", "tuning_sampler"], [250, 0, 0, "-", "tuning_space"], [251, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.strategy": [[252, 2, 1, "", "TuneStrategy"], [252, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[252, 3, 1, "", "next_tune_cfg"], [252, 3, 1, "", "stop"], [252, 3, 1, "", "traverse"]], "neural_compressor.training": [[253, 2, 1, "", "CompressionManager"], [253, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[253, 3, 1, "", "export"], [253, 3, 1, "", "save"]], "neural_compressor.utils": [[257, 2, 1, "", "KL_Divergence"], [257, 2, 1, "", "LayerHistogramCollector"], [254, 0, 0, "-", "collect_layer_histogram"], [255, 0, 0, "-", "constant"], [256, 0, 0, "-", "create_obj_from_config"], [258, 0, 0, "-", "kl_divergence"], [259, 0, 0, "-", "load_huggingface"], [260, 0, 0, "-", "logger"], [261, 0, 0, "-", "options"], [262, 0, 0, "-", "pytorch"], [263, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[257, 3, 1, "", "expand_quantized_bins"], [257, 3, 1, "", "get_threshold"], [257, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[257, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[254, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[254, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[256, 1, 1, "", "create_eval_func"], [256, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[258, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[258, 3, 1, "", "expand_quantized_bins"], [258, 3, 1, "", "get_threshold"], [258, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[262, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[263, 2, 1, "", "LazyImport"], [263, 2, 1, "", "MODE"], [263, 1, 1, "", "combine_histogram"], [263, 1, 1, "", "dump_data_to_local"], [263, 1, 1, "", "dump_elapsed_time"], [263, 1, 1, "", "equal_dicts"], [263, 1, 1, "", "get_size"], [263, 1, 1, "", "get_tuning_history"], [263, 1, 1, "", "load_data_from_pkl"], [263, 1, 1, "", "recover"]], "neural_compressor.ux": [[336, 0, 0, "-", "components"], [392, 0, 0, "-", "inc_bench"], [401, 0, 0, "-", "utils"], [426, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[267, 0, 0, "-", "benchmark"], [271, 0, 0, "-", "config_generator"], [278, 0, 0, "-", "configuration_wizard"], [312, 0, 0, "-", "db_manager"], [317, 0, 0, "-", "diagnosis"], [325, 0, 0, "-", "file_browser"], [331, 0, 0, "-", "graph"], [337, 0, 0, "-", "jobs_management"], [341, 0, 0, "-", "manage_workspace"], [343, 0, 0, "-", "model"], [362, 0, 0, "-", "model_zoo"], [364, 0, 0, "-", "names_mapper"], [371, 0, 0, "-", "optimization"], [384, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[267, 2, 1, "", "Benchmarks"], [264, 0, 0, "-", "benchmark"], [265, 0, 0, "-", "benchmark_model"], [266, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[264, 2, 1, "", "Benchmark"], [264, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[264, 4, 1, "", "config_filename"], [264, 4, 1, "", "configuration_data"], [264, 3, 1, "", "execute"], [264, 3, 1, "", "generate_config"], [264, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[265, 1, 1, "", "benchmark_model"], [265, 1, 1, "", "parse_args"], [265, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[266, 1, 1, "", "benchmark_result_update"], [266, 1, 1, "", "benchmark_result_update_pytorch_script"], [266, 1, 1, "", "execute_benchmark"], [266, 1, 1, "", "execute_real_benchmark"], [266, 1, 1, "", "pytorch_script_bench_optimizations"], [266, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[268, 0, 0, "-", "benchmark_config_generator"], [269, 0, 0, "-", "config_generator"], [270, 0, 0, "-", "graph_optimization_config_generator"], [272, 0, 0, "-", "mixed_precision_config_generator"], [273, 0, 0, "-", "profiling_config_generator"], [274, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[268, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[268, 3, 1, "", "generate"], [268, 3, 1, "", "generate_accuracy_config"], [268, 3, 1, "", "generate_evaluation_config"], [268, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[269, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[269, 3, 1, "", "generate"], [269, 3, 1, "", "generate_dataloader_config"], [269, 3, 1, "", "generate_model_config"], [269, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[270, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[270, 3, 1, "", "generate"], [270, 3, 1, "", "generate_evaluation_config"], [270, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[272, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[272, 3, 1, "", "generate"], [272, 3, 1, "", "generate_evaluation_config"], [272, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[273, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[273, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[274, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[274, 3, 1, "", "generate"], [274, 3, 1, "", "generate_evaluation_config"], [274, 3, 1, "", "generate_quantization_config"], [274, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[275, 0, 0, "-", "configuration_parser"], [276, 0, 0, "-", "get_boundary_nodes"], [277, 0, 0, "-", "get_configuration"], [279, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[275, 2, 1, "", "ConfigurationParser"], [275, 1, 1, "", "normalize_string_list"], [275, 1, 1, "", "parse_list_value"], [275, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[275, 3, 1, "", "get_param_type"], [275, 3, 1, "", "parse"], [275, 3, 1, "", "parse_dataloader"], [275, 3, 1, "", "parse_evaluation_data"], [275, 3, 1, "", "parse_metric"], [275, 3, 1, "", "parse_transforms"], [275, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[276, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[277, 1, 1, "", "get_predefined_configuration"], [277, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[279, 2, 1, "", "Feeder"], [279, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[279, 3, 1, "", "feed"], [279, 3, 1, "", "get_dataloaders"], [279, 3, 1, "", "get_domains"], [279, 3, 1, "", "get_frameworks"], [279, 3, 1, "", "get_metrics"], [279, 3, 1, "", "get_models"], [279, 3, 1, "", "get_objectives"], [279, 3, 1, "", "get_precisions"], [279, 3, 1, "", "get_quantization_approaches"], [279, 3, 1, "", "get_strategies"], [279, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[312, 2, 1, "", "DBManager"], [280, 0, 0, "-", "db_manager"], [289, 0, 0, "-", "db_models"], [307, 0, 0, "-", "db_operations"], [313, 0, 0, "-", "params_interfaces"], [314, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[312, 3, 1, "", "create_all"], [312, 3, 1, "", "create_sqlalchemy_engine"], [312, 4, 1, "", "engine"], [312, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[280, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[280, 3, 1, "", "create_all"], [280, 3, 1, "", "create_sqlalchemy_engine"], [280, 4, 1, "", "engine"], [280, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[281, 0, 0, "-", "benchmark"], [282, 0, 0, "-", "benchmark_result"], [283, 0, 0, "-", "dataloader"], [284, 0, 0, "-", "dataset"], [285, 0, 0, "-", "domain"], [286, 0, 0, "-", "domain_flavour"], [287, 0, 0, "-", "example"], [288, 0, 0, "-", "framework"], [290, 0, 0, "-", "metric"], [291, 0, 0, "-", "model"], [292, 0, 0, "-", "optimization"], [293, 0, 0, "-", "optimization_type"], [294, 0, 0, "-", "precision"], [295, 0, 0, "-", "profiling"], [296, 0, 0, "-", "profiling_result"], [297, 0, 0, "-", "project"], [298, 0, 0, "-", "transform"], [299, 0, 0, "-", "tuning_details"], [300, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[281, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[281, 3, 1, "", "add"], [281, 3, 1, "", "build_info"], [281, 3, 1, "", "clean_status"], [281, 3, 1, "", "delete_benchmark"], [281, 3, 1, "", "details"], [281, 3, 1, "", "list"], [281, 3, 1, "", "update_batch_size"], [281, 3, 1, "", "update_config_path"], [281, 3, 1, "", "update_cores_per_instance"], [281, 3, 1, "", "update_dataset"], [281, 3, 1, "", "update_duration"], [281, 3, 1, "", "update_execution_command"], [281, 3, 1, "", "update_log_path"], [281, 3, 1, "", "update_mode"], [281, 3, 1, "", "update_number_of_instance"], [281, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[282, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[282, 3, 1, "", "add"], [282, 3, 1, "", "build_info"], [282, 3, 1, "", "update_accuracy"], [282, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[283, 2, 1, "", "Dataloader"], [283, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[283, 3, 1, "", "list"], [283, 3, 1, "", "list_by_framework"], [283, 3, 1, "", "query_to_list"], [283, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[284, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[284, 3, 1, "", "add"], [284, 3, 1, "", "build_info"], [284, 3, 1, "", "delete_dataset"], [284, 3, 1, "", "details"], [284, 3, 1, "", "list"], [284, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[285, 2, 1, "", "Domain"], [285, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[285, 3, 1, "", "get_domain_id"], [285, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[286, 2, 1, "", "DomainFlavour"], [286, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[286, 3, 1, "", "get_domain_flavour_id"], [286, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[287, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[288, 2, 1, "", "Framework"], [288, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[288, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[290, 2, 1, "", "Metric"], [290, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[290, 3, 1, "", "list"], [290, 3, 1, "", "list_by_framework"], [290, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[291, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[291, 3, 1, "", "add"], [291, 3, 1, "", "build_info"], [291, 3, 1, "", "delete_model"], [291, 3, 1, "", "details"], [291, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[292, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[292, 3, 1, "", "add"], [292, 3, 1, "", "build_info"], [292, 3, 1, "", "clean_status"], [292, 3, 1, "", "delete_optimization"], [292, 3, 1, "", "details"], [292, 3, 1, "", "get_optimization_by_project_and_model"], [292, 3, 1, "", "get_pinned_benchmarks"], [292, 3, 1, "", "list"], [292, 3, 1, "", "pin_accuracy_benchmark"], [292, 3, 1, "", "pin_performance_benchmark"], [292, 3, 1, "", "unpin_benchmark"], [292, 3, 1, "", "update_batch_size"], [292, 3, 1, "", "update_config_path"], [292, 3, 1, "", "update_dataset"], [292, 3, 1, "", "update_duration"], [292, 3, 1, "", "update_execution_command"], [292, 3, 1, "", "update_log_path"], [292, 3, 1, "", "update_optimized_model"], [292, 3, 1, "", "update_precision"], [292, 3, 1, "", "update_sampling_size"], [292, 3, 1, "", "update_status"], [292, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[293, 2, 1, "", "OptimizationType"], [293, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[293, 3, 1, "", "add"], [293, 3, 1, "", "get_optimization_type_by_id"], [293, 3, 1, "", "get_optimization_type_by_name"], [293, 3, 1, "", "get_optimization_type_for_precision"], [293, 3, 1, "", "get_optimization_type_id"], [293, 3, 1, "", "list"], [293, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[294, 2, 1, "", "Precision"], [294, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[294, 3, 1, "", "add"], [294, 3, 1, "", "get_precision_by_id"], [294, 3, 1, "", "get_precision_by_name"], [294, 3, 1, "", "get_precision_id"], [294, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[295, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[295, 3, 1, "", "add"], [295, 3, 1, "", "build_info"], [295, 3, 1, "", "clean_status"], [295, 3, 1, "", "delete_profiling"], [295, 3, 1, "", "details"], [295, 3, 1, "", "list"], [295, 3, 1, "", "update_dataset"], [295, 3, 1, "", "update_duration"], [295, 3, 1, "", "update_execution_command"], [295, 3, 1, "", "update_log_path"], [295, 3, 1, "", "update_num_threads"], [295, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[296, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[296, 3, 1, "", "add"], [296, 3, 1, "", "build_info"], [296, 3, 1, "", "bulk_add"], [296, 3, 1, "", "delete_results"], [296, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[297, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[297, 3, 1, "", "create_project"], [297, 3, 1, "", "delete_project"], [297, 3, 1, "", "get_model_by_name"], [297, 3, 1, "", "list_projects"], [297, 3, 1, "", "project_details"], [297, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[298, 2, 1, "", "Transform"], [298, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[298, 3, 1, "", "list"], [298, 3, 1, "", "list_by_domain"], [298, 3, 1, "", "list_by_framework"], [298, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[299, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[299, 3, 1, "", "add"], [299, 3, 1, "", "delete_tuning_details"], [299, 3, 1, "", "update"], [299, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[300, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[300, 3, 1, "", "add"], [300, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[307, 2, 1, "", "BenchmarkAPIInterface"], [307, 2, 1, "", "DatasetAPIInterface"], [307, 2, 1, "", "DiagnosisAPIInterface"], [307, 2, 1, "", "DictionariesAPIInterface"], [307, 2, 1, "", "ExamplesAPIInterface"], [307, 2, 1, "", "ModelAPIInterface"], [307, 2, 1, "", "OptimizationAPIInterface"], [307, 2, 1, "", "ProfilingAPIInterface"], [307, 2, 1, "", "ProjectAPIInterface"], [301, 0, 0, "-", "benchmark_api_interface"], [302, 0, 0, "-", "dataset_api_interface"], [303, 0, 0, "-", "db_operations"], [304, 0, 0, "-", "diagnosis_api_interface"], [305, 0, 0, "-", "dictionaries_api_interface"], [306, 0, 0, "-", "examples_api_interface"], [308, 0, 0, "-", "model_api_interface"], [309, 0, 0, "-", "optimization_api_interface"], [310, 0, 0, "-", "profiling_api_interface"], [311, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[307, 3, 1, "", "add_benchmark"], [307, 3, 1, "", "add_result"], [307, 3, 1, "", "clean_status"], [307, 3, 1, "", "delete_benchmark"], [307, 3, 1, "", "edit_benchmark"], [307, 3, 1, "", "get_benchmark_details"], [307, 3, 1, "", "list_benchmarks"], [307, 3, 1, "", "parse_benchmark_data"], [307, 3, 1, "", "parse_benchmark_edit_data"], [307, 3, 1, "", "update_benchmark_accuracy"], [307, 3, 1, "", "update_benchmark_duration"], [307, 3, 1, "", "update_benchmark_performance"], [307, 3, 1, "", "update_benchmark_status"], [307, 3, 1, "", "update_execution_command"], [307, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[307, 3, 1, "", "add_dataset"], [307, 3, 1, "", "check_if_custom_metric_or_dataloader"], [307, 3, 1, "", "dataloader_path"], [307, 3, 1, "", "delete_dataset"], [307, 3, 1, "", "generate_custom_template"], [307, 3, 1, "", "generate_template"], [307, 3, 1, "", "get_dataset_details"], [307, 3, 1, "", "get_predefined_dataset"], [307, 3, 1, "", "list_datasets"], [307, 3, 1, "", "parse_dataset_data"], [307, 3, 1, "", "prepare_predefined_dataloader"], [307, 3, 1, "", "prepare_predefined_transform"], [307, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[307, 3, 1, "", "generate_optimization"], [307, 3, 1, "", "get_op_details"], [307, 3, 1, "", "get_op_list"], [307, 3, 1, "", "histogram"], [307, 3, 1, "", "model_wise_params"], [307, 3, 1, "", "parse_model_wise_config"], [307, 3, 1, "", "parse_op_wise_config"], [307, 3, 1, "", "parse_optimization_data"], [307, 3, 1, "", "parse_wise_parameters"], [307, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[307, 3, 1, "", "list_dataloaders"], [307, 3, 1, "", "list_dataloaders_by_framework"], [307, 3, 1, "", "list_domain_flavours"], [307, 3, 1, "", "list_domains"], [307, 3, 1, "", "list_metrics"], [307, 3, 1, "", "list_metrics_by_framework"], [307, 3, 1, "", "list_optimization_types"], [307, 3, 1, "", "list_optimization_types_for_precision"], [307, 3, 1, "", "list_precisions"], [307, 3, 1, "", "list_transforms"], [307, 3, 1, "", "list_transforms_by_domain"], [307, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[307, 3, 1, "", "create_project"], [307, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[307, 3, 1, "", "add_model"], [307, 3, 1, "", "delete_model"], [307, 3, 1, "", "get_model_details"], [307, 3, 1, "", "list_models"], [307, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[307, 3, 1, "", "add_optimization"], [307, 3, 1, "", "add_quantization_optimization"], [307, 3, 1, "", "add_standard_optimization"], [307, 3, 1, "", "add_tuning_history"], [307, 3, 1, "", "clean_status"], [307, 3, 1, "", "delete_optimization"], [307, 3, 1, "", "edit_optimization"], [307, 3, 1, "", "get_optimization_details"], [307, 3, 1, "", "list_optimizations"], [307, 3, 1, "", "parse_optimization_data"], [307, 3, 1, "", "parse_optimization_edit_data"], [307, 3, 1, "", "parse_tuning_history"], [307, 3, 1, "", "pin_accuracy_benchmark"], [307, 3, 1, "", "pin_performance_benchmark"], [307, 3, 1, "", "update_execution_command"], [307, 3, 1, "", "update_optimization_duration"], [307, 3, 1, "", "update_optimization_status"], [307, 3, 1, "", "update_optimized_model"], [307, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[307, 3, 1, "", "add_profiling"], [307, 3, 1, "", "add_result"], [307, 3, 1, "", "bulk_add_results"], [307, 3, 1, "", "clean_status"], [307, 3, 1, "", "delete_profiling"], [307, 3, 1, "", "edit_profiling"], [307, 3, 1, "", "get_profiling_details"], [307, 3, 1, "", "list_profilings"], [307, 3, 1, "", "parse_profiling_data"], [307, 3, 1, "", "parse_profiling_edit_data"], [307, 3, 1, "", "parse_profiling_result_data"], [307, 3, 1, "", "update_execution_command"], [307, 3, 1, "", "update_log_path"], [307, 3, 1, "", "update_profiling_duration"], [307, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[307, 3, 1, "", "add_dummy_dataset"], [307, 3, 1, "", "add_model"], [307, 3, 1, "", "create_project"], [307, 3, 1, "", "delete_project"], [307, 3, 1, "", "get_project_details"], [307, 3, 1, "", "list_projects"], [307, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[301, 2, 1, "", "BenchmarkAPIInterface"], [301, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[301, 3, 1, "", "add_benchmark"], [301, 3, 1, "", "add_result"], [301, 3, 1, "", "clean_status"], [301, 3, 1, "", "delete_benchmark"], [301, 3, 1, "", "edit_benchmark"], [301, 3, 1, "", "get_benchmark_details"], [301, 3, 1, "", "list_benchmarks"], [301, 3, 1, "", "parse_benchmark_data"], [301, 3, 1, "", "parse_benchmark_edit_data"], [301, 3, 1, "", "update_benchmark_accuracy"], [301, 3, 1, "", "update_benchmark_duration"], [301, 3, 1, "", "update_benchmark_performance"], [301, 3, 1, "", "update_benchmark_status"], [301, 3, 1, "", "update_execution_command"], [301, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[302, 2, 1, "", "DatasetAPIInterface"], [302, 1, 1, "", "initialize_associations"], [302, 1, 1, "", "initialize_precision_optimization_types_association"], [302, 1, 1, "", "search_in_list_of_dict"], [302, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [302, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[302, 3, 1, "", "add_dataset"], [302, 3, 1, "", "check_if_custom_metric_or_dataloader"], [302, 3, 1, "", "dataloader_path"], [302, 3, 1, "", "delete_dataset"], [302, 3, 1, "", "generate_custom_template"], [302, 3, 1, "", "generate_template"], [302, 3, 1, "", "get_dataset_details"], [302, 3, 1, "", "get_predefined_dataset"], [302, 3, 1, "", "list_datasets"], [302, 3, 1, "", "parse_dataset_data"], [302, 3, 1, "", "prepare_predefined_dataloader"], [302, 3, 1, "", "prepare_predefined_transform"], [302, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[303, 1, 1, "", "initialize_associations"], [303, 1, 1, "", "initialize_precision_optimization_types_association"], [303, 1, 1, "", "search_in_list_of_dict"], [303, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [303, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[304, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[304, 3, 1, "", "generate_optimization"], [304, 3, 1, "", "get_op_details"], [304, 3, 1, "", "get_op_list"], [304, 3, 1, "", "histogram"], [304, 3, 1, "", "model_wise_params"], [304, 3, 1, "", "parse_model_wise_config"], [304, 3, 1, "", "parse_op_wise_config"], [304, 3, 1, "", "parse_optimization_data"], [304, 3, 1, "", "parse_wise_parameters"], [304, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[305, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[305, 3, 1, "", "list_dataloaders"], [305, 3, 1, "", "list_dataloaders_by_framework"], [305, 3, 1, "", "list_domain_flavours"], [305, 3, 1, "", "list_domains"], [305, 3, 1, "", "list_metrics"], [305, 3, 1, "", "list_metrics_by_framework"], [305, 3, 1, "", "list_optimization_types"], [305, 3, 1, "", "list_optimization_types_for_precision"], [305, 3, 1, "", "list_precisions"], [305, 3, 1, "", "list_transforms"], [305, 3, 1, "", "list_transforms_by_domain"], [305, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[306, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[306, 3, 1, "", "create_project"], [306, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[308, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[308, 3, 1, "", "add_model"], [308, 3, 1, "", "delete_model"], [308, 3, 1, "", "get_model_details"], [308, 3, 1, "", "list_models"], [308, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[309, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[309, 3, 1, "", "add_optimization"], [309, 3, 1, "", "add_quantization_optimization"], [309, 3, 1, "", "add_standard_optimization"], [309, 3, 1, "", "add_tuning_history"], [309, 3, 1, "", "clean_status"], [309, 3, 1, "", "delete_optimization"], [309, 3, 1, "", "edit_optimization"], [309, 3, 1, "", "get_optimization_details"], [309, 3, 1, "", "list_optimizations"], [309, 3, 1, "", "parse_optimization_data"], [309, 3, 1, "", "parse_optimization_edit_data"], [309, 3, 1, "", "parse_tuning_history"], [309, 3, 1, "", "pin_accuracy_benchmark"], [309, 3, 1, "", "pin_performance_benchmark"], [309, 3, 1, "", "update_execution_command"], [309, 3, 1, "", "update_optimization_duration"], [309, 3, 1, "", "update_optimization_status"], [309, 3, 1, "", "update_optimized_model"], [309, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[310, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[310, 3, 1, "", "add_profiling"], [310, 3, 1, "", "add_result"], [310, 3, 1, "", "bulk_add_results"], [310, 3, 1, "", "clean_status"], [310, 3, 1, "", "delete_profiling"], [310, 3, 1, "", "edit_profiling"], [310, 3, 1, "", "get_profiling_details"], [310, 3, 1, "", "list_profilings"], [310, 3, 1, "", "parse_profiling_data"], [310, 3, 1, "", "parse_profiling_edit_data"], [310, 3, 1, "", "parse_profiling_result_data"], [310, 3, 1, "", "update_execution_command"], [310, 3, 1, "", "update_log_path"], [310, 3, 1, "", "update_profiling_duration"], [310, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[311, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[311, 3, 1, "", "add_dummy_dataset"], [311, 3, 1, "", "add_model"], [311, 3, 1, "", "create_project"], [311, 3, 1, "", "delete_project"], [311, 3, 1, "", "get_project_details"], [311, 3, 1, "", "list_projects"], [311, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[313, 2, 1, "", "BenchmarkAddParamsInterface"], [313, 2, 1, "", "BenchmarkEditParamsInterface"], [313, 2, 1, "", "DatasetAddParamsInterface"], [313, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [313, 2, 1, "", "ModelAddParamsInterface"], [313, 2, 1, "", "OptimizationAddParamsInterface"], [313, 2, 1, "", "OptimizationEditParamsInterface"], [313, 2, 1, "", "ProfilingAddParamsInterface"], [313, 2, 1, "", "ProfilingEditParamsInterface"], [313, 2, 1, "", "ProfilingResultAddParamsInterface"], [313, 2, 1, "", "TuningHistoryInterface"], [313, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[313, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[313, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[313, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[314, 1, 1, "", "get_framework_dataloaders_config"], [314, 1, 1, "", "get_framework_transforms_config"], [314, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[315, 0, 0, "-", "diagnosis"], [316, 0, 0, "-", "factory"], [318, 0, 0, "-", "onnx_diagnosis"], [320, 0, 0, "-", "op_details"], [321, 0, 0, "-", "op_entry"], [322, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[315, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[315, 3, 1, "", "calculate_mse"], [315, 3, 1, "", "get_histogram_data"], [315, 3, 1, "", "get_op_details"], [315, 3, 1, "", "get_op_list"], [315, 3, 1, "", "get_tensors_info"], [315, 3, 1, "", "load_quantization_config"], [315, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[316, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[316, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[319, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[319, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[319, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[320, 2, 1, "", "OpActivation"], [320, 2, 1, "", "OpDetails"], [320, 2, 1, "", "OpPattern"], [320, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[320, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[321, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[321, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[323, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[323, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[323, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[324, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[324, 1, 1, "", "create_dir_entry"], [324, 1, 1, "", "create_entry"], [324, 1, 1, "", "create_file_entry"], [324, 1, 1, "", "filter_requested_entries"], [324, 1, 1, "", "get_directory_entries"], [324, 1, 1, "", "get_filter_value"], [324, 1, 1, "", "get_non_hidden_directory_entries"], [324, 1, 1, "", "get_requested_path"], [324, 1, 1, "", "get_setting_value"], [324, 1, 1, "", "is_dataset_or_directory_entry"], [324, 1, 1, "", "is_directory_entry"], [324, 1, 1, "", "is_model_or_directory_entry"], [324, 1, 1, "", "should_show_files"], [324, 1, 1, "", "should_show_only_model_files"], [324, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[326, 0, 0, "-", "attribute"], [327, 0, 0, "-", "collapser"], [328, 0, 0, "-", "edge"], [329, 0, 0, "-", "graph"], [330, 0, 0, "-", "graph_reader"], [332, 0, 0, "-", "node"], [333, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[326, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[327, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[327, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[328, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[328, 4, 1, "", "source"], [328, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[329, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[329, 3, 1, "", "add_edge"], [329, 3, 1, "", "add_node"], [329, 4, 1, "", "edges"], [329, 3, 1, "", "get_node"], [329, 3, 1, "", "get_target_nodes"], [329, 3, 1, "", "highlight_pattern"], [329, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[330, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[330, 3, 1, "", "find_pattern_in_graph"], [330, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[332, 2, 1, "", "GroupNode"], [332, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[334, 0, 0, "-", "onnxrt_reader"], [335, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[334, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[334, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[335, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[335, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[338, 0, 0, "-", "jobs_control_queue"], [339, 0, 0, "-", "jobs_manager"], [340, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[341, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[342, 0, 0, "-", "domain"], [344, 0, 0, "-", "model"], [345, 0, 0, "-", "model_type_getter"], [346, 0, 0, "-", "onnxrt"], [348, 0, 0, "-", "pytorch"], [350, 0, 0, "-", "repository"], [351, 0, 0, "-", "shape"], [353, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[342, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[344, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[344, 4, 1, "", "domain"], [344, 3, 1, "", "ensure_supported_path"], [344, 3, 1, "", "get_framework_name"], [344, 3, 1, "", "get_input_nodes"], [344, 3, 1, "", "get_model_graph"], [344, 3, 1, "", "get_output_nodes"], [344, 3, 1, "", "get_tensors_info"], [344, 3, 1, "", "guard_requirements_installed"], [344, 4, 1, "", "input_shape"], [344, 4, 1, "", "shape_elements_order"], [344, 4, 1, "", "supports_graph"], [344, 3, 1, "", "supports_path"], [344, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[345, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[347, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[347, 2, 1, "", "OnnxrtModel"], [347, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[347, 4, 1, "", "domain"], [347, 4, 1, "", "filtered_input_nodes"], [347, 3, 1, "", "get_framework_name"], [347, 3, 1, "", "get_model_graph"], [347, 3, 1, "", "guard_requirements_installed"], [347, 4, 1, "", "input_shape"], [347, 4, 1, "", "nc_model_instance"], [347, 4, 1, "", "shape_elements_order"], [347, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[349, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[349, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[349, 3, 1, "", "get_framework_name"], [349, 3, 1, "", "guard_requirements_installed"], [349, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[350, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[350, 3, 1, "", "get_framework_from_path"], [350, 3, 1, "", "get_frameworks"], [350, 3, 1, "", "get_model"], [350, 3, 1, "", "get_supported_frameworks"], [350, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[351, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[351, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[352, 0, 0, "-", "frozen_pb"], [354, 0, 0, "-", "keras"], [355, 0, 0, "-", "meta_graph"], [356, 0, 0, "-", "model"], [357, 0, 0, "-", "saved_model"], [358, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[352, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[352, 3, 1, "", "supports_path"], [352, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[354, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[354, 3, 1, "", "get_input_nodes"], [354, 3, 1, "", "get_output_nodes"], [354, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[355, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[355, 3, 1, "", "get_input_nodes"], [355, 3, 1, "", "get_model_graph"], [355, 3, 1, "", "get_output_nodes"], [355, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[356, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[356, 3, 1, "", "get_framework_name"], [356, 3, 1, "", "get_input_nodes"], [356, 3, 1, "", "get_model_graph"], [356, 3, 1, "", "get_output_nodes"], [356, 3, 1, "", "guard_requirements_installed"], [356, 4, 1, "", "input_shape"], [356, 4, 1, "", "nc_model_instance"], [356, 4, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[357, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[357, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[358, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[359, 0, 0, "-", "download_config"], [360, 0, 0, "-", "download_model"], [361, 0, 0, "-", "downloader"], [363, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[359, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[360, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[361, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[361, 3, 1, "", "download"], [361, 3, 1, "", "download_config"], [361, 3, 1, "", "download_file"], [361, 3, 1, "", "download_model"], [361, 3, 1, "", "download_yaml_config"], [361, 3, 1, "", "get_yaml_url"], [361, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[363, 1, 1, "", "check_version"], [363, 1, 1, "", "get_available_models"], [363, 1, 1, "", "get_framework_module_name"], [363, 1, 1, "", "get_installed_frameworks"], [363, 1, 1, "", "list_models"], [363, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[365, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[365, 2, 1, "", "MappingDirection"], [365, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[365, 4, 1, "", "domain_flavour_mappings"], [365, 4, 1, "", "domain_mappings"], [365, 4, 1, "", "framework_mappings"], [365, 3, 1, "", "map_name"], [365, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[371, 2, 1, "", "Optimizations"], [366, 0, 0, "-", "execute_optimization"], [367, 0, 0, "-", "factory"], [369, 0, 0, "-", "graph_optimizer"], [372, 0, 0, "-", "mixed_precision"], [375, 0, 0, "-", "neural_coder_optimization"], [377, 0, 0, "-", "optimization"], [378, 0, 0, "-", "tune"], [381, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[366, 1, 1, "", "check_if_collect_tuning_history"], [366, 1, 1, "", "execute_optimization"], [366, 1, 1, "", "execute_optimization_pytorch_script"], [366, 1, 1, "", "execute_optimization_regular"], [366, 1, 1, "", "parse_logs"], [366, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[367, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[367, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[368, 0, 0, "-", "graph_optimization"], [370, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[368, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[368, 4, 1, "", "configuration_data"], [368, 3, 1, "", "execute"], [368, 3, 1, "", "generate_config"], [368, 4, 1, "", "optimization_script"], [368, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[370, 1, 1, "", "optimize_graph"], [370, 1, 1, "", "optimize_graph_config"], [370, 1, 1, "", "parse_args"], [370, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[373, 0, 0, "-", "mixed_precision"], [374, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[373, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[373, 4, 1, "", "configuration_data"], [373, 3, 1, "", "execute"], [373, 3, 1, "", "generate_config"], [373, 4, 1, "", "optimization_script"], [373, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[374, 1, 1, "", "optimize_graph"], [374, 1, 1, "", "optimize_graph_config"], [374, 1, 1, "", "parse_args"], [374, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[376, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[376, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[377, 2, 1, "", "DataloaderInterface"], [377, 2, 1, "", "Optimization"], [377, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[377, 4, 1, "", "command"], [377, 4, 1, "", "config_filename"], [377, 4, 1, "", "configuration_data"], [377, 3, 1, "", "execute"], [377, 3, 1, "", "generate_config"], [377, 4, 1, "", "optimization_script"], [377, 4, 1, "", "output_model_dir"], [377, 4, 1, "", "output_model_name"], [377, 4, 1, "", "parameters"], [377, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[379, 0, 0, "-", "tune_model"], [380, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[379, 1, 1, "", "parse_args"], [379, 1, 1, "", "set_eager_execution"], [379, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[380, 2, 1, "", "AccuracyCriterion"], [380, 2, 1, "", "Tuning"], [380, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[380, 4, 1, "", "configuration_data"], [380, 3, 1, "", "execute"], [380, 3, 1, "", "generate_config"], [380, 4, 1, "", "optimization_script"], [380, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[381, 2, 1, "", "TuningHistory"], [381, 2, 1, "", "Watcher"], [381, 1, 1, "", "tuning_history"], [381, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[381, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[381, 3, 1, "", "history_file_modification_time"], [381, 3, 1, "", "stop"], [381, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[382, 0, 0, "-", "execute_profiling"], [383, 0, 0, "-", "factory"], [385, 0, 0, "-", "profile_model"], [386, 0, 0, "-", "profiler"], [387, 0, 0, "-", "profiling"], [389, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[382, 1, 1, "", "execute_profiling"], [382, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[383, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[383, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[385, 1, 1, "", "load_profiling_details"], [385, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[386, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[386, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[387, 2, 1, "", "DataloaderInterface"], [387, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[387, 4, 1, "", "config_filename"], [387, 4, 1, "", "config_path"], [387, 3, 1, "", "execute"], [387, 3, 1, "", "generate_config"], [387, 4, 1, "", "profiling_data"], [387, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[388, 0, 0, "-", "factory"], [390, 0, 0, "-", "profiler"], [391, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[388, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[388, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[390, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[390, 3, 1, "", "build_dataloader"], [390, 3, 1, "", "convert_nodes_to_list"], [390, 3, 1, "", "create_tf_config"], [390, 3, 1, "", "get_node_by_name"], [390, 3, 1, "", "initialize_graph"], [390, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[391, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[392, 1, 1, "", "main"], [392, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[394, 0, 0, "-", "consts"], [395, 0, 0, "-", "environment"], [396, 0, 0, "-", "exceptions"], [397, 0, 0, "-", "executor"], [398, 0, 0, "-", "expiring_dict"], [399, 0, 0, "-", "github_info"], [400, 0, 0, "-", "hw_info"], [402, 0, 0, "-", "json_serializer"], [403, 0, 0, "-", "logger"], [404, 0, 0, "-", "parser"], [405, 0, 0, "-", "proc"], [406, 0, 0, "-", "processes"], [407, 0, 0, "-", "singleton"], [408, 0, 0, "-", "templates"], [411, 0, 0, "-", "utils"], [416, 0, 0, "-", "workload"], [422, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[394, 2, 1, "", "DomainFlavours"], [394, 2, 1, "", "Domains"], [394, 2, 1, "", "ExecutionStatus"], [394, 2, 1, "", "Frameworks"], [394, 2, 1, "", "OptimizationTypes"], [394, 2, 1, "", "Precisions"], [394, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[395, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[395, 3, 1, "", "clean_workloads_wip_status"], [395, 3, 1, "", "ensure_workdir_exists_and_writeable"], [395, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[396, 7, 1, "", "AccessDeniedException"], [396, 7, 1, "", "ClientErrorException"], [396, 7, 1, "", "InternalException"], [396, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[397, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[397, 4, 1, "", "additional_log_names"], [397, 3, 1, "", "call"], [397, 3, 1, "", "call_one"], [397, 3, 1, "", "is_multi_commands"], [397, 4, 1, "", "log_name"], [397, 4, 1, "", "process_duration"], [397, 3, 1, "", "refresh_workdir"], [397, 4, 1, "", "request_id"], [397, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[398, 2, 1, "", "ExpiringDict"], [398, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[398, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[399, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[399, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[400, 2, 1, "", "HWInfo"], [400, 1, 1, "", "get_bios_version"], [400, 1, 1, "", "get_distribution"], [400, 1, 1, "", "get_framework_dependency_info"], [400, 1, 1, "", "get_framework_info"], [400, 1, 1, "", "get_kernel_version"], [400, 1, 1, "", "get_number_of_sockets"], [400, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[400, 3, 1, "", "initialize"], [400, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[402, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[402, 3, 1, "", "serialize"], [402, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[403, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[404, 2, 1, "", "AccuracyParser"], [404, 2, 1, "", "BenchmarkParserFactory"], [404, 2, 1, "", "OptimizationParser"], [404, 2, 1, "", "Parser"], [404, 2, 1, "", "PerformanceParser"], [404, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[404, 4, 1, "", "patterns"], [404, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[404, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[404, 4, 1, "", "patterns"], [404, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[404, 4, 1, "", "patterns"], [404, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[404, 4, 1, "", "patterns"], [404, 3, 1, "", "process"], [404, 3, 1, "", "summarize_partial"], [404, 3, 1, "", "summarize_value"], [404, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[404, 4, 1, "", "patterns"], [404, 3, 1, "", "process"], [404, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[405, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[405, 4, 1, "", "info"], [405, 4, 1, "", "info_path"], [405, 4, 1, "", "is_ok"], [405, 4, 1, "", "output"], [405, 4, 1, "", "output_path"], [405, 3, 1, "", "remove_logs"], [405, 3, 1, "", "run"], [405, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[406, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[406, 4, 1, "", "is_ok"], [406, 3, 1, "", "remove_successful_logs"], [406, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[407, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[409, 0, 0, "-", "metric"], [410, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[409, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[409, 4, 1, "", "acc_input_model"], [409, 4, 1, "", "acc_optimized_model"], [409, 4, 1, "", "accuracy"], [409, 3, 1, "", "calculate_throughput"], [409, 3, 1, "", "insert_data"], [409, 4, 1, "", "latency"], [409, 4, 1, "", "optimization_time"], [409, 4, 1, "", "path_optimized_model"], [409, 4, 1, "", "profiling_data"], [409, 4, 1, "", "size_input_model"], [409, 4, 1, "", "size_optimized_model"], [409, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[410, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[410, 3, 1, "", "clean_logs"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[411, 1, 1, "", "check_module"], [411, 1, 1, "", "deprecated"], [411, 1, 1, "", "determine_ip"], [411, 1, 1, "", "export_to_csv"], [411, 1, 1, "", "filter_transforms"], [411, 1, 1, "", "get_dataset_path"], [411, 1, 1, "", "get_file_extension"], [411, 1, 1, "", "get_framework_from_path"], [411, 1, 1, "", "get_height_width_from_size"], [411, 1, 1, "", "get_metrics_dict"], [411, 1, 1, "", "get_model_zoo_config_path"], [411, 1, 1, "", "get_model_zoo_model_path"], [411, 1, 1, "", "get_module_version"], [411, 1, 1, "", "get_predefined_config_path"], [411, 1, 1, "", "get_shape_from_transforms"], [411, 1, 1, "", "get_size"], [411, 1, 1, "", "is_dataset_file"], [411, 1, 1, "", "is_development_env"], [411, 1, 1, "", "is_hidden"], [411, 1, 1, "", "load_dataloader_config"], [411, 1, 1, "", "load_help_nc_params"], [411, 1, 1, "", "load_metrics_config"], [411, 1, 1, "", "load_model_config"], [411, 1, 1, "", "load_model_wise_params"], [411, 1, 1, "", "load_precisions_config"], [411, 1, 1, "", "load_transforms_config"], [411, 1, 1, "", "load_transforms_filter_config"], [411, 1, 1, "", "normalize_domain"], [411, 1, 1, "", "normalize_framework"], [411, 1, 1, "", "normalize_string"], [411, 1, 1, "", "parse_bool_value"], [411, 1, 1, "", "parse_to_float_list"], [411, 1, 1, "", "parse_to_string_list"], [411, 1, 1, "", "parse_version"], [411, 1, 1, "", "release_tag"], [411, 1, 1, "", "replace_with_values"], [411, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[412, 0, 0, "-", "config"], [413, 0, 0, "-", "dataloader"], [414, 0, 0, "-", "evaluation"], [415, 0, 0, "-", "graph_optimization"], [417, 0, 0, "-", "mixed_precision"], [418, 0, 0, "-", "model"], [419, 0, 0, "-", "pruning"], [420, 0, 0, "-", "quantization"], [421, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[412, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[412, 3, 1, "", "dump"], [412, 3, 1, "", "get_performance_configs"], [412, 3, 1, "", "get_performance_cores_per_instance"], [412, 3, 1, "", "get_performance_num_of_instance"], [412, 3, 1, "", "initialize"], [412, 3, 1, "", "load"], [412, 3, 1, "", "process_transform"], [412, 3, 1, "", "remove_accuracy_metric"], [412, 3, 1, "", "remove_dataloader"], [412, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [412, 3, 1, "", "set_accuracy_goal"], [412, 3, 1, "", "set_accuracy_metric"], [412, 3, 1, "", "set_evaluation_dataloader"], [412, 3, 1, "", "set_evaluation_dataset_path"], [412, 3, 1, "", "set_inputs"], [412, 3, 1, "", "set_optimization_precision"], [412, 3, 1, "", "set_outputs"], [412, 3, 1, "", "set_performance_cores_per_instance"], [412, 3, 1, "", "set_performance_iterations"], [412, 3, 1, "", "set_performance_num_of_instance"], [412, 3, 1, "", "set_performance_warmup"], [412, 3, 1, "", "set_quantization_approach"], [412, 3, 1, "", "set_quantization_batch_size"], [412, 3, 1, "", "set_quantization_dataloader"], [412, 3, 1, "", "set_quantization_dataset_path"], [412, 3, 1, "", "set_quantization_sampling_size"], [412, 3, 1, "", "set_transform"], [412, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[413, 2, 1, "", "Dataloader"], [413, 2, 1, "", "Dataset"], [413, 2, 1, "", "Filter"], [413, 2, 1, "", "LabelBalance"], [413, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[413, 3, 1, "", "serialize"], [413, 3, 1, "", "set_dataset"], [413, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[413, 3, 1, "", "is_dummy"], [413, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[413, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[414, 2, 1, "", "Accuracy"], [414, 2, 1, "", "Configs"], [414, 2, 1, "", "Evaluation"], [414, 2, 1, "", "Metric"], [414, 2, 1, "", "Performance"], [414, 2, 1, "", "Postprocess"], [414, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[414, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[414, 4, 1, "", "name"], [414, 4, 1, "", "param"], [414, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[415, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[415, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[417, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[417, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[418, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[418, 4, 1, "", "inputs"], [418, 4, 1, "", "outputs"], [418, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[419, 2, 1, "", "AdamOptimizer"], [419, 2, 1, "", "AdamWOptimizer"], [419, 2, 1, "", "Approach"], [419, 2, 1, "", "Criterion"], [419, 2, 1, "", "CrossEntropyLossCriterion"], [419, 2, 1, "", "KnowledgeDistillationLossCriterion"], [419, 2, 1, "", "Optimizer"], [419, 2, 1, "", "Pruning"], [419, 2, 1, "", "SGDOptimizer"], [419, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [419, 2, 1, "", "Train"], [419, 2, 1, "", "WeightCompressionApproach"], [419, 1, 1, "", "parse_dict_value_to_float"], [419, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[419, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[420, 2, 1, "", "Advance"], [420, 2, 1, "", "Calibration"], [420, 2, 1, "", "Quantization"], [420, 2, 1, "", "WiseConfig"], [420, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[421, 2, 1, "", "AccCriterion"], [421, 2, 1, "", "Diagnosis"], [421, 2, 1, "", "ExitPolicy"], [421, 2, 1, "", "MultiObjectives"], [421, 2, 1, "", "Strategy"], [421, 2, 1, "", "Tuning"], [421, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[421, 4, 1, "", "objective"], [421, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[421, 3, 1, "", "set_max_trials"], [421, 3, 1, "", "set_performance_only"], [421, 3, 1, "", "set_random_seed"], [421, 3, 1, "", "set_timeout"], [421, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[422, 1, 1, "", "float_representer"], [422, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[423, 0, 0, "-", "communication"], [424, 0, 0, "-", "configuration"], [425, 0, 0, "-", "exceptions"], [427, 0, 0, "-", "router"], [428, 0, 0, "-", "server"], [431, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[423, 2, 1, "", "Message"], [423, 2, 1, "", "MessageQueue"], [423, 2, 1, "", "Request"], [423, 2, 1, "", "Response"], [423, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[423, 4, 1, "", "data"], [423, 4, 1, "", "status"], [423, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[423, 3, 1, "", "get"], [423, 3, 1, "", "post_error"], [423, 3, 1, "", "post_failure"], [423, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[424, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[424, 3, 1, "", "determine_gui_port"], [424, 3, 1, "", "determine_log_level"], [424, 3, 1, "", "determine_server_port"], [424, 3, 1, "", "determine_url_prefix"], [424, 3, 1, "", "determine_values_from_environment"], [424, 3, 1, "", "dump_token_to_file"], [424, 3, 1, "", "get_command_line_args"], [424, 3, 1, "", "get_url"], [424, 4, 1, "", "global_config_directory"], [424, 3, 1, "", "is_port_taken"], [424, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[425, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[427, 2, 1, "", "DeferredRoutingDefinition"], [427, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [427, 2, 1, "", "RealtimeRoutingDefinition"], [427, 2, 1, "", "Router"], [427, 2, 1, "", "RoutingDefinition"], [427, 1, 1, "", "find_pattern_in_graph"], [427, 1, 1, "", "get_model_graph"], [427, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[427, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[428, 1, 1, "", "allow_api_call"], [428, 1, 1, "", "block_iframe"], [428, 1, 1, "", "block_sniffing"], [428, 1, 1, "", "build_parameters"], [428, 1, 1, "", "disable_cache"], [428, 1, 1, "", "get_tls_args"], [428, 1, 1, "", "handle_api_call"], [428, 1, 1, "", "page_not_found"], [428, 1, 1, "", "require_api_token"], [428, 1, 1, "", "root"], [428, 1, 1, "", "run_server"], [428, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[429, 0, 0, "-", "benchmark"], [430, 0, 0, "-", "history_snapshot_parser"], [432, 0, 0, "-", "model"], [433, 0, 0, "-", "optimization"], [434, 0, 0, "-", "profiling"], [435, 0, 0, "-", "request_data_processor"], [436, 0, 0, "-", "response_generator"], [437, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[429, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[430, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[430, 3, 1, "", "extract_accuracy"], [430, 3, 1, "", "extract_performance"], [430, 3, 1, "", "parse_history_item"], [430, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[432, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[432, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[433, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[434, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[434, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[435, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[435, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[436, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[436, 3, 1, "", "add_refresh"], [436, 3, 1, "", "from_exception"], [436, 3, 1, "", "get_status_code_for_exception"], [436, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[437, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[437, 3, 1, "", "get_code_template"], [437, 3, 1, "", "get_config"], [437, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"6ece06672ed3_v1_14": 0, "modul": [0, 4, 5, 7, 9, 10, 11, 28, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 126, 127, 128, 130, 131, 132, 133, 136, 139, 140, 141, 143, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 226, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 256, 258, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 332, 334, 335, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 370, 373, 374, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 452], "contentfunction": [0, 4, 5, 9, 28, 34, 35, 57, 58, 60, 121, 126, 127, 129, 133, 145, 149, 150, 152, 155, 157, 161, 169, 171, 175, 178, 179, 180, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 203, 207, 212, 216, 217, 218, 220, 224, 228, 232, 238, 240, 243, 252, 253, 256, 262, 263, 265, 266, 275, 276, 277, 279, 283, 285, 286, 288, 290, 293, 294, 298, 301, 302, 303, 314, 324, 341, 345, 347, 358, 359, 360, 363, 366, 370, 374, 376, 379, 381, 382, 385, 391, 392, 400, 403, 411, 419, 422, 423, 427, 428, 443, 480], "6f0d0f71d92e_v1_13": 1, "9e89549a08c8_v1_11": 2, "block_mask": 3, "env": 4, "neural_compressoradaptor": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 447, 448], "class": [5, 7, 9, 10, 11, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 127, 128, 129, 130, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 239, 240, 241, 242, 243, 244, 246, 247, 252, 253, 254, 257, 258, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 320, 321, 323, 326, 327, 328, 329, 330, 332, 334, 335, 342, 344, 347, 349, 350, 351, 352, 354, 355, 356, 357, 361, 365, 367, 368, 371, 373, 377, 380, 381, 383, 386, 387, 388, 390, 394, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 427, 429, 430, 432, 433, 434, 435, 436, 437, 447, 452, 465], "packag": [6, 24, 129, 142, 145, 152, 163, 175, 179, 180, 182, 187, 194, 205, 210, 211, 223, 224, 227, 235, 245, 257, 267, 307, 312, 371, 465], "mxnet": [7, 471, 476, 490, 505, 508], "mxnet_util": [8, 9], "util": [9, 34, 121, 126, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 314, 358, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "onnxrt": [10, 346, 347, 476, 490, 505], "ox_util": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "calibr": 11, "oper": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "activ": 13, "argmax": 14, "attent": 15, "binary_op": 16, "concat": 17, "conv": 18, "direct_q8": 19, "embed_layernorm": 20, "gather": 21, "gavgpool": 22, "gemm": 23, "lstm": 25, "matmul": 26, "maxpool": 27, "op": 28, "pad": 29, "pool": 30, "resiz": 31, "split": 32, "quantiz": [33, 221, 240, 420, 441, 444, 446, 467, 471, 479, 481, 499, 500, 501, 508], "pytorch": [35, 262, 348, 349, 443, 471, 476, 490, 501, 504, 505, 508], "queri": [36, 447], "tensorflow": [37, 352, 353, 354, 355, 356, 357, 358, 471, 476, 490, 501, 504, 505, 508], "tf_util": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "graph_convert": 38, "graph_converter_without_calib": 39, "graph_rewrit": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "bf16": [40, 41], "bf16_convert": [40, 122], "gener": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "convert_add_to_biasadd": 42, "convert_layout": 43, "convert_leakyrelu": 44, "convert_nan_to_random": 45, "convert_placeholder_to_const": 46, "dequantize_cast_optim": 47, "dilated_contract": 48, "dummy_biasadd": 49, "expanddims_optim": 50, "fetch_weight_from_reshap": 51, "fold_batch_norm": 52, "fold_const": 53, "fuse_biasadd_add": 54, "fuse_column_wise_mul": 55, "fuse_conv_with_math": 56, "fuse_decomposed_bn": 57, "fuse_decomposed_in": 58, "fuse_gelu": 59, "fuse_layer_norm": 60, "fuse_pad_with_conv": 61, "fuse_pad_with_fp32_conv": 62, "fuse_reshape_transpos": 63, "graph_cse_optim": 64, "grappler_pass": 65, "insert_print_nod": 67, "move_squeeze_after_relu": 68, "pre_optim": 69, "remove_training_nod": 70, "rename_batch_norm": 71, "split_shared_input": 72, "strip_equivalent_nod": 73, "strip_unused_nod": 74, "switch_optim": 75, "update_ent": 76, "graph_bas": 77, "int8": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 508], "freeze_fake_qu": 79, "freeze_valu": 80, "freeze_value_without_calib": 81, "fuse_conv_redundant_dequant": 82, "fuse_conv_requant": 83, "fuse_matmul_redundant_dequant": 84, "fuse_matmul_requant": 85, "meta_op_optim": 87, "post_hostconst_convert": 88, "post_quantized_op_cs": 89, "rnn_convert": 90, "scale_propag": 91, "qdq": [92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 508], "insert_qdq_pattern": 93, "merge_duplicated_qdq": 94, "share_qdq_y_pattern": 95, "graph_util": 96, "quantize_graph": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "fuse_qdq_bn": 99, "fuse_qdq_concatv2": 100, "fuse_qdq_conv": 101, "fuse_qdq_deconv": 102, "fuse_qdq_in": 103, "fuse_qdq_matmul": 104, "fuse_qdq_pool": 105, "optimize_qdq": 107, "quantize_graph_bas": 108, "quantize_graph_bn": 109, "quantize_graph_concatv2": 110, "quantize_graph_conv": 111, "quantize_graph_for_intel_cpu": 112, "quantize_graph_matmul": 113, "quantize_graph_pool": 114, "quantize_graph_common": 115, "transform_graph": [116, 117, 118, 119, 120], "bias_correct": 116, "graph_transform_bas": 117, "insert_log": 119, "rerange_quantized_concat": 120, "torch_util": [122, 123, 124, 125, 126, 157], "onnx": [124, 446, 471, 508], "symbolic_trac": 125, "algorithm": [127, 128, 129, 130], "fast_bias_correct": 128, "weight_correct": 130, "benchmark": [131, 149, 264, 265, 266, 267, 281, 429, 451, 472, 473, 499], "conf": [132, 133, 134, 135], "config": [132, 136, 412, 473, 475, 494], "dotdict": 133, "pythonic_config": 135, "contrib": [137, 138, 139, 140], "strategi": [138, 139, 140, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 470, 503, 506], "sigopt": [139, 503, 506], "tpe": [140, 506], "data": [141, 142, 143, 144, 145, 146, 147, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 454], "dataload": [141, 142, 151, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 283, 413, 455, 473, 475], "dataset": [143, 144, 169, 170, 171, 172, 173, 174, 175, 176, 284, 456, 472, 476, 486], "imagenet_dataset": [143, 174], "attribut": [145, 171, 180, 187, 210, 227, 326, 440, 474], "transform": [146, 147, 148, 181, 182, 183, 184, 298, 457, 486, 505], "coco_transform": 146, "imagenet_transform": [147, 181], "experiment": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "common": [150, 151, 152, 153, 154, 155, 156, 157, 441, 450, 483], "criterion": [150, 453], "submodul": [152, 163, 175, 179, 182, 187, 194, 204, 205, 211, 214, 257, 267, 271, 278, 289, 307, 312, 317, 318, 322, 325, 331, 333, 336, 337, 343, 346, 348, 353, 362, 364, 369, 371, 372, 375, 378, 384, 389, 393, 401, 408, 416, 426, 431], "metric": [153, 188, 189, 190, 191, 192, 193, 194, 195, 224, 290, 409, 458, 486, 490], "model": [154, 226, 227, 228, 229, 230, 231, 291, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 418, 432, 443, 446, 459, 472, 492, 493, 506, 508], "optim": [155, 292, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 433, 460, 472, 485, 495], "postprocess": 156, "compon": [158, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 461], "base_dataload": 159, "default_dataload": 161, "fetcher": 162, "mxnet_dataload": 164, "onnxrt_dataload": 165, "pytorch_dataload": 166, "sampler": 167, "tensorflow_dataload": 168, "bert_dataset": 169, "coco_dataset": 170, "dummy_dataset": 172, "dummy_dataset_v2": 173, "style_transfer_dataset": 176, "filter": [177, 178, 179], "coco_filt": 177, "subpackag": [180, 187, 205, 210, 223, 312, 317, 331, 336, 343, 371, 384, 393, 401, 426], "token": 183, "distil": [185, 462, 478, 479, 499, 508], "graph_optim": [186, 368, 369, 370, 415], "bleu": [188, 452], "bleu_util": 189, "coco_label_map": 190, "coco_tool": 191, "evaluate_squad": 192, "f1": 193, "mixed_precis": [196, 372, 373, 374, 417], "model_convers": 197, "na": [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 442, 465, 499], "basic_na": 198, "dyna": 199, "dynast": [200, 201, 202, 203, 204], "dynas_manag": 200, "dynas_predictor": 201, "dynas_search": 202, "dynas_util": 203, "nas_util": 207, "search_algorithm": 208, "prune": [209, 219, 239, 419, 466, 497, 499, 508], "pruning_recip": [210, 211, 212, 213], "pattern": [211, 212, 213, 216, 497], "tile_pattern": 213, "pytorch_prun": [214, 215, 216, 217, 218, 219, 220], "logger": [215, 260, 403], "prune_util": 217, "pruner": [218, 233, 234, 235, 236, 237, 238], "schedul": [220, 222, 468, 497], "mix_precis": 225, "base_model": 226, "nets_factori": 229, "onnx_model": 230, "torch_model": 231, "object": [232, 494], "gradient_sensit": 233, "group_lasso": 234, "magnitud": 236, "pattern_lock": 237, "auto_mixed_precis": 241, "basic": [242, 442, 506], "bayesian": [243, 506], "get": [243, 446, 447, 478, 484, 490, 491, 494, 495, 497, 499, 500, 507], "target": 243, "valu": 243, "param": 243, "exhaust": [244, 506], "mse": [246, 506], "random": [247, 506], "st_util": [248, 249, 250, 251], "tuning_sampl": 249, "tuning_spac": 250, "tuning_struct": 251, "train": [253, 441, 444, 480, 500], "collect_layer_histogram": 254, "constant": 255, "create_obj_from_config": 256, "kl_diverg": 258, "load_huggingfac": 259, "option": [261, 472, 480, 488], "ux": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "benchmark_model": 265, "execute_benchmark": 266, "config_gener": [268, 269, 270, 271, 272, 273, 274], "benchmark_config_gener": 268, "graph_optimization_config_gener": 270, "mixed_precision_config_gener": 272, "profiling_config_gener": 273, "quantization_config_gener": 274, "configuration_wizard": [275, 276, 277, 278, 279], "configuration_pars": 275, "get_boundary_nod": 276, "get_configur": 277, "params_feed": 279, "db_manag": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314], "db_model": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "benchmark_result": 282, "domain": [285, 342], "domain_flavour": 286, "exampl": [287, 442, 443, 444, 447, 473, 478, 479, 480, 482, 485, 491, 492, 494, 495, 497, 500, 504, 508], "framework": [288, 484, 492, 499], "optimization_typ": 293, "precis": [294, 485, 491, 501], "profil": [295, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 434, 472], "profiling_result": 296, "project": [297, 472], "tuning_detail": 299, "tuning_histori": [300, 381], "db_oper": [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "benchmark_api_interfac": 301, "dataset_api_interfac": 302, "diagnosis_api_interfac": 304, "dictionaries_api_interfac": 305, "examples_api_interfac": 306, "model_api_interfac": 308, "optimization_api_interfac": 309, "profiling_api_interfac": 310, "project_api_interfac": 311, "params_interfac": 313, "diagnosi": [315, 316, 317, 318, 319, 320, 321, 322, 323, 472], "factori": [316, 367, 383, 388], "onnx_diagnosi": [318, 319], "onnxrt_diagnosi": 319, "op_detail": 320, "op_entri": 321, "tensorflow_diagnosi": [322, 323], "file_brows": [324, 325], "graph": [326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 472, 485], "collaps": 327, "edg": 328, "graph_read": 330, "node": 332, "reader": [333, 334, 335], "onnxrt_read": 334, "tensorflow_read": 335, "jobs_manag": [337, 338, 339, 340], "jobs_control_queu": 338, "request": [340, 474], "manage_workspac": 341, "model_type_gett": 345, "repositori": 350, "shape": 351, "frozen_pb": 352, "kera": 354, "meta_graph": 355, "saved_model": 357, "model_zoo": [359, 360, 361, 362, 363], "download_config": 359, "download_model": 360, "download": 361, "list_model": 363, "names_mapp": [364, 365], "execute_optim": 366, "optimize_model": [370, 374, 376], "neural_coder_optim": [375, 376], "tune": [378, 379, 380, 421, 485, 500, 506], "tune_model": 379, "execute_profil": 382, "profile_model": 385, "tensorflow_profil": [388, 389, 390, 391], "inc_bench": 392, "const": 394, "environ": [395, 446], "except": [396, 425], "executor": 397, "expiring_dict": 398, "github_info": 399, "hw_info": 400, "json_seri": 402, "parser": 404, "proc": 405, "process": 406, "singleton": 407, "templat": [408, 409, 410, 474], "workdir": 410, "workload": [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 437], "evalu": [414, 473, 480], "yaml_util": 422, "web": [423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "commun": 423, "configur": [424, 480, 484, 496, 499, 503, 506, 507], "router": 427, "server": 428, "servic": [429, 430, 431, 432, 433, 434, 435, 436, 437], "history_snapshot_pars": 430, "request_data_processor": 435, "response_gener": 436, "version": 438, "intel": [439, 446, 472, 487, 508], "neural": [439, 442, 446, 465, 472, 487, 497, 503], "compressor": [439, 446, 472, 487, 503], "document": [439, 446], "section": 439, "contributor": [440, 474], "coven": [440, 474], "code": [440, 442, 474], "conduct": [440, 474], "our": [440, 474], "pledg": [440, 474], "standard": [440, 474], "respons": [440, 474], "scope": [440, 474], "enforc": [440, 474], "fx": 441, "overview": 441, "usag": [441, 442, 443, 444, 504, 506], "note": 441, "detail": [441, 472], "problem": 441, "dynam": [441, 442, 481, 500], "static": [441, 500], "awar": [441, 444, 500], "architectur": [442, 443, 446, 465, 477, 487], "search": [442, 465], "introduct": [442, 447, 472, 478, 479, 480, 484, 485, 487, 490, 491, 492, 493, 494, 495, 497, 499, 500, 503, 504, 506, 507], "api": [442, 446, 447, 449, 461, 478, 486, 490, 491, 494, 495, 497, 499], "1": [442, 472, 480, 483, 486, 488, 508], "python": [442, 446, 469, 490, 499], "yaml": [442, 473, 475, 479, 480, 484, 507], "2": [442, 461, 472, 483, 486, 488, 508], "onli": 442, "advanc": 442, "custom": [442, 472, 490, 494, 506], "ptq": [443, 508], "design": [443, 444, 477, 504, 506], "mobilenetv2": 443, "helper": 443, "secur": [445, 472, 480], "polici": 445, "report": 445, "vulner": 445, "instal": [446, 472, 480, 488], "prerequisit": [446, 488], "linux": [446, 488], "start": [446, 447, 472, 478, 484, 490, 491, 494, 495, 497, 499, 500, 507], "jupyterlab": 446, "extens": [446, 508], "gui": 446, "system": [446, 472, 496], "requir": 446, "valid": [446, 508], "hardwar": [446, 508], "support": [446, 447, 471, 474, 476, 478, 480, 484, 487, 490, 491, 492, 494, 495, 497, 499, 500, 505, 507], "cpu": [446, 508], "base": 446, "64": 446, "compat": 446, "processor": 446, "gpu": 446, "built": [446, 476, 486, 490], "": 446, "xe": 446, "multipl": [446, 494, 508], "vendor": 446, "through": [446, 508], "runtim": [446, 471, 508], "softwar": 446, "select": 446, "public": [446, 498], "event": [446, 498], "addit": 446, "hire": 446, "matrix": [447, 471, 478, 484, 487, 490, 491, 492, 494, 495, 497, 499, 500, 507], "work": [447, 500], "flow": [447, 500], "background": 447, "ad": 447, "new": [447, 472, 506], "backend": 447, "capabl": 447, "implement": 447, "onnxrtadaptor": 447, "basedataload": 455, "experiement": 461, "deprec": 461, "0": [461, 508], "mixedprecis": 463, "modelconvers": 464, "ipex": 471, "refer": 471, "bench": 472, "tabl": 472, "from": [472, 488], "binari": [472, 488], "sourc": [472, 488], "home": 472, "screen": 472, "creat": [472, 475], "predefin": 472, "displai": 472, "list": [472, 476, 505], "remov": 472, "develop": 472, "tab": 472, "wizard": 472, "edit": 472, "entri": 472, "inform": [472, 489], "file": [473, 475, 484, 507], "us": [473, 475, 485, 493], "user": [473, 475, 476, 479, 480, 486, 499, 507], "specif": [473, 475, 476, 506], "run": 473, "contribut": 474, "guidelin": 474, "pull": 474, "checklist": 474, "how": [475, 485, 493], "workflow": 477, "knowledg": [478, 508], "intermedi": 478, "layer": 478, "self": 478, "defin": [479, 480], "distribut": 480, "infer": 480, "horovod": 480, "pure": 480, "option2": 480, "horovodrun": 480, "follow": 480, "ar": 480, "frequent": 483, "ask": 483, "question": 483, "build": [483, 490], "issu": [483, 502], "3": [483, 488], "featur": [484, 487, 499, 500, 507], "fp32": 485, "auto": [485, 501], "mix": [485, 491, 501], "default": 485, "incompat": [486, 502], "chang": [486, 502], "between": 486, "v1": 486, "face": 486, "infrastructur": 487, "ai": 488, "kit": 488, "window": 488, "legal": 489, "licens": 489, "citat": 489, "trademark": 489, "singl": [490, 494], "multi": [490, 495], "convers": 493, "orchestr": 495, "One": 495, "shot": 495, "network": 497, "criteria": 497, "full": 498, "45": 498, "2022": 498, "27": 498, "2021": 498, "14": 498, "2018": 498, "2020": 498, "4": 498, "style": 499, "access": 499, "fundament": 500, "approach": 500, "post": 500, "accuraci": 500, "turn": 501, "ON": 501, "dure": 501, "releas": 502, "known": 502, "prepar": 503, "perform": 503, "benefit": 503, "comparison": 503, "differ": 503, "tensorboard": 504, "part": 506, "relat": 506, "mlperf": 508, "10": 508, "torch": 508, "12": 508, "mode": 508, "qat": 508, "11": 508, "7": 508}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"6ece06672ed3_v1_14": [[0, "module-6ece06672ed3_v1_14"]], "Module Contents": [[0, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [28, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [40, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [136, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [146, "module-contents"], [147, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [213, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [226, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [258, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [377, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [452, "module-contents"]], "Functions": [[0, "functions"], [4, "functions"], [5, "functions"], [9, "functions"], [28, "functions"], [34, "functions"], [35, "functions"], [57, "functions"], [58, "functions"], [60, "functions"], [121, "functions"], [126, "functions"], [127, "functions"], [129, "functions"], [133, "functions"], [145, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [161, "functions"], [169, "functions"], [171, "functions"], [175, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [188, "functions"], [189, "functions"], [191, "functions"], [192, "functions"], [193, "functions"], [194, "functions"], [195, "functions"], [203, "functions"], [207, "functions"], [212, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [220, "functions"], [224, "functions"], [228, "functions"], [232, "functions"], [238, "functions"], [240, "functions"], [243, "functions"], [252, "functions"], [253, "functions"], [256, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [266, "functions"], [275, "functions"], [276, "functions"], [277, "functions"], [279, "functions"], [283, "functions"], [285, "functions"], [286, "functions"], [288, "functions"], [290, "functions"], [293, "functions"], [294, "functions"], [298, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [314, "functions"], [324, "functions"], [341, "functions"], [345, "functions"], [347, "functions"], [358, "functions"], [359, "functions"], [360, "functions"], [363, "functions"], [366, "functions"], [370, "functions"], [374, "functions"], [376, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [385, "functions"], [391, "functions"], [392, "functions"], [400, "functions"], [403, "functions"], [411, "functions"], [419, "functions"], [422, "functions"], [423, "functions"], [427, "functions"], [428, "functions"]], "6f0d0f71d92e_v1_13": [[1, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[2, "module-9e89549a08c8_v1_11"]], "block_mask": [[3, "module-block_mask"]], "env": [[4, "module-env"]], "neural_compressor.adaptor.adaptor": [[5, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[5, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [40, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [119, "classes"], [120, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [136, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [158, "classes"], [159, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [191, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [216, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [246, "classes"], [247, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [257, "classes"], [258, "classes"], [263, "classes"], [264, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [334, "classes"], [335, "classes"], [342, "classes"], [344, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [361, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [371, "classes"], [373, "classes"], [377, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [394, "classes"], [395, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [402, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [409, "classes"], [410, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [424, "classes"], [427, "classes"], [429, "classes"], [430, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [452, "classes"], [465, "classes"]], "neural_compressor.adaptor": [[6, "module-neural_compressor.adaptor"]], "Package Contents": [[6, "package-contents"], [24, "package-contents"], [129, "package-contents"], [142, "package-contents"], [145, "package-contents"], [152, "package-contents"], [163, "package-contents"], [175, "package-contents"], [179, "package-contents"], [180, "package-contents"], [182, "package-contents"], [187, "package-contents"], [194, "package-contents"], [205, "package-contents"], [210, "package-contents"], [211, "package-contents"], [223, "package-contents"], [224, "package-contents"], [227, "package-contents"], [235, "package-contents"], [245, "package-contents"], [257, "package-contents"], [267, "package-contents"], [307, "package-contents"], [312, "package-contents"], [371, "package-contents"], [465, "package-contents"]], "neural_compressor.adaptor.mxnet": [[7, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[8, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[9, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[10, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[11, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[12, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[13, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[14, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[15, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[16, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[17, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[18, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[19, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[20, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[21, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[22, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[23, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[24, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[26, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[28, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[29, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[30, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[31, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[32, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[33, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[34, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[35, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[36, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[37, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[38, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[39, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[116, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[117, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[118, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[119, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[120, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[121, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[122, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[123, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[124, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[125, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[126, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[127, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[128, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[129, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[130, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[131, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[132, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[133, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[134, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[135, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[136, "module-neural_compressor.config"]], "neural_compressor.contrib": [[137, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[138, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[139, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[140, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.dataloader": [[141, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders": [[142, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.datasets.imagenet_dataset": [[143, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[144, "module-neural_compressor.data.datasets"]], "neural_compressor.data": [[145, "module-neural_compressor.data"]], "Attributes": [[145, "attributes"], [171, "attributes"], [180, "attributes"], [187, "attributes"], [210, "attributes"], [227, "attributes"]], "neural_compressor.data.transforms.coco_transform": [[146, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[147, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[148, "module-neural_compressor.data.transforms"]], "neural_compressor.experimental.benchmark": [[149, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[150, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[151, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[152, "module-neural_compressor.experimental.common"]], "Submodules": [[152, "submodules"], [163, "submodules"], [175, "submodules"], [179, "submodules"], [182, "submodules"], [187, "submodules"], [194, "submodules"], [204, "submodules"], [205, "submodules"], [211, "submodules"], [214, "submodules"], [257, "submodules"], [267, "submodules"], [271, "submodules"], [278, "submodules"], [289, "submodules"], [307, "submodules"], [312, "submodules"], [317, "submodules"], [318, "submodules"], [322, "submodules"], [325, "submodules"], [331, "submodules"], [333, "submodules"], [336, "submodules"], [337, "submodules"], [343, "submodules"], [346, "submodules"], [348, "submodules"], [353, "submodules"], [362, "submodules"], [364, "submodules"], [369, "submodules"], [371, "submodules"], [372, "submodules"], [375, "submodules"], [378, "submodules"], [384, "submodules"], [389, "submodules"], [393, "submodules"], [401, "submodules"], [408, "submodules"], [416, "submodules"], [426, "submodules"], [431, "submodules"]], "neural_compressor.experimental.common.metric": [[153, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[154, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[155, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[156, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[157, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[158, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[159, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[160, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[161, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[162, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[163, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[164, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[165, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[166, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[167, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[168, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[169, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[170, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[171, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[172, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[173, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[174, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[175, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[176, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[177, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[178, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[179, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[180, "module-neural_compressor.experimental.data"]], "Subpackages": [[180, "subpackages"], [187, "subpackages"], [205, "subpackages"], [210, "subpackages"], [223, "subpackages"], [312, "subpackages"], [317, "subpackages"], [331, "subpackages"], [336, "subpackages"], [343, "subpackages"], [371, "subpackages"], [384, "subpackages"], [393, "subpackages"], [401, "subpackages"], [426, "subpackages"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[181, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[182, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[183, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[184, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[185, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.graph_optimization": [[186, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[187, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[188, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[189, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[190, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[191, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[192, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[193, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[194, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[195, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[196, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[197, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[198, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[199, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[200, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[201, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[202, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[203, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[204, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas": [[205, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[206, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[207, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[208, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[209, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[210, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[211, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[212, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[213, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[214, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[215, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[216, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[217, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[218, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[219, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[220, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[221, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[222, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[223, "module-neural_compressor"]], "neural_compressor.metric": [[224, "module-neural_compressor.metric"]], "neural_compressor.mix_precision": [[225, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[226, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[227, "module-neural_compressor.model"]], "neural_compressor.model.model": [[228, "module-neural_compressor.model.model"]], "neural_compressor.model.nets_factory": [[229, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[230, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.torch_model": [[231, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[232, "module-neural_compressor.objective"]], "neural_compressor.pruners.gradient_sensitivity": [[233, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[234, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[235, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[236, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[237, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[238, "module-neural_compressor.pruners.pruner"]], "neural_compressor.pruning": [[239, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[240, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[241, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[242, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[243, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[243, "get-the-target-value-of-params"]], "neural_compressor.strategy.exhaustive": [[244, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy": [[245, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[246, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.random": [[247, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.st_utils": [[248, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[249, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[250, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[251, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "neural_compressor.strategy.strategy": [[252, "module-neural_compressor.strategy.strategy"]], "neural_compressor.training": [[253, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[254, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[255, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[256, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[257, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[258, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[259, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[260, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[261, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[262, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[263, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[264, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[265, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[266, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[267, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[268, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[269, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[270, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[271, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[272, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[273, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[274, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[275, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[276, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[277, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[278, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[279, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[280, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[281, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[282, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[283, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[284, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[285, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[286, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[287, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[288, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[289, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[290, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[291, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[292, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[293, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[294, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[295, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[296, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[297, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[298, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[299, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[300, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[301, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[302, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[303, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[304, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[305, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[306, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[307, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[308, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[309, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[310, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[311, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[312, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[313, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[314, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[315, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[316, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[317, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[318, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[319, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[320, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[321, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[322, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[323, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[324, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[325, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[326, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[327, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[328, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[329, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[330, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[331, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[332, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[333, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[334, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[335, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[336, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[337, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[338, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[339, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[340, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[341, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[342, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[343, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[344, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[345, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[346, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[347, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[348, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[349, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[350, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[351, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[352, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[353, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[354, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[355, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[356, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[357, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[358, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[359, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[360, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[361, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[362, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[363, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[364, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[365, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[366, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[367, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[368, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[369, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[370, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[371, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[372, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[373, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[374, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[375, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[376, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[377, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[378, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[379, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[380, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[381, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[382, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[383, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[384, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[385, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[386, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[387, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[388, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[389, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[390, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[391, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[392, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[393, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[394, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[395, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[396, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[397, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[398, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[399, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[400, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[401, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[402, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[403, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[404, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[405, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[406, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[407, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[408, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[409, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[410, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[411, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[412, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[413, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[414, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[415, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[416, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[417, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[418, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[419, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[420, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[421, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[422, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[423, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[424, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[425, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[426, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[427, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[428, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[429, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[430, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[431, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[432, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[433, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[434, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[435, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[436, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[437, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[438, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[439, "intel-neural-compressor-documentation"]], "Sections": [[439, "sections"]], "Contributor Covenant Code of Conduct": [[440, "contributor-covenant-code-of-conduct"], [474, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[440, "our-pledge"], [474, "our-pledge"]], "Our Standards": [[440, "our-standards"], [474, "our-standards"]], "Our Responsibilities": [[440, "our-responsibilities"], [474, "our-responsibilities"]], "Scope": [[440, "scope"], [474, "scope"]], "Enforcement": [[440, "enforcement"], [474, "enforcement"]], "Attribution": [[440, "attribution"], [474, "attribution"]], "FX": [[441, "fx"]], "Overview": [[441, "overview"]], "Usage": [[441, "usage"], [444, "usage"], [504, "usage"], [504, "id2"], [506, "usage"], [506, "id2"], [506, "id4"], [506, "id6"], [506, "id8"], [506, "id10"], [506, "id12"]], "Note": [[441, "note"]], "Details": [[441, "details"]], "Common Problem": [[441, "common-problem"]], "Dynamic Quantization": [[441, "dynamic-quantization"], [481, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[441, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[442, "neural-architecture-search"]], "Introduction": [[442, "introduction"], [447, "introduction"], [472, "introduction"], [478, "introduction"], [479, "introduction"], [480, "introduction"], [484, "introduction"], [485, "introduction"], [487, "introduction"], [490, "introduction"], [491, "introduction"], [492, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [497, "introduction"], [499, "introduction"], [504, "introduction"], [506, "introduction"], [507, "introduction"]], "NAS API": [[442, "nas-api"]], "Basic Usage": [[442, "basic-usage"]], "1. Python code + YAML": [[442, "python-code-yaml"]], "2. Python code only": [[442, "python-code-only"]], "Advanced Usage (Custom NAS)": [[442, "advanced-usage-custom-nas"]], "Basic NAS": [[442, "basic-nas"]], "Dynamic NAS": [[442, "dynamic-nas"]], "Examples": [[442, "examples"], [444, "examples"], [473, "examples"], [478, "examples"], [479, "examples"], [482, "examples"], [485, "examples"], [491, "examples"], [492, "examples"], [495, "examples"], [497, "examples"], [500, "examples"], [504, "examples"], [504, "id3"]], "PTQ": [[443, "ptq"], [443, "id1"]], "Design": [[443, "design"], [444, "design"], [477, "design"], [504, "design"], [504, "id1"], [506, "design"], [506, "id1"], [506, "id3"], [506, "id5"], [506, "id7"], [506, "id9"], [506, "id11"]], "PyTorch Usage": [[443, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[443, "mobilenetv2-model-architecture"]], "Helper Functions": [[443, "helper-functions"]], "Example": [[443, "example"], [494, "example"]], "Quantization-aware Training": [[444, "quantization-aware-training"]], "Security Policy": [[445, "security-policy"]], "Report a Vulnerability": [[445, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[446, "intel-neural-compressor"]], "Installation": [[446, "installation"], [488, "installation"]], "Prerequisites": [[446, "prerequisites"], [488, "prerequisites"], [488, "id1"]], "Install on Linux": [[446, "install-on-linux"]], "Getting Started": [[446, "getting-started"]], "Quantization with Python API": [[446, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[446, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[446, "quantization-with-gui"]], "System Requirements": [[446, "system-requirements"]], "Validated Hardware Environment": [[446, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[446, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[446, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[446, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[446, "validated-software-environment"]], "Validated Models": [[446, "validated-models"], [508, "validated-models"]], "Documentation": [[446, "documentation"]], "Selected Publications/Events": [[446, "selected-publications-events"]], "Additional Content": [[446, "additional-content"]], "Hiring": [[446, "hiring"]], "Adaptor": [[447, "adaptor"], [448, "adaptor"]], "Adaptor Support Matrix": [[447, "adaptor-support-matrix"]], "Working Flow": [[447, "working-flow"], [500, "working-flow"]], "Get Start with Adaptor API": [[447, "get-start-with-adaptor-api"]], "Query API": [[447, "query-api"]], "Background": [[447, "background"]], "Query API Introduction": [[447, "query-api-introduction"]], "Example of Adding a New Backend Support": [[447, "example-of-adding-a-new-backend-support"]], "Capability": [[447, "capability"]], "Implement ONNXRTAdaptor Class": [[447, "implement-onnxrtadaptor-class"]], "APIs": [[449, "apis"]], "Common": [[450, "common"]], "Benchmark": [[451, "benchmark"], [499, "benchmark"]], "BLEU": [[452, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[453, "criterion"]], "Data": [[454, "data"]], "Dataloader": [[455, "dataloader"]], "BaseDataLoader": [[455, "basedataloader"]], "dataloaders": [[455, "dataloaders"]], "Datasets": [[456, "datasets"]], "Transforms": [[457, "transforms"]], "Metric": [[458, "metric"]], "Model": [[459, "model"], [492, "model"]], "Optimizer": [[460, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[461, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[462, "distillation"], [478, "distillation"], [499, "distillation"]], "MixedPrecision": [[463, "mixedprecision"]], "ModelConversion": [[464, "modelconversion"]], "Neural architecture search (NAS)": [[465, "neural-architecture-search-nas"]], "Pruning": [[466, "pruning"], [497, "pruning"], [499, "pruning"]], "Quantization": [[467, "quantization"], [499, "quantization"], [500, "quantization"]], "Scheduler": [[468, "scheduler"]], "Pythonic": [[469, "pythonic"]], "Strategy": [[470, "strategy"]], "Quantization Support Matrix": [[471, "quantization-support-matrix"]], "TensorFlow": [[471, "tensorflow"], [476, "tensorflow"], [490, "tensorflow"], [505, "tensorflow"]], "PyTorch": [[471, "pytorch"], [476, "pytorch"], [490, "pytorch"], [501, "pytorch"]], "PyTorch IPEX": [[471, "pytorch-ipex"]], "MXNet": [[471, "mxnet"], [476, "mxnet"], [490, "mxnet"], [505, "mxnet"]], "ONNX Runtime": [[471, "onnx-runtime"]], "Reference": [[471, "reference"]], "Intel\u00ae Neural Compressor Bench": [[472, "intel-neural-compressor-bench"]], "Table of Contents": [[472, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[472, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[472, "option-1-install-from-binary"], [488, "option-1-install-from-binary"], [488, "id2"]], "Option 2 Install from source": [[472, "option-2-install-from-source"], [488, "option-2-install-from-source"], [488, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[472, "start-the-intel-neural-compressor-bench"]], "Home screen": [[472, "home-screen"]], "Create new project": [[472, "create-new-project"]], "Predefined model": [[472, "predefined-model"]], "Custom model": [[472, "custom-model"]], "Display model graph": [[472, "display-model-graph"]], "Project list": [[472, "project-list"]], "Remove project": [[472, "remove-project"]], "Develop the project": [[472, "develop-the-project"]], "Optimization tab": [[472, "optimization-tab"]], "Optimization table": [[472, "optimization-table"]], "Optimization wizard": [[472, "optimization-wizard"]], "Editing optimization entries": [[472, "editing-optimization-entries"]], "Optimization details": [[472, "optimization-details"]], "Benchmark tab": [[472, "benchmark-tab"]], "Benchmark table": [[472, "benchmark-table"]], "Benchmark wizard": [[472, "benchmark-wizard"]], "Editing benchmark entries": [[472, "editing-benchmark-entries"]], "Benchmark details": [[472, "benchmark-details"]], "Profiling tab": [[472, "profiling-tab"]], "Profiling table": [[472, "profiling-table"]], "Profiling wizard": [[472, "profiling-wizard"]], "Editing profiling entries": [[472, "editing-profiling-entries"]], "Profiling details": [[472, "profiling-details"]], "Diagnosis tab": [[472, "diagnosis-tab"]], "Dataset tab": [[472, "dataset-tab"]], "Dataset list": [[472, "dataset-list"]], "Dataset wizard": [[472, "dataset-wizard"]], "Dataset details": [[472, "dataset-details"]], "Custom dataset": [[472, "custom-dataset"]], "Project information": [[472, "project-information"]], "System information": [[472, "system-information"]], "Security": [[472, "security"]], "Benchmarking": [[473, "benchmarking"]], "Config evaluation filed in a yaml file": [[473, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[473, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[474, "contribution-guidelines"]], "Pull Request Checklist": [[474, "pull-request-checklist"]], "Pull Request Template": [[474, "pull-request-template"]], "Support": [[474, "support"]], "DataLoader": [[475, "dataloader"]], "How to use it": [[475, "how-to-use-it"], [485, "how-to-use-it"], [493, "how-to-use-it"]], "Config dataloader in a yaml file": [[475, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[475, "create-a-user-specific-dataloader"]], "Dataset": [[476, "dataset"]], "Built-in dataset support list": [[476, "built-in-dataset-support-list"]], "ONNXRT": [[476, "onnxrt"], [490, "onnxrt"], [505, "onnxrt"]], "User-specific dataset": [[476, "user-specific-dataset"]], "Architecture": [[477, "architecture"], [487, "architecture"]], "Workflow": [[477, "workflow"]], "Knowledge Distillation": [[478, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[478, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[478, "self-distillation"]], "Distillation Support Matrix": [[478, "distillation-support-matrix"]], "Get Started with Distillation API": [[478, "get-started-with-distillation-api"]], "Distillation for Quantization": [[479, "distillation-for-quantization"]], "User-defined yaml": [[479, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[480, "distributed-training-and-inference-evaluation"]], "horovod installation": [[480, "horovod-installation"]], "Distributed training and inference (evaluation)": [[480, "id1"]], "Option 1: pure yaml configuration": [[480, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[480, "option2-user-defined-training-function"]], "horovodrun": [[480, "horovodrun"]], "security": [[480, "security"]], "Following examples are supported": [[480, "following-examples-are-supported"]], "Frequently Asked Questions": [[483, "frequently-asked-questions"]], "Common Build Issues": [[483, "common-build-issues"]], "Issue 1:": [[483, "issue-1"]], "Issue 2:": [[483, "issue-2"]], "Issue 3:": [[483, "issue-3"]], "Framework YAML Configuration Files": [[484, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[484, "supported-feature-matrix"], [487, "supported-feature-matrix"], [499, "supported-feature-matrix"], [500, "supported-feature-matrix"], [507, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[484, "get-started-with-framework-yaml-files"]], "Graph Optimization": [[485, "graph-optimization"]], "FP32 Optimization": [[485, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[485, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[485, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[485, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[485, "id1"]], "Incompatible changes between v1.2 and v1.1": [[486, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[486, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[486, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[487, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[488, "linux-installation"]], "Option 3 Install from AI Kit": [[488, "option-3-install-from-ai-kit"]], "Windows Installation": [[488, "windows-installation"]], "Legal Information": [[489, "legal-information"]], "License": [[489, "license"]], "Citation": [[489, "citation"]], "Trademarks": [[489, "trademarks"]], "Metrics": [[490, "metrics"]], "Supported Built-in Metric Matrix": [[490, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[490, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[490, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[490, "build-custom-metric-with-python-api"]], "Mixed Precision": [[491, "mixed-precision"]], "Mixed Precision Support Matrix": [[491, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[491, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[492, "supported-framework-model-matrix"]], "Model Conversion": [[493, "model-conversion"]], "Objective": [[494, "objective"]], "Single Objective": [[494, "single-objective"]], "Multiple Objectives": [[494, "multiple-objectives"]], "Objective Support Matrix": [[494, "objective-support-matrix"]], "Get Start with Objective API": [[494, "get-start-with-objective-api"]], "Config Single Objective": [[494, "config-single-objective"]], "Config Multiple Objectives": [[494, "config-multiple-objectives"]], "Config Custom Objective": [[494, "config-custom-objective"]], "Optimization Orchestration": [[495, "optimization-orchestration"]], "One-shot": [[495, "one-shot"]], "Multi-shot": [[495, "multi-shot"]], "Orchestration Support Matrix": [[495, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[495, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[496, "system-configuration"]], "Neural Network Pruning": [[497, "neural-network-pruning"]], "Pruning Patterns": [[497, "pruning-patterns"]], "Pruning Criteria": [[497, "pruning-criteria"]], "Pruning Schedule": [[497, "pruning-schedule"]], "Pruning Support Matrix": [[497, "pruning-support-matrix"]], "Get Started with Pruning API": [[497, "get-started-with-pruning-api"]], "Full Publications/Events (45)": [[498, "full-publications-events-45"]], "2022 (27)": [[498, "id1"]], "2021 (14)": [[498, "id2"]], "2018 - 2020 (4)": [[498, "id3"]], "Pythonic Style Access for Configurations": [[499, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[499, "pythonic-api-for-user-configurations"], [499, "id1"]], "Pythonic API for Framework Configurations": [[499, "pythonic-api-for-framework-configurations"], [499, "id2"]], "Get Started with Pythonic API for Configurations": [[499, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[499, "nas"]], "Quantization Introduction": [[500, "quantization-introduction"]], "Quantization Fundamentals": [[500, "quantization-fundamentals"]], "Quantization Approaches": [[500, "quantization-approaches"]], "Post Training Dynamic Quantization": [[500, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[500, "post-training-static-quantization"]], "Quantization Aware Training": [[500, "quantization-aware-training"]], "Accuracy Aware Tuning": [[500, "accuracy-aware-tuning"]], "Get Started": [[500, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[501, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[501, "tensorflow"]], "Release": [[502, "release"]], "Known Issues": [[502, "known-issues"]], "Incompatible Changes": [[502, "incompatible-changes"]], "SigOpt Strategy": [[503, "sigopt-strategy"]], "Preparation": [[503, "preparation"]], "SigOpt introduction": [[503, "sigopt-introduction"]], "Neural Compressor configuration": [[503, "neural-compressor-configuration"]], "Performance": [[503, "performance"]], "Benefit for Sigopt strategy": [[503, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[503, "performance-comparison-of-different-strategies"]], "TensorBoard": [[504, "tensorboard"]], "PyTorch TensorBoard": [[504, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[504, "tensorflow-tensorboard"]], "Transform": [[505, "transform"]], "Transform support list": [[505, "transform-support-list"]], "Pytorch": [[505, "pytorch"]], "Tuning Strategies": [[506, "tuning-strategies"]], "Strategy Design": [[506, "strategy-design"]], "Configurations": [[506, "configurations"]], "Model-specific configurations": [[506, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[506, "strategy-tuning-part-related-configurations"]], "Basic": [[506, "basic"]], "Bayesian": [[506, "bayesian"]], "MSE": [[506, "mse"]], "TPE": [[506, "tpe"]], "Exhaustive": [[506, "exhaustive"]], "Random": [[506, "random"]], "SigOpt": [[506, "sigopt"]], "Customize a New Tuning Strategy": [[506, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[507, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[507, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[508, "validated-mlperf-models"]], "Validated Quantization Examples": [[508, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[508, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[508, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[508, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[508, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[508, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[508, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[508, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[508, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[508, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"6ece06672ed3_v1_14": [[0, "module-6ece06672ed3_v1_14"]], "module": [[0, "module-6ece06672ed3_v1_14"], [1, "module-6f0d0f71d92e_v1_13"], [2, "module-9e89549a08c8_v1_11"], [3, "module-block_mask"], [4, "module-env"], [5, "module-neural_compressor.adaptor.adaptor"], [6, "module-neural_compressor.adaptor"], [7, "module-neural_compressor.adaptor.mxnet"], [8, "module-neural_compressor.adaptor.mxnet_utils"], [9, "module-neural_compressor.adaptor.mxnet_utils.util"], [10, "module-neural_compressor.adaptor.onnxrt"], [11, "module-neural_compressor.adaptor.ox_utils.calibration"], [12, "module-neural_compressor.adaptor.ox_utils"], [13, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [14, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [15, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [16, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [17, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [18, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [19, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [20, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [21, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [22, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [23, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [24, "module-neural_compressor.adaptor.ox_utils.operators"], [25, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [27, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [29, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [30, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [31, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [32, "module-neural_compressor.adaptor.ox_utils.operators.split"], [33, "module-neural_compressor.adaptor.ox_utils.quantizer"], [34, "module-neural_compressor.adaptor.ox_utils.util"], [35, "module-neural_compressor.adaptor.pytorch"], [36, "module-neural_compressor.adaptor.query"], [37, "module-neural_compressor.adaptor.tensorflow"], [38, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [39, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [96, "module-neural_compressor.adaptor.tf_utils.graph_util"], [97, "module-neural_compressor.adaptor.tf_utils"], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [116, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [117, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [118, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [119, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [120, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [121, "module-neural_compressor.adaptor.tf_utils.util"], [122, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [123, "module-neural_compressor.adaptor.torch_utils"], [124, "module-neural_compressor.adaptor.torch_utils.onnx"], [125, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [126, "module-neural_compressor.adaptor.torch_utils.util"], [127, "module-neural_compressor.algorithm.algorithm"], [128, "module-neural_compressor.algorithm.fast_bias_correction"], [129, "module-neural_compressor.algorithm"], [130, "module-neural_compressor.algorithm.weight_correction"], [131, "module-neural_compressor.benchmark"], [132, "module-neural_compressor.conf.config"], [133, "module-neural_compressor.conf.dotdict"], [134, "module-neural_compressor.conf"], [135, "module-neural_compressor.conf.pythonic_config"], [136, "module-neural_compressor.config"], [137, "module-neural_compressor.contrib"], [138, "module-neural_compressor.contrib.strategy"], [139, "module-neural_compressor.contrib.strategy.sigopt"], [140, "module-neural_compressor.contrib.strategy.tpe"], [141, "module-neural_compressor.data.dataloaders.dataloader"], [142, "module-neural_compressor.data.dataloaders"], [143, "module-neural_compressor.data.datasets.imagenet_dataset"], [144, "module-neural_compressor.data.datasets"], [145, "module-neural_compressor.data"], [146, "module-neural_compressor.data.transforms.coco_transform"], [147, "module-neural_compressor.data.transforms.imagenet_transform"], [148, "module-neural_compressor.data.transforms"], [149, "module-neural_compressor.experimental.benchmark"], [150, "module-neural_compressor.experimental.common.criterion"], [151, "module-neural_compressor.experimental.common.dataloader"], [152, "module-neural_compressor.experimental.common"], [153, "module-neural_compressor.experimental.common.metric"], [154, "module-neural_compressor.experimental.common.model"], [155, "module-neural_compressor.experimental.common.optimizer"], [156, "module-neural_compressor.experimental.common.postprocess"], [157, "module-neural_compressor.experimental.common.torch_utils"], [158, "module-neural_compressor.experimental.component"], [159, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [160, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [161, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [162, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [163, "module-neural_compressor.experimental.data.dataloaders"], [164, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [165, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [166, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [167, "module-neural_compressor.experimental.data.dataloaders.sampler"], [168, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [169, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [170, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [171, "module-neural_compressor.experimental.data.datasets.dataset"], [172, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [173, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [174, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [175, "module-neural_compressor.experimental.data.datasets"], [176, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [177, "module-neural_compressor.experimental.data.filters.coco_filter"], [178, "module-neural_compressor.experimental.data.filters.filter"], [179, "module-neural_compressor.experimental.data.filters"], [180, "module-neural_compressor.experimental.data"], [181, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [182, "module-neural_compressor.experimental.data.transforms"], [183, "module-neural_compressor.experimental.data.transforms.tokenization"], [184, "module-neural_compressor.experimental.data.transforms.transform"], [185, "module-neural_compressor.experimental.distillation"], [186, "module-neural_compressor.experimental.graph_optimization"], [187, "module-neural_compressor.experimental"], [188, "module-neural_compressor.experimental.metric.bleu"], [189, "module-neural_compressor.experimental.metric.bleu_util"], [190, "module-neural_compressor.experimental.metric.coco_label_map"], [191, "module-neural_compressor.experimental.metric.coco_tools"], [192, "module-neural_compressor.experimental.metric.evaluate_squad"], [193, "module-neural_compressor.experimental.metric.f1"], [194, "module-neural_compressor.experimental.metric"], [195, "module-neural_compressor.experimental.metric.metric"], [196, "module-neural_compressor.experimental.mixed_precision"], [197, "module-neural_compressor.experimental.model_conversion"], [198, "module-neural_compressor.experimental.nas.basic_nas"], [199, "module-neural_compressor.experimental.nas.dynas"], [200, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [201, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [202, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [203, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [204, "module-neural_compressor.experimental.nas.dynast"], [205, "module-neural_compressor.experimental.nas"], [206, "module-neural_compressor.experimental.nas.nas"], [207, "module-neural_compressor.experimental.nas.nas_utils"], [208, "module-neural_compressor.experimental.nas.search_algorithms"], [209, "module-neural_compressor.experimental.pruning"], [210, "module-neural_compressor.experimental.pruning_recipes"], [211, "module-neural_compressor.experimental.pruning_recipes.patterns"], [212, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [213, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [214, "module-neural_compressor.experimental.pytorch_pruner"], [215, "module-neural_compressor.experimental.pytorch_pruner.logger"], [216, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [217, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [218, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [219, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [220, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [221, "module-neural_compressor.experimental.quantization"], [222, "module-neural_compressor.experimental.scheduler"], [223, "module-neural_compressor"], [224, "module-neural_compressor.metric"], [225, "module-neural_compressor.mix_precision"], [226, "module-neural_compressor.model.base_model"], [227, "module-neural_compressor.model"], [228, "module-neural_compressor.model.model"], [229, "module-neural_compressor.model.nets_factory"], [230, "module-neural_compressor.model.onnx_model"], [231, "module-neural_compressor.model.torch_model"], [232, "module-neural_compressor.objective"], [233, "module-neural_compressor.pruners.gradient_sensitivity"], [234, "module-neural_compressor.pruners.group_lasso"], [235, "module-neural_compressor.pruners"], [236, "module-neural_compressor.pruners.magnitude"], [237, "module-neural_compressor.pruners.pattern_lock"], [238, "module-neural_compressor.pruners.pruner"], [239, "module-neural_compressor.pruning"], [240, "module-neural_compressor.quantization"], [241, "module-neural_compressor.strategy.auto_mixed_precision"], [242, "module-neural_compressor.strategy.basic"], [243, "module-neural_compressor.strategy.bayesian"], [244, "module-neural_compressor.strategy.exhaustive"], [245, "module-neural_compressor.strategy"], [246, "module-neural_compressor.strategy.mse"], [247, "module-neural_compressor.strategy.random"], [248, "module-neural_compressor.strategy.st_utils"], [249, "module-neural_compressor.strategy.st_utils.tuning_sampler"], [250, "module-neural_compressor.strategy.st_utils.tuning_space"], [251, "module-neural_compressor.strategy.st_utils.tuning_structs"], [252, "module-neural_compressor.strategy.strategy"], [253, "module-neural_compressor.training"], [254, "module-neural_compressor.utils.collect_layer_histogram"], [255, "module-neural_compressor.utils.constant"], [256, "module-neural_compressor.utils.create_obj_from_config"], [257, "module-neural_compressor.utils"], [258, "module-neural_compressor.utils.kl_divergence"], [259, "module-neural_compressor.utils.load_huggingface"], [260, "module-neural_compressor.utils.logger"], [261, "module-neural_compressor.utils.options"], [262, "module-neural_compressor.utils.pytorch"], [263, "module-neural_compressor.utils.utility"], [264, "module-neural_compressor.ux.components.benchmark.benchmark"], [265, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [266, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [267, "module-neural_compressor.ux.components.benchmark"], [268, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [269, "module-neural_compressor.ux.components.config_generator.config_generator"], [270, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [271, "module-neural_compressor.ux.components.config_generator"], [272, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [273, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [274, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [275, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [276, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [277, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [278, "module-neural_compressor.ux.components.configuration_wizard"], [279, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [280, "module-neural_compressor.ux.components.db_manager.db_manager"], [281, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [282, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [283, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [284, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [285, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [286, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [287, "module-neural_compressor.ux.components.db_manager.db_models.example"], [288, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [289, "module-neural_compressor.ux.components.db_manager.db_models"], [290, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [291, "module-neural_compressor.ux.components.db_manager.db_models.model"], [292, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [293, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [294, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [295, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [296, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [297, "module-neural_compressor.ux.components.db_manager.db_models.project"], [298, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [299, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [300, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [301, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [302, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [303, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [304, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [305, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [306, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [307, "module-neural_compressor.ux.components.db_manager.db_operations"], [308, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [309, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [310, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [311, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [312, "module-neural_compressor.ux.components.db_manager"], [313, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [314, "module-neural_compressor.ux.components.db_manager.utils"], [315, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [316, "module-neural_compressor.ux.components.diagnosis.factory"], [317, "module-neural_compressor.ux.components.diagnosis"], [318, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [319, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [320, "module-neural_compressor.ux.components.diagnosis.op_details"], [321, "module-neural_compressor.ux.components.diagnosis.op_entry"], [322, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [323, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [324, "module-neural_compressor.ux.components.file_browser.file_browser"], [325, "module-neural_compressor.ux.components.file_browser"], [326, "module-neural_compressor.ux.components.graph.attribute"], [327, "module-neural_compressor.ux.components.graph.collapser"], [328, "module-neural_compressor.ux.components.graph.edge"], [329, "module-neural_compressor.ux.components.graph.graph"], [330, "module-neural_compressor.ux.components.graph.graph_reader"], [331, "module-neural_compressor.ux.components.graph"], [332, "module-neural_compressor.ux.components.graph.node"], [333, "module-neural_compressor.ux.components.graph.reader"], [334, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [335, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [336, "module-neural_compressor.ux.components"], [337, "module-neural_compressor.ux.components.jobs_management"], [338, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [339, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [340, "module-neural_compressor.ux.components.jobs_management.request"], [341, "module-neural_compressor.ux.components.manage_workspace"], [342, "module-neural_compressor.ux.components.model.domain"], [343, "module-neural_compressor.ux.components.model"], [344, "module-neural_compressor.ux.components.model.model"], [345, "module-neural_compressor.ux.components.model.model_type_getter"], [346, "module-neural_compressor.ux.components.model.onnxrt"], [347, "module-neural_compressor.ux.components.model.onnxrt.model"], [348, "module-neural_compressor.ux.components.model.pytorch"], [349, "module-neural_compressor.ux.components.model.pytorch.model"], [350, "module-neural_compressor.ux.components.model.repository"], [351, "module-neural_compressor.ux.components.model.shape"], [352, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [353, "module-neural_compressor.ux.components.model.tensorflow"], [354, "module-neural_compressor.ux.components.model.tensorflow.keras"], [355, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [356, "module-neural_compressor.ux.components.model.tensorflow.model"], [357, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [358, "module-neural_compressor.ux.components.model.tensorflow.utils"], [359, "module-neural_compressor.ux.components.model_zoo.download_config"], [360, "module-neural_compressor.ux.components.model_zoo.download_model"], [361, "module-neural_compressor.ux.components.model_zoo.downloader"], [362, "module-neural_compressor.ux.components.model_zoo"], [363, "module-neural_compressor.ux.components.model_zoo.list_models"], [364, "module-neural_compressor.ux.components.names_mapper"], [365, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [366, "module-neural_compressor.ux.components.optimization.execute_optimization"], [367, "module-neural_compressor.ux.components.optimization.factory"], [368, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [369, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [370, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [371, "module-neural_compressor.ux.components.optimization"], [372, "module-neural_compressor.ux.components.optimization.mixed_precision"], [373, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [374, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [375, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [376, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [377, "module-neural_compressor.ux.components.optimization.optimization"], [378, "module-neural_compressor.ux.components.optimization.tune"], [379, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [380, "module-neural_compressor.ux.components.optimization.tune.tuning"], [381, "module-neural_compressor.ux.components.optimization.tuning_history"], [382, "module-neural_compressor.ux.components.profiling.execute_profiling"], [383, "module-neural_compressor.ux.components.profiling.factory"], [384, "module-neural_compressor.ux.components.profiling"], [385, "module-neural_compressor.ux.components.profiling.profile_model"], [386, "module-neural_compressor.ux.components.profiling.profiler"], [387, "module-neural_compressor.ux.components.profiling.profiling"], [388, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [389, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [390, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [391, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [392, "module-neural_compressor.ux.inc_bench"], [393, "module-neural_compressor.ux"], [394, "module-neural_compressor.ux.utils.consts"], [395, "module-neural_compressor.ux.utils.environment"], [396, "module-neural_compressor.ux.utils.exceptions"], [397, "module-neural_compressor.ux.utils.executor"], [398, "module-neural_compressor.ux.utils.expiring_dict"], [399, "module-neural_compressor.ux.utils.github_info"], [400, "module-neural_compressor.ux.utils.hw_info"], [401, "module-neural_compressor.ux.utils"], [402, "module-neural_compressor.ux.utils.json_serializer"], [403, "module-neural_compressor.ux.utils.logger"], [404, "module-neural_compressor.ux.utils.parser"], [405, "module-neural_compressor.ux.utils.proc"], [406, "module-neural_compressor.ux.utils.processes"], [407, "module-neural_compressor.ux.utils.singleton"], [408, "module-neural_compressor.ux.utils.templates"], [409, "module-neural_compressor.ux.utils.templates.metric"], [410, "module-neural_compressor.ux.utils.templates.workdir"], [411, "module-neural_compressor.ux.utils.utils"], [412, "module-neural_compressor.ux.utils.workload.config"], [413, "module-neural_compressor.ux.utils.workload.dataloader"], [414, "module-neural_compressor.ux.utils.workload.evaluation"], [415, "module-neural_compressor.ux.utils.workload.graph_optimization"], [416, "module-neural_compressor.ux.utils.workload"], [417, "module-neural_compressor.ux.utils.workload.mixed_precision"], [418, "module-neural_compressor.ux.utils.workload.model"], [419, "module-neural_compressor.ux.utils.workload.pruning"], [420, "module-neural_compressor.ux.utils.workload.quantization"], [421, "module-neural_compressor.ux.utils.workload.tuning"], [422, "module-neural_compressor.ux.utils.yaml_utils"], [423, "module-neural_compressor.ux.web.communication"], [424, "module-neural_compressor.ux.web.configuration"], [425, "module-neural_compressor.ux.web.exceptions"], [426, "module-neural_compressor.ux.web"], [427, "module-neural_compressor.ux.web.router"], [428, "module-neural_compressor.ux.web.server"], [429, "module-neural_compressor.ux.web.service.benchmark"], [430, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [431, "module-neural_compressor.ux.web.service"], [432, "module-neural_compressor.ux.web.service.model"], [433, "module-neural_compressor.ux.web.service.optimization"], [434, "module-neural_compressor.ux.web.service.profiling"], [435, "module-neural_compressor.ux.web.service.request_data_processor"], [436, "module-neural_compressor.ux.web.service.response_generator"], [437, "module-neural_compressor.ux.web.service.workload"], [438, "module-neural_compressor.version"], [452, "module-neural_compressor.experimental.metric.bleu"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[0, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[0, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[1, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[2, "module-9e89549a08c8_v1_11"]], "block_mask": [[3, "module-block_mask"]], "env": [[4, "module-env"]], "run_migrations_offline() (in module env)": [[4, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[4, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[5, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[5, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[5, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[5, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[6, "module-neural_compressor.adaptor"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[7, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[7, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[7, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[8, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[9, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[9, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtadaptor (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_qoperatoradaptor (class in neural_compressor.adaptor.onnxrt)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRT_QOperatorAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[10, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[10, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[11, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[11, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[12, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[13, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[14, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[15, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[16, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[17, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[18, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[19, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[20, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[21, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[22, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[23, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[24, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[26, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[28, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[28, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[29, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[30, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[31, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[32, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[33, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[34, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[34, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[35, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[35, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[35, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[35, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[36, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[36, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[37, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[37, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[37, "module-neural_compressor.adaptor.tensorflow"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[37, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[38, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[39, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[100, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[100, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[100, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[103, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[116, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[116, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[116, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[117, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[118, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[119, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[119, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[119, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[120, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[120, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[120, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[121, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[121, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[122, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[123, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[124, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[125, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[126, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[126, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "neural_compressor.adaptor.torch_utils.util": [[126, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[127, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[127, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[127, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[127, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[128, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[128, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[129, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[129, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[129, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[129, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[130, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[130, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[131, "neural_compressor.benchmark.Benchmark"]], "neural_compressor.benchmark": [[131, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[132, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[132, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[133, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[133, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[133, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[133, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[134, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[135, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[136, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[136, "module-neural_compressor.config"]], "neural_compressor.contrib": [[137, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[138, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[139, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[139, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[139, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[139, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[140, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[140, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[140, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[140, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[141, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[141, "module-neural_compressor.data.dataloaders.dataloader"]], "dataloader (class in neural_compressor.data.dataloaders)": [[142, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[142, "module-neural_compressor.data.dataloaders"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[143, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[143, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[143, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[144, "module-neural_compressor.data.datasets"]], "basetransform (class in neural_compressor.data)": [[145, "neural_compressor.data.BaseTransform"]], "datasets (class in neural_compressor.data)": [[145, "neural_compressor.data.DATASETS"]], "dataloader (class in neural_compressor.data)": [[145, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[145, "neural_compressor.data.Dataset"]], "filters (class in neural_compressor.data)": [[145, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[145, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[145, "neural_compressor.data.IterableDataset"]], "transforms (class in neural_compressor.data)": [[145, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[145, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[145, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[145, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[145, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[145, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[146, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[146, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[147, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[147, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[148, "module-neural_compressor.data.transforms"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[149, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[149, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[149, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[149, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[149, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[149, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[149, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[150, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[150, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[150, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[150, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[151, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[151, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[152, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[152, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[152, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[152, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[152, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[153, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[153, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[154, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[154, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[155, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[155, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[155, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[156, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[156, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[157, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[157, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[157, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[158, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[158, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[158, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[158, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[158, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[158, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[158, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[158, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[159, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[159, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[159, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[159, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[160, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[161, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[161, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[161, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[161, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[161, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[162, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[162, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[162, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[162, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[163, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[164, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[164, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[165, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[165, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[165, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[166, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[166, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[167, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[167, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[167, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[167, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[167, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[168, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[168, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[168, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[168, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[168, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[168, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[169, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[169, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[170, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[170, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[170, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[170, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[170, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[171, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[171, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[171, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[171, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[171, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[171, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[171, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[171, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[172, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[172, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[173, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[173, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[173, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[174, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[174, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[174, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[174, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[174, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[175, "neural_compressor.experimental.data.datasets.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[175, "neural_compressor.experimental.data.datasets.Dataset"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[175, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[175, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[175, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[176, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[176, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[177, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[177, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[177, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[178, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[178, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[179, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[179, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[179, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[179, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.BaseTransform"]], "datasets (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.DATASETS"]], "dataset (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.Dataset"]], "filters (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[180, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[180, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[180, "neural_compressor.experimental.data.transform_registry"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[181, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[181, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[181, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[181, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[182, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[182, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[182, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[182, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[182, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[183, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[183, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[183, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[183, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [184, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[184, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[184, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[184, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[184, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[184, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[184, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[185, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[185, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[185, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[185, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[185, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[185, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[185, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[185, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[186, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[186, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[187, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[187, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[187, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[187, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[187, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[187, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[187, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[187, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[187, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[187, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[187, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[187, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[187, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[187, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[187, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[187, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[187, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[187, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[187, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[187, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[187, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.model"]], "neural_compressor.experimental": [[187, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[187, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[187, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[187, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[187, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[187, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[187, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[187, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[187, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[187, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[187, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[187, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[187, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[187, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[187, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[187, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[187, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[187, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[187, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[187, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[187, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[187, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[187, "neural_compressor.experimental.Component.train_func"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[188, "neural_compressor.experimental.metric.bleu.BLEU"], [452, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[188, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[188, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[188, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [452, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[188, "module-neural_compressor.experimental.metric.bleu"], [452, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[188, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[188, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [452, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[188, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[188, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[188, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [452, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[188, "neural_compressor.experimental.metric.bleu.BLEU.result"], [452, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[188, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[188, "neural_compressor.experimental.metric.bleu.BLEU.update"], [452, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[189, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[189, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[190, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[191, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[191, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[191, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[191, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[191, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[192, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[192, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[192, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[192, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[192, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[193, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[193, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[193, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[193, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[193, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[194, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[194, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[194, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[194, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[194, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[194, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[194, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[194, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[194, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[194, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[194, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[195, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[195, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[195, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[195, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[195, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[195, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[195, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[195, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[195, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[195, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[195, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[195, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[195, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[195, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[195, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[195, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[195, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[195, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[195, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[195, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[195, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[195, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[195, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[195, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[195, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[195, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[195, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[195, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[195, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[195, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[195, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[195, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[195, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[195, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[195, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[195, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[195, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[195, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[195, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[195, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[195, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[195, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[195, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[195, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[195, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[195, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[195, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[195, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[195, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[195, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[195, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[196, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[196, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[196, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[196, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[197, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[197, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[198, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[198, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[198, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[198, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[198, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[198, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[199, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[199, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[200, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[200, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[201, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[201, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[202, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[202, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[202, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[202, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[202, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[202, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[203, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[203, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[204, "module-neural_compressor.experimental.nas.dynast"]], "basicnas (class in neural_compressor.experimental.nas)": [[205, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[205, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[205, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[205, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[205, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[205, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[205, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[205, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[205, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[206, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[206, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[206, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[206, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[206, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[206, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[206, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[207, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[207, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[207, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[207, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[208, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[208, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[208, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[208, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[208, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[208, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[209, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[209, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[209, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[209, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[209, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[209, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[209, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[209, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[209, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[209, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[209, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[209, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[209, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[210, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[210, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[210, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[210, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[211, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[211, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[211, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[211, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[212, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[212, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[213, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[213, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[214, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[215, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[216, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[216, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[217, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[217, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[218, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[218, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[219, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[219, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[220, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[220, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[221, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[221, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[221, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[221, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[221, "neural_compressor.experimental.quantization.Quantization.metric"]], "neural_compressor.experimental.quantization": [[221, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[221, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[221, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[221, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[221, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[222, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[222, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[222, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[222, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[222, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[222, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[222, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[223, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[223, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[223, "neural_compressor.Pruning"]], "quantization (class in neural_compressor)": [[223, "neural_compressor.Quantization"]], "neural_compressor": [[223, "module-neural_compressor"]], "on_epoch_begin() (neural_compressor.pruning method)": [[223, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[223, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[223, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[223, "neural_compressor.Pruning.on_step_end"]], "basemetric (class in neural_compressor.metric)": [[224, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[224, "neural_compressor.metric.METRICS"]], "hvd (neural_compressor.metric.basemetric property)": [[224, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[224, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[224, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[224, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[224, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[224, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[224, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[224, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[224, "neural_compressor.metric.BaseMetric.update"]], "neural_compressor.mix_precision": [[225, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[226, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[226, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[226, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[226, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[226, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[226, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[226, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[227, "neural_compressor.model.BaseModel"]], "export() (neural_compressor.model.basemodel method)": [[227, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[227, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[227, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[227, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[227, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[227, "neural_compressor.model.BaseModel.save"]], "mxnetmodel (class in neural_compressor.model.model)": [[228, "neural_compressor.model.model.MXNetModel"]], "tensorflowbasemodel (class in neural_compressor.model.model)": [[228, "neural_compressor.model.model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.model)": [[228, "neural_compressor.model.model.TensorflowCheckpointModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.model)": [[228, "neural_compressor.model.model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.estimator_session"]], "framework() (neural_compressor.model.model.mxnetmodel method)": [[228, "neural_compressor.model.model.MXNetModel.framework"]], "framework() (neural_compressor.model.model.tensorflowbasemodel method)": [[228, "neural_compressor.model.model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.frozen_pb_session"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.get_model_fwk_name"]], "get_model_type() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.graph_def_session"]], "graph_info (neural_compressor.model.model.tensorflowbasemodel property)": [[228, "neural_compressor.model.model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.graph_session"]], "keras_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.keras_session"]], "load_saved_model() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.load_saved_model"]], "model (neural_compressor.model.model.mxnetmodel property)": [[228, "neural_compressor.model.model.MXNetModel.model"]], "model (neural_compressor.model.model.tensorflowbasemodel property)": [[228, "neural_compressor.model.model.TensorflowBaseModel.model"]], "model (neural_compressor.model.model.tensorflowsavedmodelmodel property)": [[228, "neural_compressor.model.model.TensorflowSavedModelModel.model"]], "neural_compressor.model.model": [[228, "module-neural_compressor.model.model"]], "report_sparsity() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[228, "neural_compressor.model.model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.model.mxnetmodel method)": [[228, "neural_compressor.model.model.MXNetModel.save"]], "save() (neural_compressor.model.model.tensorflowbasemodel method)": [[228, "neural_compressor.model.model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[228, "neural_compressor.model.model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.saved_model_session"]], "slim_session() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.model)": [[228, "neural_compressor.model.model.validate_graph_node"]], "weights (neural_compressor.model.model.tensorflowbasemodel property)": [[228, "neural_compressor.model.model.TensorflowBaseModel.weights"]], "neural_compressor.model.nets_factory": [[229, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[230, "neural_compressor.model.onnx_model.ONNXModel"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[230, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[230, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[230, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[230, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[231, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchipexmodel (class in neural_compressor.model.torch_model)": [[231, "neural_compressor.model.torch_model.PyTorchIpexModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[231, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[231, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchipexmodel property)": [[231, "neural_compressor.model.torch_model.PyTorchIpexModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[231, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[231, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.pytorchipexmodel method)": [[231, "neural_compressor.model.torch_model.PyTorchIpexModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[231, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[231, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[232, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[232, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[232, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[232, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[232, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[232, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[232, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[232, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[232, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[232, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[232, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[232, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[232, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[232, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[232, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[232, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[232, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[232, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[232, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[232, "neural_compressor.objective.Performance.start"]], "neural_compressor.pruners.gradient_sensitivity": [[233, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[234, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[235, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[236, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[237, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[238, "module-neural_compressor.pruners.pruner"]], "pruner_registry() (in module neural_compressor.pruners.pruner)": [[238, "neural_compressor.pruners.pruner.pruner_registry"]], "pruning (class in neural_compressor.pruning)": [[239, "neural_compressor.pruning.Pruning"]], "neural_compressor.pruning": [[239, "module-neural_compressor.pruning"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[239, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[239, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[239, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[239, "neural_compressor.pruning.Pruning.on_step_end"]], "quantization (class in neural_compressor.quantization)": [[240, "neural_compressor.quantization.Quantization"]], "fit() (in module neural_compressor.quantization)": [[240, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[240, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[241, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[241, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[241, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[241, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[242, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[242, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[242, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[243, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[243, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[243, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[243, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[243, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[243, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[243, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[243, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[243, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[243, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[244, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[244, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[244, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[245, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[246, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[246, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[246, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[246, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[246, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[247, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[247, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[247, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[248, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[249, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[250, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[251, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[252, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[252, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[252, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[252, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[252, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[252, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "compressionmanager (class in neural_compressor.training)": [[253, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[253, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[253, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[253, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[253, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[254, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[254, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[254, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[255, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[256, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[256, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[256, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[257, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[257, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[257, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[257, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[257, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[257, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[257, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[258, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[258, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[258, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[258, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[258, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[259, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[260, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[261, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[262, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[262, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[263, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[263, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[264, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[264, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[264, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[265, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[265, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[265, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[265, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[266, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[266, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[267, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[267, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[268, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[268, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[268, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[268, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[268, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[268, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[269, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[269, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[269, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[269, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[269, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[269, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[270, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[270, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[270, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[270, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[270, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[271, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[272, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[272, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[272, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[272, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[272, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[273, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[273, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[273, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[274, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[274, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[274, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[274, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[274, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[274, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[275, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[275, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[276, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[276, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[277, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[277, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[277, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[278, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[279, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[279, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[280, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[280, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[280, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[280, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[280, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[280, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[281, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[281, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[282, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[282, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[282, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[282, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[282, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[282, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[283, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[283, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[284, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[284, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[285, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[285, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[285, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[285, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[285, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[286, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[286, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[286, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[286, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[286, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[287, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[287, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[288, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[288, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[288, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[288, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[289, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[290, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[290, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[290, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[290, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[290, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[290, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[291, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[291, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[292, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[292, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[293, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[293, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[294, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[294, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[295, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[295, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[296, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[296, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[297, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[297, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[298, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[298, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[299, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[299, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[299, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[299, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[299, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[299, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[300, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[300, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[300, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[300, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[301, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[301, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[302, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[302, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[303, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[303, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[303, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[303, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[303, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[303, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[304, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[304, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[305, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[305, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[306, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[306, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[306, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[306, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[307, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[307, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[308, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[308, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[309, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[309, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[310, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[310, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[311, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[311, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[312, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[312, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[312, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[312, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[312, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[312, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[313, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[313, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[314, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[314, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[314, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[314, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[315, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[315, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[316, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[316, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[316, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[317, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[318, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[319, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[319, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[319, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[320, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[320, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[320, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[320, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[320, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[320, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[321, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[321, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[321, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[322, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[323, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[323, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[323, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[324, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[324, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[325, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[326, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[326, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[327, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[327, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[327, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[328, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[328, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[328, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[328, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[329, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[329, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[329, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[329, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[329, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[329, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[329, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[329, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[329, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[330, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[330, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[330, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[330, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[331, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[332, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[332, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[332, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[333, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[334, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[334, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[334, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[335, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[335, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[335, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[336, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[337, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[338, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[339, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[340, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[341, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[341, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[342, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[342, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[343, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[344, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[344, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[344, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[344, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[344, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[344, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[344, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[344, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[344, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[344, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[345, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[345, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[346, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[347, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[347, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[347, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[348, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[349, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[349, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[349, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[349, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[349, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[350, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[350, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[351, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[351, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[351, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[352, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[352, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[352, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[352, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[353, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[354, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[354, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[354, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[354, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[354, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[355, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[355, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[355, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[355, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[355, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[355, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[356, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[356, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[357, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[357, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[357, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[358, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[358, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[359, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[359, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[360, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[360, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[361, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[361, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[362, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[363, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[363, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[364, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[365, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[365, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[366, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[366, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[367, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[367, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[367, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[368, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[368, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[369, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[370, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[370, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[370, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[370, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[370, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[371, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[371, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[372, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[373, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[373, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[374, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[374, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[374, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[374, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[374, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[375, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[376, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[376, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[377, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[377, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[377, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[377, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[378, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[379, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[379, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[379, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[379, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[380, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[380, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[381, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[381, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[381, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[381, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[381, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[381, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[381, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[381, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[381, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[382, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[382, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[382, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[383, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[383, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[383, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[384, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[385, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[385, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[385, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[386, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[386, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[386, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[387, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[387, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[387, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[388, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[388, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[388, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[389, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[390, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[390, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[391, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[391, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[392, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[392, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[392, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[393, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[394, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[394, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[395, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[395, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[395, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[395, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[395, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[396, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[396, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[396, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[396, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[396, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[397, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[397, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[397, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[397, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[397, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[397, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[397, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[397, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[397, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[397, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[397, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[398, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[398, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[398, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[398, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[399, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[399, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[399, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[400, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[400, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[400, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[400, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[401, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[402, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[402, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[402, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[402, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[403, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[403, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[404, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[404, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[404, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[404, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[404, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[404, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[404, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[404, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[404, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[404, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[404, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[404, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[404, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[405, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[405, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[405, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[405, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[405, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[406, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[406, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[406, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[406, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[406, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[407, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[407, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[408, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[409, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[409, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[409, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[410, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[410, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[410, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[410, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[410, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[411, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[411, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[412, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[412, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[412, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[412, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[413, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[413, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[413, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[413, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[413, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[414, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[414, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[414, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[414, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[414, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[414, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[415, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[415, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[415, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[416, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[417, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[417, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[417, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[418, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[418, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[418, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[418, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[418, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[419, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[419, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[419, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[420, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[420, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[420, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[420, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[420, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[420, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[421, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[421, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[421, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[421, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[421, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[422, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[422, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[422, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[423, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[423, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[423, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[423, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[423, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[423, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[423, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[423, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[423, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[423, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[423, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[423, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[423, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[424, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[424, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[424, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[424, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[424, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[425, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[425, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[426, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[427, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[427, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[427, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[428, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[428, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[429, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[429, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[430, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[430, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[430, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[430, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[430, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[430, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[431, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[432, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[432, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[432, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[433, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[433, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[434, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[434, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[434, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[435, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[435, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[435, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[436, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[436, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[436, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[436, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[436, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[436, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[437, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[437, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[437, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[437, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[437, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[438, "module-neural_compressor.version"]]}})