Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/helper/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "faq", "framework_yaml", "graph_optimization", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "model_conversion", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/helper/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "faq.md", "framework_yaml.md", "graph_optimization.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "model_conversion.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 1, 2, 3, 7, 35, 80, 135, 195, 223, 233, 256, 260, 278, 290, 292, 301, 320, 327, 328, 536, 537, 538, 539, 540, 542, 544, 549, 555, 558, 559, 560, 562, 563, 566, 567, 569, 570, 571, 572], "interest": [0, 6, 538, 570], "foster": [0, 538], "an": [0, 2, 3, 4, 6, 7, 12, 35, 43, 86, 91, 92, 94, 135, 159, 160, 175, 189, 194, 198, 202, 207, 213, 217, 222, 223, 227, 232, 236, 240, 245, 249, 256, 257, 260, 261, 262, 269, 276, 279, 280, 281, 296, 298, 301, 302, 303, 313, 320, 327, 329, 420, 425, 498, 537, 538, 539, 541, 545, 549, 555, 556, 559, 563, 564, 569, 570, 571, 572], "open": [0, 6, 217, 256, 501, 536, 538, 547, 564], "welcom": [0, 538, 551], "environ": [0, 214, 297, 459, 488, 489, 497, 520, 536, 538, 572], "we": [0, 1, 3, 4, 6, 7, 12, 35, 68, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 94, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 130, 159, 160, 175, 195, 214, 216, 217, 233, 257, 260, 267, 278, 279, 298, 301, 538, 539, 544, 548, 549, 555, 558, 559, 560, 562, 563, 565, 566, 569, 570, 572], "maintain": [0, 6, 264, 305, 538, 557, 562, 568], "make": [0, 1, 3, 7, 159, 160, 175, 194, 232, 290, 292, 294, 320, 327, 329, 376, 408, 440, 536, 538, 539, 548, 555, 566, 567, 572], "particip": [0, 538], "project": [0, 213, 249, 278, 377, 380, 385, 387, 388, 391, 397, 398, 402, 403, 404, 405, 406, 407, 408, 432, 538, 551, 564, 569, 572], "commun": [0, 297, 489, 522, 523, 524, 536, 538], "harass": [0, 538], "free": [0, 184, 185, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 538, 555, 559, 569], "experi": [0, 538, 569, 572], "everyon": [0, 538], "regardless": [0, 260, 301, 538], "ag": [0, 271, 538], "bodi": [0, 538], "size": [0, 3, 123, 186, 188, 189, 195, 198, 202, 204, 207, 209, 213, 224, 226, 227, 233, 236, 240, 242, 245, 246, 249, 260, 269, 272, 278, 290, 301, 313, 320, 359, 377, 387, 388, 505, 507, 508, 536, 537, 538, 539, 540, 544, 547, 549, 559, 562, 563, 571, 572, 573, 574], "disabl": [0, 165, 496, 524, 538], "ethnic": [0, 538], "sex": [0, 178, 538], "characterist": [0, 538], "gender": [0, 538], "ident": [0, 3, 98, 104, 130, 159, 290, 320, 538, 542, 549], "express": [0, 71, 257, 298, 538], "level": [0, 3, 41, 44, 499, 520, 538, 572], "educ": [0, 538], "socio": [0, 538], "econom": [0, 538], "statu": [0, 130, 377, 388, 391, 395, 397, 403, 405, 406, 491, 519, 532, 538, 559], "nation": [0, 198, 236, 538], "person": [0, 6, 178, 538, 564], "appear": [0, 536, 538], "race": [0, 538], "religion": [0, 538], "sexual": [0, 538], "orient": [0, 538], "exampl": [0, 1, 6, 45, 135, 167, 196, 197, 198, 209, 212, 213, 234, 235, 236, 246, 248, 249, 260, 261, 262, 264, 270, 293, 297, 301, 302, 303, 305, 331, 349, 385, 402, 408, 432, 456, 457, 458, 459, 501, 507, 536, 538, 540, 545, 550, 551, 552, 558, 567, 568, 571, 572], "behavior": [0, 7, 260, 301, 538, 542, 548, 557, 570, 572, 573], "contribut": [0, 6, 551], "creat": [0, 2, 7, 31, 32, 33, 35, 71, 130, 142, 159, 186, 196, 198, 216, 217, 224, 234, 236, 250, 256, 260, 268, 269, 279, 280, 281, 296, 301, 313, 335, 352, 376, 393, 402, 403, 407, 408, 486, 506, 519, 532, 538, 540, 545, 549, 557, 558, 566, 569, 570, 572], "posit": [0, 130, 213, 249, 278, 320, 536, 538, 555], "includ": [0, 6, 7, 41, 196, 198, 202, 205, 206, 207, 210, 213, 215, 234, 236, 240, 243, 244, 245, 247, 249, 255, 256, 260, 265, 278, 290, 294, 295, 301, 317, 320, 328, 329, 353, 354, 536, 538, 540, 553, 554, 555, 562, 563, 566, 567, 570, 572], "us": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 41, 43, 44, 62, 68, 69, 71, 94, 133, 135, 136, 142, 167, 172, 174, 176, 177, 178, 184, 185, 194, 195, 196, 197, 198, 199, 200, 203, 207, 210, 212, 213, 214, 215, 220, 232, 233, 234, 235, 236, 237, 238, 241, 245, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 260, 264, 265, 266, 267, 270, 272, 278, 279, 281, 283, 286, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 305, 316, 317, 320, 326, 327, 329, 331, 334, 335, 336, 337, 338, 340, 341, 342, 343, 350, 353, 354, 359, 403, 408, 413, 414, 418, 420, 432, 439, 441, 466, 470, 491, 507, 509, 519, 520, 536, 538, 540, 542, 543, 544, 545, 548, 550, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574], "inclus": [0, 538], "languag": [0, 12, 257, 278, 298, 538, 564], "Being": [0, 538], "respect": [0, 538, 543, 548, 562, 563, 573], "differ": [0, 1, 2, 3, 6, 12, 160, 172, 174, 175, 189, 198, 213, 215, 227, 236, 249, 255, 256, 257, 263, 264, 271, 279, 280, 282, 285, 290, 295, 296, 298, 304, 305, 320, 536, 538, 539, 540, 542, 544, 546, 549, 550, 552, 555, 557, 558, 559, 562, 566, 570, 571, 572], "viewpoint": [0, 538], "gracefulli": [0, 538], "accept": [0, 35, 536, 538, 556], "construct": [0, 196, 199, 200, 203, 207, 210, 211, 216, 217, 218, 219, 221, 234, 237, 238, 241, 304, 305, 308, 310, 352, 537, 538, 540, 544, 572], "critic": [0, 6, 538], "focus": [0, 7, 538, 549], "what": [0, 176, 194, 232, 297, 349, 536, 538], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 21, 29, 30, 35, 36, 38, 41, 43, 44, 45, 69, 71, 77, 78, 84, 86, 88, 94, 105, 109, 110, 116, 117, 118, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 167, 171, 175, 176, 184, 185, 186, 187, 190, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 209, 213, 214, 216, 217, 220, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 249, 256, 257, 260, 262, 263, 264, 266, 269, 272, 276, 278, 281, 283, 291, 292, 293, 296, 297, 298, 301, 303, 304, 305, 313, 317, 320, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 358, 376, 408, 420, 440, 443, 445, 446, 448, 450, 451, 453, 459, 494, 496, 498, 500, 501, 505, 507, 509, 515, 520, 522, 536, 537, 538, 539, 540, 542, 544, 545, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573], "best": [0, 2, 4, 6, 69, 213, 249, 250, 255, 256, 267, 268, 279, 280, 295, 538, 553, 559, 566, 571, 572], "show": [0, 3, 536, 537, 538, 542, 544, 562, 572], "empathi": [0, 538], "toward": [0, 4, 538, 542], "other": [0, 1, 69, 91, 92, 94, 159, 195, 233, 262, 296, 303, 309, 314, 336, 498, 502, 524, 536, 538, 545, 548, 549, 552, 554, 557, 559, 561, 562, 566, 571, 572, 574], "member": [0, 7, 256, 265, 538], "unaccept": [0, 538], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 21, 29, 30, 36, 38, 41, 44, 45, 62, 69, 71, 77, 94, 98, 116, 117, 118, 130, 133, 135, 139, 141, 165, 167, 171, 172, 173, 174, 176, 177, 178, 184, 185, 186, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 210, 213, 215, 217, 218, 220, 223, 224, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 247, 249, 250, 255, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 281, 282, 283, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 314, 316, 317, 320, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 352, 353, 354, 358, 359, 377, 378, 380, 383, 387, 388, 391, 392, 395, 396, 403, 408, 411, 413, 414, 415, 416, 417, 418, 419, 432, 439, 440, 489, 536, 537, 538, 539, 540, 542, 543, 544, 545, 548, 549, 550, 552, 553, 555, 556, 557, 559, 560, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574], "imageri": [0, 538], "unwelcom": [0, 538], "attent": [0, 196, 234, 276, 278, 538, 542], "advanc": [0, 6, 167, 516, 538, 539, 566, 572, 573], "troll": [0, 538], "insult": [0, 538], "derogatori": [0, 538], "comment": [0, 538, 540, 555, 571], "polit": [0, 538], "attack": [0, 538], "public": [0, 130, 538], "privat": [0, 256, 265, 538], "publish": [0, 538, 554, 556], "inform": [0, 5, 6, 7, 8, 9, 10, 14, 21, 29, 30, 43, 71, 133, 167, 184, 185, 216, 217, 218, 219, 260, 290, 292, 293, 294, 296, 297, 301, 304, 305, 308, 310, 317, 320, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 375, 411, 440, 495, 496, 501, 502, 538, 542, 545, 548, 551, 557, 562, 567, 568, 570, 573, 574], "physic": [0, 214, 538], "electron": [0, 538], "address": [0, 198, 236, 524, 536, 538, 556, 564], "without": [0, 1, 130, 165, 213, 249, 260, 292, 301, 327, 507, 536, 538, 539, 542, 544, 549, 555, 562, 564, 565, 566, 572], "explicit": [0, 159, 538], "permiss": [0, 538], "which": [0, 2, 4, 6, 7, 12, 38, 43, 44, 69, 71, 79, 130, 135, 159, 184, 196, 197, 198, 209, 214, 234, 235, 236, 246, 256, 257, 260, 262, 270, 272, 280, 281, 284, 285, 286, 290, 291, 292, 293, 294, 298, 301, 303, 310, 313, 317, 320, 327, 328, 329, 333, 334, 336, 343, 505, 536, 537, 538, 539, 540, 542, 544, 545, 548, 549, 552, 555, 556, 557, 558, 560, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574], "could": [0, 71, 184, 185, 198, 236, 296, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 538, 543, 549, 558, 560, 562, 563, 566, 572], "reason": [0, 105, 216, 217, 538, 539, 570, 572], "consid": [0, 1, 165, 264, 305, 538, 539, 542, 572], "inappropri": [0, 538], "profession": [0, 538], "set": [0, 2, 3, 4, 6, 36, 38, 41, 43, 44, 45, 69, 70, 71, 121, 130, 135, 159, 165, 176, 178, 184, 185, 186, 188, 196, 198, 201, 213, 214, 220, 224, 226, 234, 236, 239, 249, 250, 253, 255, 256, 260, 265, 266, 267, 269, 276, 278, 279, 283, 291, 296, 297, 301, 313, 314, 316, 320, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 361, 398, 399, 400, 403, 420, 466, 470, 475, 496, 500, 505, 506, 508, 509, 510, 519, 520, 524, 536, 537, 538, 539, 540, 544, 548, 549, 550, 552, 555, 556, 565, 566, 569, 572, 573], "ar": [0, 2, 3, 4, 6, 7, 12, 36, 38, 45, 69, 86, 98, 142, 152, 181, 196, 213, 223, 234, 249, 256, 257, 260, 264, 270, 272, 276, 278, 281, 290, 291, 292, 293, 296, 297, 298, 301, 305, 320, 327, 330, 331, 335, 352, 358, 359, 440, 443, 445, 452, 493, 502, 536, 537, 538, 539, 540, 542, 543, 545, 546, 548, 550, 552, 554, 555, 556, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574], "clarifi": [0, 538], "expect": [0, 71, 142, 198, 236, 362, 478, 501, 538, 547, 566, 572], "take": [0, 2, 36, 38, 71, 184, 185, 189, 213, 217, 218, 227, 249, 290, 304, 305, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 538, 539, 542, 548, 562, 566, 567, 571, 572, 573], "appropri": [0, 538], "fair": [0, 538], "correct": [0, 3, 160, 175, 260, 261, 262, 264, 291, 301, 302, 303, 305, 330, 461, 536, 538], "action": [0, 538, 549], "ani": [0, 1, 94, 142, 159, 167, 250, 256, 260, 262, 278, 301, 303, 361, 362, 364, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 387, 388, 389, 390, 391, 392, 396, 398, 399, 409, 411, 416, 417, 420, 422, 428, 437, 440, 443, 447, 450, 451, 452, 454, 457, 459, 462, 466, 470, 472, 475, 478, 481, 486, 487, 493, 494, 496, 498, 500, 501, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 523, 524, 531, 532, 536, 538, 539, 544], "instanc": [0, 1, 2, 7, 133, 135, 136, 142, 184, 185, 196, 214, 234, 256, 261, 262, 264, 267, 279, 280, 302, 303, 305, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 377, 415, 419, 443, 452, 536, 538, 572, 573, 574], "have": [0, 3, 12, 98, 130, 165, 194, 212, 216, 217, 232, 248, 257, 260, 264, 271, 290, 292, 298, 301, 305, 320, 327, 536, 538, 539, 544, 548, 554, 555, 556, 559, 562, 563, 566], "right": [0, 1, 209, 246, 260, 301, 505, 536, 538, 539, 571], "remov": [0, 3, 71, 86, 98, 109, 121, 123, 130, 135, 152, 159, 215, 253, 262, 303, 377, 380, 387, 388, 391, 393, 395, 397, 443, 501, 502, 508, 537, 538, 549, 562, 563, 570, 572], "edit": [0, 1, 397, 403, 405, 406, 409, 538], "reject": [0, 538], "commit": [0, 538], "wiki": [0, 538], "issu": [0, 5, 536, 538, 553, 566, 570], "align": [0, 213, 249, 538, 571], "thi": [0, 2, 3, 4, 6, 7, 12, 35, 38, 43, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 110, 111, 114, 115, 124, 125, 128, 129, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 167, 171, 175, 184, 185, 195, 196, 197, 198, 199, 200, 201, 203, 212, 213, 216, 217, 222, 223, 233, 234, 235, 236, 237, 238, 239, 241, 248, 249, 256, 257, 260, 261, 262, 264, 269, 274, 275, 282, 283, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 305, 316, 320, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 535, 536, 537, 538, 539, 540, 542, 544, 545, 548, 549, 552, 554, 555, 556, 557, 558, 562, 563, 566, 567, 568, 569, 570, 571, 572], "ban": [0, 538], "temporarili": [0, 538], "perman": [0, 538], "thei": [0, 142, 176, 214, 256, 278, 297, 320, 537, 538, 542, 548, 555, 559, 562, 563], "deem": [0, 538], "threaten": [0, 538], "offens": [0, 538], "harm": [0, 538], "appli": [0, 4, 133, 148, 223, 256, 258, 290, 292, 299, 320, 327, 536, 538, 560, 562, 566, 567, 569, 572, 573], "both": [0, 2, 4, 7, 165, 278, 280, 282, 538, 539, 543, 565, 566], "within": [0, 1, 255, 256, 260, 295, 301, 314, 327, 335, 538, 556, 564], "space": [0, 2, 7, 176, 184, 185, 255, 256, 262, 267, 269, 271, 279, 280, 281, 282, 295, 297, 303, 327, 332, 335, 336, 337, 340, 341, 342, 343, 507, 538, 539, 562, 566, 572, 573], "when": [0, 2, 4, 12, 68, 77, 88, 94, 142, 165, 196, 197, 205, 206, 207, 213, 234, 235, 243, 244, 245, 249, 257, 258, 270, 278, 290, 291, 292, 298, 299, 320, 327, 330, 505, 507, 520, 524, 536, 538, 539, 540, 545, 549, 562, 563, 566, 571, 572], "individu": [0, 2, 94, 268, 269, 279, 290, 320, 538], "repres": [0, 68, 198, 203, 236, 241, 260, 262, 264, 301, 303, 305, 327, 328, 329, 379, 381, 382, 384, 386, 389, 390, 393, 394, 505, 538, 540, 566, 572], "its": [0, 2, 71, 121, 130, 133, 142, 167, 192, 198, 212, 213, 230, 236, 248, 249, 251, 252, 258, 259, 263, 264, 292, 296, 299, 300, 304, 305, 320, 327, 335, 336, 536, 538, 539, 542, 554, 555, 556, 561, 562, 563, 569, 571, 572], "offici": [0, 165, 257, 261, 262, 298, 302, 303, 536, 538, 555], "e": [0, 41, 44, 70, 94, 269, 271, 296, 320, 498, 500, 524, 538, 542, 544, 549, 572], "mail": [0, 538], "post": [0, 3, 4, 7, 36, 41, 44, 184, 185, 213, 223, 249, 253, 256, 296, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 519, 538, 543, 544, 552, 553, 560, 570, 572], "via": [0, 142, 255, 256, 283, 295, 524, 538, 544, 549, 552, 569], "social": [0, 538], "media": [0, 538], "account": [0, 269, 538, 569, 572], "act": [0, 194, 232, 538], "appoint": [0, 538], "onlin": [0, 6, 35, 538, 569], "offlin": [0, 35, 359, 538, 566], "event": [0, 538, 570], "represent": [0, 80, 269, 377, 378, 380, 383, 387, 388, 391, 392, 395, 396, 518, 538, 543, 559, 563, 566], "mai": [0, 130, 159, 165, 316, 538, 539, 547, 554, 556, 561, 564, 566], "further": [0, 94, 538, 556, 557], "defin": [0, 2, 3, 4, 7, 38, 41, 43, 44, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 117, 124, 125, 128, 129, 130, 159, 184, 185, 215, 267, 268, 271, 279, 280, 281, 282, 283, 290, 291, 292, 293, 294, 297, 320, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 434, 435, 436, 519, 536, 538, 540, 542, 548, 552, 555, 559, 560, 562, 563, 566, 569, 570, 572, 573], "abus": [0, 538], "otherwis": [0, 185, 198, 213, 236, 249, 336, 343, 538, 540, 565, 571], "report": [0, 536, 538, 569], "contact": [0, 538, 568, 569], "mlp": [0, 538], "mlpc": [0, 538], "dl": [0, 255, 256, 265, 283, 295, 538, 550, 564], "intel": [0, 2, 5, 7, 69, 217, 220, 251, 256, 263, 264, 290, 293, 297, 304, 305, 320, 331, 488, 501, 538, 541, 542, 543, 546, 548, 549, 553, 554, 556, 557, 559, 560, 561, 562, 564, 566, 567, 568, 570, 572, 573], "com": [0, 3, 6, 167, 196, 234, 257, 258, 261, 262, 290, 293, 297, 298, 299, 302, 303, 320, 331, 501, 536, 538, 540, 549, 553, 554, 568, 569, 574], "all": [0, 1, 3, 4, 6, 7, 36, 38, 44, 45, 62, 69, 71, 84, 87, 109, 110, 122, 142, 172, 174, 186, 187, 190, 194, 198, 202, 205, 206, 207, 210, 213, 214, 215, 220, 223, 224, 232, 236, 240, 243, 244, 245, 247, 249, 253, 256, 257, 260, 262, 263, 264, 274, 275, 276, 278, 281, 284, 285, 286, 287, 290, 293, 296, 297, 298, 301, 303, 304, 305, 307, 308, 313, 315, 316, 320, 326, 331, 333, 334, 335, 336, 340, 341, 343, 353, 354, 363, 374, 376, 385, 401, 403, 408, 413, 414, 427, 429, 432, 433, 439, 440, 443, 445, 452, 458, 465, 467, 471, 472, 474, 480, 485, 489, 498, 502, 524, 536, 538, 539, 540, 544, 548, 549, 553, 560, 561, 562, 564, 566, 567, 571, 572], "complaint": [0, 538], "review": [0, 538], "investig": [0, 538], "result": [0, 2, 3, 12, 36, 38, 41, 44, 69, 71, 165, 184, 209, 213, 214, 215, 246, 249, 256, 257, 260, 261, 262, 263, 264, 269, 271, 280, 298, 301, 302, 303, 304, 305, 316, 333, 334, 335, 337, 338, 340, 341, 342, 343, 360, 362, 377, 378, 391, 392, 397, 403, 406, 409, 483, 523, 526, 536, 537, 538, 539, 542, 544, 545, 549, 552, 554, 555, 559, 562, 563, 564, 566, 569, 570, 571, 572, 574], "necessari": [0, 2, 68, 250, 256, 538, 557, 569, 572], "circumst": [0, 538, 565], "team": [0, 262, 303, 538, 567], "oblig": [0, 538], "confidenti": [0, 536, 538], "regard": [0, 538, 567], "incid": [0, 538], "detail": [0, 6, 38, 71, 213, 249, 276, 377, 380, 387, 388, 391, 393, 395, 397, 398, 400, 403, 404, 405, 406, 407, 411, 416, 476, 481, 495, 538, 548, 550, 555, 556, 562, 563, 568, 569, 570, 572, 574], "specif": [0, 2, 3, 7, 38, 41, 44, 69, 70, 71, 135, 136, 187, 190, 196, 197, 198, 199, 203, 205, 206, 207, 214, 220, 234, 235, 236, 237, 241, 243, 244, 245, 256, 257, 260, 266, 267, 278, 279, 280, 298, 301, 315, 388, 398, 399, 400, 403, 411, 426, 536, 538, 542, 545, 548, 550, 555, 556, 557, 559, 565, 573], "polici": [0, 6, 340, 341, 538, 549, 561, 573], "separ": [0, 212, 248, 523, 536, 538, 550, 554, 560, 565], "who": [0, 538], "do": [0, 12, 36, 38, 41, 44, 69, 195, 196, 233, 234, 250, 251, 253, 256, 257, 260, 293, 296, 297, 298, 301, 331, 336, 358, 536, 538, 540, 544, 548, 549, 552, 555, 559, 567, 568, 572], "follow": [0, 2, 3, 4, 7, 9, 45, 94, 110, 113, 116, 117, 118, 119, 130, 198, 236, 256, 257, 260, 278, 283, 298, 301, 535, 536, 537, 538, 540, 542, 545, 548, 549, 553, 554, 555, 557, 558, 560, 562, 563, 565, 566, 570, 572], "good": [0, 538, 545, 566, 572], "faith": [0, 538], "face": [0, 538, 564, 568], "temporari": [0, 538], "repercuss": [0, 538], "determin": [0, 3, 317, 520, 538, 545, 563], "": [0, 2, 3, 41, 68, 70, 80, 86, 94, 130, 142, 159, 160, 175, 178, 186, 195, 198, 212, 213, 214, 216, 217, 218, 224, 233, 236, 248, 249, 256, 262, 270, 272, 278, 290, 292, 303, 304, 305, 310, 320, 327, 330, 332, 333, 334, 336, 337, 338, 340, 341, 343, 353, 354, 409, 440, 493, 494, 537, 538, 542, 544, 545, 548, 549, 552, 553, 556, 560, 561, 562, 563, 564, 565, 566, 568, 569, 573], "leadership": [0, 538], "adapt": [0, 38, 41, 44, 69, 70, 71, 538], "from": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 41, 43, 68, 69, 71, 85, 91, 92, 94, 130, 133, 135, 142, 152, 159, 165, 184, 185, 186, 189, 193, 196, 197, 198, 199, 200, 201, 203, 208, 209, 215, 216, 217, 223, 224, 227, 231, 234, 235, 236, 237, 238, 239, 241, 246, 250, 252, 253, 254, 256, 257, 260, 261, 262, 266, 269, 270, 271, 272, 276, 278, 281, 283, 290, 291, 292, 293, 294, 296, 297, 298, 301, 302, 303, 314, 316, 317, 320, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 358, 359, 377, 380, 381, 382, 384, 387, 388, 389, 390, 391, 393, 395, 397, 398, 400, 403, 404, 405, 406, 407, 409, 420, 425, 443, 446, 455, 456, 457, 459, 481, 486, 500, 501, 505, 507, 508, 509, 524, 526, 531, 532, 537, 538, 539, 540, 542, 543, 544, 546, 547, 549, 552, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572], "version": [0, 1, 6, 7, 38, 41, 43, 44, 70, 71, 77, 184, 251, 253, 278, 459, 491, 496, 507, 536, 538, 548, 553, 554, 561, 564, 572], "1": [0, 1, 3, 4, 6, 7, 36, 38, 41, 44, 45, 68, 69, 71, 78, 98, 114, 133, 135, 163, 165, 173, 175, 186, 188, 191, 192, 193, 195, 196, 197, 199, 200, 203, 204, 209, 213, 214, 215, 216, 217, 224, 226, 229, 230, 231, 233, 234, 235, 237, 238, 241, 242, 246, 249, 255, 256, 260, 261, 262, 264, 269, 272, 276, 278, 283, 290, 292, 295, 296, 301, 302, 303, 305, 320, 327, 330, 332, 336, 352, 362, 478, 486, 535, 537, 538, 539, 540, 542, 545, 548, 549, 555, 556, 559, 560, 561, 562, 563, 565, 566, 568, 570, 571, 572, 573], "4": [0, 3, 6, 7, 12, 71, 77, 205, 206, 207, 208, 209, 210, 213, 243, 244, 245, 246, 247, 249, 257, 258, 260, 298, 299, 301, 320, 498, 537, 538, 539, 547, 548, 552, 553, 555, 561, 562, 571, 572, 574], "avail": [0, 6, 8, 9, 10, 14, 21, 29, 30, 35, 310, 375, 379, 381, 382, 386, 389, 390, 394, 459, 536, 552, 561, 569, 572], "http": [0, 3, 6, 167, 196, 198, 234, 236, 257, 258, 260, 261, 262, 278, 290, 292, 293, 297, 298, 299, 301, 302, 303, 317, 320, 331, 532, 536, 540, 549, 553, 554, 568], "www": [0, 198, 236, 540, 574], "org": [0, 6, 260, 278, 292, 301, 317, 536, 553], "html": 0, "For": [0, 1, 3, 4, 5, 7, 135, 198, 212, 213, 223, 236, 248, 249, 256, 260, 261, 262, 264, 269, 290, 293, 297, 301, 302, 303, 305, 320, 331, 332, 336, 498, 536, 538, 543, 544, 548, 549, 552, 562, 567, 570, 572, 573, 574], "answer": [0, 213, 249, 261, 262, 302, 303, 538, 571, 574], "common": [0, 4, 6, 9, 211, 256, 266, 272, 280, 281, 282, 290, 296, 297, 320, 352, 501, 502, 507, 537, 538, 539, 540, 542, 544, 549, 550, 553, 557, 558, 562, 566], "question": [0, 7, 213, 249, 261, 262, 302, 303, 538, 553, 571, 574], "about": [0, 317, 411, 440, 493, 495, 496, 501, 502, 536, 538, 539, 545, 567, 574], "see": [0, 1, 3, 5, 213, 249, 257, 260, 276, 298, 301, 536, 538, 549, 554, 558, 562, 570, 574], "faq": [0, 6, 538], "pytorch": [1, 6, 7, 195, 196, 198, 201, 202, 205, 206, 207, 210, 213, 215, 220, 222, 233, 234, 236, 239, 240, 243, 244, 245, 247, 249, 251, 253, 254, 255, 256, 263, 264, 265, 288, 290, 293, 295, 297, 304, 305, 315, 320, 331, 332, 362, 432, 439, 462, 472, 489, 542, 544, 545, 546, 548, 552, 553, 556, 557, 562, 564, 565, 566, 568, 572, 573], "toolkit": [1, 6, 553, 564], "develop": [1, 167, 507, 538, 553, 556, 564, 566, 567, 569], "transform": [1, 2, 6, 14, 31, 44, 68, 74, 86, 114, 115, 117, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 160, 163, 164, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 256, 275, 277, 278, 297, 371, 375, 380, 385, 398, 401, 403, 408, 410, 432, 507, 508, 509, 510, 537, 539, 540, 542, 543, 544, 562, 564, 567, 570, 572, 573], "nn": [1, 3, 4, 171, 215, 251, 253, 272, 276, 278, 332, 557, 562, 570], "modul": [1, 3, 4, 251, 273, 274, 275, 279, 288, 289, 297, 319, 497, 504, 512, 536, 537, 542, 552, 555, 557, 565, 567, 570], "With": [1, 4, 7, 121, 539, 559, 562, 564, 566, 574], "convert": [1, 3, 4, 36, 38, 43, 68, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 127, 128, 129, 196, 209, 212, 213, 234, 246, 248, 249, 256, 260, 264, 266, 280, 282, 291, 301, 305, 307, 308, 309, 313, 315, 349, 379, 386, 394, 486, 498, 549, 556, 558, 566, 567, 571], "torch": [1, 3, 4, 69, 167, 171, 215, 251, 253, 264, 272, 276, 278, 305, 315, 320, 330, 332, 544, 556, 557, 562, 566, 570], "graphmodul": [1, 69, 171, 567], "can": [1, 2, 3, 4, 6, 7, 80, 160, 167, 175, 176, 184, 185, 195, 198, 213, 214, 216, 217, 233, 236, 249, 256, 260, 262, 264, 276, 278, 290, 292, 293, 294, 297, 301, 303, 305, 316, 320, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 462, 491, 498, 507, 536, 537, 539, 540, 542, 544, 545, 548, 549, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 573], "automat": [1, 6, 198, 201, 208, 209, 236, 239, 246, 255, 256, 265, 272, 295, 536, 540, 552, 556, 560, 563, 571, 572], "insert": [1, 3, 71, 127, 130, 133, 152, 163, 251, 253, 552, 566, 567, 570], "quant": [1, 3, 71, 171, 566], "dequant": [1, 3, 113, 116, 118, 119, 121, 148, 167, 171, 340, 411, 570], "oper": [1, 3, 68, 130, 165, 209, 246, 278, 290, 320, 519, 523, 536, 559, 566, 571, 572], "symbolic_trac": 1, "fake": [1, 4, 71, 133, 566], "valu": [1, 3, 4, 36, 38, 41, 44, 45, 68, 69, 71, 79, 80, 86, 91, 92, 94, 114, 115, 130, 135, 159, 160, 165, 175, 177, 178, 184, 185, 196, 199, 200, 209, 213, 214, 215, 234, 237, 238, 246, 249, 260, 264, 270, 271, 276, 290, 291, 293, 297, 301, 305, 315, 316, 317, 320, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 350, 352, 353, 359, 371, 373, 375, 379, 381, 382, 384, 386, 389, 390, 394, 398, 399, 420, 422, 461, 490, 493, 494, 498, 500, 505, 507, 515, 517, 518, 520, 531, 536, 539, 540, 545, 548, 555, 559, 562, 563, 565, 566, 571, 572, 573], "call": [1, 2, 7, 35, 43, 142, 223, 256, 260, 271, 272, 283, 290, 292, 293, 301, 327, 376, 408, 493, 501, 502, 536, 539, 550, 562, 566, 570, 571, 572], "proxi": 1, "fed": 1, "model": [1, 2, 4, 7, 10, 36, 38, 41, 43, 44, 45, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 136, 159, 165, 167, 171, 176, 181, 184, 185, 192, 195, 196, 198, 213, 214, 215, 217, 218, 223, 230, 233, 234, 236, 249, 250, 251, 252, 253, 254, 255, 256, 264, 265, 266, 267, 268, 270, 272, 277, 278, 279, 280, 282, 283, 290, 291, 292, 293, 294, 295, 296, 297, 304, 305, 320, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 352, 358, 359, 361, 362, 363, 365, 375, 377, 385, 388, 391, 393, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 415, 419, 420, 425, 426, 427, 430, 431, 432, 456, 457, 459, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 480, 482, 485, 486, 489, 490, 497, 505, 507, 512, 522, 523, 527, 537, 539, 540, 542, 543, 544, 545, 549, 550, 552, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573], "record": [1, 3, 196, 197, 198, 204, 215, 222, 234, 235, 236, 242, 540, 569, 570, 572], "Then": [1, 260, 301, 536, 549], "get": [1, 38, 41, 44, 69, 70, 71, 91, 92, 94, 130, 135, 142, 159, 165, 171, 176, 178, 186, 189, 207, 210, 213, 214, 220, 222, 223, 224, 227, 245, 247, 249, 253, 254, 255, 256, 265, 272, 276, 282, 283, 290, 292, 294, 295, 296, 297, 313, 314, 315, 316, 317, 320, 327, 328, 329, 340, 341, 353, 354, 359, 360, 365, 371, 372, 373, 375, 377, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 397, 398, 400, 402, 403, 404, 405, 406, 407, 410, 411, 412, 415, 419, 420, 425, 437, 440, 441, 443, 445, 446, 450, 451, 452, 454, 457, 459, 461, 462, 463, 464, 469, 473, 476, 477, 479, 483, 484, 486, 488, 495, 496, 500, 505, 507, 508, 510, 514, 517, 519, 520, 523, 524, 528, 530, 531, 532, 533, 536, 537, 539, 540, 552, 553, 570, 572], "sure": [1, 3, 159, 290, 292, 294, 320, 327, 329, 440, 536], "replac": [1, 3, 44, 109, 110, 130, 262, 303, 336, 507, 544, 549, 568], "backend": [1, 38, 41, 44, 45, 69, 70, 71, 187, 188, 192, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 220, 225, 226, 228, 230, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 265, 535, 544, 545, 550, 552, 565, 566, 571, 573], "pytorch_fx": [1, 198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 565], "conf": [1, 2, 4, 172, 174, 184, 185, 214, 256, 265, 266, 283, 296, 307, 308, 309, 313, 315, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 518, 537, 539, 542, 549, 550, 572], "yaml": [1, 4, 7, 69, 70, 71, 176, 177, 178, 184, 185, 196, 198, 214, 223, 234, 236, 250, 255, 256, 266, 267, 268, 279, 280, 283, 295, 296, 297, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 360, 364, 365, 366, 367, 368, 370, 372, 373, 455, 457, 464, 469, 473, 476, 518, 540, 542, 545, 549, 550, 555, 558, 559, 562, 565, 570, 571, 572], "you": [1, 4, 6, 194, 196, 232, 234, 260, 276, 278, 292, 301, 327, 536, 537, 538, 539, 540, 544, 553, 554, 555, 568, 569, 570, 572], "usual": [1, 4, 36, 38, 41, 44, 69, 71, 196, 234, 256, 283, 539, 542, 560, 566], "neural": [1, 7, 21, 43, 69, 167, 208, 209, 210, 213, 214, 217, 220, 223, 246, 247, 249, 251, 256, 263, 264, 266, 283, 290, 293, 295, 296, 297, 304, 305, 310, 320, 331, 415, 419, 443, 452, 488, 495, 507, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 559, 560, 564, 566, 568, 570, 571, 572, 573], "_": [1, 3, 4, 7, 184, 185, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 535, 542, 544, 545, 548, 549, 555, 556, 557, 559, 562, 563, 566, 567, 568, 569, 570, 572, 573], "compressor": [1, 2, 7, 43, 69, 208, 209, 210, 213, 214, 217, 220, 223, 246, 247, 249, 251, 256, 263, 264, 266, 290, 293, 295, 296, 297, 304, 305, 310, 320, 331, 415, 419, 443, 452, 488, 495, 507, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 559, 560, 562, 564, 566, 568, 570, 571, 572, 573], "sourc": [1, 6, 36, 38, 45, 71, 217, 256, 258, 266, 278, 299, 424, 554, 558, 564], "code": [1, 6, 7, 184, 185, 214, 256, 266, 274, 275, 278, 293, 296, 297, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 398, 403, 421, 439, 501, 502, 532, 533, 539, 540, 542, 544, 550, 552, 554, 555, 559, 560, 562, 564, 565, 566, 569, 570, 571, 572], "shown": [1, 2, 420, 536, 542, 549, 555, 559, 560, 572], "below": [1, 2, 4, 7, 78, 90, 98, 296, 333, 334, 535, 538, 542, 544, 549, 550, 555, 559, 560, 562, 565, 566, 570, 572], "arg": [1, 2, 3, 43, 69, 77, 127, 196, 197, 198, 234, 235, 236, 255, 256, 266, 278, 290, 295, 296, 297, 307, 308, 309, 314, 315, 316, 320, 328, 331, 335, 349, 364, 366, 368, 369, 370, 379, 381, 382, 384, 386, 389, 390, 394, 493, 501, 520, 539, 540, 542, 544, 557, 562, 566, 570, 571], "tune": [1, 4, 6, 7, 36, 38, 41, 43, 44, 69, 71, 176, 184, 185, 196, 198, 234, 236, 255, 256, 295, 297, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 370, 388, 395, 396, 403, 405, 409, 432, 462, 467, 477, 489, 497, 508, 512, 536, 539, 540, 544, 545, 552, 554, 556, 559, 562, 564, 567, 568, 569, 570, 573], "neural_compressor": [1, 2, 4, 6, 12, 537, 539, 540, 542, 544, 549, 550, 555, 556, 557, 558, 559, 560, 562, 565, 566, 567, 568, 571, 572, 573], "experiment": [1, 2, 4, 6, 12, 208, 297, 486, 537, 539, 540, 542, 544, 549, 556, 557, 558, 559, 560, 562, 565, 567, 568, 571], "import": [1, 2, 3, 4, 6, 165, 256, 266, 269, 349, 359, 537, 539, 540, 542, 544, 549, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 570, 571], "eval": [1, 3, 4, 44, 223, 256, 260, 266, 301, 570], "q_model": [1, 4, 69, 167, 256, 266, 539, 540, 544, 550, 555, 557, 558, 559, 566], "fit": [1, 4, 6, 176, 320, 332, 335, 539, 540, 542, 544, 550, 555, 557, 559, 560, 562, 563, 566], "save": [1, 2, 3, 7, 36, 38, 41, 44, 69, 71, 130, 198, 202, 207, 236, 240, 245, 251, 253, 270, 280, 296, 307, 308, 309, 311, 313, 314, 315, 336, 349, 350, 353, 359, 549, 550, 556, 557, 558, 562, 563, 566], "tuned_checkpoint": 1, "return": [1, 2, 3, 4, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 74, 77, 80, 81, 84, 85, 86, 87, 91, 92, 94, 98, 105, 109, 110, 114, 115, 116, 117, 118, 119, 127, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 167, 171, 172, 174, 178, 184, 185, 186, 188, 195, 198, 202, 205, 206, 207, 209, 210, 212, 213, 214, 215, 220, 224, 226, 233, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 282, 286, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 320, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 352, 353, 354, 358, 359, 377, 378, 380, 387, 388, 389, 390, 391, 393, 395, 396, 420, 423, 424, 425, 426, 457, 493, 496, 498, 500, 501, 502, 507, 510, 519, 520, 523, 540, 544, 555, 556, 557, 559, 566, 570, 572], "now": [1, 2, 213, 249, 505, 540, 544, 549, 558, 565, 571, 572], "support": [1, 2, 3, 38, 41, 44, 68, 69, 70, 71, 98, 105, 122, 184, 185, 186, 195, 196, 198, 202, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 220, 223, 224, 233, 234, 236, 240, 243, 244, 245, 246, 247, 249, 256, 263, 264, 266, 271, 272, 278, 281, 283, 284, 285, 286, 290, 292, 296, 304, 305, 310, 316, 320, 327, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 353, 354, 375, 440, 443, 445, 446, 448, 450, 451, 453, 459, 490, 498, 507, 536, 537, 545, 549, 558, 564, 567, 569, 572, 574], "auto": [1, 333, 359], "method": [1, 2, 3, 4, 6, 69, 130, 142, 159, 160, 171, 189, 194, 195, 196, 198, 202, 205, 206, 207, 210, 213, 216, 217, 227, 232, 233, 234, 236, 240, 243, 244, 245, 247, 249, 256, 263, 264, 269, 272, 278, 280, 281, 282, 286, 295, 304, 305, 307, 308, 309, 311, 313, 314, 315, 327, 328, 493, 498, 502, 519, 537, 539, 542, 543, 545, 555, 560, 562, 563, 566, 567, 571, 572], "avoid": [1, 196, 234, 570], "user": [1, 2, 3, 6, 7, 41, 70, 130, 176, 184, 185, 187, 190, 198, 201, 205, 206, 207, 213, 214, 220, 223, 236, 239, 243, 244, 245, 249, 255, 256, 269, 271, 283, 293, 295, 296, 297, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 359, 492, 542, 545, 548, 549, 552, 555, 556, 557, 558, 559, 560, 562, 564, 566, 567, 568, 570, 571, 572], "log": [1, 163, 283, 362, 377, 388, 391, 397, 403, 405, 406, 462, 493, 499, 500, 501, 502, 506, 520, 536, 569, 570, 572], "output": [1, 3, 4, 7, 12, 35, 45, 69, 71, 77, 83, 84, 94, 98, 109, 110, 116, 118, 123, 130, 133, 142, 159, 165, 178, 184, 185, 212, 215, 217, 218, 222, 248, 250, 251, 253, 255, 256, 257, 260, 264, 269, 270, 278, 290, 298, 301, 304, 305, 314, 320, 327, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 353, 377, 388, 391, 397, 403, 405, 406, 440, 450, 451, 452, 466, 470, 473, 493, 501, 508, 514, 536, 539, 542, 544, 548, 549, 550, 555, 557, 562, 565, 566, 570, 571, 572, 573], "fail": [1, 130, 502], "symbol": [1, 43, 171, 257, 298, 332, 557], "trace": [1, 69, 167, 171, 251, 253, 332], "info": [1, 36, 38, 41, 44, 69, 130, 207, 210, 211, 216, 217, 221, 253, 290, 296, 310, 320, 377, 378, 380, 387, 388, 391, 392, 396, 493, 496, 501, 507, 523, 536, 538, 549, 557], "entir": [1, 3, 4, 332, 562, 563], "conduct": 1, "combin": [1, 7, 41, 70, 184, 185, 209, 223, 246, 256, 296, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 545, 552, 560, 564, 567, 571, 572], "imper": 1, "control": [1, 36, 38, 41, 71, 110, 172, 174, 272, 403, 408, 536, 561, 572], "flow": [1, 2, 256, 261, 262, 283, 302, 303], "therefor": [1, 4, 563, 566, 568], "int8": [1, 4, 7, 36, 38, 41, 44, 68, 69, 70, 71, 160, 167, 175, 209, 246, 251, 252, 253, 336, 340, 341, 353, 354, 411, 535, 536, 540, 543, 548, 565, 566, 567, 568, 569, 570, 571, 572, 573], "consist": [1, 79, 87, 278, 536, 538, 572], "lot": [1, 545], "9": [1, 3, 4, 6, 271, 330, 553, 562, 563, 565, 573, 574], "higher": [1, 4, 184, 185, 281, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 542, 555, 556, 562, 563, 566, 569], "between": [1, 3, 7, 71, 160, 167, 175, 213, 215, 249, 261, 263, 264, 269, 271, 272, 302, 304, 305, 327, 340, 411, 519, 523, 537, 542, 549, 552, 555, 566, 568, 569, 571, 572], "don": [1, 35, 160, 175, 320, 498, 536, 572], "t": [1, 3, 7, 35, 91, 92, 94, 130, 159, 160, 175, 213, 216, 217, 249, 262, 271, 272, 276, 296, 303, 320, 498, 506, 536, 537, 539, 542, 544, 556, 562, 572, 573, 574], "need": [1, 4, 7, 35, 36, 38, 41, 43, 44, 69, 71, 76, 77, 78, 79, 82, 83, 86, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 151, 152, 156, 159, 176, 184, 185, 186, 194, 195, 198, 205, 206, 207, 213, 216, 217, 218, 219, 224, 232, 233, 236, 243, 244, 245, 249, 250, 256, 263, 264, 269, 276, 278, 283, 296, 304, 305, 308, 310, 313, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 526, 536, 537, 539, 540, 542, 544, 552, 556, 559, 562, 565, 566, 567, 568, 571, 572, 573], "becaus": [1, 213, 249, 260, 290, 301, 320, 562, 566, 571, 572], "modifi": [1, 80, 86, 94, 105, 198, 236, 293, 297, 331, 487, 536, 537, 544, 548, 573], "8": [1, 3, 4, 6, 133, 212, 248, 498, 548, 553, 559, 564, 574], "As": [1, 105, 260, 301, 536, 539, 542, 545, 562, 563, 572], "cannot": [1, 260, 301, 496, 547, 570], "handl": [1, 5, 84, 86, 165, 256, 269, 270, 271, 295, 498, 523, 524, 539], "tensor": [1, 3, 36, 38, 41, 43, 44, 45, 68, 69, 71, 94, 130, 142, 159, 165, 167, 213, 215, 249, 251, 252, 253, 278, 286, 287, 290, 292, 294, 313, 314, 315, 317, 320, 327, 328, 329, 340, 341, 353, 354, 400, 403, 411, 440, 540, 562, 566, 568, 570, 571, 572, 574], "iter": [1, 2, 4, 7, 36, 38, 41, 43, 44, 45, 69, 71, 165, 184, 185, 189, 194, 198, 199, 202, 207, 216, 217, 227, 232, 236, 237, 240, 245, 280, 292, 294, 327, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 353, 354, 377, 501, 508, 539, 542, 562, 563, 565, 570, 572, 573], "so": [1, 7, 142, 213, 249, 292, 349, 545, 547, 552, 555, 566, 567, 570, 571, 572], "might": [1, 536, 538, 572], "meet": [1, 6, 296, 336, 549, 559, 564, 565, 566, 570, 572], "failur": [1, 519], "sometim": [1, 130, 159, 562, 566], "order": [1, 12, 171, 257, 258, 278, 296, 298, 299, 333, 334, 340, 341, 440, 443, 452, 509, 555, 562, 565, 570, 572], "successfulli": [1, 544, 564], "suggest": [1, 278, 282, 569], "two": [1, 2, 117, 130, 167, 198, 202, 203, 207, 214, 236, 240, 241, 245, 260, 290, 294, 296, 301, 320, 327, 329, 359, 536, 537, 540, 542, 544, 548, 549, 555, 556, 560, 562, 566, 567, 569, 572, 573], "approach": [1, 2, 6, 69, 177, 256, 267, 268, 269, 278, 279, 280, 375, 508, 515, 542, 545, 552, 564, 565, 572, 573], "preprocess": [1, 196, 207, 210, 213, 234, 245, 247, 249, 250, 256, 278, 539, 544, 571], "here": [1, 3, 4, 6, 35, 94, 142, 260, 267, 278, 279, 301, 536, 540, 544, 548, 555, 559, 562, 566, 568, 569, 572], "non": [1, 3, 142, 220, 291, 561, 562, 572], "traceabl": [1, 69], "class": [1, 2, 3, 62, 136, 281, 326, 332, 434, 435, 537, 539, 540, 542, 545, 549, 555, 559, 560, 570, 572, 573], "name": [1, 3, 6, 36, 38, 44, 45, 68, 69, 71, 77, 86, 87, 91, 92, 94, 130, 135, 136, 152, 159, 165, 167, 172, 174, 178, 196, 197, 198, 201, 202, 205, 206, 207, 210, 211, 213, 214, 215, 217, 218, 220, 221, 222, 234, 235, 236, 239, 240, 243, 244, 245, 247, 249, 251, 252, 253, 259, 260, 263, 264, 269, 270, 272, 278, 283, 286, 290, 292, 294, 296, 300, 301, 304, 305, 310, 314, 315, 317, 320, 327, 328, 329, 350, 353, 359, 377, 381, 382, 384, 387, 388, 389, 390, 391, 393, 411, 420, 422, 440, 443, 445, 446, 452, 459, 460, 461, 462, 473, 486, 493, 496, 507, 509, 510, 531, 536, 537, 540, 544, 545, 548, 549, 554, 555, 557, 561, 568, 569, 570, 572, 573, 574], "select": [1, 2, 196, 234, 268, 272, 279, 328, 536, 552, 553, 563, 566, 570, 572], "object": [1, 2, 3, 6, 12, 36, 38, 41, 43, 44, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 124, 125, 128, 129, 130, 133, 136, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 167, 171, 172, 174, 176, 177, 178, 184, 185, 186, 187, 189, 190, 194, 196, 197, 198, 202, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 227, 232, 234, 235, 236, 240, 243, 244, 245, 247, 248, 249, 250, 253, 255, 256, 257, 260, 263, 264, 265, 268, 269, 271, 279, 280, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 304, 305, 308, 309, 310, 311, 314, 315, 317, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 350, 352, 353, 354, 358, 359, 375, 389, 390, 393, 395, 436, 498, 501, 507, 517, 519, 520, 524, 536, 537, 539, 540, 547, 555, 556, 557, 560, 565, 566, 571, 572], "pass": [1, 3, 4, 7, 101, 105, 165, 176, 212, 248, 276, 278, 293, 296, 297, 331, 359, 454, 506, 519, 520, 537, 539, 540, 542, 544, 550, 555, 559, 562, 565, 566, 567, 572, 573], "them": [1, 86, 130, 196, 234, 539, 548, 550, 560, 562, 572], "dict": [1, 36, 38, 41, 43, 44, 69, 71, 133, 135, 136, 142, 165, 167, 171, 177, 178, 184, 185, 195, 198, 214, 215, 220, 233, 236, 251, 252, 253, 256, 259, 260, 261, 262, 264, 267, 269, 272, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 297, 300, 301, 302, 303, 305, 309, 314, 317, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 350, 352, 353, 358, 359, 360, 362, 365, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 416, 417, 420, 428, 437, 440, 447, 455, 456, 457, 459, 461, 462, 463, 464, 469, 473, 476, 477, 478, 479, 481, 483, 484, 486, 493, 494, 496, 498, 500, 501, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 523, 524, 526, 528, 530, 531, 533, 555, 565, 570, 572], "These": [1, 3, 552], "function": [1, 2, 4, 7, 38, 41, 44, 71, 86, 130, 159, 184, 185, 197, 223, 235, 255, 256, 267, 278, 279, 280, 283, 293, 296, 297, 313, 331, 333, 334, 336, 337, 338, 340, 341, 342, 350, 353, 536, 537, 539, 542, 550, 552, 553, 555, 556, 562, 563, 566, 569, 570, 572], "If": [1, 86, 91, 92, 94, 98, 105, 130, 184, 185, 198, 213, 236, 249, 260, 272, 290, 291, 292, 301, 320, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 536, 538, 540, 544, 549, 553, 554, 555, 556, 559, 560, 566, 569, 570, 571, 572], "conv2d": [1, 3, 41, 70, 84, 85, 89, 90, 95, 96, 160, 307, 308, 309, 313, 314, 315, 548, 570], "won": 1, "detect": [1, 69, 167, 171, 260, 264, 301, 305, 310, 440, 443, 452, 507, 536], "maskrcnn": 1, "tool": [1, 6, 7, 165, 359, 539, 549, 554, 564, 566], "test": [1, 6, 45, 213, 249, 269, 536, 538, 553, 574], "net": [1, 3], "py": [1, 2, 3, 7, 130, 165, 167, 258, 260, 261, 262, 292, 299, 301, 302, 303, 327, 523, 536, 544, 553, 558, 566, 568, 570], "prepare_custom_config_dict": 1, "non_traceable_module_class": 1, "anchorgener": 1, "rpnpostprocessor": 1, "pooler": 1, "postprocessor": 1, "maskrcnnfpnfeatureextractor": 1, "maskpostprocessor": 1, "fpn": 1, "rpnhead": 1, "decor": [1, 2, 7, 36, 62, 91, 92, 94, 165, 172, 174, 207, 210, 213, 220, 245, 247, 249, 263, 264, 281, 286, 290, 292, 294, 304, 305, 316, 320, 326, 327, 329, 343, 359, 503, 572], "wrap": [1, 71, 136, 142, 215, 260, 301, 371, 544], "untrac": 1, "part": [1, 45, 250, 256, 260, 290, 292, 301, 320, 327, 328, 539, 542, 549, 553, 556, 562], "like": [1, 2, 7, 36, 38, 41, 44, 69, 71, 98, 121, 123, 130, 159, 165, 184, 185, 186, 198, 202, 207, 224, 236, 240, 245, 255, 256, 264, 270, 292, 295, 296, 305, 307, 308, 309, 313, 314, 315, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 536, 538, 542, 545, 549, 552, 558, 560, 562, 566, 572], "global": [1, 135, 290, 320, 327, 330, 520, 565, 572], "want": [1, 7, 91, 92, 94, 130, 194, 196, 232, 234, 292, 327, 349, 536, 537, 540, 544, 555, 559, 560, 569, 570, 572], "move": [1, 71, 565, 568], "out": [1, 6, 159, 196, 197, 198, 234, 235, 236, 255, 256, 278, 290, 295, 313, 320, 538, 540, 565, 566], "keep": [1, 7, 290, 291, 320, 330, 568], "should": [1, 2, 3, 7, 38, 41, 44, 45, 69, 70, 71, 78, 98, 135, 136, 160, 164, 184, 185, 194, 196, 198, 202, 207, 212, 213, 217, 218, 232, 234, 236, 240, 245, 248, 249, 253, 258, 263, 264, 292, 296, 299, 304, 305, 320, 327, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 420, 498, 536, 540, 544, 555, 559, 563, 566, 571, 572, 573], "try": [1, 194, 232, 440, 443, 452, 520, 566], "must": [1, 213, 249, 260, 264, 301, 305, 549, 553, 571, 572], "ssd": [1, 574], "resnet34": [1, 574], "ptq": [1, 544, 552, 566, 570], "python": [1, 9, 99, 142, 165, 198, 217, 236, 256, 260, 301, 359, 459, 536, 538, 540, 544, 553, 564, 567, 571], "r34": 1, "def": [1, 2, 3, 4, 7, 91, 92, 94, 152, 184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 540, 542, 544, 555, 559, 562, 566, 570, 572], "bboxes_labels_scor": 1, "bbox": [1, 260, 301, 555], "prob": 1, "criteria": [1, 255, 256, 283, 290, 292, 295, 297, 318, 572], "0": [1, 3, 4, 6, 9, 36, 38, 41, 45, 68, 69, 70, 77, 115, 159, 165, 173, 181, 186, 188, 191, 192, 193, 195, 196, 199, 200, 203, 209, 213, 215, 216, 217, 224, 226, 229, 230, 231, 233, 234, 237, 238, 241, 246, 249, 251, 253, 255, 256, 264, 269, 271, 272, 276, 278, 281, 283, 290, 295, 297, 305, 320, 329, 330, 493, 501, 536, 537, 539, 540, 542, 544, 545, 548, 554, 555, 556, 559, 561, 562, 563, 565, 566, 569, 570, 571, 572, 573], "45": [1, 271, 574], "max_output": 1, "200": [1, 212, 248, 572, 574], "box": [1, 213, 249, 260, 264, 301, 305, 536, 555, 570, 571, 572], "label": [1, 12, 36, 38, 71, 184, 185, 196, 198, 199, 200, 201, 204, 209, 213, 215, 217, 218, 234, 236, 237, 238, 239, 242, 246, 249, 257, 259, 263, 264, 269, 270, 298, 300, 304, 305, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 428, 540, 555, 562, 571], "score": [1, 12, 257, 258, 260, 261, 262, 264, 277, 290, 292, 298, 299, 301, 302, 303, 305, 317, 320, 327, 328, 555, 559, 562, 563, 569, 572], "zip": 1, "split": [1, 159, 212, 213, 248, 249, 269, 571], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 171, 296, 335, 559, 560], "process": [2, 4, 7, 36, 38, 41, 44, 69, 71, 136, 167, 184, 185, 196, 197, 198, 207, 209, 210, 213, 214, 223, 234, 235, 236, 245, 246, 247, 249, 250, 251, 253, 256, 267, 268, 271, 277, 279, 280, 283, 290, 292, 293, 294, 296, 297, 320, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 374, 455, 456, 459, 489, 493, 497, 500, 501, 508, 536, 537, 539, 540, 542, 543, 544, 549, 560, 562, 563, 566, 570, 571, 572, 573], "autom": 2, "design": [2, 142, 195, 217, 218, 223, 233, 256, 271, 295, 304, 305, 562, 563, 566], "artifici": 2, "network": [2, 3, 6, 167, 269, 272, 292, 317, 320, 536, 542, 543, 564, 566], "ann": 2, "ha": [2, 7, 12, 36, 38, 41, 44, 69, 71, 86, 87, 91, 92, 94, 98, 117, 130, 142, 159, 214, 256, 257, 271, 290, 292, 298, 320, 327, 333, 334, 536, 539, 549, 552, 556, 563, 565, 566, 567, 569], "been": [2, 12, 87, 212, 248, 257, 271, 290, 292, 298, 320, 327, 536, 542, 549, 556], "par": 2, "outperform": 2, "hand": [2, 260, 301, 536], "simplest": [2, 542], "launcher": [2, 542, 562], "configur": [2, 3, 7, 35, 36, 38, 41, 43, 44, 69, 70, 71, 130, 171, 176, 177, 181, 184, 185, 187, 190, 198, 201, 207, 214, 236, 239, 250, 251, 253, 255, 256, 260, 266, 267, 268, 269, 271, 279, 280, 283, 291, 293, 295, 296, 297, 301, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 388, 398, 400, 403, 462, 464, 469, 473, 476, 489, 491, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 522, 524, 536, 537, 540, 543, 555, 559, 568, 571, 574], "agent": 2, "path": [2, 3, 7, 36, 38, 41, 44, 69, 71, 159, 165, 176, 177, 196, 197, 198, 213, 234, 235, 236, 249, 250, 251, 253, 255, 256, 266, 267, 268, 269, 272, 279, 280, 283, 291, 293, 295, 296, 297, 309, 311, 314, 315, 330, 331, 332, 349, 359, 360, 365, 377, 380, 387, 388, 391, 397, 398, 403, 405, 406, 420, 426, 437, 440, 443, 445, 446, 448, 450, 451, 452, 453, 457, 464, 469, 473, 476, 477, 483, 493, 501, 505, 507, 508, 517, 532, 536, 537, 539, 540, 542, 544, 549, 550, 555, 557, 558, 562, 571, 572, 573], "syntax": [2, 548], "note": [2, 3, 6, 36, 38, 41, 44, 69, 71, 78, 260, 293, 297, 301, 320, 331, 335, 336, 393, 403, 407, 536, 537, 544, 545, 548, 549, 562, 566, 570, 572, 573, 574], "dyna": [2, 256, 269, 270, 271, 272, 273, 279, 297, 552, 565], "section": [2, 536, 542, 562, 565, 573], "option": [2, 36, 38, 41, 44, 69, 71, 130, 159, 181, 184, 185, 186, 196, 213, 215, 224, 234, 249, 251, 253, 256, 260, 266, 271, 272, 278, 290, 296, 297, 301, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 359, 365, 376, 377, 378, 380, 387, 388, 391, 393, 395, 396, 398, 403, 408, 411, 440, 447, 450, 451, 452, 457, 466, 470, 476, 477, 479, 484, 493, 494, 498, 501, 505, 507, 508, 510, 513, 515, 517, 526, 532, 537, 539, 540, 545, 548, 549, 556, 571, 572, 573], "requir": [2, 3, 4, 7, 133, 142, 223, 256, 260, 272, 296, 301, 309, 314, 336, 361, 363, 371, 374, 427, 433, 440, 443, 445, 452, 458, 465, 466, 467, 468, 470, 471, 472, 474, 475, 480, 485, 489, 536, 537, 539, 543, 544, 548, 549, 553, 556, 557, 561, 563, 566, 568, 570, 572, 573], "search_algorithm": [2, 177, 256, 279, 280, 297], "nsga2": [2, 271], "seed": [2, 165, 269, 271, 282, 517, 539, 545, 572, 573], "42": [2, 282, 561, 574], "supernet": [2, 271, 272, 274, 275], "ofa_mbv3_d234_e346_k357_w1": 2, "metric": [2, 6, 7, 10, 12, 36, 38, 41, 44, 69, 71, 184, 185, 214, 217, 250, 255, 256, 266, 267, 268, 270, 272, 279, 280, 281, 282, 283, 295, 296, 297, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 371, 375, 380, 385, 398, 401, 403, 408, 432, 489, 497, 500, 504, 507, 508, 510, 526, 536, 537, 539, 544, 549, 556, 569, 570, 572, 573, 574], "acc": [2, 3, 41, 44, 264, 272, 305, 316, 570, 574], "mac": [2, 268, 270, 272, 277, 279], "popul": [2, 271], "50": [2, 260, 262, 271, 301, 303, 549, 574], "num_ev": [2, 271], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 269, 272, 507, 536], "batch_siz": [2, 3, 186, 188, 191, 192, 193, 194, 195, 196, 197, 216, 217, 224, 226, 229, 230, 231, 232, 233, 234, 235, 251, 253, 272, 277, 365, 377, 388, 486, 508, 537, 539, 540, 544, 549, 550, 566], "64": [2, 3, 213, 249, 571, 574], "dataset_path": [2, 272, 277, 508], "dataset": [2, 4, 6, 7, 14, 36, 38, 41, 44, 69, 71, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 207, 216, 217, 224, 226, 227, 229, 230, 231, 232, 233, 245, 255, 256, 260, 261, 262, 264, 266, 272, 295, 296, 297, 301, 302, 303, 305, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 377, 385, 388, 391, 398, 403, 407, 408, 409, 420, 432, 505, 507, 508, 509, 537, 539, 544, 545, 549, 555, 566, 572, 573, 574], "imagenet": [2, 4, 198, 201, 209, 236, 239, 246, 272, 570, 571, 573, 574], "ilsvrc2012": [2, 272], "also": [2, 3, 6, 7, 12, 195, 198, 202, 207, 213, 233, 236, 240, 245, 249, 257, 298, 320, 332, 536, 537, 538, 539, 542, 549, 552, 555, 559, 560, 562, 566, 567, 572], "nasconfig": [2, 177, 256, 268, 279, 280], "argument": [2, 276, 278, 293, 296, 297, 331, 361, 466, 470, 475, 481, 493, 501, 520, 537, 542, 549], "config": [2, 41, 43, 44, 69, 70, 71, 133, 135, 136, 142, 176, 184, 185, 196, 214, 223, 234, 255, 256, 269, 277, 280, 283, 290, 291, 292, 293, 294, 297, 317, 320, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 352, 358, 359, 360, 361, 364, 365, 366, 368, 370, 373, 397, 403, 405, 406, 410, 411, 455, 457, 464, 466, 469, 470, 473, 475, 476, 483, 486, 489, 497, 507, 510, 511, 512, 513, 517, 518, 520, 528, 530, 533, 536, 540, 542, 544, 549, 552, 557, 562, 565, 567, 570, 572], "under": [2, 3, 130, 142, 198, 236, 358, 536, 540, 549, 554, 555, 560, 562, 566, 570, 572], "file": [2, 7, 69, 159, 165, 176, 177, 184, 185, 196, 197, 198, 201, 212, 213, 222, 234, 235, 236, 239, 248, 249, 250, 253, 255, 256, 260, 266, 267, 268, 269, 270, 272, 279, 280, 283, 291, 293, 295, 296, 297, 301, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 364, 365, 366, 367, 368, 369, 370, 420, 457, 466, 470, 477, 493, 500, 501, 506, 507, 508, 520, 524, 528, 530, 532, 533, 536, 540, 544, 547, 549, 550, 554, 555, 557, 559, 562, 565, 570, 571, 572], "input": [2, 7, 36, 38, 43, 45, 68, 69, 71, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 111, 114, 115, 124, 125, 127, 128, 129, 130, 135, 136, 142, 159, 165, 167, 171, 184, 185, 196, 197, 198, 200, 209, 212, 213, 215, 217, 218, 223, 234, 235, 236, 238, 246, 248, 249, 250, 251, 252, 253, 255, 256, 260, 265, 272, 276, 278, 283, 296, 301, 304, 305, 310, 313, 314, 315, 320, 327, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 361, 371, 393, 397, 398, 400, 403, 404, 405, 406, 407, 440, 443, 450, 451, 452, 454, 466, 470, 475, 481, 505, 508, 514, 536, 539, 540, 542, 544, 548, 549, 550, 555, 556, 557, 562, 565, 566, 570, 571, 573], "aim": [2, 539, 563, 572], "accord": [2, 7, 43, 71, 142, 184, 196, 197, 198, 207, 210, 213, 234, 235, 236, 245, 247, 249, 256, 278, 294, 295, 315, 320, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 506, 540, 544, 562, 563, 567, 571, 572], "pleas": [2, 4, 5, 6, 7, 130, 167, 196, 197, 198, 201, 234, 235, 236, 239, 290, 292, 293, 297, 317, 320, 331, 536, 540, 543, 544, 553, 555, 556, 559, 562, 563, 567, 568, 569], "regist": [2, 7, 36, 62, 172, 174, 198, 202, 205, 206, 207, 210, 213, 215, 220, 223, 236, 240, 243, 244, 245, 247, 249, 250, 256, 263, 264, 281, 282, 283, 284, 285, 286, 290, 292, 294, 304, 305, 316, 317, 320, 326, 327, 328, 329, 335, 343, 537, 540, 544, 555, 559, 572], "__new__": 2, "self": [2, 3, 7, 87, 117, 256, 260, 283, 292, 301, 335, 520, 536, 540, 552, 555, 559, 569, 570, 572], "conf_fname_or_obj": [2, 176, 214, 223, 250, 255, 256, 265, 266, 267, 268, 279, 280, 283, 295, 296, 297], "kwarg": [2, 68, 69, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 198, 207, 210, 211, 213, 217, 218, 221, 236, 249, 255, 256, 266, 272, 278, 293, 295, 296, 297, 304, 305, 307, 308, 309, 311, 313, 314, 315, 330, 331, 332, 349, 358, 359, 364, 366, 368, 369, 370, 379, 381, 382, 384, 386, 389, 390, 394], "current": [2, 3, 7, 38, 41, 44, 70, 71, 86, 94, 98, 130, 135, 256, 266, 272, 290, 292, 293, 294, 297, 317, 320, 327, 329, 331, 335, 536, 544, 545, 548, 555, 559, 562, 566, 572], "built": [2, 7, 99, 142, 187, 192, 196, 197, 202, 204, 206, 207, 209, 210, 213, 217, 218, 220, 225, 228, 230, 234, 235, 240, 242, 244, 245, 246, 247, 249, 296, 304, 305, 537, 544, 559, 571, 572, 573], "inherit": [2, 7, 38, 41, 44, 69, 70, 71, 193, 213, 215, 223, 231, 249, 256, 292, 294, 327, 329, 539], "base": [2, 7, 12, 36, 38, 41, 43, 44, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 133, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 260, 263, 264, 265, 267, 268, 269, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 290, 292, 294, 295, 296, 297, 298, 301, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 327, 328, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 350, 353, 354, 359, 364, 365, 366, 368, 369, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 415, 416, 417, 419, 422, 424, 425, 428, 438, 440, 443, 445, 447, 448, 450, 451, 452, 453, 461, 464, 469, 473, 476, 486, 490, 492, 494, 496, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 520, 521, 523, 525, 529, 530, 540, 543, 544, 545, 548, 561, 563, 569, 570, 572, 574], "nasbas": [2, 267, 268, 279, 280], "interfac": [2, 6, 38, 41, 44, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 187, 190, 207, 255, 256, 271, 272, 283, 295, 296, 316, 330, 352, 353, 354, 360, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 473, 476, 483, 495, 552, 566, 568], "own": [2, 38, 41, 44, 69, 70, 71, 98, 194, 213, 232, 249, 536, 539, 540, 552, 555, 559, 569, 572], "just": [2, 3, 4, 35, 186, 207, 210, 211, 213, 216, 217, 218, 219, 221, 224, 249, 549, 560, 566, 571, 572], "nas_registri": [2, 281], "well": [2, 3, 35, 184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 540, 566, 568, 573], "wai": [2, 197, 198, 201, 235, 236, 239, 536, 539, 540, 555, 560, 562, 563, 566, 572, 573], "__init__": [2, 3, 7, 540, 555, 559, 572], "search_spac": [2, 177, 267, 279, 280, 281, 282], "none": [2, 3, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 87, 114, 130, 136, 142, 159, 165, 167, 171, 176, 177, 178, 181, 184, 185, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 209, 213, 214, 215, 216, 217, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 249, 250, 251, 253, 255, 256, 257, 260, 263, 264, 265, 266, 267, 269, 271, 272, 276, 278, 279, 280, 283, 287, 291, 295, 296, 297, 298, 301, 304, 305, 311, 314, 315, 316, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 352, 353, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 378, 379, 380, 381, 382, 384, 386, 388, 389, 390, 392, 394, 397, 398, 399, 402, 403, 406, 408, 409, 410, 425, 440, 443, 445, 452, 457, 459, 464, 466, 469, 470, 473, 475, 476, 477, 478, 482, 483, 486, 488, 491, 493, 494, 496, 499, 501, 502, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 524, 532, 540, 555, 566, 570, 571, 572], "model_build": [2, 267, 279, 280], "initi": [2, 3, 68, 136, 165, 184, 185, 193, 196, 215, 223, 231, 234, 250, 256, 267, 268, 279, 280, 291, 292, 296, 313, 327, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 376, 398, 399, 408, 457, 486, 488, 496, 508, 539, 540, 549, 555, 556, 562, 563, 572], "select_model_arch": [2, 268, 279, 280], "propos": [2, 7, 280, 320, 542, 556, 562, 572], "algorithm": [2, 6, 7, 12, 43, 177, 212, 248, 257, 264, 267, 271, 279, 280, 282, 298, 305, 340, 341, 353, 354, 542, 548, 552, 562, 563, 566, 570, 572, 573], "next": [2, 184, 189, 227, 254, 280, 294, 329, 333, 334, 335, 337, 338, 340, 341, 342, 343, 536, 556, 565, 572], "res_save_path": [2, 280], "estim": [2, 3, 4, 167, 264, 267, 268, 272, 279, 280, 305, 314, 572], "pragma": 2, "cover": [2, 538, 550, 564], "perform": [2, 4, 6, 7, 86, 121, 176, 196, 208, 209, 212, 214, 234, 246, 248, 255, 256, 267, 268, 270, 272, 279, 280, 283, 295, 297, 316, 327, 328, 336, 364, 378, 388, 397, 403, 405, 491, 500, 508, 510, 517, 526, 536, 537, 539, 541, 543, 549, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 572, 573, 574], "depend": [2, 36, 38, 43, 71, 86, 184, 185, 214, 256, 267, 279, 280, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 538, 547, 548, 549, 565, 572], "load_search_result": [2, 280], "load": [2, 3, 36, 38, 196, 198, 212, 213, 234, 236, 248, 249, 260, 270, 280, 301, 314, 332, 358, 359, 481, 507, 508, 539, 565, 566], "exist": [2, 31, 77, 159, 178, 214, 215, 260, 280, 301, 313, 314, 378, 397, 403, 405, 406, 443, 491, 506, 507, 549, 555, 562, 572], "dump_search_result": [2, 280], "find_best_model_arch": [2, 280], "find": [2, 6, 7, 68, 91, 92, 94, 165, 264, 280, 281, 305, 313, 335, 359, 457, 523, 536, 562, 569, 570, 572], "pareto": [2, 280, 281], "front": [2, 280, 281], "setter": [2, 216, 217], "A": [2, 3, 6, 38, 44, 69, 71, 78, 80, 94, 98, 99, 130, 133, 135, 136, 142, 159, 165, 171, 198, 202, 207, 212, 213, 216, 217, 218, 219, 236, 240, 245, 248, 249, 250, 256, 257, 260, 261, 262, 264, 267, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 297, 298, 301, 302, 303, 304, 305, 308, 310, 317, 320, 327, 328, 329, 330, 331, 335, 539, 546, 548, 555, 557, 562, 564, 571, 572, 573], "callabl": [2, 181, 262, 297, 303, 349, 507, 523, 524], "our": [2, 3, 6, 160], "leverag": [2, 99, 542, 549, 560, 566], "grid": [2, 282], "random": [2, 79, 159, 165, 209, 213, 246, 249, 269, 282, 335, 517, 545, 565, 571, 573], "bayesian": [2, 282, 554, 565], "optim": [2, 3, 4, 6, 10, 44, 69, 77, 81, 84, 85, 87, 98, 99, 109, 110, 116, 117, 118, 119, 136, 159, 181, 217, 223, 250, 255, 256, 270, 282, 292, 293, 295, 297, 317, 327, 328, 330, 331, 349, 350, 353, 360, 362, 366, 368, 385, 389, 390, 395, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 411, 412, 413, 414, 415, 418, 419, 432, 483, 489, 490, 500, 505, 508, 511, 515, 522, 527, 542, 544, 548, 552, 553, 554, 557, 561, 562, 564, 565, 566, 567, 569, 570, 572, 573], "given": [2, 35, 43, 44, 45, 71, 91, 92, 94, 135, 136, 165, 212, 213, 248, 249, 260, 301, 313, 320, 327, 332, 420, 426, 440, 443, 445, 446, 448, 450, 451, 453, 494, 507, 520, 539, 562, 563, 571], "train": [2, 3, 6, 7, 36, 38, 41, 44, 69, 71, 86, 142, 184, 185, 196, 198, 213, 223, 234, 236, 249, 250, 256, 266, 267, 269, 270, 277, 279, 283, 292, 293, 295, 296, 297, 327, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 515, 535, 540, 542, 543, 549, 552, 556, 558, 560, 562, 563, 564, 572, 573, 574], "evalu": [2, 3, 4, 7, 12, 36, 38, 41, 44, 69, 71, 176, 184, 185, 196, 214, 234, 250, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 271, 272, 279, 280, 283, 292, 293, 296, 297, 298, 301, 302, 303, 304, 305, 327, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 352, 364, 366, 368, 370, 371, 489, 497, 508, 512, 539, 540, 542, 549, 550, 552, 555, 556, 558, 559, 562, 566, 569, 570, 572, 573], "potenti": 2, "after": [2, 3, 4, 43, 45, 69, 171, 196, 209, 213, 216, 217, 223, 234, 246, 249, 250, 251, 253, 256, 269, 290, 292, 293, 294, 297, 317, 320, 327, 328, 329, 331, 340, 494, 536, 537, 539, 540, 542, 552, 555, 558, 559, 560, 562, 566, 567, 569, 570, 571, 572], "sever": [2, 3, 159, 213, 249, 294, 329, 536, 542, 552, 556, 562, 563, 565, 571, 573], "procedur": [2, 177, 320, 572], "lie": [2, 280], "through": [2, 3, 167, 184, 185, 212, 248, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 548, 550, 552, 553, 555, 559, 560, 565, 569], "basic_na": [2, 256, 279, 297], "basicna": [2, 267, 279], "compon": [2, 6, 9, 250, 256, 267, 279, 283, 295, 296, 297, 349, 489, 523, 526, 538, 539, 544, 554, 560, 561, 572], "super": [2, 3, 4, 262, 269, 272, 303, 559], "predictor": [2, 268, 269, 270, 272, 279], "predict": [2, 3, 12, 165, 213, 217, 218, 249, 257, 261, 262, 263, 264, 270, 272, 298, 302, 303, 304, 305, 542, 555, 570, 571], "4x": [2, 3, 566], "more": [2, 3, 4, 5, 6, 86, 159, 165, 184, 213, 249, 260, 276, 278, 290, 301, 320, 333, 336, 343, 536, 540, 542, 544, 549, 552, 553, 555, 556, 559, 560, 562, 563, 567, 572, 574], "sampl": [2, 6, 101, 127, 186, 189, 194, 196, 197, 198, 202, 207, 209, 213, 224, 227, 232, 234, 235, 236, 240, 245, 246, 249, 263, 264, 281, 304, 305, 335, 388, 443, 508, 539, 540, 552, 566, 571, 572, 573, 574], "effici": [2, 539, 542, 560, 564], "than": [2, 3, 4, 78, 86, 176, 196, 213, 234, 249, 260, 301, 540, 550, 555, 559, 560, 562, 566, 569, 571], "typic": [2, 86, 135, 142, 256, 266, 296, 543, 562, 563], "one": [2, 6, 7, 12, 71, 130, 135, 152, 187, 190, 207, 213, 223, 249, 256, 257, 260, 263, 264, 266, 269, 290, 293, 294, 297, 298, 301, 304, 305, 320, 329, 331, 349, 502, 536, 539, 542, 543, 544, 548, 549, 552, 553, 555, 556, 559, 560, 562, 563, 565, 566, 568, 571, 572], "shot": [2, 6, 223, 256, 292, 294, 317, 329, 552, 562, 563, 564, 572], "figur": [2, 562], "first": [2, 3, 4, 7, 45, 71, 117, 160, 175, 178, 196, 212, 234, 248, 250, 256, 260, 301, 336, 420, 536, 540, 549, 553, 556, 565, 566, 567, 569, 570, 572, 573], "phase": [2, 172, 174, 296, 297, 327, 331, 562, 566, 567, 572], "small": [2, 4, 260, 301, 536, 572], "sub": [2, 69, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 214, 253, 256, 272, 537], "randomli": [2, 213, 249, 282, 335, 571, 572], "valid": [2, 7, 36, 38, 41, 69, 70, 71, 78, 130, 159, 198, 236, 260, 272, 291, 292, 301, 314, 320, 327, 330, 459, 524, 540, 542, 548, 552, 554, 562, 563, 566, 568], "measur": [2, 7, 36, 38, 41, 44, 69, 71, 165, 214, 271, 272, 277, 316, 526, 537, 542, 549, 555, 558, 570, 572], "provid": [2, 7, 130, 142, 184, 185, 207, 210, 213, 223, 245, 247, 249, 255, 256, 260, 269, 278, 283, 295, 296, 301, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 420, 440, 446, 493, 502, 526, 535, 536, 537, 538, 539, 543, 544, 545, 546, 552, 553, 556, 557, 565, 566, 570, 573, 574], "inner": 2, "loop": [2, 4, 316, 349, 548, 569, 572], "multi": [2, 98, 214, 256, 260, 271, 276, 278, 301, 371, 539, 540, 552, 559, 562, 572], "evolutionari": 2, "extens": [2, 7, 69, 296, 446, 507, 548, 552, 556, 557, 564, 572, 573], "cycl": [2, 539], "continu": [2, 260, 290, 301, 320, 336, 562], "until": [2, 549, 572], "conclud": 2, "count": [2, 3, 43, 280, 540, 572], "met": [2, 185, 336, 343, 548, 556, 566, 570, 572], "create_acc_predictor": [2, 268, 279], "accuraci": [2, 3, 4, 6, 69, 176, 184, 185, 214, 250, 255, 256, 264, 268, 269, 270, 272, 279, 283, 295, 297, 305, 316, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 364, 378, 388, 397, 403, 405, 476, 500, 505, 508, 510, 526, 536, 537, 539, 543, 544, 545, 549, 555, 556, 558, 559, 560, 562, 563, 564, 565, 568, 569, 570, 572, 573, 574], "create_macs_predictor": [2, 268, 279], "create_latency_predictor": [2, 268, 279], "latenc": [2, 268, 269, 270, 272, 277, 279, 505, 549, 569, 572], "mobilenetv3": [2, 271, 272], "lt": [2, 275, 540, 561], "wmt": 2, "en": 2, "de": 2, "static": [3, 4, 7, 69, 130, 159, 254, 269, 296, 332, 371, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 440, 443, 445, 446, 448, 450, 451, 452, 453, 463, 477, 479, 484, 486, 491, 493, 498, 500, 505, 506, 508, 520, 524, 531, 532, 552, 572, 574], "quantiz": [3, 7, 21, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 113, 117, 119, 121, 127, 133, 135, 136, 139, 141, 142, 152, 167, 171, 176, 184, 185, 209, 216, 217, 223, 246, 251, 253, 254, 255, 256, 266, 296, 297, 313, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 353, 354, 358, 359, 370, 375, 403, 405, 411, 489, 497, 508, 512, 536, 537, 539, 540, 544, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 564, 568, 570, 571, 572, 573], "involv": 3, "weight": [3, 4, 6, 7, 36, 38, 68, 69, 71, 84, 85, 86, 142, 159, 160, 167, 175, 251, 253, 263, 264, 278, 287, 290, 292, 294, 304, 305, 314, 315, 317, 320, 327, 328, 329, 416, 517, 535, 536, 543, 548, 550, 555, 559, 562, 563, 565, 566, 570, 572, 573, 574], "float": [3, 4, 12, 36, 38, 41, 44, 68, 69, 71, 130, 159, 167, 196, 209, 234, 246, 257, 258, 260, 261, 262, 269, 271, 272, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 314, 315, 320, 327, 328, 329, 331, 335, 362, 378, 387, 395, 396, 411, 417, 472, 477, 493, 494, 498, 500, 505, 507, 508, 515, 517, 518, 526, 535, 540, 545, 555, 565, 566, 571], "int": [3, 36, 38, 41, 43, 44, 69, 71, 130, 159, 165, 186, 195, 196, 197, 209, 213, 224, 233, 234, 235, 246, 249, 251, 253, 258, 260, 264, 269, 271, 272, 281, 299, 301, 305, 316, 320, 365, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 402, 403, 404, 405, 406, 407, 408, 410, 454, 486, 493, 494, 496, 498, 499, 500, 501, 502, 507, 508, 510, 515, 517, 520, 532, 540, 555, 562, 565, 571], "feed": [3, 36, 38, 69, 165, 195, 233, 375, 542], "batch": [3, 4, 36, 38, 41, 43, 71, 86, 135, 186, 188, 189, 194, 195, 216, 217, 223, 224, 226, 227, 232, 233, 256, 272, 276, 278, 283, 349, 377, 388, 505, 536, 539, 542, 549, 562, 571, 572, 574], "data": [3, 6, 7, 10, 36, 38, 41, 43, 44, 45, 68, 69, 71, 79, 127, 130, 159, 165, 167, 171, 176, 184, 185, 214, 215, 216, 217, 251, 253, 254, 256, 272, 277, 290, 296, 297, 313, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 360, 362, 365, 371, 372, 373, 375, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 420, 436, 437, 440, 443, 447, 452, 455, 456, 457, 459, 462, 464, 469, 473, 476, 478, 483, 486, 493, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 523, 528, 530, 531, 533, 536, 539, 540, 544, 545, 548, 549, 553, 555, 556, 566, 567, 569, 570, 571, 572], "comput": [3, 4, 12, 68, 71, 86, 142, 167, 223, 250, 256, 257, 258, 260, 261, 262, 264, 270, 298, 299, 301, 302, 303, 305, 543, 555, 556, 562, 563, 566, 572], "distribut": [3, 6, 43, 160, 175, 186, 188, 189, 191, 192, 193, 194, 195, 216, 217, 224, 226, 227, 229, 230, 231, 232, 233, 250, 256, 283, 496, 542, 553, 566, 568, 572, 574], "activ": [3, 4, 6, 7, 36, 38, 41, 44, 45, 69, 71, 148, 167, 222, 251, 253, 340, 341, 416, 535, 536, 543, 545, 548, 561, 565, 566, 570, 572, 573], "done": [3, 4, 542, 558, 562, 566], "observ": [3, 545, 569, 570, 572], "point": [3, 4, 45, 68, 209, 246, 261, 262, 281, 302, 303, 316, 335, 535, 545, 555, 566, 571, 572], "how": [3, 5, 7, 213, 249, 250, 256, 271, 272, 290, 317, 320, 536, 537, 538, 540, 542, 544, 550, 562, 563, 566, 571, 572, 573], "infer": [3, 4, 6, 7, 43, 45, 152, 159, 255, 256, 295, 314, 332, 535, 539, 542, 549, 556, 559, 562, 563, 564, 566, 570, 572], "time": [3, 4, 165, 213, 249, 264, 276, 305, 316, 335, 359, 494, 500, 501, 505, 520, 544, 547, 559, 562, 563, 564, 566, 569, 570, 571, 572], "simpl": [3, 6, 213, 249, 536, 553, 569, 572], "techniqu": [3, 4, 6, 256, 552, 560, 562, 563, 565, 566, 573], "would": [3, 130, 538, 549, 556, 563, 566], "simpli": [3, 292, 544, 557], "divid": [3, 572], "rang": [3, 4, 7, 199, 200, 213, 237, 238, 249, 260, 269, 301, 349, 540, 542, 544, 545, 562, 566, 571], "256": [3, 203, 209, 241, 246, 537, 539, 540, 544, 571, 572, 574], "sophist": 3, "addit": [3, 86, 94, 171, 184, 349, 493, 536, 542, 549, 568], "step": [3, 4, 36, 38, 41, 71, 117, 223, 256, 290, 292, 293, 294, 297, 316, 317, 320, 327, 328, 329, 331, 349, 536, 538, 542, 543, 544, 556, 562, 563, 565, 567, 569, 570, 572], "allow": [3, 4, 220, 335, 524, 536, 537, 542, 544, 545, 549, 555, 556, 565, 572, 573], "u": [3, 94, 160, 175], "instead": [3, 177, 178, 195, 233, 359], "back": [3, 36, 38, 41, 44, 69, 71, 142, 213, 249, 269], "everi": [3, 7, 41, 70, 91, 92, 94, 290, 292, 293, 297, 320, 327, 331, 562, 572], "signific": [3, 6, 564, 566], "speed": [3, 6, 549, 563, 564, 566], "up": [3, 6, 43, 94, 125, 213, 249, 256, 272, 283, 291, 316, 330, 397, 536, 544, 548, 549, 552, 564, 565, 566, 569, 571, 573], "pre": [3, 136, 184, 185, 196, 234, 277, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 540, 542, 549, 556, 562, 564, 566, 570, 572, 574], "notabl": 3, "modif": [3, 7, 477, 539, 548], "enabl": [3, 6, 69, 71, 278, 292, 327, 496, 536, 544, 549, 556, 561, 562, 563, 564, 567], "floatfunct": 3, "quantstub": 3, "dequantstub": 3, "begin": [3, 136, 223, 256, 283, 292, 293, 297, 317, 327, 331, 542, 562, 572], "end": [3, 4, 7, 130, 165, 196, 212, 213, 223, 234, 248, 249, 256, 269, 292, 293, 297, 316, 327, 331, 542, 548, 549, 553, 559, 562, 563, 570, 571, 572], "relu6": [3, 98, 548], "relu": [3, 36, 98, 155, 548, 570], "_make_divis": 3, "v": [3, 94, 549, 573], "divisor": 3, "min_valu": 3, "taken": [3, 184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "origin": [3, 68, 69, 171, 196, 213, 214, 234, 249, 256, 269, 278, 290, 291, 292, 293, 297, 320, 327, 330, 331, 362, 540, 549, 562, 563, 566, 571, 573], "tf": [3, 6, 71, 136, 142, 165, 195, 196, 197, 198, 213, 233, 234, 235, 236, 249, 314, 362, 536, 544, 557, 564, 567, 571], "repo": [3, 196, 234, 540, 546], "It": [3, 6, 7, 69, 77, 86, 184, 185, 222, 256, 262, 264, 269, 270, 281, 290, 295, 296, 303, 305, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 536, 537, 542, 549, 562, 563, 566, 569, 572, 573], "ensur": [3, 43, 45, 213, 249, 293, 297, 331, 335, 376, 408, 440, 443, 445, 452, 491, 536, 544, 545, 566, 571], "layer": [3, 7, 36, 38, 41, 44, 69, 70, 71, 94, 135, 136, 142, 215, 222, 278, 290, 291, 293, 297, 320, 330, 331, 350, 352, 353, 359, 519, 539, 543, 552, 562, 563, 568, 572], "channel": [3, 7, 160, 175, 209, 213, 246, 249, 272, 276, 290, 320, 440, 443, 452, 552, 553, 562, 563, 571, 574], "number": [3, 4, 69, 91, 92, 186, 194, 197, 209, 213, 224, 232, 235, 246, 249, 261, 262, 264, 271, 280, 290, 302, 303, 305, 320, 327, 329, 335, 353, 354, 443, 496, 505, 508, 536, 540, 544, 545, 555, 562, 566, 569, 571, 572], "divis": 3, "seen": [3, 7, 359], "github": [3, 6, 167, 196, 234, 257, 258, 261, 262, 290, 293, 297, 298, 299, 302, 303, 320, 331, 455, 457, 495, 536, 538, 540, 546, 553, 554, 568], "tensorflow": [3, 6, 7, 77, 99, 101, 105, 130, 142, 165, 195, 196, 197, 198, 201, 202, 203, 205, 206, 207, 210, 213, 215, 220, 233, 234, 235, 236, 239, 240, 241, 243, 244, 245, 247, 249, 253, 254, 255, 256, 258, 260, 263, 264, 265, 266, 295, 299, 301, 304, 305, 314, 332, 418, 419, 431, 432, 439, 485, 486, 487, 489, 536, 542, 544, 546, 548, 549, 552, 553, 554, 556, 557, 558, 562, 564, 565, 566, 569, 572, 573], "blob": [3, 167, 257, 258, 261, 262, 290, 298, 299, 302, 303, 320], "master": [3, 257, 258, 261, 262, 290, 293, 297, 298, 299, 302, 303, 320, 331], "research": [3, 554], "slim": [3, 260, 301, 314, 557], "mobilenet": [3, 569, 574], "param": [3, 7, 45, 68, 69, 70, 71, 85, 91, 92, 94, 114, 115, 130, 159, 165, 167, 171, 186, 214, 220, 224, 260, 263, 264, 278, 301, 304, 305, 310, 314, 332, 359, 379, 410, 507, 510, 557, 572], "new_v": 3, "max": [3, 44, 45, 68, 71, 160, 175, 213, 249, 261, 262, 302, 303, 335, 517, 535, 536, 566, 571, 572], "2": [3, 4, 6, 7, 9, 68, 70, 71, 77, 98, 173, 197, 214, 235, 260, 262, 264, 272, 286, 287, 292, 301, 303, 305, 320, 327, 333, 334, 535, 540, 542, 544, 548, 549, 552, 554, 555, 556, 559, 560, 561, 562, 566, 568, 571, 572], "round": [3, 4, 160, 175, 535, 545, 566], "down": [3, 86], "doe": [3, 4, 12, 257, 260, 269, 298, 301, 540, 545, 555, 568, 571, 572], "go": [3, 336, 548, 565, 571], "10": [3, 6, 198, 236, 260, 301, 335, 486, 536, 540, 553, 565, 571], "convbnrelu": 3, "sequenti": [3, 71, 194, 232, 296, 560, 572], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "3": [3, 4, 6, 45, 70, 71, 94, 135, 165, 198, 202, 207, 210, 213, 236, 240, 245, 247, 249, 260, 272, 301, 498, 540, 542, 544, 548, 549, 555, 556, 559, 562, 565, 566, 571, 572, 574], "stride": [3, 213, 249, 571], "group": [3, 328, 428, 552, 562, 563, 570, 571, 572, 574], "pad": [3, 95, 96, 196, 213, 234, 249, 276, 278, 540, 571], "bia": [3, 71, 159, 160, 251, 253, 276, 570], "fals": [3, 4, 7, 36, 38, 41, 43, 44, 45, 69, 71, 87, 95, 96, 114, 117, 124, 130, 133, 144, 151, 156, 160, 163, 164, 165, 185, 186, 188, 191, 192, 193, 195, 196, 198, 209, 213, 214, 215, 216, 217, 222, 224, 226, 229, 230, 231, 233, 234, 236, 246, 249, 260, 263, 264, 269, 270, 271, 272, 276, 277, 278, 290, 301, 304, 305, 313, 320, 336, 343, 352, 428, 447, 493, 496, 501, 502, 507, 526, 532, 539, 540, 548, 555, 559, 565, 566, 570, 571, 572, 573], "batchnorm2d": 3, "momentum": [3, 292, 317, 552, 562, 563, 573], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 559], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 86], "dw": 3, "linear": [3, 68, 251, 253, 290, 320, 330, 542], "conv": [3, 36, 45, 117, 155, 320, 330, 565], "add": [3, 12, 45, 68, 76, 88, 130, 135, 139, 148, 165, 196, 198, 220, 234, 236, 257, 264, 278, 291, 293, 296, 297, 298, 305, 330, 331, 336, 371, 377, 378, 380, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 409, 425, 507, 532, 536, 538, 540, 544, 548, 549, 555, 558, 559, 569, 570, 572], "skip_add": 3, "forward": [3, 4, 43, 215, 276, 278, 565, 566, 570], "x": [3, 43, 195, 213, 233, 249, 272, 276, 278, 335, 542, 544, 557, 562, 566, 570, 571], "els": [3, 43, 86, 87, 165, 194, 232, 336, 493, 507, 570], "num_class": [3, 264, 305], "1000": [3, 271, 505, 549, 572, 573], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 6, 167, 338, 544, 572, 574], "main": [3, 6, 184, 220, 293, 297, 331, 333, 336, 343, 488, 524, 544, 566], "width": [3, 209, 213, 246, 249, 272, 290, 320, 544, 566, 571, 573], "multipli": [3, 545], "adjust": [3, 4, 272, 320, 566], "each": [3, 4, 7, 38, 41, 44, 45, 69, 70, 71, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 135, 160, 164, 167, 194, 198, 201, 209, 213, 232, 236, 239, 246, 249, 258, 260, 261, 262, 271, 272, 278, 292, 299, 301, 302, 303, 314, 315, 316, 320, 327, 340, 341, 353, 354, 536, 539, 540, 542, 545, 548, 559, 560, 562, 563, 569, 570, 571, 572], "amount": 3, "structur": [3, 130, 292, 327, 436, 552, 562, 563, 566, 570, 574], "multipl": [3, 86, 135, 187, 188, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 220, 225, 226, 228, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 265, 292, 327, 333, 334, 493, 540, 560, 569, 572], "turn": [3, 555], "off": [3, 91, 92, 94, 567], "block": [3, 269, 278, 290, 293, 297, 320, 331, 524, 552, 559, 562, 563], "input_channel": 3, "32": [3, 167, 260, 301, 544, 550, 562, 574], "last_channel": 3, "1280": 3, "c": [3, 94, 98, 198, 236, 536, 540, 547, 553], "n": [3, 94, 197, 213, 235, 249, 258, 290, 299, 320, 496, 540, 542, 562, 563, 571], "16": [3, 31, 549, 562, 574], "6": [3, 6, 41, 536, 548, 566, 574], "24": [3, 31, 572, 574], "96": [3, 260, 301, 574], "160": 3, "320": 3, "onli": [3, 7, 38, 41, 44, 45, 69, 71, 77, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 135, 160, 175, 196, 214, 216, 217, 220, 234, 256, 266, 278, 290, 292, 320, 327, 507, 517, 519, 520, 537, 539, 544, 548, 549, 553, 556, 565, 570, 572, 573], "check": [3, 4, 6, 43, 69, 86, 87, 130, 135, 142, 165, 171, 185, 198, 236, 252, 256, 266, 291, 296, 320, 327, 330, 336, 343, 359, 398, 403, 440, 443, 445, 446, 448, 450, 451, 453, 459, 462, 477, 493, 494, 496, 501, 507, 509, 536, 538, 544, 549, 553], "element": [3, 45, 194, 232, 260, 276, 278, 290, 293, 297, 301, 320, 331, 540, 552, 555, 562], "assum": [3, 7, 212, 248, 260, 281, 301, 548], "know": [3, 130, 216, 217, 250, 256, 283, 494, 544, 568], "len": [3, 167, 213, 249, 335, 540, 544, 562, 571], "rais": [3, 12, 86, 91, 92, 94, 105, 130, 215, 257, 260, 263, 264, 290, 291, 292, 298, 301, 304, 305, 320, 327, 330, 335, 507, 520, 562, 563], "valueerror": [3, 12, 86, 91, 92, 94, 105, 130, 257, 260, 264, 298, 301, 305, 547], "empti": [3, 135, 260, 301], "list": [3, 6, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 77, 80, 130, 135, 142, 159, 165, 171, 184, 185, 189, 196, 209, 212, 213, 214, 215, 227, 234, 246, 248, 249, 251, 253, 256, 257, 258, 260, 261, 262, 264, 269, 271, 272, 281, 283, 290, 293, 297, 298, 299, 301, 302, 303, 305, 314, 315, 316, 320, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 353, 354, 371, 373, 375, 377, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 420, 423, 425, 426, 428, 440, 443, 446, 447, 450, 451, 452, 454, 459, 462, 464, 466, 469, 470, 473, 476, 486, 493, 498, 500, 501, 502, 505, 507, 508, 509, 510, 511, 513, 514, 515, 517, 519, 526, 535, 548, 559, 565, 567, 570, 572], "got": [3, 165, 333, 334, 547, 549, 570], "format": [3, 36, 38, 41, 44, 45, 68, 69, 71, 77, 165, 196, 197, 198, 202, 207, 234, 235, 236, 240, 245, 251, 253, 256, 260, 266, 269, 280, 301, 462, 498, 540, 542, 544, 555, 556, 557, 558, 566], "build": [3, 6, 7, 43, 135, 142, 152, 253, 254, 267, 269, 279, 280, 309, 311, 314, 315, 377, 378, 380, 391, 392, 396, 420, 477, 486, 507, 524, 536, 553, 557, 564, 572], "featur": [3, 130, 181, 196, 197, 209, 213, 215, 234, 235, 246, 249, 278, 297, 537, 538, 539, 541, 542, 549, 556, 557, 564, 568, 571], "invert": 3, "residu": [3, 278], "output_channel": 3, "last": [3, 69, 71, 117, 171, 184, 186, 224, 278, 290, 317, 320, 333, 334, 335, 337, 338, 340, 341, 342, 343, 477, 536, 556, 566, 572], "classifi": [3, 196, 234, 264, 305, 336, 540, 542], "dropout": [3, 276, 278], "m": [3, 68, 94, 290, 320, 542, 549, 574], "isinst": 3, "init": [3, 215, 318, 540, 555, 559], "kaiming_normal_": 3, "mode": [3, 7, 35, 36, 38, 41, 44, 68, 69, 71, 130, 205, 214, 243, 256, 260, 301, 314, 327, 359, 377, 500, 536, 537, 549, 552, 566, 567], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 545, 565, 569, 572, 573, 574], "mean": [3, 4, 86, 94, 186, 209, 213, 224, 246, 249, 260, 262, 264, 270, 272, 278, 290, 301, 303, 305, 316, 320, 537, 539, 544, 545, 548, 555, 562, 563, 566, 571, 572, 573], "fuse": [3, 4, 36, 43, 69, 71, 88, 89, 93, 94, 95, 96, 116, 117, 118, 119, 121, 155, 167, 171, 570], "bn": [3, 36, 86, 105, 574], "prior": [3, 43, 113, 572], "chang": [3, 105, 121, 160, 175, 292, 294, 327, 329, 359, 373, 378, 477, 499, 505, 538, 539, 544, 547, 555, 563, 570, 571, 572], "numer": [3, 4, 264, 305, 535, 556, 564], "fuse_model": [3, 4], "type": [3, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 81, 84, 85, 86, 87, 94, 98, 109, 110, 116, 117, 118, 121, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 167, 171, 172, 174, 178, 185, 186, 194, 196, 198, 202, 205, 206, 207, 210, 213, 215, 220, 224, 232, 234, 236, 240, 243, 244, 245, 247, 249, 251, 253, 254, 256, 257, 258, 260, 263, 264, 266, 269, 271, 278, 281, 284, 285, 286, 290, 292, 294, 296, 298, 299, 301, 304, 305, 307, 308, 309, 313, 314, 315, 316, 320, 326, 327, 328, 329, 335, 336, 343, 349, 352, 358, 371, 389, 390, 398, 399, 401, 403, 441, 493, 496, 498, 500, 503, 536, 540, 548, 552, 556, 562, 566, 571, 573], "fuse_modul": 3, "true": [3, 4, 43, 69, 71, 86, 87, 109, 130, 133, 135, 163, 165, 167, 185, 186, 194, 196, 198, 199, 212, 213, 214, 224, 232, 234, 236, 237, 248, 249, 251, 253, 258, 260, 264, 269, 276, 278, 286, 290, 299, 301, 305, 320, 336, 343, 457, 493, 496, 501, 502, 507, 540, 544, 548, 555, 559, 565, 566, 567, 570, 571, 572, 573], "idx": [3, 281, 540], "str": [3, 12, 36, 38, 43, 44, 69, 130, 159, 167, 172, 174, 186, 196, 197, 198, 202, 205, 206, 207, 209, 210, 213, 215, 220, 224, 234, 235, 236, 240, 243, 244, 245, 246, 247, 249, 251, 253, 254, 257, 258, 260, 262, 263, 264, 269, 271, 272, 281, 286, 298, 299, 301, 303, 304, 305, 307, 308, 309, 315, 320, 349, 352, 360, 361, 362, 365, 371, 372, 373, 375, 376, 377, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 402, 403, 408, 409, 410, 411, 416, 417, 420, 422, 423, 424, 425, 426, 428, 437, 438, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 459, 461, 462, 464, 466, 469, 470, 473, 475, 476, 477, 478, 481, 482, 483, 486, 493, 495, 496, 498, 500, 501, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 523, 524, 531, 532, 540, 555, 565, 570, 571], "help": [3, 6, 80, 222, 266, 313, 375, 507, 539, 557, 572], "averagemet": 3, "store": [3, 45, 198, 236, 260, 278, 284, 285, 286, 290, 292, 301, 317, 320, 327, 328, 329, 550], "averag": [3, 167, 260, 261, 262, 264, 301, 302, 303, 305, 542, 555, 559, 562, 572], "fmt": 3, "f": [3, 94, 542, 544, 566], "reset": [3, 12, 257, 263, 264, 298, 304, 305, 316, 520, 555], "val": [3, 71, 165, 198, 201, 236, 239, 291, 559], "avg": [3, 4, 566], "sum": [3, 264, 305, 542], "updat": [3, 12, 31, 86, 98, 130, 135, 142, 253, 257, 263, 264, 272, 290, 292, 298, 304, 305, 315, 317, 320, 327, 329, 362, 377, 378, 379, 380, 388, 391, 393, 395, 397, 403, 405, 406, 407, 410, 477, 500, 508, 511, 513, 517, 536, 539, 555, 561, 562, 563, 572], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 43, 68, 69, 114, 115, 130, 159, 215, 269, 291, 294, 320, 329, 330, 424, 425, 539, 540, 542, 544, 556, 562, 563, 570, 571, 573], "topk": [3, 537, 539, 544, 555], "over": [3, 4, 6, 198, 202, 207, 236, 240, 245, 260, 264, 301, 305, 552, 555, 565, 572], "k": [3, 264, 305, 555, 562], "top": [3, 130, 213, 249, 255, 256, 264, 283, 295, 305, 333, 334, 555, 571, 574], "specifi": [3, 38, 41, 44, 45, 69, 70, 71, 130, 159, 184, 185, 213, 214, 249, 255, 256, 260, 263, 264, 267, 270, 272, 279, 280, 283, 295, 296, 301, 304, 305, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 359, 375, 377, 380, 387, 388, 389, 391, 392, 393, 397, 398, 400, 401, 403, 405, 406, 410, 411, 412, 425, 457, 461, 462, 463, 479, 484, 500, 507, 520, 524, 536, 543, 544, 545, 548, 555, 559, 565, 566, 571, 572, 573], "no_grad": 3, "maxk": 3, "pred": [3, 165, 263, 264, 304, 305, 555], "eq": 3, "view": [3, 6, 536, 538, 546, 568], "expand_a": 3, "re": [3, 69, 71, 335, 549, 572], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 198, 236, 260, 269, 301, 539, 540, 544, 549, 550, 565, 566, 571, 572, 573, 574], "criterion": [3, 4, 10, 69, 167, 181, 217, 220, 250, 256, 297, 317, 320, 327, 476, 515, 542, 549, 562, 563, 566, 572, 573], "data_load": [3, 4, 7, 44, 71], "neval_batch": [3, 4], "top1": [3, 4, 272, 566], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 45, 200, 209, 215, 238, 246, 260, 264, 301, 305, 540, 548, 555, 561, 565, 571, 573, 574], "cnt": [3, 4, 320, 542], "imag": [3, 4, 197, 198, 201, 203, 209, 213, 235, 236, 239, 241, 246, 249, 260, 272, 301, 505, 536, 540, 544, 549, 565, 570, 571, 574], "loss": [3, 4, 6, 69, 142, 181, 215, 223, 255, 256, 264, 283, 295, 297, 305, 349, 542, 543, 544, 545, 555, 556, 562, 563, 566, 572, 573], "acc1": 3, "acc5": 3, "print": [3, 4, 167, 264, 305, 536, 542, 544, 555, 572], "load_model": 3, "model_fil": 3, "state_dict": [3, 167, 278, 544, 570], "load_state_dict": 3, "cpu": [3, 4, 116, 117, 118, 119, 127, 130, 159, 272, 538, 552, 556, 561, 564, 565, 567, 570], "print_size_of_model": 3, "temp": 3, "p": [3, 260, 301, 536], "mb": [3, 507], "o": [3, 6, 94, 420, 538, 561], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 314], "float_model_fil": 3, "start": [3, 71, 213, 249, 257, 260, 271, 298, 301, 316, 327, 501, 520, 553, 570, 571], "min": [3, 45, 71, 160, 175, 535, 536, 566, 571], "per": [3, 7, 38, 41, 44, 69, 70, 71, 186, 195, 214, 224, 233, 260, 272, 301, 320, 353, 354, 377, 536, 549, 561, 567, 572, 574], "qconfig": [3, 4, 43, 570], "default_qconfig": 3, "prepar": [3, 4, 6, 43, 69, 223, 250, 256, 283, 295, 398, 403, 488, 540, 544, 566], "calibr": [3, 7, 36, 38, 41, 43, 44, 69, 171, 176, 184, 185, 255, 256, 295, 296, 297, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 353, 354, 516, 539, 550, 552, 566, 572, 573], "fusion": [3, 7, 41, 70, 94, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 548], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 94, 98, 269, 542, 550], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 500, 566], "minmaxobserv": 3, "reduce_rang": [3, 45, 565], "dtype": [3, 68, 130, 159, 199, 200, 209, 213, 237, 238, 246, 249, 251, 253, 254, 539, 540, 548, 565, 570, 571, 572, 573], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 570], "min_val": [3, 353, 354], "max_val": [3, 353, 354], "quantizedconvrelu2d": 3, "scale": [3, 4, 36, 38, 45, 68, 71, 86, 160, 175, 209, 213, 246, 249, 253, 313, 535, 545, 566, 571], "15583468973636627": 3, "zero_point": [3, 45, 68, 253, 313, 320], "quantizedconv2d": [3, 71], "19358506798744202": 3, "74": [3, 574], "631847": 3, "300": [3, 539], "67": [3, 574], "significantli": [3, 556, 562, 563], "lower": [3, 212, 213, 248, 249, 262, 303, 507, 535, 543, 562, 563, 564, 566, 571], "62": [3, 574], "same": [3, 7, 71, 80, 165, 196, 213, 234, 249, 260, 283, 301, 336, 359, 537, 539, 540, 542, 544, 548, 561, 565, 566, 570, 571, 572], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 86, 286, 320, 539, 543, 556, 563, 564, 566, 567, 572, 573], "almost": 3, "decreas": [3, 123], "improv": [3, 327, 538, 549, 562, 563, 566, 567, 572, 574], "repeat": [3, 287, 572], "exercis": 3, "recommend": [3, 7, 217, 218, 304, 305, 539, 548, 562, 565, 572], "x86": [3, 556], "basi": 3, "histogram": [3, 350, 353, 359, 400, 403, 411, 570], "collect": [3, 43, 71, 207, 210, 211, 213, 216, 217, 218, 219, 221, 245, 247, 249, 257, 262, 263, 264, 298, 303, 304, 305, 350, 353, 359, 360, 462, 483, 494, 496, 507, 508, 566, 570, 572], "pick": 3, "paramet": [3, 4, 12, 36, 38, 41, 43, 44, 45, 62, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 124, 125, 128, 129, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 167, 171, 172, 174, 176, 177, 178, 181, 184, 185, 186, 195, 196, 198, 202, 205, 206, 207, 209, 210, 212, 213, 214, 215, 220, 224, 233, 234, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 281, 282, 283, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 309, 311, 314, 315, 316, 317, 320, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 352, 353, 354, 358, 359, 371, 375, 379, 380, 398, 399, 400, 403, 409, 411, 420, 446, 464, 469, 473, 476, 488, 493, 498, 500, 501, 506, 507, 509, 519, 520, 536, 539, 540, 544, 545, 552, 555, 562, 563, 566, 569, 571, 572, 573], "manner": [3, 542, 557], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 535], "jit": [3, 570], "script": [3, 35, 257, 258, 261, 262, 298, 299, 302, 303, 361, 362, 445, 462, 464, 466, 469, 470, 472, 473, 475, 476, 481, 544, 552, 564], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 574], "increas": [3, 541, 552], "resnet50": [3, 6, 272, 544, 549, 566, 569, 574], "qat": [4, 69, 253, 256, 266, 543, 544, 552, 558, 566], "simul": 4, "low": [4, 6, 7, 41, 70, 71, 184, 185, 199, 200, 237, 238, 255, 256, 265, 295, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 537, 540, 544, 556, 564, 566, 572], "precis": [4, 6, 7, 36, 38, 41, 44, 69, 70, 71, 184, 185, 255, 256, 260, 262, 264, 265, 295, 301, 303, 305, 316, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 375, 385, 388, 389, 398, 399, 400, 401, 402, 403, 408, 432, 461, 466, 468, 469, 470, 490, 508, 511, 513, 535, 536, 537, 543, 544, 548, 552, 564, 565, 566, 572], "dure": [4, 43, 71, 86, 142, 269, 272, 278, 290, 294, 296, 313, 320, 329, 502, 556, 557, 559, 560, 562, 563, 566, 570, 573], "backward": [4, 260, 301, 349, 542, 544, 562, 566, 568], "mimic": [4, 566], "still": [4, 293, 297, 320, 331, 566, 567], "thu": [4, 260, 301, 566], "made": [4, 7, 94, 270, 272, 566, 568], "while": [4, 6, 7, 38, 71, 278, 292, 327, 335, 536, 539, 549, 552, 556, 565, 566], "fact": [4, 566], "ultim": [4, 566], "yield": [4, 184, 185, 194, 216, 217, 232, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 566, 572], "either": [4, 185, 260, 301, 336, 343, 556, 560, 565, 566], "dynam": [4, 7, 86, 186, 224, 251, 253, 296, 367, 539, 542, 552, 564, 574], "training_func_for_nc": 4, "epoch": [4, 223, 250, 256, 283, 292, 293, 297, 327, 331, 349, 542, 544, 562, 573], "30": [4, 6, 213, 249, 537, 539, 552, 571, 574], "sgd": [4, 181, 220, 297, 565, 573], "lr": [4, 544], "0001": [4, 181, 297, 565], "nepoch": [4, 542], "train_load": [4, 544], "zero_grad": [4, 542, 544, 562], "break": [4, 542, 544], "freez": [4, 113, 562], "disable_observ": 4, "norm": [4, 278], "varianc": [4, 160, 175], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 86, 292, 320, 327, 340, 341, 500, 559, 562, 563, 566, 568, 572], "alreadi": [4, 7, 198, 212, 214, 236, 248, 494, 520, 536, 540, 552], "implement": [4, 6, 12, 38, 41, 44, 69, 70, 71, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 184, 185, 191, 194, 195, 196, 198, 202, 207, 229, 232, 233, 234, 236, 240, 245, 257, 263, 264, 286, 290, 294, 297, 298, 304, 305, 320, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 537, 539, 540, 568, 570, 572, 573], "hook": [4, 69, 184, 215, 222, 223, 250, 256, 283, 333, 336, 343, 352, 542, 562, 570], "prepare_qat": [4, 223, 256], "high": [4, 199, 200, 237, 238, 540, 553, 564, 572], "accur": 4, "inc": [4, 6, 69, 213, 249, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 564, 565, 568], "switch": [4, 69, 109, 570], "run": [4, 6, 7, 35, 36, 38, 41, 43, 45, 69, 130, 165, 184, 185, 195, 212, 214, 233, 248, 256, 269, 272, 291, 292, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 458, 501, 522, 523, 524, 536, 538, 544, 547, 548, 549, 556, 562, 564, 566, 568, 569, 570, 572, 573], "better": [4, 71, 121, 184, 185, 281, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 543, 555, 556, 562, 563, 564, 566, 569, 572], "match": [4, 130, 142, 212, 248, 260, 261, 301, 302, 542, 545], "zero": [4, 45, 68, 213, 249, 264, 290, 292, 293, 297, 305, 320, 327, 331, 535, 562, 571, 572], "fine": [4, 6, 196, 234, 327, 540, 562, 564, 566], "num_train_batch": 4, "20": [4, 6, 213, 249, 271, 561, 571, 573, 574], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 114, 115, 116, 117, 118, 119, 122, 127, 130, 151, 156, 159, 164, 215, 272, 542, 562, 565], "quantized_model": 4, "api": [4, 8, 10, 14, 29, 30, 44, 69, 94, 99, 130, 142, 255, 256, 260, 295, 301, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 523, 524, 539, 549, 551, 552, 558, 568, 569, 572], "q_func": [4, 7, 36, 38, 41, 44, 69, 71, 184, 185, 256, 295, 296, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 572], "eval_dataload": [4, 184, 185, 223, 255, 256, 266, 296, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 539, 550, 572], "val_load": [4, 566], "timeout": [4, 185, 336, 343, 517, 545, 565, 569, 572, 573], "constrain": 4, "71": [4, 574], "close": [4, 160, 175], "debug": [4, 413, 414, 418, 536, 572], "analyz": [4, 130, 159, 314, 562, 563, 569, 570], "limit": [4, 320, 335, 538, 542, 562, 570], "sinc": [4, 12, 255, 256, 257, 283, 295, 298, 477, 542, 545, 555, 560], "actual": [4, 71, 264, 305, 544], "arithmet": [4, 548], "easili": [4, 7, 559, 562, 563], "relat": [4, 250, 256, 260, 274, 275, 283, 290, 301, 320, 328, 352, 439, 442, 444, 449, 525, 528, 529, 530, 533, 573], "refer": [4, 6, 7, 12, 167, 196, 234, 257, 258, 263, 264, 290, 292, 293, 297, 298, 299, 304, 305, 317, 320, 331, 537, 540, 543, 544, 550, 554, 555, 556, 559, 562, 565, 566, 568, 571, 572], "center": [5, 6, 213, 249, 571, 572], "work": [5, 255, 256, 283, 295, 539, 542, 562, 563, 567, 568, 570], "resolv": 5, "guidelin": [5, 6, 551], "librari": [6, 217, 256, 535, 553, 564], "popular": [6, 7, 256, 540, 542, 562, 566, 572], "compress": [6, 223, 256, 283, 349, 542, 552, 559, 560, 562, 563, 564, 566], "mainstream": 6, "deep": [6, 7, 178, 535, 539, 552, 553, 556, 564, 566, 572], "learn": [6, 7, 278, 535, 539, 540, 550, 552, 553, 556, 562, 563, 564, 566, 570, 572], "framework": [6, 7, 36, 38, 41, 44, 69, 71, 176, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 213, 215, 216, 217, 220, 225, 226, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 255, 256, 263, 264, 265, 272, 295, 296, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 352, 361, 375, 385, 401, 403, 408, 410, 412, 432, 440, 443, 445, 446, 452, 459, 461, 466, 470, 475, 479, 490, 496, 507, 508, 535, 536, 539, 540, 544, 545, 546, 549, 550, 552, 553, 555, 556, 562, 564, 566, 571, 572, 573, 574], "mxnet": [6, 7, 43, 191, 195, 198, 201, 202, 205, 206, 207, 210, 213, 229, 233, 236, 239, 240, 243, 244, 245, 247, 249, 255, 256, 263, 264, 295, 304, 305, 311, 332, 546, 548, 552, 556, 557, 565, 572, 573], "formerli": 6, "known": [6, 216, 217, 335, 562, 570, 572], "deliv": [6, 564], "unifi": [6, 7, 187, 190, 207, 255, 256, 295, 500, 539, 550, 552, 557], "across": [6, 45, 255, 256, 265, 295, 541, 562, 563], "technologi": [6, 198, 236, 561], "prune": [6, 21, 159, 223, 256, 284, 285, 286, 288, 290, 291, 292, 294, 296, 297, 315, 317, 318, 320, 327, 328, 329, 330, 349, 489, 497, 512, 544, 548, 552, 560, 564, 566, 573], "knowledg": [6, 215, 250, 256, 543, 552, 557, 573], "distil": [6, 21, 181, 215, 222, 223, 256, 297, 349, 552, 560, 573], "driven": [6, 556, 559, 570], "strategi": [6, 7, 9, 36, 38, 41, 43, 44, 69, 71, 171, 198, 236, 256, 295, 375, 395, 490, 507, 517, 544, 552, 564, 565, 566, 567, 568, 573], "quickli": [6, 572], "gener": [6, 7, 36, 38, 43, 68, 71, 114, 115, 142, 184, 185, 186, 195, 198, 199, 200, 201, 207, 210, 213, 214, 224, 233, 236, 237, 238, 239, 245, 247, 249, 253, 254, 256, 257, 265, 269, 276, 283, 290, 293, 296, 297, 298, 320, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 398, 403, 409, 464, 469, 473, 475, 476, 481, 482, 483, 492, 501, 532, 536, 539, 542, 549, 555, 556, 559, 561, 562, 563, 564, 566, 567, 570, 571, 572], "predefin": [6, 365, 398, 402, 403, 507], "sparsiti": [6, 287, 290, 292, 293, 294, 297, 314, 315, 320, 327, 329, 331, 540, 552, 562, 563, 574], "goal": [6, 176, 185, 250, 255, 256, 283, 295, 297, 332, 336, 343, 508, 560, 566, 572], "teacher": [6, 181, 215, 250, 256, 278, 297, 542, 543, 574], "student": [6, 196, 215, 222, 234, 250, 256, 540, 542, 543, 574], "ai": [6, 564, 567], "oneapi": [6, 553, 564], "analyt": [6, 553, 564], "visit": [6, 574], "websit": [6, 553], "io": [6, 539], "7": [6, 537, 539, 547, 548, 549, 553, 566, 568, 572], "releas": [6, 495, 507, 551, 553], "binari": [6, 165, 264, 276, 278, 305, 547, 555], "stabl": [6, 536, 553, 564], "basic": [6, 212, 248, 267, 279, 290, 320, 552, 553, 565, 569], "pip": [6, 536, 544, 547, 553, 568], "Or": [6, 292], "full": [6, 68, 71, 196, 197, 198, 214, 234, 235, 236, 256, 536, 540, 547, 553, 554, 572], "nightli": [6, 536, 553], "git": [6, 536, 553], "clone": [6, 536, 553], "cd": [6, 536, 544, 553], "r": [6, 68, 94, 160, 175, 272, 536, 553, 561, 566, 574], "txt": [6, 201, 239, 501, 536, 540, 553], "pypi": [6, 536, 553], "found": [6, 250, 256, 267, 268, 279, 280, 313, 335, 492, 507, 524, 556, 572], "guid": [6, 196, 234, 540, 542, 553], "fp32": [6, 7, 36, 38, 41, 69, 70, 71, 116, 118, 160, 167, 175, 184, 185, 251, 253, 264, 305, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 411, 548, 555, 556, 565, 566, 567, 568, 569, 570, 572, 573, 574], "wget": [6, 549], "storag": [6, 260, 301, 549, 555], "googleapi": [6, 549], "v1_6": [6, 549], "mobilenet_v1_1": 6, "0_224_frozen": 6, "pb": [6, 71, 314, 332, 448, 451, 462, 544, 549, 557, 570, 574], "dummi": [6, 199, 200, 237, 238, 254, 264, 305, 403, 407, 509, 536, 540, 549, 555], "shape": [6, 130, 142, 159, 199, 200, 209, 213, 237, 238, 246, 249, 260, 276, 278, 290, 301, 320, 432, 439, 440, 443, 452, 454, 489, 536, 540, 548, 549, 571], "224": [6, 209, 246, 272, 537, 539, 540, 544, 549, 571, 572, 573], "calib_dataload": [6, 216, 217, 256, 295, 296, 332, 539, 540, 550, 555, 566], "dataload": [6, 7, 14, 31, 36, 38, 41, 43, 44, 45, 69, 71, 167, 171, 176, 184, 185, 196, 207, 214, 217, 223, 234, 245, 250, 256, 266, 283, 295, 296, 297, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 352, 360, 365, 371, 375, 385, 398, 401, 403, 408, 410, 432, 473, 483, 486, 489, 497, 507, 508, 512, 536, 540, 544, 549, 550, 555, 556, 558, 566, 570, 571, 572, 573], "search": [6, 12, 21, 94, 177, 184, 185, 255, 256, 257, 267, 268, 269, 271, 272, 279, 280, 281, 282, 295, 298, 335, 337, 342, 398, 399, 426, 552, 555, 564, 570, 572], "jupyt": 6, "lab": 6, "manag": [6, 269, 270, 271, 272, 376, 408, 410, 433, 491, 506], "click": [6, 536, 552, 564, 570], "12": [6, 536], "onnxruntim": [6, 7, 44, 192, 230, 256, 265, 415, 419, 545, 552, 565], "raw": [6, 197, 201, 204, 235, 239, 242, 555, 572], "vision": 6, "classif": [6, 196, 213, 234, 249, 264, 293, 297, 305, 331, 542, 555, 564], "resnet": [6, 544, 549, 574], "v1": [6, 31, 32, 33, 71, 165, 208, 209, 246, 261, 262, 264, 302, 303, 305, 314, 544, 555, 557, 568, 569, 574], "inc_bench": [6, 297, 489, 536], "xeon": [6, 549, 554, 556, 561, 564, 566, 567, 574], "scalabl": [6, 549, 556, 561, 564, 566, 567, 574], "skylak": 6, "cascad": [6, 549], "lake": [6, 549, 556, 564], "cooper": [6, 556, 564], "icelak": 6, "futur": [6, 86, 184, 185, 216, 217, 334, 335, 336, 337, 338, 340, 341, 342, 343, 552, 556, 558], "sapphir": 6, "rapid": 6, "flex": 6, "seri": [6, 209, 246, 571], "amd": [6, 552, 574], "arm": [6, 552, 574], "nvidia": [6, 552, 562, 566, 574], "cento": [6, 501], "ubuntu": [6, 561], "04": [6, 498, 561, 574], "11": [6, 33, 498, 536, 549, 555, 556], "variabl": [6, 142, 198, 214, 236, 256, 265, 271, 328, 335, 496, 520, 536, 563], "tf_enable_onednn_opt": [6, 536], "onednn": [6, 535], "default": [6, 7, 12, 36, 38, 69, 71, 122, 130, 159, 165, 178, 181, 184, 185, 186, 188, 196, 197, 198, 209, 213, 215, 223, 224, 226, 234, 235, 236, 246, 249, 251, 253, 256, 257, 260, 263, 264, 266, 278, 291, 297, 298, 301, 304, 305, 314, 330, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 359, 379, 381, 382, 384, 386, 389, 390, 394, 416, 417, 420, 437, 447, 496, 498, 509, 510, 514, 515, 536, 537, 539, 540, 545, 548, 552, 555, 558, 559, 565, 567, 569, 571, 572, 573], "420": [6, 552], "speedup": [6, 552, 566], "geomean": [6, 552], "2x": [6, 552, 561], "vnni": [6, 552, 565, 566], "minim": [6, 160, 175, 335, 542, 555, 562, 563, 566, 572], "overview": 6, "dive": [6, 548], "mix": [6, 7, 71, 333, 468, 469, 470, 513, 552, 572], "orchestr": [6, 349, 552], "benchmark": [6, 10, 36, 38, 41, 71, 216, 217, 256, 296, 297, 316, 378, 385, 388, 397, 403, 405, 408, 409, 432, 489, 490, 500, 505, 522, 527, 539, 549, 557, 558, 572, 573, 574], "convers": [6, 7, 78, 105, 256, 266, 556, 566, 567], "tensorboard": [6, 7, 36, 38, 41, 44, 69, 71, 349, 352, 572], "coder": [6, 552, 564], "topic": 6, "adaptor": [6, 9, 223, 256, 352, 552, 567, 568, 570, 572], "togeth": [6, 213, 249, 290, 296, 320, 539, 542, 553, 564, 570, 571, 572], "tencent": [6, 564], "deepen": [6, 564], "cloud": [6, 564], "foundat": [6, 564], "digit": [6, 257, 298, 564], "intellig": [6, 564], "industri": [6, 540, 555, 564], "dec": [6, 564], "2022": [6, 31, 32, 33, 574], "fast": [6, 564], "achiev": [6, 255, 256, 295, 320, 555, 560, 562, 563, 564, 566, 570, 572], "sota": [6, 564], "nov": [6, 564], "virtual": [6, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 564], "applianc": [6, 564], "packag": [6, 7, 367, 374, 379, 381, 382, 384, 385, 386, 389, 390, 393, 394, 413, 414, 418, 421, 427, 429, 432, 433, 439, 458, 460, 465, 468, 471, 472, 474, 480, 485, 489, 522, 536, 547, 553, 564, 568, 572], "bitnami": [6, 564], "diffus": [6, 564], "few": [6, 536, 564, 572], "distilbert": [6, 196, 234, 540, 564, 574], "oct": [6, 564], "innov": [6, 564], "acceler": [6, 542, 562, 563, 564, 567, 572], "legal": [6, 551], "secur": [6, 561, 564], "send": [6, 477, 519, 524, 538], "your": [6, 194, 196, 232, 234, 260, 301, 536, 537, 538, 540, 544, 554, 569, 570, 572], "resum": [6, 184, 185, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349], "solut": [7, 160, 175, 269, 547, 564, 572], "onnx": [7, 44, 45, 68, 192, 230, 251, 252, 253, 254, 307, 308, 309, 313, 315, 349, 362, 462, 546, 548, 552, 556, 557, 564, 565, 566], "runtim": [7, 501, 545, 546, 548, 552, 565, 566], "bridg": [7, 552], "vanilla": [7, 552], "10004": [7, 542, 548, 552, 556, 560, 565, 573], "complet": [7, 87, 536, 572, 573, 574], "subclass": [7, 36, 62, 172, 174, 191, 195, 198, 202, 205, 206, 207, 210, 213, 220, 229, 233, 236, 240, 243, 244, 245, 247, 249, 263, 264, 281, 284, 285, 286, 290, 292, 294, 304, 305, 316, 320, 326, 327, 329, 343, 572], "adaptor_registri": [7, 36], "abc": [7, 133, 262, 303, 440, 500, 570, 572], "abcadaptor": 7, "framework_specific_info": [7, 36, 38, 41, 44, 69, 71], "tune_cfg": [7, 36, 38, 41, 43, 44, 69, 71, 171, 336], "postprocess": [7, 36, 38, 41, 44, 69, 71, 207, 210, 213, 214, 217, 245, 247, 249, 255, 256, 266, 278, 295, 296, 297, 510, 537, 539, 570, 571], "query_fw_cap": [7, 36, 38, 41, 44, 69, 71, 572], "query_fused_pattern": [7, 36], "awar": [7, 36, 38, 41, 44, 69, 71, 167, 187, 190, 207, 223, 256, 266, 290, 295, 296, 320, 543, 544, 552, 556, 558, 560, 574], "he": 7, "intersect": [7, 264, 305, 555], "graph": [7, 44, 45, 69, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 124, 125, 128, 129, 130, 152, 159, 160, 163, 164, 165, 195, 233, 253, 255, 297, 307, 308, 313, 314, 315, 366, 368, 432, 440, 443, 451, 452, 454, 464, 465, 466, 471, 472, 486, 487, 489, 508, 511, 523, 540, 542, 544, 550, 555, 557, 566, 567, 570], "decid": [7, 71, 135, 136, 258, 292, 299, 327, 333, 334, 340, 341, 420, 545, 568, 572], "besid": [7, 538, 542, 560], "introduc": [7, 98, 548, 562, 563, 566, 568, 572], "describ": [7, 38, 44, 69, 71, 272, 536, 548, 570], "op": [7, 36, 38, 41, 44, 45, 69, 70, 71, 80, 84, 86, 89, 90, 93, 94, 95, 96, 98, 105, 109, 110, 113, 116, 117, 118, 119, 121, 127, 130, 159, 160, 163, 165, 251, 253, 333, 334, 336, 340, 341, 353, 354, 400, 403, 411, 416, 417, 425, 523, 536, 548, 549, 556, 566, 567, 568, 570, 572, 573], "sequenc": [7, 12, 71, 87, 196, 212, 213, 234, 248, 249, 257, 258, 262, 290, 298, 299, 303, 320, 540, 548, 563, 571], "past": 7, "abov": [7, 77, 260, 301, 537, 549, 562], "wa": [7, 159, 477, 536, 564, 572], "hidden": [7, 290, 320, 507, 562], "corner": [7, 213, 249, 571], "effect": [7, 562, 563], "mainten": 7, "difficult": 7, "correspond": [7, 12, 71, 142, 167, 196, 234, 257, 260, 264, 290, 292, 296, 298, 301, 305, 320, 327, 335, 548, 562, 565, 566, 569, 572], "abil": [7, 539, 548], "clear": [7, 12, 135, 194, 232, 257, 263, 264, 272, 298, 304, 305, 548, 555], "fragment": 7, "field": [7, 130, 159, 198, 236, 260, 296, 301, 536, 537, 544, 545, 549, 572, 573], "enumer": [7, 43, 68, 281, 349, 359, 363, 461, 467, 490, 544, 562, 570], "scenario": [7, 35, 375, 536, 537, 542, 549, 562], "hardwar": [7, 41, 70, 496, 542, 549, 552, 556, 561, 562, 563, 564, 565], "doesn": [7, 130, 213, 249, 296, 506, 537, 539, 544, 573], "bf16": [7, 41, 70, 105, 116, 118, 336, 548, 549, 556, 567, 572], "granular": [7, 41, 70, 548, 552, 562, 572, 573], "scheme": [7, 41, 45, 68, 70, 524, 539, 548, 572, 573], "semant": [7, 548], "pattern": [7, 36, 41, 70, 71, 85, 86, 94, 117, 121, 127, 130, 155, 198, 236, 256, 284, 288, 292, 297, 318, 327, 328, 330, 400, 403, 416, 425, 426, 500, 523, 540, 548, 552, 560, 565, 574], "abstract": [7, 36, 41, 70, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 133, 142, 213, 215, 249, 250, 255, 256, 263, 264, 280, 282, 286, 290, 294, 295, 304, 305, 307, 308, 309, 311, 313, 314, 315, 316, 320, 329, 343, 365, 440, 451, 452, 473, 482, 500, 523, 550], "querybackendcap": [7, 38, 41, 44, 69, 70, 71], "tensorflowqueri": [7, 71], "look": [7, 548, 555, 559, 573], "microsoft": 7, "mla": [7, 535], "kernel": [7, 496, 561, 562, 572], "becom": [7, 86, 563], "integr": [7, 165, 215, 536], "explor": 7, "attribut": [7, 68, 86, 130, 142, 159, 171, 177, 178, 223, 295, 427, 428, 432, 489, 505, 548, 550, 556, 565, 573], "whether": [7, 43, 44, 45, 69, 71, 135, 136, 165, 186, 194, 196, 209, 213, 224, 232, 234, 246, 249, 250, 256, 258, 260, 264, 278, 283, 290, 292, 299, 301, 305, 320, 359, 462, 540, 555, 571], "qlinear": [7, 198, 205, 236, 243, 264, 305, 574], "qdq": [7, 133, 171, 251, 252, 253, 552, 566], "integ": [7, 142, 250, 256, 260, 264, 281, 290, 292, 294, 301, 305, 320, 327, 329, 353, 354, 566, 572], "qtype": [7, 45, 68], "choic": [7, 196, 234, 536, 540, 555], "float32": [7, 45, 199, 200, 213, 237, 238, 249, 260, 301, 505, 537, 540, 566, 571], "uint8": [7, 68, 209, 246, 260, 301, 353, 354, 535, 540, 548, 565, 566, 571, 572, 573], "node": [7, 43, 45, 68, 71, 74, 77, 78, 79, 80, 86, 87, 88, 91, 92, 94, 98, 110, 123, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 251, 252, 253, 307, 308, 309, 313, 314, 315, 409, 422, 423, 424, 425, 426, 427, 432, 440, 443, 450, 451, 452, 486, 487, 489, 536, 544, 570], "exclud": [7, 110, 276, 278], "three": [7, 98, 196, 234, 293, 297, 331, 536, 539, 549, 553, 556, 560, 566, 567, 569, 570, 572], "onnxrt": [7, 196, 198, 205, 206, 207, 210, 213, 234, 236, 243, 244, 245, 247, 249, 263, 264, 304, 305, 414, 415, 430, 432, 439, 489], "onnxrt_qlinearopsadaptor": [7, 44], "dump_elapsed_tim": [7, 359], "recov": [7, 41, 44, 71, 359, 543], "q_config": [7, 41, 44, 45, 70, 71, 251, 253], "inspect_tensor": [7, 36, 38, 41, 44, 69, 71], "op_list": [7, 36, 38, 41, 44, 69, 71, 340, 570], "iteration_list": [7, 36, 38, 41, 44, 69, 71], "inspect_typ": [7, 36, 38, 41, 44, 69, 71, 411], "save_to_disk": [7, 36, 38, 41, 44, 69, 71], "save_path": [7, 41, 44, 71, 251, 253, 307, 308, 309, 313, 315, 349, 557], "quantization_cfg": [7, 41, 44, 71], "set_tensor": [7, 36, 38, 41, 44, 69, 71], "tensor_dict": [7, 36, 38, 41, 44, 69, 71], "input_graph": [7, 44, 151, 152, 156, 159, 160, 361, 466, 470, 475, 482], "fp32_baselin": [7, 38, 41, 44, 69, 71, 352], "diagnosis_help": 7, "fp32_model": [7, 69, 71, 167, 251, 253, 340, 359, 539], "int8_model": [7, 251, 253], "experiement": 9, "deprec": [9, 250, 256, 507, 571], "bilingu": [12, 257, 298], "understudi": [12, 257, 298], "qualiti": [12, 257, 298], "text": [12, 212, 213, 248, 249, 257, 262, 293, 297, 298, 303, 331, 554, 564, 571, 574], "machin": [12, 257, 275, 298, 373, 536, 553, 564, 570], "translat": [12, 71, 257, 258, 269, 272, 275, 277, 298, 299], "natur": [12, 257, 298], "anoth": [12, 36, 38, 71, 130, 213, 249, 256, 257, 266, 298, 349, 539, 542, 558, 571, 572], "approxim": [12, 257, 258, 298, 299, 555], "glue": [12, 257, 264, 298, 305, 540, 555], "word": [12, 212, 248, 257, 298, 549, 555, 574], "piec": [12, 212, 248, 257, 298, 555], "decod": [12, 208, 209, 246, 257, 278, 298, 555, 571], "id": [12, 31, 32, 33, 212, 214, 248, 257, 259, 260, 261, 262, 298, 300, 301, 302, 303, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 391, 393, 395, 396, 424, 425, 428, 493, 555, 569, 572], "token": [12, 196, 207, 210, 213, 234, 245, 247, 249, 256, 257, 258, 278, 297, 298, 299, 520, 524, 536, 540, 555, 569, 571, 572], "By": [12, 35, 257, 298, 327, 555, 557], "ngram": [12, 257, 298, 555], "breviti": [12, 257, 258, 298, 299, 555], "penalti": [12, 257, 258, 298, 299, 555], "beam": [12, 257, 298, 555, 572], "cach": [12, 196, 234, 257, 298, 441, 524, 547, 566], "error": [12, 69, 167, 257, 264, 270, 296, 298, 305, 492, 519, 555, 572], "occur": [12, 257, 298], "length": [12, 196, 213, 234, 249, 257, 260, 278, 298, 301, 540, 555, 566, 571], "bleu_scor": [12, 257, 258, 298, 299], "schedul": [21, 256, 288, 292, 297, 318, 327, 349, 560], "mixedprecis": [21, 256, 265, 368, 469, 513, 556], "modelconvers": [21, 256, 266, 558], "architectur": [21, 214, 267, 268, 278, 279, 280, 282, 542, 553, 562, 563, 564], "na": [21, 177, 256, 297, 310, 552], "14": [31, 32, 251, 253, 574], "revis": [31, 32, 33], "6ece06672ed3": 31, "6f0d0f71d92e": [31, 32], "date": [31, 32, 33, 477], "08": [31, 213, 249, 571, 574], "31": [31, 574], "07": [31, 32, 573, 574], "229939": 31, "update_dataload": 31, "db_session": [31, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 402, 403, 405, 407, 410], "sqlalchemi": [31, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 405, 407, 408, 410, 547, 553], "orm": [31, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 405, 407, 410], "session": [31, 165, 195, 233, 314, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 402, 403, 405, 407, 408, 410, 570], "databas": [31, 198, 236, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 477, 491, 506], "update_transform": 31, "13": [32, 33, 332, 536, 574], "9e89549a08c8": [32, 33], "29": [32, 574], "41": [32, 549, 574], "291905": 32, "03": [33, 498, 574], "22": [33, 498, 501, 574], "34": [33, 574], "52": [33, 574], "916541": 33, "run_migrations_offlin": 35, "migrat": [35, 491], "context": [35, 565], "url": [35, 198, 236, 457, 520, 554], "engin": [35, 271, 376, 388, 408], "though": [35, 278], "skip": [35, 316, 570, 572], "creation": [35, 374], "even": [35, 86, 536, 562], "dbapi": 35, "execut": [35, 38, 41, 44, 69, 71, 74, 77, 163, 223, 250, 256, 267, 268, 279, 283, 292, 295, 296, 327, 332, 352, 358, 360, 361, 362, 377, 388, 391, 397, 403, 405, 406, 462, 464, 466, 469, 470, 473, 475, 476, 478, 483, 486, 490, 493, 501, 502, 523, 536, 542, 544, 549, 556, 560, 562, 563, 566, 574], "emit": 35, "string": [35, 36, 38, 41, 44, 69, 70, 71, 80, 87, 130, 135, 136, 159, 165, 176, 177, 196, 198, 215, 220, 234, 236, 250, 253, 255, 256, 257, 260, 266, 267, 268, 271, 279, 280, 281, 283, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 309, 314, 315, 320, 327, 329, 330, 331, 332, 352, 353, 354, 359, 371, 486, 507, 531, 555, 571], "run_migrations_onlin": 35, "associ": [35, 260, 301, 398, 399], "connect": [35, 292, 317, 388, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 536, 562, 563, 569], "cl": [36, 62, 69, 172, 174, 198, 202, 205, 206, 207, 210, 213, 215, 220, 236, 240, 243, 244, 245, 247, 249, 281, 286, 290, 292, 294, 316, 320, 326, 327, 329, 343], "quanit": [36, 41, 44], "chosen": [36, 38, 536], "categori": [36, 38, 71, 198, 236, 259, 260, 300, 301, 540], "mini": [36, 38, 41, 71, 574], "boolean": [36, 38, 41, 43, 71, 80, 271, 327, 507], "inspect": [36, 38, 41, 44, 69, 71, 536, 568, 570], "capabl": [36, 38, 41, 44, 69, 70, 71, 548, 556, 565, 566, 572, 573], "queri": [36, 38, 41, 43, 44, 69, 71, 130, 135, 142, 165, 276, 278, 336, 379, 386, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 566], "dump": [36, 38, 41, 44, 45, 69, 71, 130, 251, 253, 359, 369, 477, 498, 508, 520, 566, 570, 572], "contain": [36, 38, 41, 44, 45, 69, 71, 80, 91, 92, 94, 98, 130, 133, 159, 165, 167, 176, 184, 185, 196, 197, 198, 234, 235, 236, 250, 251, 253, 255, 256, 260, 261, 262, 266, 269, 274, 275, 283, 284, 285, 286, 290, 291, 292, 293, 294, 295, 297, 301, 302, 303, 320, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 358, 363, 367, 374, 379, 381, 382, 384, 385, 386, 389, 390, 393, 394, 398, 403, 408, 413, 414, 418, 421, 427, 432, 433, 439, 458, 465, 467, 468, 471, 472, 474, 480, 485, 489, 493, 501, 539, 540, 542, 552, 555, 562, 563, 570, 572], "bool": [36, 38, 43, 44, 45, 69, 86, 87, 130, 135, 159, 165, 167, 171, 185, 196, 198, 209, 213, 234, 236, 246, 249, 251, 253, 258, 260, 264, 269, 271, 272, 278, 290, 299, 301, 305, 320, 336, 343, 387, 420, 425, 428, 440, 443, 445, 446, 447, 448, 450, 451, 453, 457, 459, 462, 477, 493, 494, 496, 501, 502, 507, 509, 510, 520, 526, 532, 540, 555, 565, 571], "disk": [36, 38, 69, 71], "memori": [36, 38, 69, 98, 255, 256, 283, 295, 539, 543, 556, 559, 562, 563, 566, 572], "numpi": [36, 38, 41, 44, 69, 71, 91, 92, 94, 130, 165, 213, 249, 254, 260, 264, 269, 271, 281, 301, 305, 353, 354, 547, 571], "arrai": [36, 38, 41, 44, 69, 71, 130, 159, 165, 213, 249, 260, 264, 269, 271, 281, 301, 305, 315, 335, 353, 354, 571], "node0_nam": [36, 38, 69, 71], "weight0_nam": [36, 38, 41, 44, 69, 71], "bias0_nam": [36, 38, 41, 44, 69, 71], "node1_nam": [36, 38, 69, 71], "weight1_nam": [36, 38, 69, 71], "bias1_nam": [36, 38, 69, 71], "output0_nam": [36, 38, 69, 71], "output1_nam": [36, 38, 69, 71], "respons": [36, 38, 41, 44, 69, 71, 496, 500, 506, 519, 523, 524, 528, 530, 532, 533, 566], "int32": [36, 38, 41, 44, 69, 71, 251, 253, 540], "someth": [36, 38, 41, 44, 69, 71, 184, 185, 198, 236, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "quantize_input": [36, 38, 71], "abl": [36, 38, 71, 105, 184, 185, 212, 248, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 562, 566], "where": [36, 38, 41, 45, 68, 69, 71, 142, 260, 264, 276, 278, 280, 282, 290, 301, 305, 320, 542, 545, 562, 570, 572], "destinatin": [36, 38], "destin": [36, 38, 45, 71, 251, 252, 256, 266, 558], "kerasadaptor": 38, "boolen": [38, 44, 69, 71], "compare_label": [38, 41, 44, 69, 71, 264, 305, 555], "pipelin": [38, 41, 44, 69, 71, 250, 256, 267, 268, 279, 296, 543, 560], "get_optype_wise_": [38, 71], "quantizable_op_detail": 38, "wise": [38, 71, 160, 175, 290, 320, 335, 400, 403, 507, 536, 539, 552, 562, 570, 572, 573], "union": [38, 71, 258, 260, 264, 299, 301, 305, 349, 371, 373, 388, 409, 447, 493, 496, 498, 500, 501, 507, 510, 511, 513, 515, 519, 555], "kei": [38, 44, 69, 71, 130, 135, 159, 165, 167, 178, 260, 276, 278, 281, 291, 293, 297, 301, 314, 320, 330, 331, 350, 352, 353, 359, 500, 515, 536, 570, 572], "kerasqueri": 38, "local_config_fil": [38, 41, 44, 69, 71], "get_vers": [38, 41, 44, 70, 71], "infom": [38, 44, 71, 216, 217, 253], "get_precis": [38, 41, 44, 70, 71, 375], "get_op_typ": [38, 41, 44, 69, 70, 71], "compos": [38, 44, 69, 71, 159, 213, 249, 539, 571, 572], "dictionari": [38, 44, 45, 69, 71, 91, 92, 94, 142, 167, 171, 177, 178, 181, 212, 248, 260, 267, 269, 272, 278, 279, 280, 282, 297, 301, 379, 381, 382, 384, 386, 389, 390, 394, 398, 399, 401], "get_quantization_cap": [38, 41, 44, 69, 70, 71], "get_op_types_by_precis": [38, 44, 69, 71], "mxnetadaptor": 41, "nc_model": [41, 43, 283], "unimpl": [41, 44], "yet": [41, 44, 71, 320, 536], "mxnetmodel": [41, 311], "data_x": [41, 43], "loader": [41, 43, 184, 185, 296, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "modelwis": [41, 333, 334], "opwis": [41, 340, 341], "recover_tuned_model": [41, 71], "mxnetqueri": 41, "g": [41, 44, 70, 269, 271, 296, 320, 500, 542, 549, 562, 563, 568, 572], "fully_connect": 41, "get_fuse_pattern": [41, 70, 71], "etc": [41, 70, 176, 212, 223, 248, 250, 255, 256, 262, 270, 271, 283, 295, 297, 303, 332, 358, 542, 552, 569], "get_mixed_precision_combin": [41, 70, 71], "optyp": [43, 252], "enum": [43, 68, 359, 461, 490], "deriv": [43, 68, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 223, 250, 256, 290, 292, 294, 317, 320, 327, 328, 329, 359], "new": [43, 68, 80, 130, 152, 165, 186, 198, 207, 210, 213, 214, 224, 236, 245, 247, 249, 278, 290, 291, 294, 296, 313, 320, 329, 359, 402, 403, 407, 519, 537, 538, 544, 556, 564, 566, 568, 569, 571, 573], "isiter": 43, "obj": [43, 176, 195, 233, 250, 255, 256, 266, 267, 268, 279, 280, 283, 291, 295, 296, 297, 330, 332, 352, 359], "ensure_list": 43, "check_mx_vers": 43, "mx": [43, 539], "__version__": 43, "make_nc_model": 43, "sym_model": 43, "ctx": [43, 539], "input_desc": 43, "tupl": [43, 69, 130, 142, 184, 185, 209, 213, 215, 246, 249, 251, 253, 260, 269, 272, 278, 301, 320, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 426, 457, 507, 526, 540, 555, 562, 571], "symnet": 43, "aux": 43, "descript": [43, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 253, 254, 260, 280, 301], "ncmodel": 43, "suppli": [43, 276], "prepare_model_data": 43, "dataloaderwrap": 43, "is_model_quant": 43, "query_quantizable_nod": 43, "map": [43, 45, 71, 152, 213, 249, 251, 252, 253, 255, 256, 259, 260, 261, 262, 264, 269, 283, 290, 292, 295, 300, 301, 302, 303, 305, 320, 328, 461, 537, 540, 544, 555, 562, 563, 566], "quantize_sym_model": 43, "run_forward": 43, "b_filter": 43, "collector": 43, "pre_batch": 43, "post_batch": 43, "propag": [43, 142], "filter": [43, 196, 197, 198, 199, 200, 201, 203, 207, 234, 235, 236, 237, 238, 239, 241, 245, 256, 297, 380, 420, 443, 509, 540, 552, 562, 563, 570, 572], "make_symbol_block": 43, "gluon": [43, 332, 557], "symbolblock": 43, "make_modul": 43, "parse_tune_config": 43, "quantizable_nod": 43, "distribute_calib_tensor": 43, "calib_tensor": 43, "calib_cfg": 43, "tensor_to_nod": 43, "kl": [43, 350, 353, 354, 548, 572, 573], "minmax": [43, 548, 572, 573], "calib_model": 43, "qsym_model": 43, "calib_data": [43, 539], "gather": [43, 45, 290, 320, 496], "calibdata": 43, "threshold": [43, 45, 173, 260, 290, 301, 320, 350, 353, 354, 555], "calibcollector": 43, "include_tensors_kl": 43, "include_tensors_minmax": 43, "num_bin": [43, 350, 353, 354], "8001": [43, 350, 353], "collectorbas": 43, "tensorcollector": 43, "include_nod": 43, "qtensor_to_tensor": 43, "onnxruntimeadaptor": 44, "rt": 44, "todo": [44, 196, 199, 234, 237, 260, 301, 320, 353, 354, 505], "func": [44, 215, 296, 507, 524, 573], "onnxdataload": 44, "evalut": 44, "onnxtransform": 44, "onnxmetr": 44, "evaluaton": 44, "visualizaton": 44, "f1": [44, 256, 261, 263, 264, 297, 302, 304, 305, 537, 544, 555, 569, 574], "modelproto": [44, 251, 252, 253, 557], "onnxrt_integeropsadaptor": 44, "onnxrt_qdqadaptor": 44, "onnxrtqueri": 44, "get_graph_optim": 44, "onnxrtaug": 45, "model_wrapp": 45, "dump_op_typ": 45, "black_nod": 45, "white_nod": 45, "cpuexecutionprovid": 45, "augment": 45, "augment_graph": 45, "activation_onli": 45, "weight_onli": 45, "quantization_candid": 45, "get_intermediate_output": 45, "calib_mod": 45, "intermedi": [45, 68, 215, 552, 562, 566], "dump_calibr": 45, "naiv": 45, "give": [45, 539, 572], "pair": [45, 127, 135, 556], "minimum": [45, 68, 320, 572], "second": [45, 88, 196, 234, 336, 420, 500, 536, 545, 559, 572, 573], "maximum": [45, 68, 78, 196, 213, 234, 249, 258, 278, 290, 292, 299, 320, 327, 335, 540, 566, 571], "ad": [45, 142, 196, 234, 257, 298, 327, 335, 377, 378, 380, 387, 388, 389, 390, 391, 395, 396, 536, 549, 556, 570], "reducemin": 45, "reducemax": 45, "calculate_quantization_param": 45, "quantization_threshold": 45, "calcul": [45, 69, 71, 167, 199, 200, 215, 237, 238, 261, 262, 272, 277, 278, 287, 290, 292, 293, 297, 302, 303, 316, 317, 320, 328, 331, 340, 350, 353, 411, 500, 505, 540, 555, 559, 562, 566, 569, 572, 573], "matmul": [45, 70, 76, 89, 109, 110, 119, 148, 253, 290, 320, 548], "param_nam": [45, 371], "conv_3": 45, "np": [45, 130, 159, 213, 249, 335, 544, 571], "conv_4": 45, "calculate_scale_zeropoint": 45, "last_nod": 45, "next_nod": 45, "rmin": [45, 68, 535], "rmax": [45, 68, 535], "quantize_rang": [45, 68], "op_registri": 62, "op_typ": [62, 69, 336, 340], "qop_registri": 62, "qoper": 62, "quanttyp": 68, "cast_tensor": 68, "tensorproto": 68, "tensor_target_dtyp": 68, "quantize_data_with_scale_zero": 68, "sym": [68, 548, 572, 573], "asym": [68, 548, 572, 573], "To": [68, 260, 286, 290, 294, 301, 320, 329, 498, 536, 538, 544, 556, 565, 567, 568, 572, 573], "pack": [68, 85], "b": [68, 94, 98, 196, 234, 253, 540, 555], "ab": [68, 278, 292, 317, 535, 566], "quantize_data": 68, "trasnform": 68, "equat": [68, 262, 264, 303, 305, 566], "q": [68, 127], "z": [68, 542], "real": [68, 69, 199, 216, 217, 237, 544, 564, 566], "quantizedvalu": 68, "new_quantized_nam": 68, "scale_nam": 68, "zero_point_nam": 68, "quantized_value_typ": 68, "axi": [68, 320], "quint8": 68, "linearli": 68, "inputoutputinti": 68, "quantizediniti": 68, "quantized_data": 68, "quantizationmod": 68, "quantizedvaluetyp": 68, "quantformat": [68, 253], "attribute_to_kwarg": 68, "helper": [68, 69, 167, 171, 196, 197, 198, 212, 234, 235, 236, 248, 252, 253, 276, 502], "make_nod": 68, "find_by_nam": 68, "item_list": 68, "item": [68, 178, 212, 248, 291, 330, 336, 409, 494, 526, 544, 569], "get_ops_recurs": 69, "prefix": [69, 165, 214, 256, 257, 298, 520, 549, 570], "graph_info": [69, 71, 307, 308, 309, 313, 314, 315], "templateadaptor": 69, "tampl": 69, "is_fused_modul": [69, 167, 171], "_propagate_qconfig_help": [69, 167, 171], "calculate_hessian_trac": 69, "enable_act": [69, 167], "hessian": [69, 167], "gradient": [69, 142, 292, 315, 317, 552, 562, 563, 572, 574], "amap": 69, "op_nam": [69, 330, 336, 340, 411, 416, 417, 425, 426, 570], "hessian_trac": [69, 167], "pytorchadaptor": 69, "objext": 69, "summari": [69, 122, 123, 214, 256, 536, 538, 561, 570], "optimizer_tupl": 69, "criterion_tupl": 69, "is_fused_child": 69, "_post_eval_hook": [69, 570], "is_fused_op": 69, "is_last_fused_child": 69, "q_capabl": 69, "get_non_quant_modul": 69, "model_kwarg": 69, "non_quant_modul": 69, "custom": [69, 135, 176, 269, 296, 358, 398, 403, 542, 562, 569], "keyword": 69, "custom_non_quant_dict": 69, "pytorch_ipexadaptor": 69, "ipex": [69, 552, 566, 574], "unspport": 69, "No": [69, 547, 561, 564], "pytorch_fxadaptor": 69, "fx": [69, 171, 332, 552, 564, 566, 567, 574], "prepare_sub_graph": 69, "sub_module_list": 69, "fx_op_cfg": 69, "is_qat": 69, "example_input": [69, 251, 253], "recurs": [69, 359], "qconfigmap": 69, "prepare_fx": 69, "dir": [69, 171, 196, 234, 358, 540, 547, 550], "convert_sub_graph": 69, "fuse_fx_model": 69, "fused_model": 69, "calculate_op_sensit": [69, 71], "output_op_nam": [69, 71], "confidence_batch": [69, 71, 572], "fallback": [69, 71, 171, 333, 334, 549, 556, 567, 572], "requantize_cfg": [69, 71], "stage": [69, 71, 117, 501, 542, 570, 572], "sort": [69, 71, 159, 420, 572], "sensit": [69, 71, 292, 317, 552, 562, 563, 572], "ops_lst": 69, "pytorchqueri": 69, "set_quantization_config": 70, "organ": [70, 536, 573], "unsupported_precis": 70, "tensorflowadaptor": 71, "graphdef": [71, 80, 81, 84, 85, 87, 94, 98, 109, 110, 116, 117, 118, 119, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 314, 486, 557], "graph_def": [71, 77, 165, 314, 332, 454, 486, 487], "frozen": [71, 80, 314, 332, 448, 451, 536, 557], "ckpt": [71, 165, 314, 332, 574], "savedmodel": [71, 314, 332, 574], "folder": [71, 165, 198, 203, 236, 241, 332, 358, 540, 570], "larger": [71, 320], "tuning_cfg_to_fw": 71, "tuning_cfg": 71, "pars": [71, 159, 196, 197, 209, 213, 234, 235, 246, 249, 278, 361, 371, 397, 398, 400, 403, 404, 405, 406, 409, 462, 466, 470, 475, 481, 500, 507, 515, 526, 571], "compat": [71, 105, 165, 260, 269, 301, 314, 544, 557, 568], "definit": [71, 130, 189, 194, 227, 232, 425, 438, 447, 493, 523], "inspect_weight_and_bia": 71, "node_list": 71, "graph_node_name_map": [71, 165], "fused_node_map": 71, "pattern_map": 71, "seq": 71, "fused_mapping_revers": 71, "fused_map": 71, "inspect_activ": 71, "local": [71, 290, 320, 327, 359, 373, 403, 408, 421, 441, 536, 569, 572], "tensorflowbasemodel": [71, 314, 452], "quantizedv2": 71, "qat_convert": 71, "quantize_recip": [71, 135, 136], "kera": [71, 94, 136, 142, 220, 309, 314, 432, 439, 449, 544, 557], "converted_model": [71, 556], "mse": [71, 171, 264, 305, 341, 411, 417, 536, 555, 565, 568], "backup": 71, "cfg": [71, 95, 96, 177], "fallen": 71, "previou": [71, 278, 280, 320, 536, 568, 570, 572], "denot": 71, "tensorflow_itexadaptor": 71, "performance_onli": [71, 127, 151, 156, 164, 517, 572], "get_eightbit_pattern": 71, "qdq_enabl": 71, "eightbit": [71, 570], "generate_internal_pattern": 71, "intern": [71, 130, 167, 276, 492, 539, 563], "bf16convert": [74, 567], "fp32_op": [74, 127], "bf16_op": [74, 127, 567], "graph_bas": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129], "graphrewriterbas": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129], "do_transform": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 144, 151, 152, 156, 160, 163, 164], "convertaddtobiasaddoptim": 76, "addv2": [76, 93, 94, 548], "biasadd": [76, 88, 90, 148, 155, 548], "convertlayoutoptim": 77, "layout": 77, "nchw": 77, "nhwc": 77, "convertleakyreluoptim": 78, "subgraph": [78, 86, 90, 94], "leakyrelu": 78, "mul": [78, 89, 90, 93, 94, 148], "coeffici": [78, 270], "less": [78, 542, 562], "convertnantorandom": 79, "const": [79, 87, 88, 91, 92, 94, 109, 110, 123, 130, 297, 377, 388, 391, 397, 403, 405, 406, 410, 489, 497, 506], "nan": 79, "convertplaceholdertoconst": 80, "rewrit": [80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129], "renam": [80, 105, 278, 568], "placeholderwithdefault": 80, "constant": [80, 86, 130, 159, 251, 253, 335, 490, 539, 548, 571], "simplifi": 80, "input_graph_def": [80, 81, 84, 85, 87, 94, 98, 109, 110, 130, 159], "nodes_to_convert": 80, "placehold": [80, 194, 232], "strtobool": 80, "val_str": 80, "equival": [80, 269], "dequantizecastoptim": 81, "dilatedcontract": 82, "injectdummybiasaddoptim": 83, "expanddimsoptim": 84, "expanddim": 84, "whose": [84, 109, 110, 291, 320, 550, 562, 572], "fetchweightfromreshapeoptim": 85, "fetch": [85, 189, 227, 260, 301, 539], "reshap": [85, 94, 286, 320], "foldbatchnormnodesoptim": 86, "scale_after_norm": 86, "batchnormwithglobalnorm": 86, "nodedef": [86, 91, 92, 94, 130, 159, 486], "normal": [86, 94, 213, 249, 262, 303, 507, 537, 539, 559, 571], "fold": [86, 87, 251, 253, 548], "convolut": [86, 542, 562, 564], "onc": [86, 130, 165, 220, 294, 329, 536, 539, 564], "That": [86, 536, 539], "opportun": 86, "rather": [86, 550], "expens": [86, 542, 572], "bake": 86, "identifi": [86, 91, 92, 94, 260, 301, 314], "simpler": 86, "form": [86, 94, 105, 260, 262, 301, 303, 501, 536, 542], "spot": 86, "fusedbatchnorm": [86, 105], "fusedbatchnormv3": 86, "_fusedbatchnormex": 86, "newer": 86, "style": [86, 189, 203, 227, 241, 538, 540, 550], "badli": [86, 94, 105], "duplic": [86, 94, 123, 335], "graphfoldconstantoptim": 87, "check_all_fold": 87, "check_const_input": 87, "node_nam": [87, 91, 92, 94, 130, 159, 165, 253, 313, 314, 392, 486], "supported_op_typ": 87, "fusebiasaddandaddoptim": 88, "fusecolumnwisemuloptim": 89, "depthwiseconv2dn": [89, 548], "fuseconvwithmathoptim": 90, "elimin": [90, 549], "math": [90, 566], "realdiv": [90, 93], "node_name_from_input": [91, 92, 94, 130, 159], "strip": [91, 92, 94, 165, 570], "port": [91, 92, 94, 159, 520, 524, 536], "underli": [91, 92, 94, 270], "node_from_map": [91, 92, 94], "node_map": [91, 92, 94], "pull": [91, 92, 94, 501], "entri": [91, 92, 94, 167, 220, 255, 296, 417, 420, 500, 507, 554], "index": [91, 92, 94, 135, 142, 189, 194, 198, 202, 207, 214, 227, 232, 236, 240, 245, 256, 281, 316, 359, 524, 539, 555], "isn": [91, 92, 94, 130], "present": [91, 92, 94, 536, 564], "values_from_const": [91, 92, 94, 130], "node_def": [91, 92, 94, 130], "extract": [91, 92, 94, 130, 198, 236, 526, 540], "ndarrai": [91, 92, 94, 130, 213, 249, 269, 271, 315, 335, 350, 353, 547, 571], "access": [91, 92, 94, 130, 142, 177, 178, 492, 507, 520, 524, 536], "get_const_dim_count": [91, 92], "dimens": [91, 92, 188, 213, 226, 249, 272, 287, 320, 335, 540, 542, 562, 571], "fusegeluoptim": 93, "sqrt": 93, "erf": 93, "gelu": 93, "fuselayernormoptim": 94, "remap": 94, "smaller": [94, 213, 249, 542, 562, 563, 571], "layernorm": [94, 278], "case": [94, 98, 195, 212, 213, 214, 233, 248, 249, 255, 256, 264, 283, 295, 296, 305, 498, 502, 507, 536, 537, 539, 542, 544, 548, 550, 555, 559, 562, 564, 566, 571, 573], "fusedbatcnormv3": 94, "And": [94, 223, 256], "restrict": [94, 562, 563, 569], "2d": 94, "3d": [94, 564, 574], "contraint": 94, "fusedop": 94, "fill": [94, 379, 381, 382, 384, 386, 389, 390, 394, 536, 569, 571], "gamma": 94, "beta": [94, 317], "h": [94, 213, 249, 544, 571], "_mkllayernorm": 94, "fusepadwithconv2doptim": 95, "excluded_op_nam": [95, 96, 330], "new_api": [95, 96, 101, 117, 124, 151, 156, 160], "itex_qdq_mod": [95, 96], "fusepadwithfp32conv2doptim": 96, "fusetransposereshapeoptim": 97, "graphcseoptim": 98, "cse": 98, "those": [98, 340, 341, 359, 542, 549, 550, 560, 562, 563, 566, 572], "child": [98, 570], "b1": 98, "c1c2": 98, "d1": [98, 359], "c1": 98, "c2": 98, "bound": [98, 213, 214, 249, 256, 260, 269, 301, 335, 555, 571], "elim": 98, "grappleroptim": 99, "input_output_nam": 99, "opt_cfg": 99, "wrapper": [99, 142, 195, 207, 210, 213, 215, 216, 217, 218, 219, 233, 245, 247, 249, 260, 264, 301, 304, 305, 308, 310, 524, 532, 567], "grappler": [99, 548], "insertprintminmaxnod": 101, "pre_node_nam": 101, "post_node_nam": 101, "movesqueezeafterreluoptim": 102, "removetrainingnodesoptim": 104, "protected_nod": [104, 159], "types_to_splic": [104, 159], "checknumer": [104, 159], "stopgradi": 104, "renamebatchnormoptim": 105, "fusedbatchnormv2": 105, "due": [105, 562, 563, 566, 570], "histor": 105, "latter": [105, 135], "former": 105, "platform": [105, 496, 549, 552, 564, 566, 569, 574], "vnni_bf16": 105, "amx": 105, "instruct": [105, 536, 542, 553, 556, 564, 565, 566], "splitsharedinputoptim": 106, "stripequivalentnodesoptim": 107, "output_node_nam": [107, 108, 151, 152, 156, 159, 165], "stripunusednodesoptim": 108, "input_node_nam": [108, 151, 156, 159, 165], "switchoptim": 109, "condit": [109, 196, 197, 198, 213, 234, 235, 236, 249, 540, 554, 571, 572], "enter": [109, 110], "updateenteroptim": 110, "workaround": 110, "freezefakequantopoptim": 113, "fake_qu": [113, 127, 151, 156], "freezevaluetransform": 114, "max_min_data": [114, 115], "postfix": [114, 115], "tensor_data": 114, "th": [114, 115], "gpu": [114, 115, 127, 130, 159, 552, 562, 565, 566], "itex_mod": [114, 127, 151, 156], "generate_output_graph": [114, 115], "max_name_valu": [114, 115], "freeze_max": [114, 115], "freeze_min": [114, 115], "generate_output_graph_rang": [114, 115], "freezevaluewithoutcalibtransform": 115, "95": [115, 260, 264, 301, 305, 555, 574], "fuseconvredundantdequantizetransform": 116, "_quantizedconv": 116, "_quantizeddeconv": 116, "successor": [116, 117, 118, 119], "fuseconvrequantizetransform": 117, "requant": [117, 119, 570], "fuse_pattern": 117, "sum_pattern": 117, "fusematmulredundantdequantizetransform": 118, "_quantizedmatmul": [118, 119], "fusematmulrequantizedequantizetransform": 119, "quantizedmatmul": 119, "quantizedmatmulwithbiasanddequant": 119, "fusematmulrequantizetransform": 119, "rtype": [119, 335, 502], "fusematmulrequantizedequantizenewapitransform": 119, "fusematmulrequantizenewapitransform": 119, "newapi": 119, "metainfochangingmemopoptim": 121, "metaop": 121, "posthostconstconvert": 122, "hostconst": 122, "postcseoptim": 123, "share": [123, 159, 547, 548, 572], "quantizev2": [123, 148], "quantizedrnnconvert": 124, "calibration_data": [124, 127], "rnn_detail": 124, "scalepropagationtransform": 125, "direct": [125, 290, 320, 461], "generategraphwithqdqpattern": 127, "op_wise_config": [127, 151, 156], "quantized_nod": 127, "dq": 127, "befor": [127, 142, 196, 223, 234, 250, 251, 253, 256, 283, 290, 292, 293, 294, 297, 320, 327, 328, 329, 331, 340, 397, 536, 538, 539, 540, 542, 544, 547, 548, 549, 559, 562, 566, 569, 570, 572], "mergeduplicatedqdqoptim": 128, "shareqdqforitexypatternoptim": 129, "graphanalyz": 130, "extend_engin": 130, "singleton": [130, 297, 489, 497], "properti": [130, 142, 186, 188, 196, 198, 214, 215, 223, 224, 226, 234, 236, 250, 255, 256, 263, 264, 265, 266, 280, 283, 295, 296, 304, 305, 307, 308, 309, 311, 313, 314, 315, 360, 376, 408, 415, 419, 424, 425, 428, 440, 443, 448, 452, 461, 464, 469, 473, 476, 483, 493, 500, 501, 502, 505, 510, 514, 517, 519, 520, 554, 561], "getter": [130, 223, 250, 256, 280, 283, 295, 296, 314, 315, 441], "_graph": 130, "has_positive_input": 130, "retrun": 130, "neg": 130, "get_graph_input_output": 130, "clearli": 130, "similar": [130, 278, 549, 565, 572, 573], "summarize_graph": 130, "writtern": 130, "googl": [130, 556, 564], "query_fusion_pattern_nod": 130, "aggreg": [130, 502], "_search_pattern": 130, "remove_node_with_single_input_output": 130, "rebuild": 130, "except": [130, 297, 359, 489, 497, 498, 507, 522, 532, 574], "remove_nod": 130, "replace_const_nod": 130, "new_const_nod": 130, "target_nod": 130, "old_constant_node_nam": 130, "replace_al": 130, "outdat": 130, "replace_constant_graph_with_constant_nod": 130, "new_nod": 130, "old_end_node_nam": 130, "replace_single_nod": 130, "old_output_node_nam": 130, "old_output_nam": 130, "old_input_node_nam": 130, "old_input_nam": 130, "bottom": [130, 333, 334, 536], "replace_nod": 130, "old_node_nam": 130, "output_nodes_nam": 130, "node_name_detail": 130, "parent": [130, 287, 292, 294, 327, 329, 570], "add_nod": [130, 425], "start_node_nam": 130, "end_node_nam": 130, "dump_graph": 130, "parse_graph": 130, "graphrewriterhelp": 130, "encapsul": [130, 184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 557], "compare_node_attr": 130, "node_a": 130, "node_b": 130, "compar": [130, 167, 264, 305, 340, 341, 536, 539, 543, 549, 555, 563, 566, 569, 570, 572], "create_nod": [130, 159], "create_constant_nod": [130, 159], "datatyp": [130, 159, 567, 572], "set_attr_dtyp": [130, 159], "set_attr_tensor": [130, 159], "set_attr_type_list": [130, 159], "attr": [130, 159, 165], "set_attr_string_list": [130, 159], "set_attr_str": [130, 159], "set_attr_int_list": 130, "set_attr_int": [130, 159], "set_attr_float": [130, 159], "set_attr_bool": [130, 159], "fakequantizebas": 133, "get_config": [133, 142, 533], "serial": [133, 196, 234, 409, 416, 417, 447, 496, 498, 509, 510, 514, 515, 539], "fakequant": 133, "classmethod": [133, 142, 284, 285, 286, 495, 528, 530, 533], "from_config": [133, 142], "instanti": [133, 560], "per_channel": [133, 548, 572, 573], "num_bit": 133, "channel_axi": [133, 173, 175], "symmetr": [133, 535, 566, 571], "narrow_rang": 133, "quantizeconfig": [135, 136, 142], "There": [135, 264, 296, 305, 536, 542, 548, 552, 555, 556, 573], "add_quantize_recip": 135, "recip": [135, 251, 253, 255, 256, 295, 572], "layer_nam": [135, 290, 320], "some": [135, 184, 196, 223, 234, 256, 291, 330, 333, 336, 343, 507, 536, 545, 553, 555, 559, 562, 563, 566, 567, 570, 572], "conv5_block3_3_conv": 135, "flase": 135, "conv5_block3_3_add": 135, "query_lay": 135, "layer_recip": 135, "remove_lay": 135, "layers_nam": 135, "get_quantize_recip": 135, "is_empti": 135, "clear_quantize_recip": 135, "init_quantize_config": 136, "model_nam": [136, 272, 387, 393, 507], "special": [136, 555, 559], "qat_clone_funct": 136, "leav": 136, "quantizewrapp": [136, 142], "wrapped_lay": 136, "quantizelayeradd": 139, "quantize_layer_bas": [139, 141], "quantizelayerbas": [139, 141], "quantizelayerbatchnorm": 141, "batchnorm": 141, "quantizewrapperbas": 142, "trainabl": 142, "sublay": 142, "trainable_weight": 142, "track": 142, "descent": 142, "non_trainable_weight": 142, "manual": [142, 198, 236, 540], "add_loss": 142, "regular": [142, 257, 291, 298, 328, 562], "eager": [142, 293, 297, 331, 361, 466, 470, 475, 544, 552, 566, 567, 570, 574], "safe": [142, 353, 354, 538], "gradienttap": 142, "input_shap": [142, 200, 238, 440, 443, 452, 540], "tensorshap": 142, "compute_output_shap": 142, "caus": [142, 562, 563], "state": [142, 167, 263, 264, 276, 278, 304, 305, 562, 563], "happen": 142, "later": [142, 359, 549, 570], "output_shap": 142, "query_input_index": 142, "logic": [142, 184, 185, 333, 336, 343, 519, 572, 573], "live": 142, "output_obj": 142, "fusenodestartwithfusedbatchnormv3": [143, 153], "quantize_graph_bas": [143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158], "quantizenodebas": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "get_longest_fus": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "apply_the_transform": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "fusenodestartwithconcatv2": [144, 154], "fusenodestartwithconv2d": [145, 155], "fusenodestartwithdeconv2d": 146, "fusenodestartwithfusedinstancenorm": 147, "fusenodestartwithmatmul": [148, 157], "apply_matmul_biasadd_relu_fus": 148, "match_node_nam": [148, 155], "apply_matmul_biasadd_fus": 148, "apply_batchmatmulv2_fus": 148, "batchmatmul": 148, "batchmatmulv2": 148, "apply_batchmatmulv2_mul_add_fus": 148, "fusenodestartwithpool": [149, 158], "optimizeqdqgraph": 151, "op_wise_sequ": [151, 156], "quantizegraphbas": [151, 152, 156], "remove_dead_nod": 152, "output_nam": [152, 251, 253], "longer": [152, 196, 213, 234, 249, 540, 571], "add_output_graph_nod": 152, "output_nod": [152, 387], "create_nodes_map": 152, "apply_conv_biasadd_relu_fus": 155, "quantizegraphforintel": 156, "quantizegraphhelp": 159, "staticmethod": 159, "get_sorted_graph": 159, "reorder": [159, 276, 278], "easier": [159, 536, 564], "split_shared_input": 159, "in_graph": [159, 165], "ouput": 159, "remove_training_nod": 159, "aren": 159, "uncondition": 159, "copy_attr": 159, "attr_valu": 159, "copi": [159, 291], "unique_node_name_from_input": 159, "ensure_tensor_name_has_port": 159, "biascorrect": 160, "fp32_graph": 160, "weight_empir": 160, "graph_transform_bas": [160, 163, 164], "graphtransformbas": [160, 163, 164], "Will": [160, 187, 190, 207, 520, 542, 552], "task": [160, 196, 203, 234, 241, 264, 278, 305, 540, 542, 552, 555], "w_int8": [160, 175], "w_fp32": [160, 175], "ratio": [160, 175, 209, 213, 246, 249, 290, 292, 293, 294, 297, 320, 327, 329, 331, 540, 562, 563, 571, 574], "equal": [160, 175, 555], "scale_c": [160, 175], "shift": [160, 175, 209, 246, 571], "notic": [160, 175, 214, 256, 554], "empir": [160, 175], "insertlog": 163, "input_pb": [163, 164], "node_name_list": 163, "show_nam": 163, "show_op": 163, "first_n": 163, "summar": [163, 542], "1024": [163, 198, 236], "messag": [163, 507, 519, 524, 572], "dump_fp32": 163, "rerangequantizedconcat": 164, "rerange_quant": 164, "concat": [164, 493], "disable_random": 165, "read_graph": 165, "in_graph_is_binari": 165, "read": [165, 198, 201, 213, 236, 239, 249, 291, 293, 297, 331, 426, 430, 431, 540, 567, 569], "write_graph": 165, "out_graph_def": 165, "out_graph_fil": 165, "write": [165, 205, 206, 207, 243, 244, 245, 260, 301, 359, 544, 550, 569, 570], "is_ckpt_format": 165, "model_path": [165, 426, 441, 446, 507], "is_saved_model_format": 165, "saved_model": [165, 256, 266, 432, 439, 449, 558], "get_tensor_by_nam": 165, "try_cnt": 165, "scope": [165, 223, 256], "tensor_nam": [165, 315], "suffix": 165, "iterator_sess_run": 165, "sess": [165, 314], "iter_op": 165, "feed_dict": [165, 195, 233], "output_tensor": [165, 314], "makeiter": 165, "strip_unused_nod": 165, "strip_unused_lib": 165, "r1": 165, "15": [165, 271, 548, 549, 574], "branch": 165, "strip_equivalent_nod": 165, "get_tensor_val_from_graph_nod": 165, "tensor_v": 165, "hessiantrac": 167, "yao": 167, "zhewei": 167, "et": [167, 278], "al": [167, 278], "pyhessian": 167, "2020": [167, 554], "ieee": [167, 556], "confer": [167, 563], "big": 167, "dong": 167, "zhen": 167, "hawq": [167, 338], "system": [167, 214, 359, 496, 522, 523, 562], "33": [167, 269, 574], "18518": 167, "18529": 167, "openvinotoolkit": 167, "nncf": 167, "mse_metric_gap": [167, 340, 411], "fp32_tensor": [167, 340, 411], "dequantize_tensor": [167, 340, 411], "euclidean": [167, 340, 411, 542], "distanc": [167, 340, 341, 411, 542], "get_act_gap": 167, "gap": [167, 557], "get_avg_trac": 167, "num_sampl": [167, 264, 305], "compare_weight": 167, "float_dict": 167, "quantized_dict": 167, "being": [167, 260, 272, 296, 301, 353, 354, 428], "usag": [167, 195, 233, 256, 260, 266, 296, 301, 507, 536, 540, 544, 546, 549, 555, 558, 559, 565, 571], "wt_compare_dict": 167, "float_model": 167, "qmodel": 167, "compute_error": 167, "weight_dict": 167, "get_embedding_contigu": 171, "embed": [171, 278], "contigu": [171, 562], "append_attr": 171, "fx_model": 171, "get_mse_order_per_fp32": 171, "example_inp": 171, "influenc": 171, "fallback_ord": 171, "algorithm_registri": [172, 174], "algorithm_typ": [172, 174], "registr": [172, 174, 198, 202, 205, 206, 207, 210, 213, 220, 236, 240, 243, 244, 245, 247, 249, 286], "algorithmschedul": [172, 174], "fastbiascorrect": 173, "weightcorrect": 175, "ep": 175, "1e": [175, 573], "05": [175, 260, 264, 301, 305, 501, 549, 555, 574], "benchmark_conf": [176, 177, 297], "prefer": [176, 255, 256, 295, 297, 332], "b_dataload": [176, 214, 256, 537, 558], "b_func": [176, 214, 256], "benchmarkconfig": 176, "cfg_fname": 177, "parser": [177, 297, 371, 489, 493, 497, 526], "quantization_conf": 177, "dotdict": 177, "pruning_conf": 177, "graph_optimization_conf": [177, 255, 256, 549], "mixedprecision_conf": 177, "distillation_conf": [177, 250, 256], "defaultconf": 177, "notat": [177, 178], "deep_get": 178, "dot": [178, 507, 556, 566], "nest": 178, "eg": [178, 198, 202, 207, 236, 240, 245, 540, 565], "john": 178, "deep_set": 178, "male": 178, "distillationconfig": [181, 297], "teacher_model": [181, 215, 250, 256, 297, 542], "learning_r": [181, 297, 565, 573], "altern": [181, 297], "sigopttunestrategi": 184, "q_dataload": [184, 185, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 550, 572], "eval_func": [184, 185, 223, 255, 256, 266, 296, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 537, 539, 540, 544, 556, 566, 572, 573], "q_hook": [184, 185, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "tunestrategi": [184, 185, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 572], "hpo": 184, "mandatori": [184, 185, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 545, 573], "reserv": [184, 185, 223, 256, 296, 334, 335, 336, 337, 338, 340, 341, 342, 343], "tuner": [184, 185, 255, 256, 295, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "scalar": [184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 353, 354, 555, 556, 566], "pseudo": [184, 185, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 570], "next_tune_cfg": [184, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 572], "travers": [184, 185, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 572], "concret": [184, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343], "overrid": [184, 223, 256, 295, 333, 336, 343, 359, 498], "constraint": [184, 255, 256, 295, 539, 569, 572, 573], "tpetunestrategi": 185, "stop": [185, 336, 343, 477, 501, 545, 572, 573], "trials_count": [185, 336, 343], "reach": [185, 290, 294, 320, 329, 336, 343, 538, 562, 563, 572], "basedatalod": [186, 224], "basedataload": [186, 188, 191, 192, 193, 195, 224, 226, 229, 230, 231, 233], "last_batch": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "rollov": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "collate_fn": [186, 188, 189, 191, 192, 193, 195, 216, 217, 224, 226, 227, 229, 230, 231, 233, 540], "sampler": [186, 188, 190, 191, 192, 193, 195, 216, 217, 224, 226, 228, 229, 230, 231, 233, 245, 256, 544], "batch_sampl": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "num_work": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233, 566], "pin_memori": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "shuffl": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233, 539, 566], "_generate_dataload": [186, 224], "drop": [186, 224, 260, 291, 301, 320, 556, 562, 563, 574], "incomplet": [186, 224], "discard": [186, 224], "entranc": [187, 190, 207], "dispatch": [187, 190, 207, 552], "default_col": [188, 226], "merg": [188, 226, 570, 572], "outer": [188, 226], "defaultdataload": [188, 192, 195, 226, 230, 233], "base_dataload": [188, 190, 191, 192, 193, 195, 226, 228, 229, 230, 231, 233, 245, 256], "drop_last": [189, 194, 227, 232], "iterablefetch": [189, 227], "indexfetch": [189, 227], "singl": [189, 196, 212, 213, 227, 234, 248, 249, 260, 269, 271, 292, 294, 301, 317, 329, 335, 393, 409, 428, 493, 526, 540, 562, 563], "indic": [189, 194, 196, 227, 232, 234, 250, 256, 260, 276, 278, 281, 282, 301, 320, 536, 537, 547, 570], "default_dataload": [190, 192, 195, 228, 230, 233, 245, 256], "fetcher": [190, 228, 245, 256], "mxnet_dataload": [190, 228, 245, 256], "onnxrt_dataload": [190, 228, 245, 256], "pytorch_dataload": [190, 228, 245, 256], "tensorflow_dataload": [190, 228, 245, 256, 486], "mxnetdataload": [191, 229], "onnxrtbertdataload": [192, 230], "bert": [192, 195, 196, 213, 230, 233, 234, 249, 540, 542, 545, 555, 562, 571, 574], "varient": [192, 230], "onnxrtdataload": [192, 230], "pytorchdataload": [193, 231], "data_sourc": [194, 232], "__iter__": [194, 198, 202, 207, 232, 236, 240, 245, 537, 539], "matter": [194, 232, 567], "iterablesampl": [194, 232], "squential": [194, 232], "iterabledataset": [194, 197, 198, 200, 201, 202, 207, 232, 235, 236, 238, 239, 240, 245], "indexdataset": [194, 232], "__getitem__": [194, 198, 202, 207, 210, 213, 232, 236, 240, 245, 247, 249, 537, 539, 540], "__len__": [194, 198, 202, 207, 232, 236, 240, 245, 539, 540], "inter": [194, 198, 202, 207, 232, 236, 240, 245], "retriev": [194, 232, 502], "sequentialsampl": [194, 232], "batchsampl": [194, 232], "tfdatadataload": [195, 233], "tensorflow1": [195, 233], "coupl": [195, 233], "satisfi": [195, 233, 553], "tf1": [195, 233, 557], "although": [195, 233, 569], "tensorflowbertdataload": [195, 233], "tensorflowmodelzoobertdataload": [195, 233], "zoo": [195, 213, 233, 249, 574], "tensorflowdataload": [195, 233, 486], "directli": [195, 233, 260, 264, 291, 301, 305, 555, 565, 566, 570], "pytorchbertdataset": [196, 234], "model_typ": [196, 234, 411, 441, 540], "tensordataset": [196, 234, 540], "link": [196, 234, 536, 540, 574], "huggingfac": [196, 234, 540], "easi": [196, 234, 256, 295, 536, 539, 564, 566, 569], "squad": [196, 213, 234, 249, 261, 262, 264, 302, 303, 305, 540, 555, 571, 574], "xlnet": [196, 234, 540], "xlm": [196, 234, 540, 574], "101": [196, 234, 264, 305, 555, 574], "2043": [196, 234], "2001": [196, 234], "onnxrtbertdataset": [196, 234], "data_dir": [196, 234, 540], "model_name_or_path": [196, 234, 540], "max_seq_length": [196, 213, 234, 249, 540, 571], "128": [196, 199, 200, 213, 234, 237, 238, 249, 540, 566, 571, 574], "do_lower_cas": [196, 212, 213, 234, 248, 249, 540, 571], "mrpc": [196, 234, 264, 305, 540, 555, 574], "dynamic_length": [196, 234, 540], "shortcut": [196, 234, 540], "truncat": [196, 213, 234, 249, 540, 571], "shorter": [196, 213, 234, 249, 540, 571], "lowercas": [196, 234, 540], "qqp": [196, 234, 540, 555, 574], "qnli": [196, 234, 540, 555, 574], "rte": [196, 234, 540, 555, 574], "st": [196, 234, 540, 555], "cola": [196, 234, 540, 555, 574], "mnli": [196, 234, 540, 555, 574], "wnli": [196, 234, 540, 555, 574], "mobilebert": [196, 234, 540, 542, 574], "roberta": [196, 234, 540, 574], "fix": [196, 234, 292, 327, 538, 540, 563, 572], "uncas": [196, 213, 234, 249, 540, 571, 574], "load_and_cache_exampl": [196, 234], "convert_examples_to_featur": [196, 213, 234, 249], "max_length": [196, 234], "label_list": [196, 234, 264, 305], "output_mod": [196, 234], "pad_token": [196, 234], "pad_token_segment_id": [196, 234], "mask_padding_with_zero": [196, 234], "inputfeatur": [196, 213, 234, 249], "input_id": [196, 213, 234, 249, 542, 562], "vocabulari": [196, 212, 213, 234, 248, 249, 278, 571], "attention_mask": [196, 234, 562], "mask": [196, 234, 260, 276, 278, 287, 290, 292, 294, 301, 315, 320, 327, 329, 562, 563, 574], "NOT": [196, 234, 548], "token_type_id": [196, 234, 562], "segment": [196, 234, 258, 260, 299, 301], "portion": [196, 234], "problem": [196, 234, 264, 271, 305, 555, 556, 572], "regress": [196, 234, 538], "seq_length": [196, 234], "to_json_str": [196, 234], "json": [196, 197, 213, 234, 235, 249, 369, 481, 483, 491, 498, 507, 540, 557, 571], "tensorflowbertdataset": [196, 234], "root": [196, 197, 198, 201, 234, 235, 236, 239, 264, 270, 305, 307, 308, 309, 311, 313, 314, 315, 349, 524, 537, 539, 540, 544, 555, 572, 573], "label_fil": [196, 213, 234, 249, 540, 571], "tfrecord": [196, 197, 198, 202, 207, 234, 235, 236, 240, 245, 540], "parsedecodebert": [196, 234], "tensorflowmodelzoobertdataset": [196, 197, 234, 235], "num_cor": [196, 197, 201, 234, 235, 239, 540], "28": [196, 197, 201, 234, 235, 239, 540, 549, 574], "resiz": [196, 197, 209, 213, 234, 235, 246, 249, 537, 539, 540, 571, 572], "coco": [197, 204, 208, 235, 242, 260, 264, 301, 305, 555], "parsedecodecoco": [197, 235], "cocorecorddataset": [197, 235], "directori": [197, 198, 235, 236, 314, 358, 359, 420, 473, 491, 507, 520, 540, 544, 547, 570], "interleav": [197, 235, 540], "parallel": [197, 235, 540, 562], "cocoraw": [197, 235, 540], "img_dir": [197, 235, 540], "val2017": [197, 235, 540], "anno_dir": [197, 235, 540], "annot": [197, 235, 260, 301, 540, 555], "instances_val2017": [197, 235, 540], "arrang": [197, 198, 201, 235, 236, 239, 327, 540, 562], "jpg": [197, 201, 203, 235, 239, 241, 540], "coconpi": [197, 235, 540], "npy_dir": [197, 235, 540], "npy": [197, 235, 540], "tensorflowdataset": [198, 236], "pytorchdataset": [198, 236], "mxnetdataset": [198, 236], "onnxrtqldataset": [198, 236], "onnxrtitdataset": [198, 236], "IT": [198, 205, 236, 243], "pytorchmxnetwrapdataset": [198, 236], "datafunc": [198, 236], "pytorchmxnetwrapfunct": [198, 213, 236, 249], "framework_dataset": [198, 236], "convent": [198, 236, 260, 301, 542], "imageclassifi": [198, 236], "choos": [198, 236, 536, 552, 568, 572, 573], "tensorflow_itex": [198, 201, 202, 203, 205, 206, 207, 236, 239, 240, 241, 243, 244, 245, 565], "onnxrt_qdq": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 565], "onnxrt_qlinearop": [198, 202, 205, 206, 207, 213, 236, 240, 243, 244, 245, 249, 565], "onnxrt_integerop": [198, 202, 205, 206, 207, 213, 236, 240, 243, 244, 245, 249, 545, 565], "pytorch_ipex": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 565, 573], "onnxrt_qoper": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 565], "dataset_registri": [198, 202, 207, 236, 240, 245], "dataset_typ": [198, 202, 207, 236, 240, 245, 255, 256, 266, 295, 380], "dataset_format": [198, 202, 207, 236, 240, 245], "data_format": [198, 202, 207, 209, 236, 240, 245, 246], "raw_imag": [198, 202, 207, 236, 240, 245], "overwrit": [198, 202, 207, 236, 240, 245], "download_url": [198, 236], "filenam": [198, 236, 270, 359, 360, 457, 473, 477, 483, 493, 501, 540], "md5": [198, 236], "download": [198, 236, 432, 455, 456, 458, 459, 489, 536, 540, 549, 553, 568], "gen_bar_updat": [198, 236], "progress": [198, 236, 294, 320, 327, 329, 563], "bar": [198, 236, 536], "check_integr": [198, 236], "fpath": [198, 236], "checksum": [198, 236], "calculate_md5": [198, 236], "chunk_siz": [198, 236], "cifar10": [198, 236, 540], "cifar100": [198, 236, 540], "toronto": [198, 236, 540], "edu": [198, 236, 540], "kriz": [198, 236, 540], "cifar": [198, 236, 540, 574], "tar": [198, 236, 540], "gz": [198, 236, 540], "subset": [198, 201, 236, 239, 540], "internet": [198, 236, 536, 540], "put": [198, 236, 540, 542, 562], "again": [198, 236, 540, 549, 567, 572], "load_meta": [198, 236], "meta": [198, 236], "pytorchcifar10": [198, 236], "mxnetcifar10": [198, 236], "tensorflowcifar10": [198, 236], "pytorchcifar100": [198, 236], "mxnetcifar100": [198, 236], "tensorflowcifar100": [198, 236], "mnist": [198, 236, 540, 544], "institut": [198, 236], "standard": [198, 213, 236, 249, 555, 571, 572], "fashionmnist": [198, 236, 540], "npz": [198, 236, 540], "idx1": [198, 236, 540], "ubyt": [198, 236, 540], "idx3": [198, 236, 540], "t10k": [198, 236, 540], "class_to_idx": [198, 236], "read_data": [198, 236], "pytorchmnist": [198, 236], "mxnetmnist": [198, 236], "tensorflowmnist": [198, 236], "pytorchfashionmnist": [198, 236], "mxnetfashionmnist": [198, 236], "tensorflowfashionmnist": [198, 236], "imagefold": [198, 236, 537, 539, 540, 544], "subfold": [198, 236], "belong": [198, 236, 253, 310, 566], "class_1": [198, 236, 540], "xxx": [198, 236, 540, 542], "png": [198, 236, 540], "xxy": [198, 236, 540], "xxz": [198, 236, 540], "class_n": [198, 236, 540], "123": [198, 236, 540, 571], "nsdf3": [198, 236, 540], "asd932_": [198, 236, 540], "mxnetimagefold": [198, 236], "tensorflowimagefold": [198, 236], "tensorflowtfrecorddataset": [198, 236], "tensorflowimagerecord": [198, 236], "000": [198, 236, 540], "001": [198, 236, 540, 544, 573], "099": [198, 236, 540], "tensorflowvocrecord": [198, 236], "pascal": [198, 236], "voc": [198, 236, 264, 305], "2012": [198, 236], "00000": [198, 236], "00004": [198, 236], "00001": [198, 236], "00003": [198, 236], "dummydataset": [199, 200, 237, 238], "127": [199, 200, 237, 238, 540, 566, 574], "stand_norm": [199, 200, 237, 238, 540], "dummy_v2": [200, 238, 540], "sparse_dummy_v2": [200, 238, 540], "label_shap": [200, 238, 540], "sparsedummydataset": [200, 238], "dense_shap": [200, 238, 540], "sparse_ratio": [200, 238, 540], "imagenetraw": [201, 239, 540], "data_path": [201, 239, 540], "image_list": [201, 239, 540], "img1": [201, 239, 540], "img2": [201, 239, 540], "imgx": [201, 239, 540], "val_map": [201, 239, 540], "pytorchimagenetraw": [201, 239], "mxnetimagenetraw": [201, 239], "tensorflowimagenetraw": [201, 239], "inteltensorflow": [201, 203, 239, 241], "tensorflowimagenetdataset": [201, 239], "onnxrtimagenetdataset": [201, 239], "bert_dataset": [202, 207, 240, 245, 256, 297], "coco_dataset": [202, 207, 240, 245, 256, 297], "dummy_dataset": [202, 207, 240, 245, 256, 297], "dummy_dataset_v2": [202, 207, 240, 245, 256, 297], "imagenet_dataset": [202, 207, 240, 245, 256, 297], "style_transfer_dataset": [202, 207, 240, 245, 256, 297], "transfer": [203, 241, 250, 256, 540, 542, 543], "styletransferdataset": [203, 241], "content_fold": [203, 241, 540], "style_fold": [203, 241, 540], "crop_ratio": [203, 241, 540], "resize_shap": [203, 241, 540], "image_format": [203, 241, 540], "holder": [203, 241, 540], "labelbalancecocorecordfilt": [204, 242], "balanc": [204, 242, 561], "labelbalancecocorawfilt": [204, 242], "tensorflowfilt": [205, 243], "onnxrtqlfilt": [205, 243], "onnxrtitfilt": [205, 243], "pytorchfilt": [205, 243], "mxnetfilt": [205, 243], "filter_registri": [205, 206, 207, 243, 244, 245], "filter_typ": [205, 206, 207, 243, 244, 245], "__call__": [205, 206, 207, 243, 244, 245, 539], "coco_filt": [206, 207, 244, 245, 256, 297], "imagenet_transform": [207, 210, 245, 247, 256, 297], "transform_cl": [207, 210, 213, 245, 247, 249], "basetransform": [207, 208, 209, 210, 213, 245, 246, 247, 249], "transform_registri": [207, 210, 213, 245, 247, 249], "transform_typ": [207, 210, 213, 245, 247, 249], "postprocess_cl": [207, 210, 211, 217, 221, 537], "user_postprocess": [207, 210, 211, 217, 221], "parsedecodecocotransform": 208, "quantizedinput": [209, 246, 571], "desir": [209, 213, 246, 249, 278, 571], "labelshift": [209, 246, 571], "label_shift": [209, 246, 571], "parsedecodeimagenet": [209, 246, 571], "proto": [209, 213, 246, 249, 571], "parsedecodeimagenettransform": [209, 246], "tensorflowresizecropimagenettransform": [209, 246], "height": [209, 213, 246, 249, 272, 290, 320, 544, 562, 571, 573], "random_crop": [209, 246, 571], "resize_sid": [209, 246, 571], "resize_method": [209, 246], "bilinear": [209, 213, 246, 249, 571], "random_flip_left_right": [209, 246, 571], "mean_valu": [209, 246, 571], "channels_last": [209, 246], "subpixel": [209, 246], "rgb": [209, 246], "applic": [209, 246, 492, 520, 522, 524, 536, 564, 570, 571], "crop": [209, 213, 246, 249, 540, 571], "flip": [209, 213, 246, 249, 571], "left": [209, 213, 246, 249, 536, 571], "std": [209, 213, 246, 249, 272, 537, 539, 571], "bilinearimagenettransform": [209, 246], "central_fract": [209, 246, 571], "875": [209, 246, 571], "fraction": [209, 246, 571], "onnxbilinearimagenettransform": [209, 246], "onnxresizecropimagenettransform": [209, 246], "std_valu": [209, 246], "229": [209, 246, 537, 539], "225": [209, 246, 537, 539], "resizewithaspectratio": [209, 246], "87": [209, 246, 574], "inter_pol": [209, 246], "cv2": [209, 246], "inter_area": [209, 246], "aspect": [209, 213, 246, 249, 571], "convert_to_unicod": [212, 248], "unicod": [212, 248, 257, 298], "utf": [212, 248], "load_vocab": [212, 248], "vocab_fil": [212, 213, 248, 249, 571], "convert_by_vocab": [212, 248], "vocab": [212, 248, 278], "whitespace_token": [212, 248], "whitespac": [212, 248, 262, 303], "clean": [212, 215, 248, 377, 388, 391, 397, 398, 403, 405, 406, 407, 491, 506, 538], "fulltoken": [212, 248], "tokenzi": [212, 248], "convert_tokens_to_id": [212, 248], "convert_ids_to_token": [212, 248], "basictoken": [212, 248], "punctuat": [212, 248, 257, 262, 298, 303], "wordpiecetoken": [212, 248], "unk_token": [212, 248], "unk": [212, 248], "max_input_chars_per_word": [212, 248], "wordpiec": [212, 213, 248, 249, 571], "greedi": [212, 248], "longest": [212, 213, 248, 249, 571], "unaff": [212, 248], "un": [212, 248], "aff": [212, 248], "concat_gener": [213, 249], "tensorflowtransform": [213, 249], "mxnettransform": [213, 249], "pytorchtransform": [213, 249], "onnxrtqltransform": [213, 249], "onnxrtittransform": [213, 249], "tensorflowwrapfunct": [213, 249], "transform_func": [213, 249], "pytorchmxnettransform": [213, 249], "get_torchvision_map": [213, 249], "interpol": [213, 249, 327, 555, 563, 571], "torchvis": [213, 249, 272], "composetransform": [213, 249], "transform_list": [213, 249, 571], "croptoboundingbox": [213, 249, 571], "offset_height": [213, 249, 571], "offset_width": [213, 249, 571], "target_height": [213, 249, 571], "target_width": [213, 249, 571], "vertic": [213, 249, 290, 320, 571], "coordin": [213, 249, 335, 571], "horizont": [213, 249, 571], "mxnetcroptoboundingbox": [213, 249], "onnxrtcroptoboundingbox": [213, 249], "tensorflowcroptoboundingbox": [213, 249], "resizewithratio": [213, 249, 571], "min_dim": [213, 249, 571], "800": [213, 249, 571], "max_dim": [213, 249, 571], "1365": [213, 249, 571], "constant_valu": [213, 249], "side": [213, 249, 278, 536, 540, 571], "exce": [213, 249, 571], "tensorflowresizewithratio": [213, 249], "transpos": [213, 249, 290, 320, 571], "perm": [213, 249, 571], "permut": [213, 249, 320, 571], "tensorflowtranspos": [213, 249], "mxnettranspos": [213, 249], "pytorchtranspos": [213, 249], "randomverticalflip": [213, 249, 571], "tensorflowrandomverticalflip": [213, 249], "randomhorizontalflip": [213, 249, 539, 571], "tensorflowrandomhorizontalflip": [213, 249], "toarrai": [213, 249, 571], "pil": [213, 249, 571], "casttftransform": [213, 249], "castonnxtransform": [213, 249], "castpytorchtransform": [213, 249], "centercroptftransform": [213, 249], "paddedcentercroptransform": [213, 249], "crop_pad": [213, 249], "resizetftransform": [213, 249], "nearest": [213, 249, 571], "bicub": [213, 249, 571], "resizepytorchtransform": [213, 249], "randomcroptftransform": [213, 249], "locat": [213, 249, 537, 544, 566, 568, 571, 572, 573], "randomresizedcroppytorchtransform": [213, 249], "randomresizedcropmxnettransform": [213, 249], "randomresizedcroptftransform": [213, 249], "get_param": [213, 249], "pramet": [213, 249], "normalizetftransform": [213, 249], "rescal": [213, 249, 571], "deviat": [213, 249, 571], "broadcast": [213, 249, 544, 571], "rescalekeraspretraintransform": [213, 249], "rescaletftransform": [213, 249], "rescaletransform": [213, 249], "alignimagechanneltransform": [213, 249], "dim": [213, 249, 286, 320, 335, 571], "w": [213, 249, 272, 562, 563, 571], "pytorchalignimagechannel": [213, 249], "tondarraytransform": [213, 249], "resizemxnettransform": [213, 249], "resizetransform": [213, 249], "cropresizetftransform": [213, 249], "y": [213, 249, 335, 571], "boundari": [213, 249, 409, 571], "area": [213, 249, 260, 301, 555, 571], "pytorchcropresizetransform": [213, 249], "mxnetcropresizetransform": [213, 249], "cropresizetransform": [213, 249], "centercroptransform": [213, 249], "mxnetnormalizetransform": [213, 249], "pytorchnormalizetransform": [213, 249], "normalizetransform": [213, 249], "randomcroptransform": [213, 249], "randomresizedcroptransform": [213, 249], "get_final_text": [213, 249], "pred_text": [213, 249], "orig_text": [213, 249], "squadexampl": [213, 249], "qas_id": [213, 249], "question_text": [213, 249], "doc_token": [213, 249], "orig_answer_text": [213, 249], "start_posit": [213, 249], "end_posit": [213, 249], "is_imposs": [213, 249], "unique_id": [213, 249], "example_index": [213, 249], "doc_span_index": [213, 249], "token_to_orig_map": [213, 249], "token_is_max_context": [213, 249], "input_mask": [213, 249, 327, 542], "segment_id": [213, 249, 542], "read_squad_exampl": [213, 249], "input_fil": [213, 249], "doc_strid": [213, 249, 571], "max_query_length": [213, 249, 571], "output_fn": [213, 249], "inputbatch": [213, 249], "collecttransform": [213, 249], "10833": [213, 249], "tfsquadv1posttransform": [213, 249], "n_best_siz": [213, 249, 571], "384": [213, 249, 571], "max_answer_length": [213, 249, 571], "total": [213, 249, 264, 292, 294, 305, 314, 315, 316, 320, 327, 329, 540, 571], "nbest_predict": [213, 249, 571], "long": [213, 249, 547, 571, 572], "document": [213, 249, 535, 544, 545, 556, 568, 571], "chunk": [213, 249, 571], "much": [213, 249, 250, 256, 317, 542, 545, 549, 562, 563, 571], "process_result": [213, 249], "get_postprocess_result": [213, 249], "tfmodelzoocollecttransform": [213, 249], "tfsquadv1modelzooposttransform": [213, 249], "squadv1": [213, 249, 571], "parsedecodevoctransform": [213, 249], "set_env_var": 214, "env_var": 214, "overwrite_exist": 214, "env": [214, 493, 501], "set_all_env_var": 214, "core": [214, 256, 271, 377, 536, 554, 561, 574], "get_architectur": 214, "get_threads_per_cor": 214, "thread": [214, 523, 536, 539, 561], "get_thread": 214, "get_physical_id": 214, "socket": [214, 496, 524, 561, 574], "get_core_id": 214, "get_bounded_thread": 214, "core_id": 214, "bind": 214, "command": [214, 256, 278, 377, 388, 391, 397, 403, 405, 406, 473, 493, 501, 520, 536, 544, 549], "possibl": [214, 256, 269, 375, 440, 536, 545, 549, 560, 567, 572], "unnecessari": [214, 256], "Not": [214, 223, 256, 283, 492], "summary_benchmark": [214, 256], "config_inst": [214, 256], "trigger": [214, 256, 292, 327, 549], "generate_prefix": [214, 256], "core_list": [214, 256], "numactl": [214, 256], "run_inst": [214, 256], "critet": 215, "tensorflowcrossentropyloss": 215, "pytorchcrossentropyloss": 215, "tensorflowknowledgedistillationloss": 215, "pytorchknowledgedistillationloss": [215, 542], "pytorchintermediatelayersknowledgedistillationloss": 215, "tensorflowcriterion": 215, "pytorchcriterion": 215, "criterion_cl": 215, "criterion_registri": 215, "criterion_typ": 215, "registry_criterion": 215, "param_dict": [215, 220, 269], "crossentropyloss": 215, "tensorflowsparsecategoricalcrossentropi": 215, "sparsecategoricalcrossentropyloss": 215, "knowledgedistillationframework": 215, "student_model": [215, 250, 256, 542], "knowledgedistillationloss": [215, 573], "temperatur": [215, 573], "loss_typ": [215, 573], "ce": [215, 573], "loss_weight": [215, 573], "teacher_model_forward": 215, "notimplementederror": [215, 263, 264, 304, 305], "teacher_student_loss_c": 215, "student_output": [215, 223, 256, 542], "teacher_output": [215, 223, 250, 256], "student_targets_loss_c": 215, "groud": 215, "truth": [215, 261, 262, 302, 303], "loss_cal": 215, "loss_cal_sloss": 215, "student_loss": [215, 223, 256, 542], "softcrossentropi": 215, "logit": [215, 542], "ground": [215, 261, 262, 302, 303], "kullbackleiblerdiverg": 215, "pytorchknowledgedistillationlosswrapp": 215, "tensorflowknowledgedistillationlosswrapp": 215, "tensorflowknowledgedistillationlossextern": 215, "intermediatelayersknowledgedistillationloss": 215, "layer_map": 215, "add_origin_loss": 215, "init_loss_func": 215, "init_feature_match": 215, "student_featur": 215, "teacher_featur": 215, "matcher": 215, "clear_featur": 215, "register_hooks_for_model": 215, "attributeerror": 215, "remove_all_hook": 215, "pytorch_linear_feature_match": 215, "pytorchintermediatelayersknowledgedistillationlosswrapp": 215, "selfknowledgedistillationloss": 215, "selfknowledg": 215, "pytorchselfknowledgedistillationloss": 215, "l2diverg": 215, "feature1": 215, "feature2": 215, "pytorchselfknowledgedistillationlosswrapp": 215, "torch_util": [217, 256, 297], "metric_cl": [217, 218, 263, 264, 304, 305, 537], "user_metr": [217, 218, 304, 305], "alwai": [217, 218, 260, 301, 304, 305, 537, 555, 562], "tensorflowoptim": 220, "pytorchoptim": 220, "optimizer_cl": 220, "optimizer_registri": 220, "optimizer_typ": 220, "cross": [220, 263, 264, 304, 305, 550, 572], "tensorflowsgd": 220, "tensorflowadamw": 220, "tensorflow_addon": 220, "adamw": 220, "tensorflowadam": 220, "adam": [220, 573], "pytorchsgd": 220, "util": [222, 251, 256, 258, 291, 297, 299, 318, 364, 365, 366, 368, 370, 373, 377, 388, 391, 397, 398, 403, 405, 406, 408, 416, 417, 422, 424, 425, 428, 432, 438, 439, 447, 449, 473, 476, 480, 485, 489, 521, 544, 562, 566], "record_output": 222, "output_process": 222, "get_activ": 222, "mainli": [223, 256, 294, 320, 329, 566], "train_func": [223, 256, 296, 542, 544, 562], "train_dataload": [223, 256, 542, 562], "pre_process": [223, 250, 256, 267, 279, 283, 295, 544], "post_process": [223, 256], "on_train_begin": [223, 256, 283, 292, 293, 297, 327, 331, 349, 542], "Be": [223, 256, 260, 301], "on_train_end": [223, 256, 283, 292, 293, 297, 327, 331, 349], "pre_epoch_begin": [223, 256, 283], "post_epoch_end": [223, 256, 283], "on_epoch_begin": [223, 256, 283, 292, 293, 297, 327, 331, 349, 352, 562], "on_step_begin": [223, 256, 283, 292, 293, 297, 317, 327, 331, 352, 562], "batch_id": [223, 256], "on_batch_begin": [223, 256, 283], "on_after_compute_loss": [223, 256, 283, 349, 542], "on_before_optimizer_step": [223, 256, 292, 293, 297, 327, 328, 331, 349, 562], "on_post_grad": [223, 256], "on_step_end": [223, 256, 283, 292, 293, 297, 327, 331, 349, 352, 562], "on_batch_end": [223, 256, 283], "on_epoch_end": [223, 256, 283, 292, 293, 297, 327, 331, 349, 352, 542, 562], "register_hook": [223, 256], "input_arg": [223, 256], "input_kwarg": [223, 256], "_epoch_ran": [250, 256], "ran": [250, 256], "eval_frequ": [250, 256], "frequenc": [250, 256, 292, 327, 561, 573], "term": [250, 256, 327, 328, 542, 554, 555, 559, 560, 572], "best_scor": [250, 256], "best_model": [250, 256], "train_cfg": [250, 256, 352], "evaluation_distribut": [250, 256, 283], "train_distribut": [250, 256, 283], "on_post_forward": [250, 256], "init_train_cfg": [250, 256], "create_criterion": [250, 256], "create_optim": [250, 256], "disil": [250, 256], "generate_hook": [250, 256, 283], "qlinear2qdq": [251, 256, 297], "torch2onnx": [251, 256, 297], "torch_to_fp32_onnx": [251, 253], "opset_vers": [251, 253], "dynamic_ax": [251, 253], "input_nam": [251, 253, 315], "do_constant_fold": [251, 253], "verbos": [251, 253, 269, 270, 271], "opset": [251, 253], "ax": [251, 253], "torch_to_int8_onnx": [251, 253], "quant_format": [251, 253], "u8s8": [251, 253], "qdq_op_fp32_bia": [251, 253], "optionl": [251, 253], "qdq_op_int32_bia": [251, 253], "qdq_op_fp32_bias_qdq": [251, 253], "onnx_qlinear_to_qdq": [251, 252], "input_name_to_nod": [251, 252], "qlinearop": [251, 252, 552, 566], "check_model": 252, "update_weight_bia": 253, "fp32_onnx_path": [253, 254], "wegiht": 253, "set_data_typ": 253, "weight_typ": 253, "activation_typ": 253, "get_node_map": 253, "module_node_map": 253, "get_quantizable_onnx_op": 253, "quantize_nod": 253, "build_scale_map": 253, "int8_scale_info": 253, "scale_zp_dict": 253, "set_scale_info": 253, "int8_onnx_model": 253, "int8_onnx_path": 253, "recalculate_bia": 253, "recalcul": [253, 320], "remove_nodes_by_nam": 253, "sub_graph_with_int32_bia": 253, "a_info": 253, "b_info": 253, "bias_nam": 253, "nodeproto": 253, "_type_": 253, "qdq_fp32_bia": 253, "excut": 253, "qdq_int32_bia": 253, "qdq_fp32_bias_qdq": 253, "onnx2numpy_dtyp": 254, "onnx_node_typ": 254, "dummydataread": 254, "ortq": 254, "dataread": 254, "get_next": 254, "variou": [255, 256, 265, 295, 552, 563, 565], "bring": [255, 256, 295, 538, 566], "vari": [255, 256, 283, 295, 561, 574], "roc": [255, 256, 264, 283, 295, 305], "footprint": [255, 256, 283, 295, 316, 543, 559, 562, 563, 565, 572], "flexibl": [255, 256, 283, 295, 537, 542, 562, 563], "set_config_by_model": [255, 256, 265], "model_obj": [255, 256, 265], "export": [256, 260, 297, 301, 307, 308, 309, 313, 315, 349, 507, 570], "bleu": [256, 258, 263, 277, 297, 299, 304, 555], "bleu_util": [256, 263, 297, 304], "coco_label_map": [256, 263, 297, 304], "coco_tool": [256, 263, 297, 304], "evaluate_squad": [256, 263, 297, 304], "dynast": [256, 279, 297], "supernetwork": [256, 269, 272, 273, 279], "dynas_manag": [256, 272, 273, 279], "dynas_predictor": [256, 272, 273, 279], "dynas_search": [256, 273, 279], "dynas_util": [256, 271, 273, 279], "nas_util": [256, 279, 297], "pruning_recip": [256, 297], "tile_pattern": [256, 284, 285], "pytorch_prun": [256, 297, 331], "logger": [256, 288, 297, 318, 350, 353, 489, 493, 497], "prune_util": [256, 288, 297], "pruner": [256, 283, 288, 290, 293, 297, 331, 518, 573], "graph_optim": [256, 265, 297, 366, 432, 467, 471, 472, 489, 497, 512, 549], "mixed_precis": [256, 297, 368, 432, 467, 489, 497, 512], "model_convers": [256, 297], "quantconf": [256, 295, 332], "qfunc": [256, 295], "routinu": [256, 295], "pruningconf": [256, 283], "pruning_func": [256, 283, 562], "generate_prun": [256, 283], "dens": [256, 283, 294, 329, 562, 563, 574], "spars": [256, 283, 292, 327, 540, 562, 564], "graphoptim": [256, 265, 366, 464, 511], "unicoderegex": [257, 298], "hoc": [257, 298], "hack": [257, 298], "recogn": [257, 298], "nondigit_punct_r": [257, 298], "compil": [257, 298, 561], "preced": [257, 298], "punct_nondigit_r": [257, 298], "symbol_r": [257, 298], "property_char": [257, 298], "join": [257, 298], "bleu_token": [257, 298], "mose": [257, 298], "smt": [257, 298], "mosesdecod": [257, 298], "mteval": [257, 298], "v14": [257, 298], "pl": [257, 298], "l954": [257, 298], "l983": [257, 298], "tensor2tensor": [258, 278, 299], "bleu_hook": [258, 299], "compute_bleu": [258, 277, 299], "reference_corpu": [258, 299], "translation_corpu": [258, 299], "max_ord": [258, 299], "use_bp": [258, 299], "against": [258, 299], "gram": [258, 299], "flag": [258, 299, 349, 517], "third": [260, 301, 539, 572], "parti": [260, 301, 566], "pycocotool": [260, 301, 547, 553], "object_detect": [260, 301], "noth": [260, 301, 501], "jonathanhuang": [260, 301], "image_id": [260, 301, 555], "encod": [260, 269, 278, 301, 571], "groundtruth": [260, 301], "invok": [260, 301], "groundtruth_dict": [260, 301], "exportgroundtruthtococo": [260, 301], "groundtruth_boxes_list": [260, 301], "groundtruth_classes_list": [260, 301], "max_num_class": [260, 301], "output_path": [260, 301, 313, 501, 556], "detections_list": [260, 301], "exportdetectionstococo": [260, 301], "detection_boxes_list": [260, 301], "detection_scores_list": [260, 301], "detection_classes_list": [260, 301], "cocowrapp": [260, 301], "loadannot": [260, 301], "cocoevalwrapp": [260, 301], "agnostic_mod": [260, 301], "computemetr": [260, 301], "detection_typ": [260, 301], "hold": [260, 301, 335, 539], "datastructur": [260, 301], "mscoco": [260, 301], "replic": [260, 301], "extern": [260, 301, 313, 536], "category_id": [260, 301], "iou_typ": [260, 301], "iou_thr": [260, 264, 301, 305, 555], "map_point": [260, 264, 301, 305, 555], "cocoev": [260, 301], "getcategori": [260, 301], "getagnosticmod": [260, 301], "agnost": [260, 301, 542], "getcategoryidlist": [260, 301], "accumul": [260, 301], "include_metrics_per_categori": [260, 301], "all_metrics_per_categori": [260, 301], "summeri": [260, 301], "per_category_ap": [260, 301], "care": [260, 301], "pollut": [260, 301], "mldash": [260, 301], "summary_metr": [260, 301], "iou": [260, 264, 301, 305], "increment": [260, 276, 278, 301, 333, 334, 572], "50iou": [260, 301], "75iou": [260, 301], "75": [260, 301, 574], "pixel": [260, 301, 571], "medium": [260, 301], "larg": [260, 301, 539, 542, 572, 574], "10000": [260, 301, 335], "recal": [260, 262, 264, 301, 303, 305], "bycategori": [260, 301], "supercategori": [260, 301], "performancebycategori": [260, 301], "category_stat": [260, 301], "exportsingleimagegroundtruthtococo": [260, 301], "next_annotation_id": [260, 301], "category_id_set": [260, 301], "groundtruth_box": [260, 301], "groundtruth_class": [260, 301], "groundtruth_mask": [260, 301], "groundtruth_is_crowd": [260, 301], "ingest": [260, 301], "ones": [260, 301, 563], "exportsingleimagedetectionstococo": [260, 301], "uniqu": [260, 272, 296, 301, 335, 398, 399, 566], "assign": [260, 301, 359, 397, 398, 403, 404, 405, 406, 536, 544, 556, 565], "num_gt_box": [260, 301], "num_detect": [260, 264, 301, 305, 555, 573], "image_height": [260, 301], "image_width": [260, 301], "detection_mask": [260, 301], "crowd": [260, 301], "insid": [260, 301, 542, 562], "exportsingleimagedetectionboxestococo": [260, 301], "detection_box": [260, 301, 573], "detection_scor": [260, 301, 573], "detection_class": [260, 301, 573], "exporsingleimagedetectionboxestococo": [260, 301], "exportsingleimagedetectionmaskstococo": [260, 301], "allenai": [261, 262, 302, 303], "bi": [261, 262, 302, 303], "att": [261, 262, 302, 303], "f1_score": [261, 262, 302, 303], "ground_truth": [261, 262, 302, 303], "metric_max_over_ground_truth": [261, 262, 302, 303], "metric_fn": [261, 262, 302, 303], "exact_match_scor": [261, 302], "exact": [261, 302], "articl": [261, 262, 302, 303], "paragraph": [261, 262, 302, 303], "qa": [261, 262, 302, 303], "cantain": [261, 262, 302, 303], "normalize_answ": [262, 303], "extra": [262, 303], "newlin": [262, 303], "tab": [262, 303, 400, 403, 409, 523, 570], "harmon": [262, 264, 303, 305], "answer_start": [262, 303], "177": [262, 303], "denver": [262, 303], "bronco": [262, 303], "nfl": [262, 303], "afc": [262, 303], "bowl": [262, 303], "56be4db0acb8001400a502ec": [262, 303], "percentag": [262, 270, 303, 573], "basemetr": [263, 264, 304, 305], "single_output": [263, 264, 304, 305], "hvd": [263, 264, 304, 305, 544], "sample_weight": [263, 264, 304, 305], "metric_registri": [263, 264, 304, 305], "metric_typ": [263, 264, 304, 305], "decorator_metr": [263, 264, 304, 305], "tensorflowmetr": [264, 305], "pytorchmetr": [264, 305], "mxnetmetr": [264, 305], "onnxrtqlmetr": [264, 305], "onnxrtitmetr": [264, 305], "wrappytorchmetr": [264, 305], "wrapmxnetmetr": [264, 305], "wraponnxrtmetr": [264, 305], "proport": [264, 305], "were": [264, 305], "pred_list": [264, 305], "pytorchloss": [264, 305], "least": [264, 293, 297, 305, 320, 331, 502, 562, 563, 572], "mae": [264, 305, 555], "absolut": [264, 270, 305, 317, 501, 545, 555, 561, 562, 563, 566, 572], "magnitud": [264, 305, 317, 552, 562, 563, 574], "rmse": [264, 270, 305, 555, 572], "squar": [264, 270, 305, 555, 572], "tensorflowtopk": [264, 305], "among": [264, 305], "most": [264, 305, 536, 556, 562, 566, 572], "outcom": [264, 305], "num_correct": [264, 305], "generaltopk": [264, 305], "cocomapv2": [264, 305, 555], "anno_path": [264, 305, 555], "map_kei": [264, 305], "detectionboxes_precis": [264, 305], "output_index_map": [264, 305, 555], "tensorflowmap": [264, 305], "tensorflowcocomap": [264, 305], "tensorflowvocmap": [264, 305], "squadf1": [264, 305, 555], "miou": [264, 305], "21": [264, 305, 574], "hist": [264, 305, 353, 354], "onnxrtglu": [264, 305], "dlrm": [264, 305, 574], "conf_fnam": [267, 279], "init_by_cfg": [267, 279], "init_for_search": [268, 279], "init_cfg": [268, 279], "parametermanag": [269, 272], "hot": 269, "pymoo": [269, 271, 272], "process_param_dict": 269, "upper": [269, 271], "vector": [269, 280, 282], "onehot_gener": 269, "in_arrai": 269, "onehot": 269, "unus": [269, 278], "depth": [269, 542, 567], "input_arrai": 269, "elast": 269, "mapper": [269, 397, 460, 461], "random_sampl": [269, 335], "subnetwork": [269, 272], "trial_limit": 269, "100000": 269, "translate2param": 269, "pymoo_vector": 269, "translate2pymoo": 269, "import_csv": 269, "filepath": 269, "column_nam": 269, "drop_dupl": 269, "panda": 269, "datafram": [269, 314, 315], "purpos": [269, 548, 556, 565, 572], "subnet": [269, 272], "column": [269, 536, 562, 563], "df": [269, 314, 315], "set_se": 269, "create_training_set": 269, "train_with_al": 269, "sklearn": 269, "transformerltencod": 269, "alpha": [270, 317, 328], "default_alpha": 270, "cost_factor": 270, "default_cost_factor": 270, "max_iter": 270, "default_max_iter": 270, "regressor": 270, "get_paramet": 270, "get_metr": [270, 375], "mape": 270, "kendal": 270, "rank": [270, 544], "correl": 270, "spearman": 270, "searcher": [270, 282], "searchalgomanag": 271, "optuna": 271, "configure_nsga2": 271, "warm_pop": 271, "crossover_prob": 271, "crossover_eta": 271, "mutation_prob": 271, "02": [271, 574], "mutation_eta": 271, "configure_ag": 271, "run_search": 271, "save_histori": 271, "previous": [271, 539], "problemmultiobject": 271, "evaluation_interfac": 271, "evaluationinterfac": [271, 272], "param_count": 271, "param_upperbound": 271, "ofa": [271, 272], "mani": [271, 272, 316, 320, 539, 553, 572, 573], "get_mac": 272, "input_s": 272, "measure_lat": 272, "warmup_step": 272, "measure_step": 272, "resolut": 272, "warm": [272, 316], "runner": 272, "ofarunn": 272, "acc_predictor": 272, "macs_predictor": 272, "latency_predictor": 272, "datasetpath": 272, "w1": 272, "estimate_accuracy_top1": 272, "subnet_cfg": 272, "estimate_mac": 272, "estimate_lat": 272, "validate_top1": 272, "validate_mac": 272, "flop": 272, "fvcore": 272, "get_subnet": 272, "transformerltrunn": 272, "checkpoint_path": [272, 277], "predictor_mod": 272, "csv_path": 272, "written": 272, "eval_subnet": 272, "clear_csv": 272, "evaluationinterfaceresnet50": 272, "evaluationinterfacemobilenetv3": 272, "evaluationinterfacetransformerlt": 272, "get_torchvision_model": 272, "torchvisionrefer": 272, "baselin": [272, 569, 570], "machine_transl": [273, 274, 279], "transformer_interfac": [273, 274, 275], "get_incremental_st": 276, "incremental_st": [276, 278], "set_incremental_st": 276, "multiheadattentionsup": 276, "super_embed_dim": 276, "num_head": 276, "is_encod": 276, "super_kdim": 276, "super_vdim": 276, "add_bias_kv": [276, 278], "add_zero_attn": [276, 278], "self_attent": 276, "encoder_decoder_attent": 276, "out_dim": 276, "qkv_dim": 276, "head": [276, 278, 562], "key_padding_mask": 276, "need_weight": 276, "static_kv": 276, "attn_mask": [276, 278], "timestep": 276, "bytetensor": [276, 278], "src_len": [276, 278], "reorder_incremental_st": 276, "new_ord": [276, 278], "buffer": 276, "compute_lat": 277, "get_model_paramet": 277, "compute_mac": 277, "transformersupernetwork": 278, "fairseq": 278, "vaswani": 278, "2017": 278, "arxiv": [278, 292, 317], "1706": 278, "03762": 278, "transformerencod": 278, "transformerdecod": 278, "line": [278, 500, 501, 520, 536, 544, 552, 570], "encoder_config": 278, "embed_token": 278, "encoder_lay": 278, "transformerencoderlay": 278, "argpars": 278, "namespac": 278, "src_token": 278, "src_length": 278, "longtensor": 278, "sentenc": 278, "encoder_out": 278, "embed_dim": 278, "encoder_padding_mask": 278, "reorder_encoder_out": 278, "rearrang": 278, "max_posit": 278, "upgrade_state_dict_nam": 278, "upgrad": 278, "possibli": 278, "old": [278, 359, 568], "decoder_config": 278, "no_encoder_attn": 278, "decoder_lay": 278, "transformerdecoderlay": 278, "attend": 278, "prev_output_token": 278, "tgt_len": 278, "forc": [278, 556, 567], "extract_featur": 278, "output_lay": 278, "layer_idx": 278, "paper": [278, 542, 562, 563], "ffn": 278, "robust": 278, "encoder_normalize_befor": 278, "layer_norm": 278, "self_attn_layer_norm": 278, "final_layer_norm": 278, "seq_len": 278, "t_tgt": 278, "t_src": 278, "decoder_normalize_befor": 278, "prev_self_attn_st": 278, "prev_attn_st": 278, "self_attn_mask": 278, "self_attn_padding_mask": 278, "builder": 280, "count_model_paramet": 280, "params_vec2params_dict": [280, 282], "paras_vec": 280, "metrics_convers": 280, "init_search_cfg": 280, "nas_method": 281, "create_search_space_pool": 281, "find_pareto_front": 281, "n_point": 281, "n_metric": 281, "n_pareto_point": 281, "get_feedback": 282, "feedback": 282, "para_vec": 282, "gridsearch": 282, "whole": [282, 522, 536, 545, 566, 574], "exhaust": [282, 565], "randomsearch": 282, "bayesianoptimizationsearch": 282, "indices2params_vec": 282, "tfpruningcallback": 283, "input_model": [283, 557, 570], "callback": [283, 350, 352, 353, 523], "pure": 283, "s_output": 283, "s_loss": 283, "t_output": 283, "support_pattern": [284, 285, 286], "pattern_registri": 286, "pattern_typ": 286, "patternbas": [286, 287], "mask_shap": [286, 287], "is_contigu": 286, "compute_spars": [286, 287], "abs_sum": 286, "abs_max": 286, "tile": 287, "tilepatternbas": 287, "nxm": [287, 290, 320, 327], "matrix": [287, 563], "repeat_mask": 287, "ori_shap": 287, "tilepattern_1x1": 287, "1x1": [287, 542], "unstructur": [287, 552, 562, 563, 574], "tilepattern_2x2": 287, "2x2": 287, "tilepattern_1x16": 287, "1x16": 287, "tilepattern_4x1": 287, "4x1": [287, 320, 330, 574], "tilepattern_1x2": 287, "1x2": 287, "register_pattern": [290, 320], "registri": [290, 292, 294, 317, 320, 327, 328, 329], "get_pattern": [290, 320], "assertionerror": [290, 291, 292, 320, 327, 330], "unit": [290, 320, 500, 507, 538], "is_glob": [290, 320], "contrast": [290, 320, 571], "get_mask": [290, 320], "target_sparsity_ratio": [290, 292, 320, 327], "pre_mask": [290, 320], "max_sparsity_ratio_per_lay": [290, 292, 565], "get_masks_glob": [290, 320], "get_mask_singl": 290, "exact_sparsity_ratio": [290, 320], "obtain": [290, 291, 294, 320, 328, 329, 330, 569, 572], "get_block_size_dict": [290, 320], "get_masks_loc": [290, 320], "get_sparsity_ratio": [290, 293, 297, 320, 331], "calul": [290, 320], "ration": [290, 320], "get_pattern_lock_mask": [290, 320], "lock": [290, 320, 552, 560, 562, 563], "patternnxm": [290, 320], "kept": [290, 320], "block_siz": [290, 320], "block_size_1": [290, 320], "block_size_2": [290, 320], "keep_pre_mask": [290, 320], "unchang": [290, 320], "patternninm": [290, 320], "doc": [290, 320, 555, 562], "md": [290, 320, 544], "check_config": [291, 330], "prune_config": [291, 330], "everyth": [291, 330], "reset_non_value_to_default": 291, "undefin": [291, 330], "process_and_check_config": 291, "obejct": 291, "process_config": [291, 330], "parse_to_prun": [291, 330], "parse_not_to_prun": 291, "register_prun": [292, 327], "get_prun": [292, 327], "module_nam": [292, 294, 317, 327, 328, 329, 359, 507], "cuurent": [292, 327], "current_sparsity_ratio": [292, 327], "global_step": [292, 327], "start_step": [292, 327, 330, 565], "end_step": [292, 327, 330, 565], "update_frequency_on_step": [292, 565], "mask_weight": [292, 327], "formal": [292, 327], "local_step": [292, 293, 297, 327, 331], "judg": 292, "on_after_optimizer_step": [292, 293, 297, 317, 327, 328, 331], "on_before_ev": [292, 293, 297, 327, 331], "on_after_ev": [292, 293, 297, 327, 331], "check_is_pruned_step": [292, 327], "update_scor": 292, "magnitudeprun": 292, "snipprun": 292, "snip": [292, 317, 552, 562, 563, 574], "1810": [292, 317], "02340": [292, 317], "snipmomentumprun": 292, "moreoev": 292, "patternlockprun": [292, 327], "templat": [293, 297, 331, 380, 398, 403, 489, 497, 533, 536, 572], "tree": [293, 297, 331], "nlp": [293, 297, 331, 545, 562, 563, 566], "huggingface_model": [293, 297, 331], "config_file_path": [293, 297, 331], "pruner_info": [293, 297, 331], "update_items_for_all_prun": 293, "howev": [293, 297, 331, 562], "analys": [293, 297, 331], "elementwise_over_matmul_gemm_conv": [293, 297, 331], "elementwise_over_al": [293, 297, 331], "blockwise_over_matmul_gemm_conv": [293, 297, 331], "register_schedul": [294, 329], "get_schedul": [294, 329], "gradual": [294, 329, 562, 563], "update_sparsity_ratio": [294, 329], "aggressive_ratio": 294, "current_prune_step": [294, 329], "total_prune_step": [294, 329], "oneshotschedul": [294, 329], "aggress": 294, "iterativeschedul": [294, 329], "target_ratio": [294, 329], "server": [296, 297, 432, 439, 488, 489, 496, 497, 504, 507, 518, 520, 522, 536], "seper": [296, 340, 341], "opt_model": [296, 560], "fulli": [296, 566, 572], "saniti": 296, "illeg": 296, "sync": 296, "accordingli": [296, 572], "reg": [297, 318, 327], "ux": 297, "config_gener": [297, 432, 489], "configuration_wizard": [297, 432, 489], "db_manag": [297, 432, 489, 526], "diagnosi": [297, 400, 403, 409, 432, 489, 517, 523], "file_brows": [297, 432, 489], "jobs_manag": [297, 432, 489], "model_zoo": [297, 432, 489], "names_mapp": [297, 432, 489], "profil": [297, 369, 385, 392, 403, 406, 408, 409, 432, 440, 448, 489, 490, 500, 505, 522, 527], "manage_workspac": [297, 432, 489], "workload": [297, 364, 365, 366, 368, 370, 373, 398, 403, 463, 477, 484, 489, 491, 497, 506, 507, 522, 525, 527, 528, 529, 530, 564], "executor": [297, 362, 489, 497], "expiring_dict": [297, 489, 497], "github_info": [297, 489, 497], "hw_info": [297, 489, 497], "json_seri": [297, 365, 416, 417, 422, 424, 425, 428, 438, 447, 473, 476, 489, 496, 497, 505, 508, 509, 510, 511, 513, 514, 515, 516, 517], "proc": [297, 489, 497], "yaml_util": [297, 489, 497], "web": [297, 488, 489, 536, 570], "servic": [297, 489, 521, 522, 561], "router": [297, 489, 522], "update_config": [297, 331], "basemodel": [307, 308, 309, 311, 313, 314, 315], "plai": [307, 308, 313, 315, 562, 564], "role": [307, 308, 313, 315, 562], "itself": [307, 308, 309, 311, 313, 314], "node_typ": [307, 308, 309, 313, 314, 315], "conv0": [307, 308, 309, 313, 314, 315, 570], "kerasmodel": [309, 450], "base_model": [309, 311, 313, 314, 315], "get_model_fwk_nam": 310, "fwk": 310, "onnxmodel": [313, 443], "find_node_by_nam": 313, "new_nodes_list": 313, "find_nodes_by_initi": 313, "get_scale_zero": 313, "save_model_to_fil": 313, "use_external_data_format": 313, "2gb": 313, "get_model_typ": [314, 441], "validate_graph_nod": 314, "validate_and_inference_input_output": 314, "input_tensor_nam": 314, "output_tensor_nam": 314, "graph_sess": 314, "graph_def_sess": 314, "frozen_pb_sess": 314, "load_saved_model": 314, "saved_model_tag": 314, "serv": [314, 524, 532], "signatur": 314, "tag": [314, 495, 507, 570], "metagraphdef": 314, "input_tensor": [314, 315], "keras_sess": 314, "slim_sess": 314, "checkpoint_sess": 314, "estimator_sess": 314, "input_fn": 314, "saved_model_sess": 314, "tensorflowsavedmodelmodel": 314, "report_spars": [314, 315], "total_spars": [314, 315], "tensorflowqatmodel": 314, "tensorflowcheckpointmodel": 314, "pytorchbasemodel": 315, "get_all_weight_nam": 315, "get_weight": 315, "update_weight": 315, "new_tensor": 315, "update_gradi": 315, "grad_nam": 315, "new_grad": 315, "grad": 315, "prune_weights_": 315, "place": [315, 553, 570], "get_input": 315, "get_gradi": 315, "pytorchmodel": 315, "pytorchfxmodel": 315, "ipexmodel": 315, "objective_registri": 316, "sart": 316, "result_list": 316, "models": [316, 559, 565, 572], "register_criterion": 317, "get_criterion": 317, "pruningcriterion": 317, "magnitudecriterion": 317, "criterion_class": 317, "magtinud": 317, "gradientcriterion": 317, "snipcriterion": 317, "product": [317, 552, 556, 561, 564, 566, 569, 572], "snipmomentumcriterion": 317, "snip_momentum": [317, 330], "mechan": [317, 569], "preserv": [317, 545], "basepattern": [320, 328], "keep_mask_lay": 320, "invalid_lay": 320, "patten": 320, "max_sparsity_ratio_per_op": [320, 327, 330], "min_sparsity_ratio_per_op": [320, 330], "target_spars": [320, 330, 565, 573], "reduce_tensor": 320, "along": [320, 501, 553], "get_single_mask_per_target_ratio": 320, "return_dict": 320, "littl": 320, "tricki": 320, "refactor": 320, "zero_cnt": 320, "total_cnt": 320, "check_layer_valid": 320, "get_reduced_masks_from_data": 320, "unprun": 320, "update_residual_cnt": 320, "get_sparsity_ratio_each_lay": 320, "sparsity_ratio": 320, "sparsityinfo": 320, "adjust_ratio": 320, "key_new_spars": 320, "max_sparsity_ratio": 320, "min_sparsity_ratio": 320, "final_target_sparsity_ratio": 320, "interv": [320, 327, 563], "examin": [320, 562], "adjust_sparsity_ratio": 320, "block_wis": 320, "get_sparsity_ratio_progress": 320, "reshape_orig_to_pattern": 320, "s1": 320, "s2": 320, "reshape_reduced_to_orig": 320, "orig_shap": 320, "reduce_scor": 320, "get_mask_per_threshold": 320, "cur_target_sparsity_ratio": 320, "keep_exact_sparsity_ratio": 320, "count_new_masked_cnt": 320, "new_added_mask": 320, "cound": 320, "update_new_added_mask": 320, "cur_mask": 320, "bacaus": 320, "stand": 320, "update_progressive_mask": 320, "progressive_step": 320, "progressive_config": 320, "update_progressive_masks_linear": 320, "update_progressive_masks_scor": 320, "update_progressive_masks_loc": 320, "domain": [320, 375, 382, 385, 401, 403, 408, 432, 439, 440, 443, 461, 489, 490, 492, 507, 519, 524, 536, 562, 563, 572], "update_progressive_masks_glob": 320, "get_least_ninm_mask_from_data": 320, "elementwis": 320, "confus": 320, "sparisti": 320, "get_ele_mask_per_threshold": 320, "least_ninm_mask": 320, "least_m_in_m_mask": 320, "pruner_registri": 326, "baseprun": 327, "pruning_frequ": [327, 330], "mask_weights_gener": 327, "update_mask": 327, "basicprun": 327, "regul": 327, "set_global_step": 327, "progressiveprun": 327, "grain": [327, 564], "check_progressive_valid": 327, "check_is_pruned_progressive_step": 327, "update_masks_progress": 327, "print_progressive_spars": 327, "register_reg": 328, "regulariz": 328, "get_reg_typ": 328, "get_reg": 328, "basereg": 328, "grouplasso": 328, "coeff": 328, "lasso": [328, 552, 562, 563], "reg_term": 328, "coeffient": 328, "pruningschedul": 329, "init_ratio": 329, "init_sparsity_ratio": 329, "weightpruningconfig": 330, "pruning_config": 330, "pruning_typ": 330, "pruning_scop": 330, "98": [330, 565, 574], "sparsity_decay_typ": 330, "exp": 330, "pruning_op_typ": 330, "similiar": 330, "reset_none_to_default": 330, "calib_func": 332, "eval_metr": 332, "hybirdblock": 332, "paramt": 332, "automixedprecisiontunestrategi": 333, "tunabl": [333, 336], "prioriti": [333, 334, 336, 340, 341], "biggest": [333, 334], "impact": [333, 334, 340, 341, 568, 572], "tune_config": [333, 334, 336, 337, 338, 340, 341, 343], "basictunestrategi": 334, "bayesiantunestrategi": 335, "acq_max": 335, "ac": 335, "gp": 335, "y_max": 335, "random_se": [335, 349, 395, 517, 545, 569, 572, 573], "n_warmup": 335, "n_iter": 335, "acquisit": 335, "gaussian": [335, 572], "relev": 335, "acq": 335, "random_st": 335, "randomst": 335, "scipi": 335, "x_max": 335, "targetspac": 335, "pbound": 335, "9527": [335, 545, 569, 572, 573], "keyerror": 335, "amort": 335, "get_target": 335, "num": [335, 359, 555], "_kei": 335, "conservativetunestrategi": 336, "quantifi": 336, "quantifiable_op": 336, "quant_queu": 336, "fp16": [336, 556, 566], "thing": 336, "exhaustivetunestrategi": 337, "hawq_v2tunestrategi": 338, "msetunestrategi": 340, "tuningspac": [340, 341], "mse_impact_lst": 340, "best_qmodel": 340, "_summary_": [340, 349], "current_best_model": 340, "mse_v2tunestrategi": 341, "randomtunestrategi": 342, "strategy_registri": [343, 572], "compressionmanag": 349, "uesd": 349, "deal": 349, "commpon": 349, "prepare_compress": 349, "compression_manag": 349, "train_loop": 349, "path_to_sav": 349, "workspac": [349, 358, 397, 398, 403, 405, 406, 407, 437, 506, 508, 517, 557], "layerhistogramcollector": [350, 353], "layer_tensor": [350, 353], "include_lay": [350, 353], "diverg": [350, 353, 354, 542], "create_eval_func": 352, "postprocess_cfg": 352, "create_train_func": 352, "Their": 352, "kl_diverg": 353, "expand_quantized_bin": [353, 354], "quantized_bin": [353, 354], "reference_bin": [353, 354], "expand": [353, 354], "bin": [353, 354], "safe_entropi": [353, 354], "reference_distr_p": [353, 354], "p_sum": [353, 354], "candidate_distr_q": [353, 354], "q_sum": [353, 354], "entropi": [353, 354, 572], "get_threshold": [353, 354], "hist_edg": [353, 354], "quantized_typ": [353, 354], "num_quantized_bin": [353, 354], "255": [353, 354, 566], "historgram": [353, 354], "number_bin": [353, 354], "checkpoint_dir": 358, "history_cfg": 358, "checkpoint": [358, 557], "best_configur": 358, "best_model_weight": 358, "pt": [358, 557, 564, 567], "histori": [358, 396, 403, 405, 409, 462, 477, 526, 572], "snapshot": [358, 409, 526], "cfg_from_fil": 359, "yaml_fil": [359, 540, 544, 555, 559], "lazyimport": 359, "lazi": 359, "till": [359, 572], "get_siz": [359, 507], "equal_dict": 359, "d2": 359, "compare_kei": 359, "ignore_kei": 359, "ignor": [359, 540], "customized_msg": 359, "elaps": 359, "combine_histogram": 359, "old_hist": 359, "arr": 359, "get_tuning_histori": 359, "tuning_history_path": [359, 477], "load_data_from_pkl": 359, "pkl": 359, "dump_data_to_loc": 359, "project_data": [360, 463, 464, 469, 473, 476, 483], "benchmark_data": 360, "workdir": [360, 473, 483, 489, 493, 497, 504], "config_filenam": [360, 473, 483], "configuration_data": [360, 464, 469, 473, 476], "generate_config": [360, 464, 469, 473, 476, 483], "dataloaderinterfac": [360, 473, 483], "dataloader_data": [360, 371, 398, 403, 473, 483], "parse_arg": [361, 466, 470, 475, 481], "benchmark_mod": [361, 500], "set_eager_execut": [361, 466, 470, 475], "request_id": [362, 462, 477, 478, 493, 501], "asd": [362, 478], "benchmark_id": [362, 377, 378, 388], "benchmark_result_upd": 362, "benchmark_result_update_pytorch_script": 362, "neural_coder_perform": 362, "neural_coder_tim": 362, "pytorch_script_bench_optim": 362, "command_line_of_script": 362, "pytorch_script_bench_original_model": 362, "execute_real_benchmark": 362, "project_detail": [362, 393, 462, 478], "benchmark_detail": 362, "benchmark_model": [363, 432, 489], "execute_benchmark": [363, 432, 489], "benchmarkconfiggener": 364, "configgener": [364, 365, 366, 368, 369, 370], "generate_evaluation_config": [364, 366, 368, 370], "generate_accuracy_config": 364, "generate_performance_config": 364, "workload_directori": 365, "configuration_path": 365, "jsonseri": [365, 416, 417, 422, 424, 425, 428, 438, 447, 473, 476, 496, 498, 505, 508, 509, 510, 511, 513, 514, 515, 516, 517], "get_predefined_config_path": [365, 507], "generate_model_config": 365, "generate_dataloader_config": 365, "graphoptimizationconfiggener": 366, "generate_graph_optimization_config": 366, "benchmark_config_gener": [367, 432, 489], "graph_optimization_config_gener": [367, 432, 489], "mixed_precision_config_gener": [367, 432, 489], "profiling_config_gener": [367, 432, 489], "quantization_config_gener": [367, 432, 489], "mixedprecisionconfiggener": 368, "generate_mixed_precision_config": 368, "profilingconfiggener": 369, "quantizationconfiggener": 370, "generate_tuning_config": 370, "generate_quantization_config": 370, "configurationpars": 371, "input_data": 371, "parse_evaluation_data": 371, "evaluation_data": 371, "parse_transform": 371, "transforms_data": [371, 398, 403], "parse_dataload": 371, "parse_metr": 371, "metric_data": 371, "get_param_typ": 371, "param_group": 371, "parse_valu": 371, "required_typ": 371, "parse_list_valu": 371, "parse_multidim_list": 371, "dimension": 371, "normalize_string_list": 371, "string_list": 371, "bracket": 371, "miss": [371, 566], "get_predefined_configur": 373, "update_config_to_machine_specif": 373, "configuration_pars": [374, 432, 489], "get_boundary_nod": [374, 432, 489], "get_configur": [374, 432, 489], "params_feed": [374, 432, 489], "feeder": 375, "get_framework": [375, 446], "get_domain": 375, "get_model": [375, 446, 528], "get_dataload": 375, "get_transform": 375, "get_object": 375, "get_strategi": 375, "get_quantization_approach": 375, "get_possible_valu": 375, "bench": [376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 462, 488], "dbmanag": [376, 408], "database_loc": [376, 408], "log_level": [376, 408, 499], "initialize_databas": [376, 408], "create_sqlalchemy_engin": [376, 408], "create_al": [376, 408], "tabl": [376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 408], "project_id": [377, 380, 387, 388, 391, 393, 398, 402, 403], "model_id": [377, 387, 388, 391], "dataset_id": [377, 380, 388, 391, 398, 402, 403], "warmup_iter": 377, "number_of_inst": 377, "cores_per_inst": [377, 508, 537, 539, 549, 565], "execution_command": [377, 388, 391], "benchark": 377, "delete_benchmark": [377, 397, 403], "benchmark_nam": 377, "update_statu": [377, 388, 391], "execution_statu": [377, 388, 391], "executionstatu": [377, 388, 391, 397, 403, 405, 406, 490, 506], "update_dur": [377, 388, 391], "durat": [377, 388, 391, 397, 403, 405, 406, 493, 559, 569], "update_execution_command": [377, 388, 391, 397, 403, 405, 406], "update_log_path": [377, 388, 391, 403, 406], "update_config_path": [377, 388], "update_dataset": [377, 388, 391], "update_batch_s": [377, 388], "update_mod": 377, "update_cores_per_inst": 377, "update_number_of_inst": 377, "clean_statu": [377, 388, 391, 397, 403, 405, 406, 506], "status_to_clean": [377, 388, 391, 397, 403, 405, 406, 506], "build_info": [377, 378, 380, 387, 388, 391, 392, 396], "benchmark_result": [377, 385, 408, 432], "benchmarkresult": [377, 378], "update_accuraci": 378, "update_perform": 378, "list_by_framework": [379, 386, 394], "framework_id": [379, 386, 387, 394, 410], "query_to_list": [379, 386, 394], "dataloaders_queri": 379, "update_param": 379, "dataloader_id": 379, "fill_dictionari": [379, 381, 382, 384, 386, 389, 390, 394], "dataset_nam": [380, 398, 403], "template_path": 380, "delete_dataset": [380, 398, 403], "update_template_path": 380, "get_domain_id": 381, "domain_nam": 381, "domainflavour": [382, 490], "db": [382, 389, 390, 409, 410], "get_domain_flavour_id": 382, "domain_flavour_nam": 382, "flavour": [382, 401, 403, 461, 490], "get_framework_id": 384, "framework_nam": [384, 459, 496], "domain_flavour": [385, 408, 432, 438, 507], "optimization_typ": [385, 388, 408, 432], "profiling_result": [385, 391, 408, 432], "tuning_detail": [385, 388, 408, 432], "tuning_histori": [385, 388, 403, 405, 408, 432, 467, 489], "metrics_queri": 386, "input_nod": 387, "precision_id": [387, 388, 389, 390], "domain_id": [387, 394], "domain_flavour_id": 387, "supports_profil": [387, 440, 448], "supports_graph": [387, 440], "delete_model": [387, 403, 404], "optimization_type_id": 388, "sampling_s": [388, 508, 539, 572, 573], "tuning_details_id": [388, 395], "diagnosis_config": 388, "delete_optim": [388, 403, 405], "optimization_id": [388, 389, 403, 405, 462], "optimization_nam": [388, 389, 402, 403], "update_optimized_model": [388, 403, 405], "optimized_model_id": 388, "update_sampling_s": 388, "update_precis": 388, "update_tuning_detail": 388, "pin_accuracy_benchmark": [388, 403, 405], "pin": [388, 403, 405], "pin_performance_benchmark": [388, 403, 405], "get_optimization_by_project_and_model": 388, "unpin_benchmark": 388, "db_connect": 388, "unpin": 388, "optimizationtyp": [388, 389, 490], "tuningdetail": [388, 395, 476], "tuninghistori": [388, 396, 477], "optimized_model": [388, 549], "get_pinned_benchmark": 388, "list_for_precis": 389, "precision_nam": [389, 390], "get_optimization_type_for_precis": 389, "get_optimization_type_id": 389, "get_optimization_type_by_nam": 389, "get_optimization_type_by_id": 389, "get_precision_id": 390, "get_precision_by_nam": 390, "get_precision_by_id": 390, "num_thread": 391, "delete_profil": [391, 403, 406], "profiling_id": [391, 392, 403, 406, 478], "profiling_nam": 391, "update_num_thread": 391, "profilingresult": [391, 392], "total_execution_tim": 392, "accelerator_execution_tim": 392, "cpu_execution_tim": 392, "op_run": 392, "op_defin": 392, "get_result": 392, "bulk_add": 392, "params_interfac": [392, 397, 398, 400, 402, 403, 404, 405, 406, 408, 432, 489, 526], "profilingresultaddparamsinterfac": [392, 403, 406, 409], "bulk": [392, 403, 406], "delete_result": 392, "delet": [392, 397, 398, 403, 404, 405, 406, 407, 562, 563], "create_project": [393, 402, 403, 407], "delete_project": [393, 403, 407], "project_nam": [393, 398, 403], "get_model_by_nam": 393, "list_project": [393, 403, 407], "update_not": 393, "list_by_domain": 394, "transforms_queri": 394, "accuracy_criterion_typ": 395, "accuracy_criterion_threshold": 395, "exit_polici": [395, 545, 569, 572, 573], "tuning_details_data": 395, "delete_tuning_detail": 395, "update_tuning_histori": 395, "tuning_history_id": 395, "minimal_accuraci": 396, "baseline_accuraci": 396, "baseline_perform": 396, "last_tune_accuraci": 396, "last_tune_perform": 396, "best_tune_accuraci": 396, "best_tune_perform": 396, "benchmarkapiinterfac": [397, 403], "get_benchmark_detail": [397, 403], "list_benchmark": [397, 403], "update_benchmark_accuraci": [397, 403], "update_benchmark_perform": [397, 403], "update_benchmark_statu": [397, 403], "update_benchmark_dur": [397, 403], "update_path": [397, 403, 405], "add_benchmark": [397, 403], "add_result": [397, 403, 406], "edit_benchmark": [397, 403], "parse_benchmark_data": [397, 403], "benchmarkaddparamsinterfac": [397, 403, 409], "parse_benchmark_edit_data": [397, 403], "benchmarkeditparamsinterfac": [397, 403, 409], "before_delete_benchmark_entri": 397, "sqlite3": 397, "db_model": [397, 408, 432, 489], "datasetapiinterfac": [398, 403], "get_dataset_detail": [398, 403], "list_dataset": [398, 403], "add_dataset": [398, 403], "set_template_path": [398, 403], "parsed_dataset_data": [398, 403], "datasetaddparamsinterfac": [398, 403, 409], "check_if_custom_metric_or_dataload": [398, 403], "dataset_data": [398, 403, 463, 464, 469, 473, 476, 509], "generate_custom_templ": [398, 403], "dataloader_path": [398, 403], "generate_templ": [398, 403], "template_typ": [398, 403], "parse_dataset_data": [398, 403], "get_predefined_dataset": [398, 403], "prepare_predefined_dataload": [398, 403], "prepare_predefined_transform": [398, 403], "ordereddict": [398, 403, 508], "set_database_vers": [398, 399], "version_num": [398, 399], "alembic_vers": [398, 399], "initialize_associ": [398, 399], "initialize_precision_optimization_types_associ": [398, 399], "search_in_list_of_dict_for_unique_valu": [398, 399], "list_of_dict": [398, 399], "search_in_list_of_dict": [398, 399], "diagnosisapiinterfac": [400, 403], "get_op_list": [400, 403, 411], "get_op_detail": [400, 403, 411], "generate_optim": [400, 403], "model_wise_param": [400, 403], "parse_optimization_data": [400, 403, 405], "diagnosisoptimizationparamsinterfac": [400, 403, 409], "parse_op_wise_config": [400, 403], "op_wise_param": [400, 403], "parse_wise_paramet": [400, 403], "params_per_typ": [400, 403], "set_op_wise_pattern_precis": [400, 403], "parse_model_wise_config": [400, 403], "dictionariesapiinterfac": [401, 403], "dictonari": [401, 403], "list_domain": [401, 403], "list_domain_flavour": [401, 403], "list_optimization_typ": [401, 403], "list_optimization_types_for_precis": [401, 403], "list_precis": [401, 403], "list_dataload": [401, 403], "list_dataloaders_by_framework": [401, 403], "list_transform": [401, 403], "list_transforms_by_framework": [401, 403], "list_transforms_by_domain": [401, 403], "list_metr": [401, 403], "list_metrics_by_framework": [401, 403], "examplesapiinterfac": [402, 403], "get_optimization_data": [402, 403], "optimizationaddparamsinterfac": [402, 403, 405, 409], "benchmark_api_interfac": [403, 408, 432], "dataset_api_interfac": [403, 408, 432], "diagnosis_api_interfac": [403, 408, 432], "dictionaries_api_interfac": [403, 408, 432], "examples_api_interfac": [403, 408, 432], "model_api_interfac": [403, 408, 432], "optimization_api_interfac": [403, 408, 432], "profiling_api_interfac": [403, 408, 432], "project_api_interfac": [403, 408, 432], "modelapiinterfac": [403, 404], "add_model": [403, 404, 407], "get_model_detail": [403, 404], "list_model": [403, 404, 432, 458, 489], "parse_model_data": [403, 404], "modeladdparamsinterfac": [403, 404, 409], "optimizationapiinterfac": [403, 405], "get_optimization_detail": [403, 405], "list_optim": [403, 405], "update_optimization_statu": [403, 405], "update_optimization_dur": [403, 405], "add_optim": [403, 405], "add_quantization_optim": [403, 405], "optimization_data": [403, 405, 463, 464, 469, 473, 476], "add_standard_optim": [403, 405], "edit_optim": [403, 405], "add_tuning_histori": [403, 405], "parse_tuning_histori": [403, 405], "tuninghistoryinterfac": [403, 405, 409, 526], "parse_optimization_edit_data": [403, 405], "optimizationeditparamsinterfac": [403, 405, 409], "profilingapiinterfac": [403, 406], "get_profiling_detail": [403, 406], "list_profil": [403, 406], "update_profiling_statu": [403, 406], "update_profiling_dur": [403, 406], "add_profil": [403, 406], "edit_profil": [403, 406], "bulk_add_result": [403, 406], "parse_profiling_data": [403, 406], "profilingaddparamsinterfac": [403, 406, 409], "parse_profiling_result_data": [403, 406], "parse_profiling_edit_data": [403, 406], "profilingeditparamsinterfac": [403, 406, 409], "projectapiinterfac": [403, 407], "get_project_detail": [403, 407], "add_dummy_dataset": [403, 407], "update_project_not": [403, 407], "db_oper": [408, 432, 489], "parse_nod": 409, "tuninghistoryiteminterfac": [409, 526], "update_dataloaders_param": 410, "dataloaders_to_upd": 410, "framework_dataloaders_config": 410, "get_framework_dataloaders_config": 410, "get_framework_transforms_config": 410, "get_tensors_info": [411, 440], "load_quantization_config": 411, "calculate_ms": 411, "input_model_tensor": 411, "optimized_model_tensor": 411, "op_detail": [411, 413, 432, 489], "opdetail": [411, 416], "get_histogram_data": 411, "draw": [411, 569, 572], "diagnosisfactori": 412, "get_diagnosi": 412, "onnx_diagnosi": [413, 432, 489], "onnxrt_diagnosi": [413, 414, 432], "tensorflow_diagnosi": [413, 432, 489], "factori": [413, 432, 467, 480, 485, 489, 500], "op_entri": [413, 432, 489], "onnxrtdiagnosi": 415, "onnxrtmodel": [415, 443], "serialization_typ": [416, 417, 447, 496, 498, 509, 510, 514, 515], "oppattern": 416, "pattern_data": 416, "opweight": 416, "weights_data": 416, "opactiv": 416, "op_activ": 416, "opentri": 417, "activation_min": 417, "activation_max": 417, "tensorflowdiagnosi": 419, "tensorflowmodel": [419, 448, 450, 451, 452, 453], "browser": [420, 536], "get_directory_entri": 420, "get_requested_path": 420, "request": [420, 432, 433, 434, 455, 456, 459, 477, 489, 493, 519, 521, 523, 524, 528, 530, 531, 533, 536, 539, 566], "get_non_hidden_directory_entri": 420, "create_dir_entri": 420, "direntri": 420, "create_file_entri": 420, "create_entri": 420, "is_directori": 420, "sort_entri": 420, "should_show_fil": 420, "should_show_only_model_fil": 420, "get_setting_valu": 420, "get_filter_valu": 420, "filter_requested_entri": 420, "filter_nam": 420, "is_directory_entri": 420, "is_model_or_directory_entri": 420, "is_dataset_or_directory_entri": 420, "brows": 421, "filesystem": [421, 507, 532], "attribute_typ": 422, "expanded_group": [423, 426], "edg": [425, 427, 432, 489, 571], "add_edg": 425, "source_id": 425, "target_id": 425, "get_nod": 425, "highlight_pattern": 425, "highlight": [425, 428, 536], "get_target_nod": 425, "reader": [426, 427, 432, 489], "graphread": 426, "find_pattern_in_graph": [426, 523], "displai": [427, 440], "onnxrt_read": [427, 429, 432], "tensorflow_read": [427, 429, 432], "collaps": [427, 432, 489, 536], "graph_read": [427, 432, 489], "groupnod": 428, "group_nam": 428, "onnxrtread": 430, "tensorflowread": 431, "jobs_control_queu": [432, 433, 489], "frozen_pb": [432, 439, 449], "meta_graph": [432, 439, 449], "model_type_gett": [432, 439, 489], "repositori": [432, 437, 439, 489, 495, 551], "download_config": [432, 457, 458, 489], "download_model": [432, 457, 458, 489], "optimize_model": [432, 465, 467, 468, 471], "neural_coder_optim": [432, 467, 489], "tune_model": [432, 467, 474], "execute_optim": [432, 467, 489], "tensorflow_profil": [432, 480, 489], "execute_profil": [432, 480, 489], "profile_model": [432, 480, 482, 486, 489], "job": 433, "_jobscontrolqueu": 434, "queu": 434, "jobsmanag": 434, "_jobsmmanag": 435, "_job": 435, "get_default_path": 437, "shape_elements_ord": [440, 443, 452, 507], "get_input_nod": [440, 450, 451, 452], "get_output_nod": [440, 450, 451, 452], "ensure_supported_path": 440, "get_model_graph": [440, 443, 451, 452, 523], "get_framework_nam": [440, 443, 445, 452], "supports_path": [440, 443, 445, 448, 450, 451, 453], "guard_requirements_instal": [440, 443, 445, 452], "instal": [440, 443, 445, 452, 459, 547, 561], "nc_model_inst": [443, 452], "onnx_model": 443, "filtered_input_nod": 443, "remove_number_of_samples_from_shap": 443, "pytorchscriptmodel": 445, "modelrepositori": 446, "get_framework_from_path": [446, 507], "get_supported_framework": 446, "is_model_path": 446, "trust": [447, 536], "frozenpbmodel": 448, "metagraphmodel": 451, "metagraph": 451, "tensorflow_model": 452, "savedmodelmodel": 453, "get_input_shap": 454, "fix_dynamic_shap": 454, "resourc": [457, 542, 562], "download_yaml_config": 457, "model_info": 457, "download_fil": 457, "download_path": 457, "header": [457, 532, 547], "report_progress": 457, "unpack_arch": 457, "archive_path": 457, "unpack": 457, "archiv": 457, "get_yaml_url": 457, "model_src_dir": 457, "yaml_relative_loc": 457, "get_available_model": 459, "check_vers": 459, "framework_vers": 459, "supported_vers": 459, "validate_model_list": 459, "model_list": 459, "get_framework_module_nam": 459, "get_installed_framework": 459, "mappingdirect": 461, "namesmapp": 461, "framework_map": 461, "domain_map": 461, "domain_flavour_map": 461, "precision_map": 461, "map_nam": 461, "parameter_typ": 461, "execute_optimization_pytorch_script": 462, "execute_optimization_regular": 462, "parse_model_data_to_bench_nam": 462, "parse_log": 462, "optimization_detail": 462, "check_if_collect_tuning_histori": 462, "optimizationfactori": 463, "get_optim": 463, "optimization_script": [464, 469, 473, 476], "optimize_graph": [466, 470], "output_graph": [466, 470, 475, 549], "optimize_graph_config": [466, 470], "optimize_pt_script": 472, "output_model_nam": 473, "output_model_dir": 473, "optimizationinterfac": 473, "accuracycriterion": 476, "optimization_workdir": 477, "watcher": 477, "process_succeed": 477, "signal": [477, 507, 545], "was_history_file_chang": 477, "history_file_modification_tim": 477, "send_history_snapshot": 477, "execute_real_profil": 478, "profiling_detail": 478, "profilerfactori": [479, 484], "get_profil": [479, 484], "profiling_data": [479, 483, 484, 486, 505], "load_profiling_detail": 481, "json_path": 481, "config_path": 483, "initialize_graph": 486, "tf_modul": 486, "create_tf_config": 486, "num_warmup": 486, "get_node_by_nam": 486, "convert_nodes_to_list": 486, "build_dataload": 486, "delete_assign": 487, "wsgi": 488, "prepare_environ": 488, "app": [489, 522], "history_snapshot_pars": [489, 522, 527], "request_data_processor": [489, 522, 527], "response_gener": [489, 522, 527, 528, 530, 533], "status": [490, 502, 506], "ensure_workdir_exists_and_writ": 491, "clean_workloads_wip_statu": 491, "wip": [491, 574], "workloads_list": 491, "migrate_databas": 491, "latest": [491, 501, 553, 564, 568], "alemb": [491, 547, 553], "notfoundexcept": [492, 520, 521], "accessdeniedexcept": 492, "deni": 492, "clienterrorexcept": 492, "internalexcept": 492, "workspace_path": [493, 507], "subject": [493, 519, 554], "send_respons": 493, "log_nam": 493, "additional_log_nam": [493, 501], "shell": [493, 501, 570], "process_dur": 493, "call_on": 493, "cwd": [493, 501], "universal_newlin": [493, 501], "startupinfo": [493, 501], "creationflag": [493, 501], "ignore_exit_cod": [493, 501], "pid": [493, 501], "env_arg": 493, "ncprocess": [493, 502], "refresh_workdir": 493, "is_multi_command": 493, "expir": 494, "expiringdictitem": 494, "expires_at": 494, "is_expir": 494, "expiringdict": 494, "initial_valu": 494, "ttl": 494, "120": 494, "userdict": 494, "githubinfo": 495, "hw": 496, "hwinfo": 496, "get_number_of_socket": 496, "get_distribut": 496, "distibut": 496, "get_bios_vers": 496, "bio": [496, 561], "is_turbo_boost_en": 496, "turbo": [496, 561], "boost": [496, 556, 564], "get_kernel_vers": 496, "get_framework_info": 496, "get_framework_dependency_info": 496, "subdepend": 496, "serializ": 498, "serialize_item": 498, "datetim": 498, "throw": 498, "typeerror": 498, "2016": 498, "84913": 498, "08t11": 498, "084913": 498, "change_log_level": 499, "optimizationpars": 500, "performancepars": 500, "update_parti": 500, "parsed_result": 500, "summarize_parti": 500, "summarize_valu": 500, "accuracypars": 500, "benchmarkparserfactori": 500, "get_pars": 500, "profilingpars": 500, "unify_tim": 500, "string_valu": 500, "micro": 500, "125": [500, 574], "6m": 500, "microsecond": 500, "output_dir": 501, "cmd": [501, 549], "docker": 501, "hub": 501, "aibt_tensorflow": 501, "7_3_mkldnn_tensorflow": 501, "111224": 501, "pull_imag": 501, "0c750a01": 501, "90e0": 501, "4aa8": 501, "99fe": 501, "a194d55a2046": 501, "time_start": 501, "2018": 501, "17t14": 501, "47": [501, 574], "352502": 501, "time_stop": 501, "25": [501, 574], "110410": 501, "info_path": 501, "tail": 501, "is_ok": [501, 502], "subprocess": [501, 523], "popen": 501, "remove_log": 501, "properli": 502, "return_code_al": 502, "remove_successful_log": 502, "success": [502, 519, 553], "sent": 505, "throughput": [505, 549], "acc_input_model": 505, "acc_optimized_model": 505, "size_input_model": 505, "size_optimized_model": 505, "path_optimized_model": 505, "optimization_tim": 505, "insert_data": 505, "calculate_throughput": 505, "readi": 505, "ensure_working_path_exist": 506, "clean_log": 506, "workdir_path": 506, "is_hidden": 507, "get_dataset_path": 507, "get_file_extens": 507, "lead": [507, 542, 556, 562, 563], "is_dataset_fil": 507, "normalize_domain": 507, "underscor": 507, "normalize_framework": 507, "normalize_str": 507, "string_to_norm": 507, "get_model_zoo_config_path": 507, "model_dict": 507, "get_model_zoo_model_path": 507, "check_modul": 507, "get_module_vers": 507, "add_unit": 507, "load_model_config": 507, "load_dataloader_config": 507, "load_transforms_config": 507, "load_transforms_filter_config": 507, "meaning": [507, 560], "load_precisions_config": 507, "load_model_wise_param": 507, "load_metrics_config": 507, "get_metrics_dict": 507, "load_help_nc_param": 507, "replace_with_valu": 507, "file_path": 507, "verify_file_path": 507, "determine_ip": 507, "ip": 507, "is_development_env": 507, "nc_mode": 507, "filter_transform": 507, "parse_bool_valu": 507, "release_tag": 507, "get_shape_from_transform": 507, "get_height_width_from_s": 507, "parse_to_string_list": 507, "parse_to_float_list": 507, "export_to_csv": 507, "parse_vers": 507, "string_vers": 507, "remove_dataload": 508, "datalad": 508, "remove_accuracy_metr": 508, "set_evaluation_dataload": 508, "udpat": 508, "set_evaluation_dataset_path": 508, "get_performance_config": 508, "set_performance_cores_per_inst": 508, "get_performance_cores_per_inst": 508, "set_performance_num_of_inst": 508, "num_of_inst": [508, 537, 539, 549, 565], "get_performance_num_of_inst": 508, "set_accuracy_and_performance_batch_s": 508, "set_quantization_dataload": 508, "set_quantization_dataset_path": 508, "set_quantization_batch_s": 508, "set_workspac": [508, 517], "set_accuracy_go": 508, "accuracy_go": 508, "set_accuracy_metr": 508, "set_transform": 508, "process_transform": 508, "set_quantization_approach": 508, "set_input": 508, "set_output": 508, "set_quantization_sampling_s": 508, "set_performance_warmup": 508, "warmup": [508, 565], "set_performance_iter": 508, "set_optimization_precis": 508, "yaml_path": 508, "is_dummi": 509, "labelbal": 509, "set_transforms_from_list": 509, "transforms_list": 509, "set_dataset": 509, "postprocessschema": 510, "set_accuracy_postprocess_transform": 510, "set_precis": [511, 513], "sgdoptim": 515, "adamwoptim": 515, "adamoptim": 515, "crossentropylosscriterion": 515, "sparsecategoricalcrossentropycriterion": 515, "knowledgedistillationlosscriterion": 515, "weightcompressionapproach": 515, "parse_dict_value_to_float": 515, "parse_dict_value_to_int": 515, "wiseconfigdetail": 516, "wiseconfig": 516, "multiobject": 517, "acccriterion": 517, "exitpolici": 517, "set_timeout": 517, "set_max_tri": 517, "max_trial": [517, 545, 572], "trial": [517, 572], "set_performance_onli": 517, "set_random_se": 517, "float_represent": 518, "dumper": 518, "pruner_represent": 518, "outsid": 519, "create_simple_respons": 519, "gui": [519, 520, 524, 536, 552, 553], "messagequeu": 519, "queue": [519, 524], "post_failur": 519, "post_success": 519, "post_error": 519, "wait": 519, "global_config_directori": 520, "set_up": 520, "determine_values_from_environ": 520, "get_command_line_arg": 520, "determine_server_port": 520, "tri": [520, 572], "max_ports_tri": 520, "port_default": 520, "determine_gui_port": 520, "client": [520, 536], "server_port": 520, "unless": [520, 548], "is_port_taken": 520, "determine_log_level": 520, "determine_url_prefix": 520, "get_url": 520, "dump_token_to_fil": 520, "servicenotfoundexcept": 521, "unknown": 521, "connector": 523, "routingdefinit": 523, "rout": 523, "realtimeroutingdefinit": 523, "realtim": 523, "deferredroutingdefinit": 523, "deferredsubprocessroutingdefinit": 523, "spawn": 523, "get_system_info": 523, "endpoint": 524, "run_serv": 524, "webserv": 524, "get_tls_arg": 524, "tl": [524, 536], "block_ifram": 524, "werkzeug": [524, 532], "ifram": 524, "csp": 524, "block_snif": 524, "mime": 524, "snif": 524, "require_api_token": 524, "author": [524, 554], "j": 524, "handle_api_cal": 524, "subpath": 524, "allow_api_cal": 524, "page_not_found": 524, "disable_cach": 524, "build_paramet": 524, "flask": [524, 536], "web_socket_publish": 524, "web_socket": 524, "flask_socketio": 524, "socketio": [524, 536], "benchmarkservic": 525, "workloadservic": [525, 529, 530, 533], "historysnapshotpars": 526, "history_snapshot": 526, "provide_perform": 526, "parse_history_snapshot": 526, "parse_history_item": 526, "history_item": 526, "extract_accuraci": 526, "extract_perform": 526, "modelservic": 528, "optimizationservic": 529, "profilingservic": 530, "generate_csv": 530, "processor": [531, 549, 556, 561, 564, 566, 567, 574], "requestdataprocessor": 531, "get_string_valu": 531, "responsegener": 532, "serve_from_filesystem": 532, "mimetyp": 532, "as_attach": 532, "add_refresh": 532, "refresh_tim": 532, "refresh": 532, "from_except": 532, "get_status_code_for_except": 532, "get_code_templ": 533, "get_output": 533, "asymmetr": [535, 566], "conda": [536, 547, 553, 568], "forg": [536, 547, 553], "setup": [536, 548, 553], "sign": [536, 566, 569], "certif": 536, "ui": 536, "5000": 536, "338174d13706855fc6924cec7b3a8ae8": 536, "listen": 536, "firewal": 536, "8080": 536, "cert": 536, "path_to_cert": 536, "crt": 536, "path_to_private_kei": 536, "encrypt": 536, "insecur": 536, "expos": 536, "forfeit": 536, "threat": 536, "button": [536, 552], "pop": 536, "recognit": [536, 544, 570], "finish": [536, 572], "synthet": 536, "plu": 536, "icon": 536, "unfold": 536, "On": [536, 566], "panel": 536, "navig": 536, "trash": 536, "visibl": 536, "cursor": 536, "prompt": [536, 544], "confirm": 536, "revers": 536, "exit": [536, 545, 549, 556, 572, 573], "pencil": 536, "light": [536, 543], "blue": 536, "color": 536, "row": [536, 562, 563], "arrow": 536, "checkbox": 536, "chart": [536, 566, 569, 570], "offer": [536, 540], "conveni": 536, "variat": 536, "yellow": 536, "warn": 536, "remind": 536, "One": [536, 539, 544, 552, 562, 563, 564], "dialog": 536, "cryptographi": 536, "centercrop": [537, 539, 571, 572], "totensor": [537, 539, 571], "485": [537, 539, 574], "456": [537, 539], "406": [537, 539], "enough": [537, 566], "benchmarkconf": 537, "lpot": [537, 549, 564, 568], "pylint": 538, "flake8": 538, "autopep8": 538, "motiv": 538, "explan": 538, "bug": 538, "reproduc": 538, "submit": 538, "page": 538, "intend": 538, "collabor": 538, "adher": 538, "often": [539, 542, 560, 562, 563], "encount": 539, "consum": 539, "lack": 539, "faster": [539, 541, 564, 574], "dataloadermodul": 539, "hard": 539, "treat": 539, "eas": [539, 553, 564], "advantag": [539, 565], "life": 539, "launch": [539, 556], "__next__": 539, "randomresizedcrop": [539, 571], "imagerecordit": 539, "path_imgrec": 539, "label_width": 539, "preprocess_thread": 539, "data_nthread": 539, "data_shap": 539, "label_nam": 539, "rand_crop": 539, "rand_mirror": 539, "shuffle_dataset": 539, "shuffle_chunk_se": 539, "shuffle_se": 539, "data_layer_typ": 539, "combine_mean_std": 539, "helloworld": [540, 571], "ensp": [540, 555, 571], "imagerecord": [540, 544, 573], "image_nam": 540, "cocorecord": 540, "gt": [540, 571], "float16": 540, "int64": 540, "style_transf": 540, "content": 540, "tfrecorddataset": [540, 572], "aid": 541, "deploy": 541, "infrastructur": 541, "deploi": [542, 572], "power": [542, 561], "mobil": [542, 574], "workflow": [542, 553, 556, 570], "produc": 542, "softmax": 542, "l": [542, 570, 572], "kd": 542, "kullback": 542, "leibler": 542, "patient": 542, "compact": [542, 562, 563], "ia": 542, "attach": 542, "shallow": 542, "deepest": 542, "deeper": 542, "10006": 542, "distillationconf": 542, "blendcnn": [542, 574], "loss_sum": 542, "iter_bar": 542, "tqdm": 542, "desc": [542, 562], "teacher_logit": 542, "promis": [543, 562, 563], "huge": [543, 563], "bit": [543, 556, 564, 566], "heavi": 543, "booster": 543, "degrad": 543, "retrain": 543, "incorpor": [543, 572], "novel": 543, "builtin": 544, "program": [544, 549, 556], "addition": [544, 572], "enable_eager_execut": 544, "yaml_file_path": 544, "evaluation_result": 544, "evaluation_time_cost": 544, "partit": 544, "distributedsampl": 544, "train_sampl": 544, "train_dataset": 544, "num_replica": 544, "train_kwarg": 544, "adadelta": 544, "distributedoptim": 544, "named_paramet": 544, "broadcast_paramet": 544, "root_rank": 544, "broadcast_optimizer_st": 544, "set_epoch": 544, "batch_idx": 544, "nll_loss": 544, "log_interv": 544, "0f": 544, "tloss": 544, "6f": 544, "dry_run": 544, "test_func": 544, "host": 544, "num_of_process": 544, "002": 544, "ssh": 544, "readm": 544, "exactli": 544, "resnet50_v1": [544, 549], "resizecropimagenet": [544, 571], "realiz": [544, 555, 559, 567, 569], "tow": 544, "situat": 544, "node1": 544, "node2": 544, "TO": 544, "your_node1_nam": 544, "your_node2_nam": 544, "resnet50_fp32_pretrained_model": [544, 549], "nc_resnet50_v1": 544, "factor": [545, 561, 574], "oppos": 545, "entail": 545, "post_training_dynamic_qu": [545, 565], "post_training_static_qu": [545, 565, 572], "accuracy_criterion": [545, 559, 565, 569, 572, 573], "rel": [545, 565, 569, 572, 573, 574], "earli": [545, 566, 572, 573], "determinist": [545, 572], "wide": [546, 556, 563, 566], "varieti": [546, 565, 572], "demonstr": [546, 549, 558, 562, 570], "incompat": 547, "88": [547, 569, 574], "80": [547, 570, 574], "pyobject": 547, "reinstal": 547, "importerror": 547, "libgl": 547, "apt": [547, 553], "yum": [547, 553], "opencv": 547, "conflict": 547, "pend": 547, "27": [547, 553, 574], "quick": [548, 573], "friendli": [548, 573], "let": [548, 565, 573], "up1": 548, "up2": 548, "valid_mixed_precis": 548, "concatv2": 548, "maxpool": 548, "avgpool": 548, "per_tensor": [548, 572, 573], "addn": 548, "grappler_optim": 548, "constfold": 548, "debug_stripp": 548, "primarili": 549, "subexpress": 549, "bfloat16": [549, 556, 567], "explicitli": [549, 550], "op_to_stor": 549, "cpx": 549, "clx": 549, "force_bf16": 549, "executable_nc_wrapp": 549, "consequ": [549, 556], "resnet50_measur": 549, "8280": 549, "2021": 549, "165": 549, "139": 549, "567": [549, 574], "sec": [549, 574], "fp32_optimized_model": 549, "3x": 549, "325": 549, "99": [549, 574], "56": [549, 574], "068": 549, "992": 549, "major": [550, 566], "concept": [550, 569], "custom_metr": 550, "refin": 550, "broad": 552, "snippet": 552, "upload": 552, "qintegerop": [552, 566], "plan": [552, 556], "frequent": 553, "ask": 553, "consolid": 553, "streamlin": 553, "scienc": 553, "anaconda": 553, "suit": [553, 570], "esri": 553, "apach": 554, "softwar": [554, 556, 561, 564, 568], "copyright": 554, "mit": 554, "accompani": 554, "wish": 554, "bibtex": 554, "misc": 554, "feng": 554, "tian": 554, "chuanqi": 554, "wang": 554, "guom": 554, "zhang": 554, "penghui": 554, "cheng": 554, "pengxin": 554, "yuan": 554, "haihao": 554, "shen": 554, "jiong": 554, "gong": 554, "titl": 554, "howpublish": 554, "year": 554, "logo": [554, 561], "atom": 554, "phi": 554, "pentium": 554, "vtune": 554, "corpor": [554, 561], "subsidiari": [554, 561], "brand": [554, 561], "claim": [554, 561], "popularli": 555, "label_map": 555, "decis": 555, "ap": 555, "pr": 555, "curv": 555, "target_boxes_num": 555, "str_label": 555, "int_label": 555, "inturn": 555, "cocomap": 555, "vocmap": 555, "categor": 555, "multiclass": 555, "multilabel": 555, "multi_metr": 555, "higher_is_bett": [555, 559, 573], "newmetr": 555, "reflect": [555, 561, 571], "recent": 556, "growth": 556, "complex": [556, 563], "half": 556, "sixteen": 556, "bandwidth": 556, "3rd": [556, 564, 566, 567], "gen": [556, 564, 567], "codenam": 556, "avx512": [556, 566], "vcvtne2ps2bf16": 556, "vcvtneps2bf16": 556, "vdpbf16p": 556, "user_defined_funct": 556, "avx512_bf16": 556, "persist": 557, "brought": [557, 566], "tf2": 557, "h5": 557, "onnx_ml_pb2": 557, "hybridblock": 557, "0000": 557, "inc_model": 557, "saved_result": 557, "tflite": 558, "multi_object": 559, "peak": 559, "start_tim": 559, "_result_list": 559, "customobj": 559, "simultan": [560, 565], "arbitrari": 560, "gain": [560, 564], "benefit": [560, 562], "Of": 560, "cours": 560, "prune_conf": 560, "post_training_quantization_conf": 560, "quantization_aware_training_conf": 560, "configurationintel": 561, "platinum": [561, 574], "8380": [561, 574], "manufactur": 561, "m50cyp2sbstd": 561, "se5c6200": 561, "86b": 561, "0022": 561, "d64": 561, "2105220049": 561, "microcod": 561, "0xd0002b1": 561, "30ghz": 561, "3ghz": 561, "40": [561, 573, 574], "perf": 561, "256gb": 561, "16x16gb": 561, "ddr4": 561, "3200mt": 561, "nic": 561, "ethernet": 561, "10g": 561, "x550t": 561, "drive": 561, "1x": 561, "intel_ssdsc2kw01": 561, "953": 561, "9g": 561, "ct1000mx500ssd1": 561, "931": 561, "5g": 561, "publicli": 561, "degre": 561, "mark": 561, "trademark": 561, "briefli": 562, "maxim": [562, 563, 572], "art": [562, 563], "increasingli": [562, 563], "crucial": [562, 563], "rule": 562, "salient": [562, 563], "nonzero": [562, 563], "irregular": [562, 563], "anywher": [562, 563], "2in4": 562, "amper": 562, "gemm": 562, "ic": [562, 564], "oc": 562, "kh": 562, "kw": 562, "lowest": [562, 563], "fastform": 562, "formula": [562, 563], "num_train_epoch": 562, "pbar": 562, "progressbar": 562, "n_total": 562, "n_gpu": 562, "gradient_accumulation_step": 562, "clip_grad_norm_": 562, "max_grad_norm": 562, "rate": [562, 566], "cv": [562, 563], "grown": 563, "unpreced": 563, "smooth": 563, "discourag": 563, "namhoon": 563, "lee": 563, "thalaiyasingam": 563, "ajanthan": 563, "philip": 563, "torr": 563, "ON": 563, "2019": 563, "plug": 564, "twitter": 564, "linkedin": 564, "zone": 564, "hug": 564, "land": 564, "gcp": 564, "aw": [564, 574], "azur": 564, "marketplac": 564, "pat": 564, "keynot": 564, "intelon": 564, "sep": 564, "alibaba": 564, "chines": 564, "aug": 564, "purif": 564, "sacrif": 564, "jun": 564, "partner": 564, "democrat": 564, "apr": 564, "ecosystem": 564, "mar": 564, "feb": 564, "sigopt": 564, "jan": 564, "tutori": 564, "bilibili": 564, "ml": 564, "doubl": 564, "mlperf": 564, "reconstruct": 564, "abound": 564, "cern": 564, "gan": 564, "3dgan": 564, "4th": 564, "iml": 564, "workshop": 564, "highli": 564, "intelcaff": 564, "aris": 565, "tell": 565, "henc": 565, "quant_aware_train": 565, "op_type_list": 565, "use_bf16": [565, 567], "weight_compress": [565, 573], "initial_spars": [565, 573], "prune_typ": [565, 573], "basic_magnitud": [565, 573], "start_epoch": [565, 573], "end_epoch": [565, 573], "update_frequ": 565, "prune_domain": 565, "tile_pattern_1x1": 565, "inter_num_of_thread": 565, "intra_num_of_thread": 565, "graph_optimization_level": 565, "disable_al": 565, "veri": [566, 572], "invent": 566, "int4": 566, "cost": 566, "theoret": 566, "affin": 566, "zeropoint": 566, "overflow": 566, "solv": [566, 568, 572], "unseen": 566, "peopl": 566, "emul": 566, "pain": 566, "lossi": 566, "understand": [566, 570], "philosophi": 566, "val_dataset": 566, "val_dataload": 566, "worker": 566, "ping_memori": 566, "enhanc": 567, "cast": [567, 571], "bf16wrapper": 567, "retrac": 567, "site": 568, "assist": 568, "comparison": [568, 570], "sed": 568, "your_script": 568, "backbon": 569, "interact": 569, "sigopt_api_token": [569, 572], "sigopt_project_id": [569, 572], "sigopt_experiment_id": 569, "nc": [569, 572], "login": 569, "certain": 569, "suffici": 569, "ordinari": 569, "capac": 569, "sigopt_experiment_nam": [569, 572], "receiv": 569, "analysi": 569, "8266": 569, "8372": 569, "2132": 569, "83": [569, 574], "7495": 569, "8299": 569, "8294": 569, "85": [569, 574], "0837": 569, "8291": 569, "4469": 569, "visual": [570, 572], "discov": 570, "why": 570, "valuabl": 570, "instrument": 570, "writer": 570, "_pre_eval_hook": 570, "submodul": 570, "whitelist": 570, "_recordingobserv": 570, "output_tensors_dict": 570, "current_it": 570, "get_tensor_valu": 570, "_observer_forward_hook": 570, "_add_observer_": 570, "named_children": 570, "leaf": 570, "add_modul": 570, "register_forward_hook": 570, "dump_tim": 570, "summarywrit": 570, "_acc": 570, "tune_": 570, "add_graph": 570, "get_observer_dict": 570, "observer_dict": 570, "is_quant": 570, "add_histogram": 570, "bind_al": 570, "logdir_spec": 570, "tune_0_acc0": 570, "tune_1": 570, "tune_1_acc0": 570, "79": [570, 574], "image_recognit": 570, "run_tuning_dump_tensor": 570, "sh": 570, "four": 570, "baseline_acc_0": 570, "776": 570, "tune_1_acc_0": 570, "095": 570, "runs_v3": 570, "inceptionv3": 570, "v0": 570, "cg": 570, "op_wis": [570, 572, 573], "bash": 570, "run_tun": 570, "topologi": 570, "inception_v3": 570, "dataset_loc": 570, "inceptionv3_fp32_pretrained_model": 570, "output_model": 570, "nc_inceptionv3": 570, "inceptionv3_dump_tensor": 570, "poor": 570, "disappear": 570, "randomcrop": 571, "cropres": 571, "decodeimag": 571, "jpeg": 571, "encodejp": 571, "alignimagechannel": 571, "68": [571, 574], "116": 571, "78": [571, 574], "103": 571, "94": [571, 574], "017": 571, "bilinearimagenet": [571, 573], "topilimag": 571, "padding_mod": 571, "border": 571, "colorjitt": 571, "bright": 571, "satur": 571, "hue": 571, "jitter": 571, "tondarrai": 571, "max_trail": 572, "scale_propagation_max_pool": 572, "scale_propagation_concat": 572, "first_conv_or_matmul_quant": 572, "2000": 572, "tf_record": 572, "model_wis": [572, 573], "conv1": [572, 573], "pool1": 572, "conv2": 572, "guarante": 572, "classic": 572, "black": 572, "come": 572, "discret": 572, "compli": 572, "posterior": 572, "focu": 572, "short": 572, "never": 572, "loglevel": 572, "endlessli": 572, "idea": 572, "primari": 572, "optimum": 572, "redund": 572, "protect": 572, "especi": 572, "smbo": 572, "hyperparamet": 572, "appl": 572, "surrog": 572, "quantil": 572, "x1": 572, "x2": 572, "densiti": 572, "parzen": 572, "greatest": 572, "hour": 572, "dai": 572, "perspect": 572, "abctunestrategi": 572, "mobilenet_v1": 573, "onnxrt_integ": 573, "onnxrt_qlinear": 573, "image_tensor": 573, "subsect": 573, "hyper": 573, "06": [573, 574], "beta_1": 573, "beta_2": 573, "999": 573, "epsilon": 573, "sparsecategoricalcrossentropi": 573, "reduct": 573, "sum_over_batch_s": 573, "from_logit": 573, "54": [573, 574], "19": [573, 574], "90": [573, 574], "nesterov": 573, "weight_decai": 573, "overal": 573, "ye": 574, "rnn": 574, "unet": 574, "09": 574, "performancethroughput": 574, "efficientnet": 574, "91": 574, "43": 574, "69": 574, "32x": 574, "cnn": 574, "incept": 574, "37": 574, "65": 574, "38": 574, "77": 574, "53": 574, "57x": 574, "46": 574, "61": 574, "58x": 574, "resnet101": 574, "39": 574, "63": 574, "11x": 574, "51x": 574, "26": 574, "59": 574, "23": 574, "06x": 574, "25x": 574, "70": 574, "44": 574, "00": 574, "163": 574, "133": 574, "22x": 574, "73": 574, "97": 574, "49": 574, "111": 574, "20x": 574, "v3": 574, "43x": 574, "v4": 574, "18": 574, "53x": 574, "36": 574, "33x": 574, "44x": 574, "374": 574, "226": 574, "66x": 574, "92": 574, "41x": 574, "fashion": 574, "359": 574, "244": 574, "47x": 574, "172": 574, "66": 574, "98x": 574, "153": 574, "76x": 574, "151": 574, "112": 574, "35x": 574, "26x": 574, "72": 574, "56x": 574, "82": 574, "93x": 574, "vgg16": 574, "89": 574, "178": 574, "14x": 574, "vgg19": 574, "156": 574, "18x": 574, "albert": 574, "23x": 574, "barthez": 574, "81": 574, "86": 574, "82x": 574, "203": 574, "01x": 574, "216": 574, "102": 574, "10x": 574, "sst2": 574, "218": 574, "stsb": 574, "57": 574, "48": 574, "49x": 574, "93": 574, "70x": 574, "50x": 574, "40x": 574, "3878": 574, "3717": 574, "04x": 574, "camembert": 574, "188": 574, "91x": 574, "ctrl": 574, "deberta": 574, "124": 574, "81x": 574, "347": 574, "73x": 574, "382": 574, "198": 574, "flaubert": 574, "561": 574, "35": 574, "370": 574, "52x": 574, "hubert": 574, "84": 574, "36x": 574, "409": 574, "181": 574, "longform": 574, "28x": 574, "mbart": 574, "16x": 574, "639": 574, "490": 574, "31x": 574, "lvwerra": 574, "pegasu": 574, "samsum": 574, "19x": 574, "peleenet": 574, "419": 574, "316": 574, "resnet18": 574, "686": 574, "332": 574, "07x": 574, "611": 574, "333": 574, "83x": 574, "327": 574, "162": 574, "resnext101_32x8d": 574, "175": 574, "88x": 574, "197": 574, "99x": 574, "se_resnext50_32x4d": 574, "308": 574, "144": 574, "13x": 574, "squeezebert": 574, "186": 574, "155": 574, "78x": 574, "transfo": 574, "xl": 574, "37x": 574, "wave2vec2": 574, "60": 574, "58": 574, "21x": 574, "114": 574, "15x": 574, "yolo": 574, "29x": 574, "690": 574, "330": 574, "09x": 574, "614": 574, "334": 574, "84x": 574, "54x": 574, "410": 574, "168": 574, "finetun": 574, "resnext101_32x16d_wsl": 574, "1189": 574, "680": 574, "75x": 574, "677": 574, "381": 574, "59x": 574, "alexnet": 574, "960": 574, "469": 574, "17": 574, "05x": 574, "962": 574, "466": 574, "arcfac": 574, "235": 574, "130": 574, "294": 574, "34x": 574, "604": 574, "51": 574, "80x": 574, "caffenet": 574, "1501": 574, "536": 574, "1493": 574, "533": 574, "1372": 574, "541": 574, "480": 574, "1250": 574, "753": 574, "1130": 574, "748": 574, "emot": 574, "ferplu": 574, "336": 574, "65x": 574, "fcn": 574, "googlenet": 574, "740": 574, "587": 574, "770": 574, "824": 574, "601": 574, "819": 574, "597": 574, "45x": 574, "613": 574, "506": 574, "2454": 574, "1543": 574, "2164": 574, "1564": 574, "38x": 574, "2147": 574, "1046": 574, "1877": 574, "1054": 574, "mobilenetv2": 574, "2751": 574, "1797": 574, "2656": 574, "1835": 574, "7615": 574, "7646": 574, "764": 574, "901": 574, "434": 574, "141": 574, "7614": 574, "575": 574, "952": 574, "433": 574, "7226": 574, "7229": 574, "761": 574, "432": 574, "615": 574, "722": 574, "032": 574, "894": 574, "885": 574, "454": 574, "95x": 574, "603": 574, "455": 574, "644": 574, "636": 574, "254": 574, "791": 574, "shufflenet": 574, "2298": 574, "55": 574, "1480": 574, "55x": 574, "1951": 574, "1490": 574, "squeezenet": 574, "2588": 574, "1605": 574, "61x": 574, "2566": 574, "1936": 574, "725": 574, "570": 574, "27x": 574, "666": 574, "539": 574, "641": 574, "519": 574, "633": 574, "492": 574, "542": 574, "401": 574, "68x": 574, "tini": 574, "yolov3": 574, "648": 574, "518": 574, "221": 574, "319": 574, "307": 574, "30x": 574, "yolov4": 574, "zfnet": 574, "459": 574, "261": 574, "460": 574, "264": 574, "74x": 574, "441": 574, "337": 574, "272": 574, "211": 574, "152": 574, "423": 574, "180": 574, "311": 574, "69x": 574, "taskdataset": 574, "accuracyspars": 574, "ratiospars": 574, "commentsbalanc": 574, "unbalanc": 574, "classificationimagenet": 574, "76top": 574, "13top": 574, "magnitudepost": 574, "magnitudequant": 574, "answeringsquad": 574, "34f1": 574, "2x1": 574, "lassounbalanc": 574, "classificationmnli": 574, "mm": 574, "lockbalanc": 574, "classificationsst": 574, "32accuraci": 574, "sensitivitybalanc": 574, "classificationqqp": 574, "classificationqnli": 574, "54accuraci": 574, "em": 574, "87f1": 574, "momentumunbalanc": 574, "momentumbalanc": 574, "classificationmrpc": 574, "52f1": 574, "61accuraci": 574, "7965": 574, "wideresnet40": 574, "9522": 574, "8178": 574, "0213": 574, "8235": 574, "027": 574, "5494": 574, "7153": 574, "5540": 574, "0046": 574, "5523": 574, "0029": 574, "vgg": 574, "7022": 574, "7415": 574, "7025": 574, "0003": 574, "6739": 574, "7399": 574, "6845": 574, "0106": 574, "7034": 574, "8382": 574, "bilstm": 574, "sst": 574, "8314": 574, "9403": 574, "9048": 574, "0734": 574, "7323": 574, "8256": 574, "8084": 574, "8814": 574, "7442": 574, "8371": 574, "0119": 574, "0115": 574, "tinybert": 574, "8018": 574, "8044": 574, "8363": 574, "8411": 574, "8025": 574, "8074": 574, "0007": 574, "0030": 574, "8626": 574, "8213": 574, "9091": 574, "8782": 574, "8684": 574, "8259": 574, "0058": 574, "distilroberta": 574, "6057": 574, "6455": 574, "6187": 574, "0130": 574, "c6i": 574, "2xlarg": 574, "c6a": 574, "c6g": 574, "a100cuda": 574}, "objects": {"": [[31, 0, 0, "-", "6ece06672ed3_v1_14"], [32, 0, 0, "-", "6f0d0f71d92e_v1_13"], [33, 0, 0, "-", "9e89549a08c8_v1_11"], [34, 0, 0, "-", "block_mask"], [35, 0, 0, "-", "env"], [297, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[31, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [31, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[35, 1, 1, "", "run_migrations_offline"], [35, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[297, 2, 1, "", "Benchmark"], [297, 2, 1, "", "DistillationConfig"], [297, 2, 1, "", "Pruning"], [37, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [176, 0, 0, "-", "benchmark"], [179, 0, 0, "-", "conf"], [181, 0, 0, "-", "config"], [182, 0, 0, "-", "contrib"], [207, 0, 0, "-", "data"], [256, 0, 0, "-", "experimental"], [304, 0, 0, "-", "metric"], [306, 0, 0, "-", "mix_precision"], [308, 0, 0, "-", "model"], [316, 0, 0, "-", "objective"], [318, 0, 0, "-", "pruner"], [331, 0, 0, "-", "pruning"], [332, 0, 0, "-", "quantization"], [339, 0, 0, "-", "strategy"], [349, 0, 0, "-", "training"], [353, 0, 0, "-", "utils"], [489, 0, 0, "-", "ux"], [534, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[297, 3, 1, "", "config_file_path"], [297, 4, 1, "", "get_sparsity_ratio"], [297, 3, 1, "", "model"], [297, 4, 1, "", "on_after_eval"], [297, 4, 1, "", "on_after_optimizer_step"], [297, 4, 1, "", "on_before_eval"], [297, 4, 1, "", "on_before_optimizer_step"], [297, 4, 1, "", "on_epoch_begin"], [297, 4, 1, "", "on_epoch_end"], [297, 4, 1, "", "on_step_begin"], [297, 4, 1, "", "on_step_end"], [297, 4, 1, "", "on_train_begin"], [297, 4, 1, "", "on_train_end"], [297, 3, 1, "", "pruner_info"], [297, 3, 1, "", "pruners"], [297, 4, 1, "", "update_config"]], "neural_compressor.adaptor": [[36, 0, 0, "-", "adaptor"], [38, 0, 0, "-", "keras"], [39, 0, 0, "-", "keras_utils"], [41, 0, 0, "-", "mxnet"], [42, 0, 0, "-", "mxnet_utils"], [44, 0, 0, "-", "onnxrt"], [46, 0, 0, "-", "ox_utils"], [69, 0, 0, "-", "pytorch"], [70, 0, 0, "-", "query"], [71, 0, 0, "-", "tensorflow"], [131, 0, 0, "-", "tf_utils"], [168, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[36, 2, 1, "", "Adaptor"], [36, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[36, 4, 1, "", "convert"], [36, 4, 1, "", "evaluate"], [36, 4, 1, "", "inspect_tensor"], [36, 4, 1, "", "quantize"], [36, 4, 1, "", "quantize_input"], [36, 4, 1, "", "query_fused_patterns"], [36, 4, 1, "", "query_fw_capability"], [36, 4, 1, "", "save"], [36, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[38, 2, 1, "", "KerasAdaptor"], [38, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[38, 4, 1, "", "convert"], [38, 4, 1, "", "evaluate"], [38, 4, 1, "", "get_optype_wise_ability"], [38, 4, 1, "", "inspect_tensor"], [38, 4, 1, "", "quantize"], [38, 4, 1, "", "quantize_input"], [38, 4, 1, "", "query_fw_capability"], [38, 4, 1, "", "save"], [38, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[38, 4, 1, "", "get_op_types"], [38, 4, 1, "", "get_op_types_by_precision"], [38, 4, 1, "", "get_precisions"], [38, 4, 1, "", "get_quantization_capability"], [38, 4, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[40, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[41, 2, 1, "", "MXNetQuery"], [41, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[41, 4, 1, "", "get_fuse_patterns"], [41, 4, 1, "", "get_mixed_precision_combination"], [41, 4, 1, "", "get_op_types"], [41, 4, 1, "", "get_precisions"], [41, 4, 1, "", "get_quantization_capability"], [41, 4, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[41, 4, 1, "", "evaluate"], [41, 4, 1, "", "inspect_tensor"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "recover_tuned_model"], [41, 4, 1, "", "save"], [41, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[43, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, 2, 1, "", "CalibCollector"], [43, 2, 1, "", "OpType"], [43, 2, 1, "", "TensorCollector"], [43, 1, 1, "", "calib_model"], [43, 1, 1, "", "check_mx_version"], [43, 1, 1, "", "distribute_calib_tensors"], [43, 1, 1, "", "ensure_list"], [43, 1, 1, "", "fuse"], [43, 1, 1, "", "is_model_quantized"], [43, 1, 1, "", "isiterable"], [43, 1, 1, "", "make_module"], [43, 1, 1, "", "make_nc_model"], [43, 1, 1, "", "make_symbol_block"], [43, 1, 1, "", "parse_tune_config"], [43, 1, 1, "", "prepare_model_data"], [43, 1, 1, "", "quantize_sym_model"], [43, 1, 1, "", "query_quantizable_nodes"], [43, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[44, 2, 1, "", "ONNXRTQuery"], [44, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [44, 2, 1, "", "ONNXRT_QDQAdaptor"], [44, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [44, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[44, 4, 1, "", "get_graph_optimization"], [44, 4, 1, "", "get_op_types"], [44, 4, 1, "", "get_op_types_by_precision"], [44, 4, 1, "", "get_precisions"], [44, 4, 1, "", "get_quantization_capability"], [44, 4, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[44, 4, 1, "", "evaluate"], [44, 4, 1, "", "inspect_tensor"], [44, 4, 1, "", "quantize"], [44, 4, 1, "", "query_fw_capability"], [44, 4, 1, "", "recover"], [44, 4, 1, "", "save"], [44, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[45, 0, 0, "-", "calibration"], [58, 0, 0, "-", "operators"], [67, 0, 0, "-", "quantizer"], [68, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[45, 4, 1, "", "augment_graph"], [45, 4, 1, "", "calculate_quantization_params"], [45, 4, 1, "", "calculate_scale_zeropoint"], [45, 4, 1, "", "dump_calibration"], [45, 4, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[47, 0, 0, "-", "activation"], [48, 0, 0, "-", "argmax"], [49, 0, 0, "-", "attention"], [50, 0, 0, "-", "binary_op"], [51, 0, 0, "-", "concat"], [52, 0, 0, "-", "conv"], [53, 0, 0, "-", "direct_q8"], [54, 0, 0, "-", "embed_layernorm"], [55, 0, 0, "-", "gather"], [56, 0, 0, "-", "gavgpool"], [57, 0, 0, "-", "gemm"], [59, 0, 0, "-", "lstm"], [60, 0, 0, "-", "matmul"], [61, 0, 0, "-", "maxpool"], [62, 0, 0, "-", "ops"], [63, 0, 0, "-", "pad"], [64, 0, 0, "-", "pooling"], [65, 0, 0, "-", "resize"], [66, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, 1, 1, "", "op_registry"], [62, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.util": [[68, 2, 1, "", "QuantFormat"], [68, 2, 1, "", "QuantType"], [68, 2, 1, "", "QuantizationMode"], [68, 2, 1, "", "QuantizedInitializer"], [68, 2, 1, "", "QuantizedValue"], [68, 2, 1, "", "QuantizedValueType"], [68, 1, 1, "", "attribute_to_kwarg"], [68, 1, 1, "", "cast_tensor"], [68, 1, 1, "", "find_by_name"], [68, 1, 1, "", "quantize_data"], [68, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[69, 2, 1, "", "PyTorchAdaptor"], [69, 2, 1, "", "PyTorchQuery"], [69, 2, 1, "", "PyTorch_FXAdaptor"], [69, 2, 1, "", "PyTorch_IPEXAdaptor"], [69, 2, 1, "", "TemplateAdaptor"], [69, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[69, 4, 1, "", "evaluate"], [69, 4, 1, "", "get_non_quant_modules"], [69, 4, 1, "", "inspect_tensor"], [69, 4, 1, "", "is_fused_child"], [69, 4, 1, "", "is_fused_op"], [69, 4, 1, "", "is_last_fused_child"], [69, 4, 1, "", "quantize"], [69, 4, 1, "", "query_fw_capability"], [69, 4, 1, "", "save"], [69, 4, 1, "", "set_tensor"], [69, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[69, 4, 1, "", "get_op_types"], [69, 4, 1, "", "get_op_types_by_precision"], [69, 4, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[69, 4, 1, "", "calculate_op_sensitivity"], [69, 4, 1, "", "convert_sub_graph"], [69, 4, 1, "", "evaluate"], [69, 4, 1, "", "fuse_fx_model"], [69, 4, 1, "", "prepare_sub_graph"], [69, 4, 1, "", "quantize"], [69, 4, 1, "", "query_fw_capability"], [69, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[69, 4, 1, "", "evaluate"], [69, 4, 1, "", "inspect_tensor"], [69, 4, 1, "", "quantize"], [69, 4, 1, "", "query_fw_capability"], [69, 4, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[69, 4, 1, "", "calculate_hessian_trace"], [69, 4, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[70, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[70, 4, 1, "", "get_fuse_patterns"], [70, 4, 1, "", "get_mixed_precision_combination"], [70, 4, 1, "", "get_op_types"], [70, 4, 1, "", "get_precisions"], [70, 4, 1, "", "get_quantization_capability"], [70, 4, 1, "", "get_version"], [70, 4, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[71, 2, 1, "", "TensorFlowAdaptor"], [71, 2, 1, "", "TensorflowQuery"], [71, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[71, 4, 1, "", "calculate_op_sensitivity"], [71, 4, 1, "", "convert"], [71, 4, 1, "", "evaluate"], [71, 4, 1, "", "fused_node_mapping"], [71, 4, 1, "", "get_optype_wise_ability"], [71, 4, 1, "", "inspect_activation"], [71, 4, 1, "", "inspect_tensor"], [71, 4, 1, "", "inspect_weight_and_bias"], [71, 4, 1, "", "qat_convert"], [71, 4, 1, "", "quantize"], [71, 4, 1, "", "quantize_input"], [71, 4, 1, "", "query_fw_capability"], [71, 4, 1, "", "recover_tuned_model"], [71, 4, 1, "", "save"], [71, 4, 1, "", "set_tensor"], [71, 4, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[71, 4, 1, "", "generate_internal_patterns"], [71, 4, 1, "", "get_eightbit_patterns"], [71, 4, 1, "", "get_fuse_patterns"], [71, 4, 1, "", "get_mixed_precision_combination"], [71, 4, 1, "", "get_op_types"], [71, 4, 1, "", "get_op_types_by_precision"], [71, 4, 1, "", "get_precisions"], [71, 4, 1, "", "get_quantization_capability"], [71, 4, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[71, 4, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[72, 0, 0, "-", "graph_converter"], [73, 0, 0, "-", "graph_converter_without_calib"], [112, 0, 0, "-", "graph_rewriter"], [130, 0, 0, "-", "graph_util"], [132, 0, 0, "-", "quantize_graph"], [159, 0, 0, "-", "quantize_graph_common"], [162, 0, 0, "-", "transform_graph"], [165, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[75, 0, 0, "-", "bf16"], [100, 0, 0, "-", "generic"], [111, 0, 0, "-", "graph_base"], [120, 0, 0, "-", "int8"], [126, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[74, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[74, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, 0, 0, "-", "convert_add_to_biasadd"], [77, 0, 0, "-", "convert_layout"], [78, 0, 0, "-", "convert_leakyrelu"], [79, 0, 0, "-", "convert_nan_to_random"], [80, 0, 0, "-", "convert_placeholder_to_const"], [81, 0, 0, "-", "dequantize_cast_optimizer"], [82, 0, 0, "-", "dilated_contraction"], [83, 0, 0, "-", "dummy_biasadd"], [84, 0, 0, "-", "expanddims_optimizer"], [85, 0, 0, "-", "fetch_weight_from_reshape"], [86, 0, 0, "-", "fold_batch_norm"], [87, 0, 0, "-", "fold_constant"], [88, 0, 0, "-", "fuse_biasadd_add"], [89, 0, 0, "-", "fuse_column_wise_mul"], [90, 0, 0, "-", "fuse_conv_with_math"], [91, 0, 0, "-", "fuse_decomposed_bn"], [92, 0, 0, "-", "fuse_decomposed_in"], [93, 0, 0, "-", "fuse_gelu"], [94, 0, 0, "-", "fuse_layer_norm"], [95, 0, 0, "-", "fuse_pad_with_conv"], [96, 0, 0, "-", "fuse_pad_with_fp32_conv"], [97, 0, 0, "-", "fuse_reshape_transpose"], [98, 0, 0, "-", "graph_cse_optimizer"], [99, 0, 0, "-", "grappler_pass"], [101, 0, 0, "-", "insert_print_node"], [102, 0, 0, "-", "move_squeeze_after_relu"], [103, 0, 0, "-", "pre_optimize"], [104, 0, 0, "-", "remove_training_nodes"], [105, 0, 0, "-", "rename_batch_norm"], [106, 0, 0, "-", "split_shared_input"], [107, 0, 0, "-", "strip_equivalent_nodes"], [108, 0, 0, "-", "strip_unused_nodes"], [109, 0, 0, "-", "switch_optimizer"], [110, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[76, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[77, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[78, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[79, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[80, 4, 1, "", "do_transformation"], [80, 4, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[81, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[82, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[83, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[84, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[85, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[86, 4, 1, "", "do_transformation"], [86, 4, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[87, 4, 1, "", "check_all_folded"], [87, 4, 1, "", "check_const_inputs"], [87, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[89, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, 1, 1, "", "get_const_dim_count"], [91, 1, 1, "", "node_from_map"], [91, 1, 1, "", "node_name_from_input"], [91, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, 1, 1, "", "get_const_dim_count"], [92, 1, 1, "", "node_from_map"], [92, 1, 1, "", "node_name_from_input"], [92, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[93, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, 2, 1, "", "FuseLayerNormOptimizer"], [94, 1, 1, "", "node_from_map"], [94, 1, 1, "", "node_name_from_input"], [94, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[94, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[95, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[96, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[97, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[98, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[99, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[101, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[102, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[104, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[105, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[106, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[107, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[108, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[109, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[110, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[111, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[113, 0, 0, "-", "freeze_fake_quant"], [114, 0, 0, "-", "freeze_value"], [115, 0, 0, "-", "freeze_value_without_calib"], [116, 0, 0, "-", "fuse_conv_redundant_dequantize"], [117, 0, 0, "-", "fuse_conv_requantize"], [118, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [119, 0, 0, "-", "fuse_matmul_requantize"], [121, 0, 0, "-", "meta_op_optimizer"], [122, 0, 0, "-", "post_hostconst_converter"], [123, 0, 0, "-", "post_quantized_op_cse"], [124, 0, 0, "-", "rnn_convert"], [125, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[113, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[114, 4, 1, "", "do_transformation"], [114, 4, 1, "", "generate_output_graph"], [114, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[115, 4, 1, "", "generate_output_graph"], [115, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[116, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[117, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[118, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [119, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [119, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [119, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[119, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[119, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[119, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[119, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[121, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[122, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[123, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[124, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[125, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[127, 0, 0, "-", "insert_qdq_pattern"], [128, 0, 0, "-", "merge_duplicated_qdq"], [129, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[127, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[128, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[129, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, 2, 1, "", "GraphAnalyzer"], [130, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[130, 4, 1, "", "add_node"], [130, 4, 1, "", "dump_graph"], [130, 4, 1, "", "get_graph_input_output"], [130, 5, 1, "", "graph"], [130, 4, 1, "", "has_positive_input"], [130, 4, 1, "", "parse_graph"], [130, 4, 1, "", "query_fusion_pattern_nodes"], [130, 4, 1, "", "remove_node"], [130, 4, 1, "", "remove_node_with_single_input_output"], [130, 4, 1, "", "replace_const_node"], [130, 4, 1, "", "replace_constant_graph_with_constant_node"], [130, 4, 1, "", "replace_node"], [130, 4, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[130, 4, 1, "", "compare_node_attr"], [130, 4, 1, "", "create_constant_node"], [130, 4, 1, "", "create_node"], [130, 4, 1, "", "node_name_from_input"], [130, 4, 1, "", "set_attr_bool"], [130, 4, 1, "", "set_attr_dtype"], [130, 4, 1, "", "set_attr_float"], [130, 4, 1, "", "set_attr_int"], [130, 4, 1, "", "set_attr_int_list"], [130, 4, 1, "", "set_attr_string"], [130, 4, 1, "", "set_attr_string_list"], [130, 4, 1, "", "set_attr_tensor"], [130, 4, 1, "", "set_attr_type_list"], [130, 4, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[134, 0, 0, "-", "qat"], [150, 0, 0, "-", "qdq"], [152, 0, 0, "-", "quantize_graph_base"], [153, 0, 0, "-", "quantize_graph_bn"], [154, 0, 0, "-", "quantize_graph_concatv2"], [155, 0, 0, "-", "quantize_graph_conv"], [156, 0, 0, "-", "quantize_graph_for_intel_cpu"], [157, 0, 0, "-", "quantize_graph_matmul"], [158, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[133, 0, 0, "-", "fake_quantize"], [135, 0, 0, "-", "quantize_config"], [136, 0, 0, "-", "quantize_helper"], [137, 0, 0, "-", "quantize_layers"], [142, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, 2, 1, "", "FakeQuantize"], [133, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[133, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[133, 4, 1, "", "from_config"], [133, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[135, 4, 1, "", "add_quantize_recipe"], [135, 4, 1, "", "clear_quantize_recipe"], [135, 4, 1, "", "get_quantize_recipe"], [135, 4, 1, "", "is_empty"], [135, 4, 1, "", "query_layer"], [135, 4, 1, "", "remove_layer"], [135, 4, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, 1, 1, "", "init_quantize_config"], [136, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[138, 0, 0, "-", "optimize_layer"], [139, 0, 0, "-", "quantize_layer_add"], [140, 0, 0, "-", "quantize_layer_base"], [141, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, 2, 1, "", "QuantizeWrapper"], [142, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[142, 4, 1, "", "build"], [142, 4, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[142, 4, 1, "", "build"], [142, 4, 1, "", "call"], [142, 4, 1, "", "compute_output_shape"], [142, 4, 1, "", "from_config"], [142, 4, 1, "", "get_config"], [142, 5, 1, "", "losses"], [142, 5, 1, "", "non_trainable_weights"], [142, 4, 1, "", "query_input_index"], [142, 5, 1, "", "trainable"], [142, 5, 1, "", "trainable_weights"], [142, 5, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[143, 0, 0, "-", "fuse_qdq_bn"], [144, 0, 0, "-", "fuse_qdq_concatv2"], [145, 0, 0, "-", "fuse_qdq_conv"], [146, 0, 0, "-", "fuse_qdq_deconv"], [147, 0, 0, "-", "fuse_qdq_in"], [148, 0, 0, "-", "fuse_qdq_matmul"], [149, 0, 0, "-", "fuse_qdq_pooling"], [151, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[143, 4, 1, "", "apply_the_transform"], [143, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[144, 4, 1, "", "apply_the_transform"], [144, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[145, 4, 1, "", "apply_the_transform"], [145, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[146, 4, 1, "", "apply_the_transform"], [146, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[147, 4, 1, "", "apply_the_transform"], [147, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[148, 4, 1, "", "apply_batchmatmulv2_fusion"], [148, 4, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [148, 4, 1, "", "apply_matmul_biasadd_fusion"], [148, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [148, 4, 1, "", "apply_the_transform"], [148, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[149, 4, 1, "", "apply_the_transform"], [149, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[151, 4, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, 2, 1, "", "QuantizeGraphBase"], [152, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[152, 4, 1, "", "do_transform"], [152, 4, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[152, 4, 1, "", "add_output_graph_node"], [152, 4, 1, "", "apply_the_transform"], [152, 4, 1, "", "create_nodes_map"], [152, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[153, 4, 1, "", "apply_the_transform"], [153, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[154, 4, 1, "", "apply_the_transform"], [154, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[155, 4, 1, "", "apply_conv_biasadd_relu_fusion"], [155, 4, 1, "", "apply_the_transform"], [155, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[156, 4, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[157, 4, 1, "", "apply_the_transform"], [157, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[158, 4, 1, "", "apply_the_transform"], [158, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[159, 4, 1, "", "copy_attr"], [159, 4, 1, "", "create_constant_node"], [159, 4, 1, "", "create_node"], [159, 4, 1, "", "ensure_tensor_name_has_port"], [159, 4, 1, "", "get_sorted_graph"], [159, 4, 1, "", "node_name_from_input"], [159, 4, 1, "", "remove_training_nodes"], [159, 4, 1, "", "set_attr_bool"], [159, 4, 1, "", "set_attr_dtype"], [159, 4, 1, "", "set_attr_float"], [159, 4, 1, "", "set_attr_int"], [159, 4, 1, "", "set_attr_string"], [159, 4, 1, "", "set_attr_string_list"], [159, 4, 1, "", "set_attr_tensor"], [159, 4, 1, "", "set_attr_type_list"], [159, 4, 1, "", "split_shared_inputs"], [159, 4, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[160, 0, 0, "-", "bias_correction"], [161, 0, 0, "-", "graph_transform_base"], [163, 0, 0, "-", "insert_logging"], [164, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[160, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[163, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[164, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[165, 1, 1, "", "disable_random"], [165, 1, 1, "", "get_tensor_by_name"], [165, 1, 1, "", "get_tensor_val_from_graph_node"], [165, 1, 1, "", "is_ckpt_format"], [165, 1, 1, "", "is_saved_model_format"], [165, 1, 1, "", "iterator_sess_run"], [165, 1, 1, "", "read_graph"], [165, 1, 1, "", "strip_equivalent_nodes"], [165, 1, 1, "", "strip_unused_nodes"], [165, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[166, 0, 0, "-", "bf16_convert"], [167, 0, 0, "-", "hawq_metric"], [169, 0, 0, "-", "onnx"], [170, 0, 0, "-", "symbolic_trace"], [171, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, 2, 1, "", "HessianTrace"], [167, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[167, 4, 1, "", "get_act_gap"], [167, 4, 1, "", "get_avg_traces"], [167, 4, 1, "", "is_fused_module"], [167, 4, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[171, 1, 1, "", "append_attr"], [171, 1, 1, "", "get_embedding_contiguous"], [171, 1, 1, "", "get_mse_order_per_fp32"], [171, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[174, 2, 1, "", "Algorithm"], [174, 2, 1, "", "AlgorithmScheduler"], [172, 0, 0, "-", "algorithm"], [174, 1, 1, "", "algorithm_registry"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 2, 1, "", "Algorithm"], [172, 2, 1, "", "AlgorithmScheduler"], [172, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[175, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[176, 2, 1, "", "Benchmark"], [176, 1, 1, "", "fit"]], "neural_compressor.conf": [[177, 0, 0, "-", "config"], [178, 0, 0, "-", "dotdict"], [180, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[177, 2, 1, "", "Benchmark_Conf"], [177, 2, 1, "", "Conf"], [177, 2, 1, "", "DefaultConf"], [177, 2, 1, "", "Distillation_Conf"], [177, 2, 1, "", "Graph_Optimization_Conf"], [177, 2, 1, "", "MixedPrecision_Conf"], [177, 2, 1, "", "NASConfig"], [177, 2, 1, "", "Pruning_Conf"], [177, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[178, 2, 1, "", "DotDict"], [178, 1, 1, "", "deep_get"], [178, 1, 1, "", "deep_set"]], "neural_compressor.config": [[181, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[183, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[184, 0, 0, "-", "sigopt"], [185, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[184, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[184, 4, 1, "", "next_tune_cfg"], [184, 4, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[185, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[185, 4, 1, "", "stop"], [185, 4, 1, "", "traverse"]], "neural_compressor.data": [[207, 2, 1, "", "BaseTransform"], [207, 2, 1, "", "DataLoader"], [207, 2, 1, "", "Dataset"], [207, 2, 1, "", "Datasets"], [207, 2, 1, "", "FILTERS"], [207, 2, 1, "", "Filter"], [207, 2, 1, "", "IterableDataset"], [207, 2, 1, "", "Postprocess"], [207, 2, 1, "", "TRANSFORMS"], [190, 0, 0, "-", "dataloaders"], [207, 1, 1, "", "dataset_registry"], [202, 0, 0, "-", "datasets"], [207, 1, 1, "", "filter_registry"], [206, 0, 0, "-", "filters"], [207, 1, 1, "", "transform_registry"], [210, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[207, 4, 1, "", "register"]], "neural_compressor.data.dataloaders": [[190, 2, 1, "", "DataLoader"], [186, 0, 0, "-", "base_dataloader"], [187, 0, 0, "-", "dataloader"], [188, 0, 0, "-", "default_dataloader"], [189, 0, 0, "-", "fetcher"], [191, 0, 0, "-", "mxnet_dataloader"], [192, 0, 0, "-", "onnxrt_dataloader"], [193, 0, 0, "-", "pytorch_dataloader"], [194, 0, 0, "-", "sampler"], [195, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[186, 4, 1, "", "batch"], [186, 5, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[187, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, 2, 1, "", "DefaultDataLoader"], [188, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[188, 4, 1, "", "batch"], [188, 5, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[189, 2, 1, "", "Fetcher"], [189, 2, 1, "", "IndexFetcher"], [189, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, 2, 1, "", "ONNXRTBertDataLoader"], [192, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[194, 2, 1, "", "BatchSampler"], [194, 2, 1, "", "IterableSampler"], [194, 2, 1, "", "Sampler"], [194, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, 2, 1, "", "TFDataDataLoader"], [195, 2, 1, "", "TensorflowBertDataLoader"], [195, 2, 1, "", "TensorflowDataLoader"], [195, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[195, 4, 1, "", "batch"]], "neural_compressor.data.datasets": [[202, 2, 1, "", "Dataset"], [202, 2, 1, "", "Datasets"], [202, 2, 1, "", "IterableDataset"], [196, 0, 0, "-", "bert_dataset"], [197, 0, 0, "-", "coco_dataset"], [198, 0, 0, "-", "dataset"], [202, 1, 1, "", "dataset_registry"], [199, 0, 0, "-", "dummy_dataset"], [200, 0, 0, "-", "dummy_dataset_v2"], [201, 0, 0, "-", "imagenet_dataset"], [203, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[196, 2, 1, "", "InputFeatures"], [196, 2, 1, "", "ONNXRTBertDataset"], [196, 2, 1, "", "ParseDecodeBert"], [196, 2, 1, "", "PytorchBertDataset"], [196, 2, 1, "", "TensorflowBertDataset"], [196, 2, 1, "", "TensorflowModelZooBertDataset"], [196, 1, 1, "", "convert_examples_to_features"], [196, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[196, 4, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[197, 2, 1, "", "COCONpy"], [197, 2, 1, "", "COCORaw"], [197, 2, 1, "", "COCORecordDataset"], [197, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[198, 2, 1, "", "CIFAR10"], [198, 2, 1, "", "CIFAR100"], [198, 2, 1, "", "Dataset"], [198, 2, 1, "", "Datasets"], [198, 2, 1, "", "FashionMNIST"], [198, 2, 1, "", "ImageFolder"], [198, 2, 1, "", "IterableDataset"], [198, 2, 1, "", "MNIST"], [198, 2, 1, "", "MXNetCIFAR10"], [198, 2, 1, "", "MXNetCIFAR100"], [198, 2, 1, "", "MXNetDatasets"], [198, 2, 1, "", "MXNetFashionMNIST"], [198, 2, 1, "", "MXNetImageFolder"], [198, 2, 1, "", "MXNetMNIST"], [198, 2, 1, "", "ONNXRTITDatasets"], [198, 2, 1, "", "ONNXRTQLDatasets"], [198, 2, 1, "", "PyTorchDatasets"], [198, 2, 1, "", "PytorchCIFAR10"], [198, 2, 1, "", "PytorchCIFAR100"], [198, 2, 1, "", "PytorchFashionMNIST"], [198, 2, 1, "", "PytorchMNIST"], [198, 2, 1, "", "PytorchMxnetWrapDataset"], [198, 2, 1, "", "PytorchMxnetWrapFunction"], [198, 2, 1, "", "TensorflowCIFAR10"], [198, 2, 1, "", "TensorflowCIFAR100"], [198, 2, 1, "", "TensorflowDatasets"], [198, 2, 1, "", "TensorflowFashionMNIST"], [198, 2, 1, "", "TensorflowImageFolder"], [198, 2, 1, "", "TensorflowImageRecord"], [198, 2, 1, "", "TensorflowMNIST"], [198, 2, 1, "", "TensorflowTFRecordDataset"], [198, 2, 1, "", "TensorflowVOCRecord"], [198, 1, 1, "", "calculate_md5"], [198, 1, 1, "", "check_integrity"], [198, 1, 1, "", "dataset_registry"], [198, 1, 1, "", "download_url"], [198, 6, 1, "", "framework_datasets"], [198, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[198, 4, 1, "", "download"], [198, 4, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[198, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[198, 5, 1, "", "class_to_idx"], [198, 4, 1, "", "download"], [198, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[199, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, 2, 1, "", "DummyDataset"], [200, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, 2, 1, "", "ImagenetRaw"], [201, 2, 1, "", "MXNetImagenetRaw"], [201, 2, 1, "", "ONNXRTImagenetDataset"], [201, 2, 1, "", "PytorchImagenetRaw"], [201, 2, 1, "", "TensorflowImagenetDataset"], [201, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[206, 2, 1, "", "FILTERS"], [206, 2, 1, "", "Filter"], [204, 0, 0, "-", "coco_filter"], [205, 0, 0, "-", "filter"], [206, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[204, 2, 1, "", "LabelBalanceCOCORawFilter"], [204, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[205, 2, 1, "", "FILTERS"], [205, 2, 1, "", "Filter"], [205, 2, 1, "", "MXNetFilters"], [205, 2, 1, "", "ONNXRTITFilters"], [205, 2, 1, "", "ONNXRTQLFilters"], [205, 2, 1, "", "PyTorchFilters"], [205, 2, 1, "", "TensorflowFilters"], [205, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[210, 2, 1, "", "BaseTransform"], [210, 2, 1, "", "Postprocess"], [210, 2, 1, "", "TRANSFORMS"], [208, 0, 0, "-", "coco_transform"], [209, 0, 0, "-", "imagenet_transform"], [211, 0, 0, "-", "postprocess"], [212, 0, 0, "-", "tokenization"], [213, 0, 0, "-", "transform"], [210, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[210, 4, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[208, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, 2, 1, "", "BilinearImagenetTransform"], [209, 2, 1, "", "LabelShift"], [209, 2, 1, "", "ONNXResizeCropImagenetTransform"], [209, 2, 1, "", "OnnxBilinearImagenetTransform"], [209, 2, 1, "", "ParseDecodeImagenet"], [209, 2, 1, "", "ParseDecodeImagenetTransform"], [209, 2, 1, "", "QuantizedInput"], [209, 2, 1, "", "ResizeWithAspectRatio"], [209, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[211, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, 2, 1, "", "BasicTokenizer"], [212, 2, 1, "", "FullTokenizer"], [212, 2, 1, "", "WordpieceTokenizer"], [212, 1, 1, "", "convert_by_vocab"], [212, 1, 1, "", "convert_to_unicode"], [212, 1, 1, "", "load_vocab"], [212, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[212, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[212, 4, 1, "", "convert_ids_to_tokens"], [212, 4, 1, "", "convert_tokens_to_ids"], [212, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[212, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[213, 2, 1, "", "AlignImageChannelTransform"], [213, 2, 1, "", "BaseTransform"], [213, 2, 1, "", "CastONNXTransform"], [213, 2, 1, "", "CastPyTorchTransform"], [213, 2, 1, "", "CastTFTransform"], [213, 2, 1, "", "CenterCropTFTransform"], [213, 2, 1, "", "CenterCropTransform"], [213, 2, 1, "", "CollectTransform"], [213, 2, 1, "", "ComposeTransform"], [213, 2, 1, "", "CropResizeTFTransform"], [213, 2, 1, "", "CropResizeTransform"], [213, 2, 1, "", "CropToBoundingBox"], [213, 2, 1, "", "InputFeatures"], [213, 2, 1, "", "MXNetCropResizeTransform"], [213, 2, 1, "", "MXNetCropToBoundingBox"], [213, 2, 1, "", "MXNetNormalizeTransform"], [213, 2, 1, "", "MXNetTransforms"], [213, 2, 1, "", "MXNetTranspose"], [213, 2, 1, "", "NormalizeTFTransform"], [213, 2, 1, "", "NormalizeTransform"], [213, 2, 1, "", "ONNXRTCropToBoundingBox"], [213, 2, 1, "", "ONNXRTITTransforms"], [213, 2, 1, "", "ONNXRTQLTransforms"], [213, 2, 1, "", "PaddedCenterCropTransform"], [213, 2, 1, "", "ParseDecodeVocTransform"], [213, 2, 1, "", "PyTorchAlignImageChannel"], [213, 2, 1, "", "PyTorchCropResizeTransform"], [213, 2, 1, "", "PyTorchNormalizeTransform"], [213, 2, 1, "", "PyTorchTransforms"], [213, 2, 1, "", "PyTorchTranspose"], [213, 2, 1, "", "PytorchMxnetTransform"], [213, 2, 1, "", "PytorchMxnetWrapFunction"], [213, 2, 1, "", "RandomCropTFTransform"], [213, 2, 1, "", "RandomCropTransform"], [213, 2, 1, "", "RandomHorizontalFlip"], [213, 2, 1, "", "RandomResizedCropMXNetTransform"], [213, 2, 1, "", "RandomResizedCropPytorchTransform"], [213, 2, 1, "", "RandomResizedCropTFTransform"], [213, 2, 1, "", "RandomResizedCropTransform"], [213, 2, 1, "", "RandomVerticalFlip"], [213, 2, 1, "", "RescaleKerasPretrainTransform"], [213, 2, 1, "", "RescaleTFTransform"], [213, 2, 1, "", "RescaleTransform"], [213, 2, 1, "", "ResizeMXNetTransform"], [213, 2, 1, "", "ResizePytorchTransform"], [213, 2, 1, "", "ResizeTFTransform"], [213, 2, 1, "", "ResizeTransform"], [213, 2, 1, "", "ResizeWithRatio"], [213, 2, 1, "", "SquadExample"], [213, 2, 1, "", "TFModelZooCollectTransform"], [213, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [213, 2, 1, "", "TFSquadV1PostTransform"], [213, 2, 1, "", "TRANSFORMS"], [213, 2, 1, "", "TensorflowCropToBoundingBox"], [213, 2, 1, "", "TensorflowRandomHorizontalFlip"], [213, 2, 1, "", "TensorflowRandomVerticalFlip"], [213, 2, 1, "", "TensorflowResizeWithRatio"], [213, 2, 1, "", "TensorflowTransform"], [213, 2, 1, "", "TensorflowTransforms"], [213, 2, 1, "", "TensorflowTranspose"], [213, 2, 1, "", "TensorflowWrapFunction"], [213, 2, 1, "", "ToArray"], [213, 2, 1, "", "ToNDArrayTransform"], [213, 2, 1, "", "Transforms"], [213, 2, 1, "", "Transpose"], [213, 1, 1, "", "convert_examples_to_features"], [213, 1, 1, "", "get_final_text"], [213, 1, 1, "", "get_torchvision_map"], [213, 1, 1, "", "read_squad_examples"], [213, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[213, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[213, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[213, 4, 1, "", "get_postprocess_result"], [213, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[213, 4, 1, "", "register"]], "neural_compressor.experimental": [[256, 2, 1, "", "Benchmark"], [256, 2, 1, "", "Component"], [256, 2, 1, "", "Distillation"], [256, 2, 1, "", "Graph_Optimization"], [256, 2, 1, "", "MixedPrecision"], [256, 2, 1, "", "ModelConversion"], [256, 2, 1, "", "NAS"], [256, 2, 1, "", "Pruning"], [256, 2, 1, "", "Quantization"], [214, 0, 0, "-", "benchmark"], [217, 0, 0, "-", "common"], [223, 0, 0, "-", "component"], [245, 0, 0, "-", "data"], [250, 0, 0, "-", "distillation"], [251, 0, 0, "-", "export"], [255, 0, 0, "-", "graph_optimization"], [263, 0, 0, "-", "metric"], [265, 0, 0, "-", "mixed_precision"], [266, 0, 0, "-", "model_conversion"], [279, 0, 0, "-", "nas"], [283, 0, 0, "-", "pruning"], [284, 0, 0, "-", "pruning_recipes"], [288, 0, 0, "-", "pytorch_pruner"], [295, 0, 0, "-", "quantization"], [296, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[256, 5, 1, "", "b_dataloader"], [256, 5, 1, "", "b_func"], [256, 4, 1, "", "config_instance"], [256, 4, 1, "", "generate_prefix"], [256, 5, 1, "", "metric"], [256, 5, 1, "", "model"], [256, 5, 1, "", "postprocess"], [256, 5, 1, "", "results"], [256, 4, 1, "", "run_instance"], [256, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[256, 5, 1, "", "eval_dataloader"], [256, 5, 1, "", "eval_func"], [256, 4, 1, "", "execute"], [256, 5, 1, "", "model"], [256, 4, 1, "", "on_after_compute_loss"], [256, 4, 1, "", "on_batch_begin"], [256, 4, 1, "", "on_batch_end"], [256, 4, 1, "", "on_before_optimizer_step"], [256, 4, 1, "", "on_epoch_begin"], [256, 4, 1, "", "on_epoch_end"], [256, 4, 1, "", "on_post_grad"], [256, 4, 1, "", "on_step_begin"], [256, 4, 1, "", "on_step_end"], [256, 4, 1, "", "on_train_begin"], [256, 4, 1, "", "on_train_end"], [256, 4, 1, "", "post_epoch_end"], [256, 4, 1, "", "post_process"], [256, 4, 1, "", "pre_epoch_begin"], [256, 4, 1, "", "pre_process"], [256, 4, 1, "", "prepare"], [256, 4, 1, "", "prepare_qat"], [256, 4, 1, "", "register_hook"], [256, 5, 1, "", "train_dataloader"], [256, 5, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[256, 3, 1, "", "_epoch_ran"], [256, 3, 1, "", "best_model"], [256, 3, 1, "", "best_score"], [256, 4, 1, "", "create_criterion"], [256, 4, 1, "", "create_optimizer"], [256, 5, 1, "", "criterion"], [256, 3, 1, "", "eval_frequency"], [256, 5, 1, "", "evaluation_distributed"], [256, 4, 1, "", "execute"], [256, 4, 1, "", "generate_hooks"], [256, 4, 1, "", "init_train_cfg"], [256, 4, 1, "", "on_post_forward"], [256, 5, 1, "", "optimizer"], [256, 4, 1, "", "pre_process"], [256, 4, 1, "", "prepare"], [256, 5, 1, "", "student_model"], [256, 5, 1, "", "teacher_model"], [256, 5, 1, "", "train_cfg"], [256, 5, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[256, 4, 1, "", "dataset"], [256, 5, 1, "", "eval_dataloader"], [256, 5, 1, "", "eval_func"], [256, 5, 1, "", "input"], [256, 5, 1, "", "metric"], [256, 5, 1, "", "model"], [256, 5, 1, "", "output"], [256, 5, 1, "", "postprocess"], [256, 5, 1, "", "precisions"], [256, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[256, 5, 1, "", "precisions"], [256, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[256, 4, 1, "", "dataset"], [256, 5, 1, "", "destination"], [256, 5, 1, "", "eval_dataloader"], [256, 5, 1, "", "eval_func"], [256, 5, 1, "", "metric"], [256, 5, 1, "", "model"], [256, 5, 1, "", "postprocess"], [256, 5, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[256, 3, 1, "", "conf"], [256, 5, 1, "", "evaluation_distributed"], [256, 4, 1, "", "execute"], [256, 4, 1, "", "generate_hooks"], [256, 4, 1, "", "generate_pruners"], [256, 4, 1, "", "pre_process"], [256, 4, 1, "", "prepare"], [256, 3, 1, "", "pruners"], [256, 5, 1, "", "pruning_func"], [256, 5, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[256, 5, 1, "", "calib_dataloader"], [256, 4, 1, "", "dataset"], [256, 4, 1, "", "execute"], [256, 5, 1, "", "metric"], [256, 5, 1, "", "model"], [256, 5, 1, "", "objective"], [256, 5, 1, "", "postprocess"], [256, 4, 1, "", "pre_process"], [256, 5, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[214, 2, 1, "", "Benchmark"], [214, 1, 1, "", "get_architecture"], [214, 1, 1, "", "get_bounded_threads"], [214, 1, 1, "", "get_core_ids"], [214, 1, 1, "", "get_physical_ids"], [214, 1, 1, "", "get_threads"], [214, 1, 1, "", "get_threads_per_core"], [214, 1, 1, "", "set_all_env_var"], [214, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[214, 5, 1, "", "b_dataloader"], [214, 5, 1, "", "b_func"], [214, 4, 1, "", "config_instance"], [214, 4, 1, "", "generate_prefix"], [214, 5, 1, "", "metric"], [214, 5, 1, "", "model"], [214, 5, 1, "", "postprocess"], [214, 5, 1, "", "results"], [214, 4, 1, "", "run_instance"], [214, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[217, 2, 1, "", "DataLoader"], [217, 2, 1, "", "Metric"], [217, 2, 1, "", "Model"], [217, 2, 1, "", "Postprocess"], [215, 0, 0, "-", "criterion"], [216, 0, 0, "-", "dataloader"], [218, 0, 0, "-", "metric"], [219, 0, 0, "-", "model"], [220, 0, 0, "-", "optimizer"], [221, 0, 0, "-", "postprocess"], [222, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[215, 2, 1, "", "Criterions"], [215, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [215, 2, 1, "", "KnowledgeDistillationFramework"], [215, 2, 1, "", "KnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchCriterions"], [215, 2, 1, "", "PyTorchCrossEntropyLoss"], [215, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "SelfKnowledgeDistillationLoss"], [215, 2, 1, "", "TensorFlowCrossEntropyLoss"], [215, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [215, 2, 1, "", "TensorflowCriterions"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [215, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[215, 4, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[215, 4, 1, "", "clear_features"], [215, 4, 1, "", "init_feature_matcher"], [215, 4, 1, "", "init_loss_funcs"], [215, 4, 1, "", "loss_cal"], [215, 4, 1, "", "loss_cal_sloss"], [215, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[215, 5, 1, "", "student_model"], [215, 5, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[215, 4, 1, "", "loss_cal"], [215, 4, 1, "", "loss_cal_sloss"], [215, 4, 1, "", "student_targets_loss_cal"], [215, 4, 1, "", "teacher_model_forward"], [215, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[215, 4, 1, "", "init_feature_matcher"], [215, 4, 1, "", "init_loss_funcs"], [215, 4, 1, "", "loss_cal"], [215, 4, 1, "", "loss_cal_sloss"], [215, 4, 1, "", "register_hooks_for_models"], [215, 4, 1, "", "remove_all_hooks"], [215, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[215, 4, 1, "", "KullbackLeiblerDivergence"], [215, 4, 1, "", "SoftCrossEntropy"], [215, 4, 1, "", "student_targets_loss_cal"], [215, 4, 1, "", "teacher_model_forward"], [215, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[215, 4, 1, "", "KullbackLeiblerDivergence"], [215, 4, 1, "", "L2Divergence"], [215, 4, 1, "", "SoftCrossEntropy"], [215, 4, 1, "", "init_loss_funcs"], [215, 4, 1, "", "loss_cal"], [215, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[215, 4, 1, "", "init_loss_funcs"], [215, 4, 1, "", "loss_cal"], [215, 4, 1, "", "loss_cal_sloss"], [215, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[215, 4, 1, "", "SoftCrossEntropy"], [215, 4, 1, "", "student_targets_loss_cal"], [215, 4, 1, "", "teacher_model_forward"], [215, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[215, 4, 1, "", "student_targets_loss_cal"], [215, 4, 1, "", "teacher_model_forward"], [215, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[216, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[218, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[219, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[220, 2, 1, "", "Optimizers"], [220, 2, 1, "", "PyTorchOptimizers"], [220, 2, 1, "", "PyTorchSGD"], [220, 2, 1, "", "TensorFlowAdam"], [220, 2, 1, "", "TensorFlowAdamW"], [220, 2, 1, "", "TensorFlowSGD"], [220, 2, 1, "", "TensorflowOptimizers"], [220, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[220, 4, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[221, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, 1, 1, "", "get_activation"], [222, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[223, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[223, 5, 1, "", "eval_dataloader"], [223, 5, 1, "", "eval_func"], [223, 4, 1, "", "execute"], [223, 5, 1, "", "model"], [223, 4, 1, "", "on_after_compute_loss"], [223, 4, 1, "", "on_batch_begin"], [223, 4, 1, "", "on_batch_end"], [223, 4, 1, "", "on_before_optimizer_step"], [223, 4, 1, "", "on_epoch_begin"], [223, 4, 1, "", "on_epoch_end"], [223, 4, 1, "", "on_post_grad"], [223, 4, 1, "", "on_step_begin"], [223, 4, 1, "", "on_step_end"], [223, 4, 1, "", "on_train_begin"], [223, 4, 1, "", "on_train_end"], [223, 4, 1, "", "post_epoch_end"], [223, 4, 1, "", "post_process"], [223, 4, 1, "", "pre_epoch_begin"], [223, 4, 1, "", "pre_process"], [223, 4, 1, "", "prepare"], [223, 4, 1, "", "prepare_qat"], [223, 4, 1, "", "register_hook"], [223, 5, 1, "", "train_dataloader"], [223, 5, 1, "", "train_func"]], "neural_compressor.experimental.data": [[245, 2, 1, "", "BaseTransform"], [245, 2, 1, "", "Dataset"], [245, 2, 1, "", "Datasets"], [245, 2, 1, "", "FILTERS"], [245, 2, 1, "", "Filter"], [245, 2, 1, "", "IterableDataset"], [245, 2, 1, "", "TRANSFORMS"], [228, 0, 0, "-", "dataloaders"], [245, 1, 1, "", "dataset_registry"], [240, 0, 0, "-", "datasets"], [245, 1, 1, "", "filter_registry"], [244, 0, 0, "-", "filters"], [245, 1, 1, "", "transform_registry"], [247, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[245, 4, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[224, 0, 0, "-", "base_dataloader"], [225, 0, 0, "-", "dataloader"], [226, 0, 0, "-", "default_dataloader"], [227, 0, 0, "-", "fetcher"], [229, 0, 0, "-", "mxnet_dataloader"], [230, 0, 0, "-", "onnxrt_dataloader"], [231, 0, 0, "-", "pytorch_dataloader"], [232, 0, 0, "-", "sampler"], [233, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[224, 4, 1, "", "batch"], [224, 5, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, 2, 1, "", "DefaultDataLoader"], [226, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[226, 4, 1, "", "batch"], [226, 5, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, 2, 1, "", "Fetcher"], [227, 2, 1, "", "IndexFetcher"], [227, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, 2, 1, "", "ONNXRTBertDataLoader"], [230, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, 2, 1, "", "BatchSampler"], [232, 2, 1, "", "IterableSampler"], [232, 2, 1, "", "Sampler"], [232, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, 2, 1, "", "TFDataDataLoader"], [233, 2, 1, "", "TensorflowBertDataLoader"], [233, 2, 1, "", "TensorflowDataLoader"], [233, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[233, 4, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[240, 2, 1, "", "Dataset"], [240, 2, 1, "", "Datasets"], [240, 2, 1, "", "IterableDataset"], [234, 0, 0, "-", "bert_dataset"], [235, 0, 0, "-", "coco_dataset"], [236, 0, 0, "-", "dataset"], [240, 1, 1, "", "dataset_registry"], [237, 0, 0, "-", "dummy_dataset"], [238, 0, 0, "-", "dummy_dataset_v2"], [239, 0, 0, "-", "imagenet_dataset"], [241, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, 2, 1, "", "InputFeatures"], [234, 2, 1, "", "ONNXRTBertDataset"], [234, 2, 1, "", "ParseDecodeBert"], [234, 2, 1, "", "PytorchBertDataset"], [234, 2, 1, "", "TensorflowBertDataset"], [234, 2, 1, "", "TensorflowModelZooBertDataset"], [234, 1, 1, "", "convert_examples_to_features"], [234, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[234, 4, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, 2, 1, "", "COCONpy"], [235, 2, 1, "", "COCORaw"], [235, 2, 1, "", "COCORecordDataset"], [235, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[236, 2, 1, "", "CIFAR10"], [236, 2, 1, "", "CIFAR100"], [236, 2, 1, "", "Dataset"], [236, 2, 1, "", "Datasets"], [236, 2, 1, "", "FashionMNIST"], [236, 2, 1, "", "ImageFolder"], [236, 2, 1, "", "IterableDataset"], [236, 2, 1, "", "MNIST"], [236, 2, 1, "", "MXNetCIFAR10"], [236, 2, 1, "", "MXNetCIFAR100"], [236, 2, 1, "", "MXNetDatasets"], [236, 2, 1, "", "MXNetFashionMNIST"], [236, 2, 1, "", "MXNetImageFolder"], [236, 2, 1, "", "MXNetMNIST"], [236, 2, 1, "", "ONNXRTITDatasets"], [236, 2, 1, "", "ONNXRTQLDatasets"], [236, 2, 1, "", "PyTorchDatasets"], [236, 2, 1, "", "PytorchCIFAR10"], [236, 2, 1, "", "PytorchCIFAR100"], [236, 2, 1, "", "PytorchFashionMNIST"], [236, 2, 1, "", "PytorchMNIST"], [236, 2, 1, "", "PytorchMxnetWrapDataset"], [236, 2, 1, "", "PytorchMxnetWrapFunction"], [236, 2, 1, "", "TensorflowCIFAR10"], [236, 2, 1, "", "TensorflowCIFAR100"], [236, 2, 1, "", "TensorflowDatasets"], [236, 2, 1, "", "TensorflowFashionMNIST"], [236, 2, 1, "", "TensorflowImageFolder"], [236, 2, 1, "", "TensorflowImageRecord"], [236, 2, 1, "", "TensorflowMNIST"], [236, 2, 1, "", "TensorflowTFRecordDataset"], [236, 2, 1, "", "TensorflowVOCRecord"], [236, 1, 1, "", "calculate_md5"], [236, 1, 1, "", "check_integrity"], [236, 1, 1, "", "dataset_registry"], [236, 1, 1, "", "download_url"], [236, 6, 1, "", "framework_datasets"], [236, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[236, 4, 1, "", "download"], [236, 4, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[236, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[236, 5, 1, "", "class_to_idx"], [236, 4, 1, "", "download"], [236, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, 2, 1, "", "DummyDataset"], [238, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, 2, 1, "", "ImagenetRaw"], [239, 2, 1, "", "MXNetImagenetRaw"], [239, 2, 1, "", "ONNXRTImagenetDataset"], [239, 2, 1, "", "PytorchImagenetRaw"], [239, 2, 1, "", "TensorflowImagenetDataset"], [239, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[244, 2, 1, "", "FILTERS"], [244, 2, 1, "", "Filter"], [242, 0, 0, "-", "coco_filter"], [243, 0, 0, "-", "filter"], [244, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, 2, 1, "", "LabelBalanceCOCORawFilter"], [242, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[243, 2, 1, "", "FILTERS"], [243, 2, 1, "", "Filter"], [243, 2, 1, "", "MXNetFilters"], [243, 2, 1, "", "ONNXRTITFilters"], [243, 2, 1, "", "ONNXRTQLFilters"], [243, 2, 1, "", "PyTorchFilters"], [243, 2, 1, "", "TensorflowFilters"], [243, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[247, 2, 1, "", "BaseTransform"], [247, 2, 1, "", "TRANSFORMS"], [246, 0, 0, "-", "imagenet_transform"], [248, 0, 0, "-", "tokenization"], [249, 0, 0, "-", "transform"], [247, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[247, 4, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, 2, 1, "", "BilinearImagenetTransform"], [246, 2, 1, "", "LabelShift"], [246, 2, 1, "", "ONNXResizeCropImagenetTransform"], [246, 2, 1, "", "OnnxBilinearImagenetTransform"], [246, 2, 1, "", "ParseDecodeImagenet"], [246, 2, 1, "", "ParseDecodeImagenetTransform"], [246, 2, 1, "", "QuantizedInput"], [246, 2, 1, "", "ResizeWithAspectRatio"], [246, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, 2, 1, "", "BasicTokenizer"], [248, 2, 1, "", "FullTokenizer"], [248, 2, 1, "", "WordpieceTokenizer"], [248, 1, 1, "", "convert_by_vocab"], [248, 1, 1, "", "convert_to_unicode"], [248, 1, 1, "", "load_vocab"], [248, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[248, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[248, 4, 1, "", "convert_ids_to_tokens"], [248, 4, 1, "", "convert_tokens_to_ids"], [248, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[248, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[249, 2, 1, "", "AlignImageChannelTransform"], [249, 2, 1, "", "BaseTransform"], [249, 2, 1, "", "CastONNXTransform"], [249, 2, 1, "", "CastPyTorchTransform"], [249, 2, 1, "", "CastTFTransform"], [249, 2, 1, "", "CenterCropTFTransform"], [249, 2, 1, "", "CenterCropTransform"], [249, 2, 1, "", "CollectTransform"], [249, 2, 1, "", "ComposeTransform"], [249, 2, 1, "", "CropResizeTFTransform"], [249, 2, 1, "", "CropResizeTransform"], [249, 2, 1, "", "CropToBoundingBox"], [249, 2, 1, "", "InputFeatures"], [249, 2, 1, "", "MXNetCropResizeTransform"], [249, 2, 1, "", "MXNetCropToBoundingBox"], [249, 2, 1, "", "MXNetNormalizeTransform"], [249, 2, 1, "", "MXNetTransforms"], [249, 2, 1, "", "MXNetTranspose"], [249, 2, 1, "", "NormalizeTFTransform"], [249, 2, 1, "", "NormalizeTransform"], [249, 2, 1, "", "ONNXRTCropToBoundingBox"], [249, 2, 1, "", "ONNXRTITTransforms"], [249, 2, 1, "", "ONNXRTQLTransforms"], [249, 2, 1, "", "PaddedCenterCropTransform"], [249, 2, 1, "", "ParseDecodeVocTransform"], [249, 2, 1, "", "PyTorchAlignImageChannel"], [249, 2, 1, "", "PyTorchCropResizeTransform"], [249, 2, 1, "", "PyTorchNormalizeTransform"], [249, 2, 1, "", "PyTorchTransforms"], [249, 2, 1, "", "PyTorchTranspose"], [249, 2, 1, "", "PytorchMxnetTransform"], [249, 2, 1, "", "PytorchMxnetWrapFunction"], [249, 2, 1, "", "RandomCropTFTransform"], [249, 2, 1, "", "RandomCropTransform"], [249, 2, 1, "", "RandomHorizontalFlip"], [249, 2, 1, "", "RandomResizedCropMXNetTransform"], [249, 2, 1, "", "RandomResizedCropPytorchTransform"], [249, 2, 1, "", "RandomResizedCropTFTransform"], [249, 2, 1, "", "RandomResizedCropTransform"], [249, 2, 1, "", "RandomVerticalFlip"], [249, 2, 1, "", "RescaleKerasPretrainTransform"], [249, 2, 1, "", "RescaleTFTransform"], [249, 2, 1, "", "RescaleTransform"], [249, 2, 1, "", "ResizeMXNetTransform"], [249, 2, 1, "", "ResizePytorchTransform"], [249, 2, 1, "", "ResizeTFTransform"], [249, 2, 1, "", "ResizeTransform"], [249, 2, 1, "", "ResizeWithRatio"], [249, 2, 1, "", "SquadExample"], [249, 2, 1, "", "TFModelZooCollectTransform"], [249, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [249, 2, 1, "", "TFSquadV1PostTransform"], [249, 2, 1, "", "TRANSFORMS"], [249, 2, 1, "", "TensorflowCropToBoundingBox"], [249, 2, 1, "", "TensorflowRandomHorizontalFlip"], [249, 2, 1, "", "TensorflowRandomVerticalFlip"], [249, 2, 1, "", "TensorflowResizeWithRatio"], [249, 2, 1, "", "TensorflowTransform"], [249, 2, 1, "", "TensorflowTransforms"], [249, 2, 1, "", "TensorflowTranspose"], [249, 2, 1, "", "TensorflowWrapFunction"], [249, 2, 1, "", "ToArray"], [249, 2, 1, "", "ToNDArrayTransform"], [249, 2, 1, "", "Transforms"], [249, 2, 1, "", "Transpose"], [249, 1, 1, "", "convert_examples_to_features"], [249, 1, 1, "", "get_final_text"], [249, 1, 1, "", "get_torchvision_map"], [249, 1, 1, "", "read_squad_examples"], [249, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[249, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[249, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[249, 4, 1, "", "get_postprocess_result"], [249, 4, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[249, 4, 1, "", "register"]], "neural_compressor.experimental.distillation": [[250, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[250, 3, 1, "", "_epoch_ran"], [250, 3, 1, "", "best_model"], [250, 3, 1, "", "best_score"], [250, 4, 1, "", "create_criterion"], [250, 4, 1, "", "create_optimizer"], [250, 5, 1, "", "criterion"], [250, 3, 1, "", "eval_frequency"], [250, 5, 1, "", "evaluation_distributed"], [250, 4, 1, "", "execute"], [250, 4, 1, "", "generate_hooks"], [250, 4, 1, "", "init_train_cfg"], [250, 4, 1, "", "on_post_forward"], [250, 5, 1, "", "optimizer"], [250, 4, 1, "", "pre_process"], [250, 4, 1, "", "prepare"], [250, 5, 1, "", "student_model"], [250, 5, 1, "", "teacher_model"], [250, 5, 1, "", "train_cfg"], [250, 5, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[251, 1, 1, "", "onnx_qlinear_to_qdq"], [252, 0, 0, "-", "qlinear2qdq"], [253, 0, 0, "-", "torch2onnx"], [251, 1, 1, "", "torch_to_fp32_onnx"], [251, 1, 1, "", "torch_to_int8_onnx"], [254, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, 1, 1, "", "check_model"], [252, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[253, 1, 1, "", "build_scale_mapping"], [253, 1, 1, "", "get_node_mapping"], [253, 1, 1, "", "get_quantizable_onnx_ops"], [253, 1, 1, "", "qdq_fp32_bias"], [253, 1, 1, "", "qdq_fp32_bias_qdq"], [253, 1, 1, "", "qdq_int32_bias"], [253, 1, 1, "", "recalculate_bias"], [253, 1, 1, "", "remove_nodes_by_name"], [253, 1, 1, "", "set_data_type"], [253, 1, 1, "", "set_scale_info"], [253, 1, 1, "", "sub_graph_with_int32_bias"], [253, 1, 1, "", "torch_to_fp32_onnx"], [253, 1, 1, "", "torch_to_int8_onnx"], [253, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[254, 2, 1, "", "DummyDataReader"], [254, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[254, 4, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[255, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[255, 4, 1, "", "dataset"], [255, 5, 1, "", "eval_dataloader"], [255, 5, 1, "", "eval_func"], [255, 5, 1, "", "input"], [255, 5, 1, "", "metric"], [255, 5, 1, "", "model"], [255, 5, 1, "", "output"], [255, 5, 1, "", "postprocess"], [255, 5, 1, "", "precisions"], [255, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[263, 2, 1, "", "BaseMetric"], [263, 2, 1, "", "METRICS"], [257, 0, 0, "-", "bleu"], [258, 0, 0, "-", "bleu_util"], [259, 0, 0, "-", "coco_label_map"], [260, 0, 0, "-", "coco_tools"], [261, 0, 0, "-", "evaluate_squad"], [262, 0, 0, "-", "f1"], [264, 0, 0, "-", "metric"], [263, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[263, 5, 1, "", "hvd"], [263, 5, 1, "", "metric"], [263, 4, 1, "", "reset"], [263, 4, 1, "", "result"], [263, 4, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[263, 3, 1, "", "metrics"], [263, 4, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[257, 2, 1, "", "BLEU"], [257, 2, 1, "", "UnicodeRegex"], [257, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[257, 3, 1, "", "labels"], [257, 3, 1, "", "predictions"], [257, 4, 1, "", "reset"], [257, 4, 1, "", "result"], [257, 4, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[257, 3, 1, "", "nondigit_punct_re"], [257, 4, 1, "", "property_chars"], [257, 3, 1, "", "punct_nondigit_re"], [257, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[258, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[260, 2, 1, "", "COCOEvalWrapper"], [260, 2, 1, "", "COCOWrapper"], [260, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [260, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [260, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[260, 4, 1, "", "ComputeMetrics"], [260, 4, 1, "", "GetAgnosticMode"], [260, 4, 1, "", "GetCategory"], [260, 4, 1, "", "GetCategoryIdList"], [260, 4, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[260, 4, 1, "", "LoadAnnotations"], [260, 3, 1, "", "dataset"], [260, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, 1, 1, "", "evaluate"], [261, 1, 1, "", "exact_match_score"], [261, 1, 1, "", "f1_score"], [261, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, 1, 1, "", "evaluate"], [262, 1, 1, "", "f1_score"], [262, 1, 1, "", "metric_max_over_ground_truths"], [262, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[264, 2, 1, "", "Accuracy"], [264, 2, 1, "", "BaseMetric"], [264, 2, 1, "", "COCOmAPv2"], [264, 2, 1, "", "F1"], [264, 2, 1, "", "GeneralTopK"], [264, 2, 1, "", "Loss"], [264, 2, 1, "", "MAE"], [264, 2, 1, "", "METRICS"], [264, 2, 1, "", "MSE"], [264, 2, 1, "", "MXNetMetrics"], [264, 2, 1, "", "ONNXRTGLUE"], [264, 2, 1, "", "ONNXRTITMetrics"], [264, 2, 1, "", "ONNXRTQLMetrics"], [264, 2, 1, "", "PyTorchLoss"], [264, 2, 1, "", "PyTorchMetrics"], [264, 2, 1, "", "RMSE"], [264, 2, 1, "", "ROC"], [264, 2, 1, "", "SquadF1"], [264, 2, 1, "", "TensorflowCOCOMAP"], [264, 2, 1, "", "TensorflowMAP"], [264, 2, 1, "", "TensorflowMetrics"], [264, 2, 1, "", "TensorflowTopK"], [264, 2, 1, "", "TensorflowVOCMAP"], [264, 2, 1, "", "WrapMXNetMetric"], [264, 2, 1, "", "WrapONNXRTMetric"], [264, 2, 1, "", "WrapPyTorchMetric"], [264, 2, 1, "", "mIOU"], [264, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 3, 1, "", "sample"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[264, 5, 1, "", "hvd"], [264, 5, 1, "", "metric"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 3, 1, "", "sample"], [264, 3, 1, "", "sum"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[264, 3, 1, "", "metrics"], [264, 4, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[264, 4, 1, "", "compute"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[264, 3, 1, "", "mse"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"], [264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[264, 4, 1, "", "reset"], [264, 4, 1, "", "result"], [264, 4, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[265, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[265, 5, 1, "", "precisions"], [265, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[266, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[266, 4, 1, "", "dataset"], [266, 5, 1, "", "destination"], [266, 5, 1, "", "eval_dataloader"], [266, 5, 1, "", "eval_func"], [266, 5, 1, "", "metric"], [266, 5, 1, "", "model"], [266, 5, 1, "", "postprocess"], [266, 5, 1, "", "source"]], "neural_compressor.experimental.nas": [[279, 2, 1, "", "BasicNAS"], [279, 2, 1, "", "DyNAS"], [279, 2, 1, "", "NAS"], [267, 0, 0, "-", "basic_nas"], [268, 0, 0, "-", "dynas"], [273, 0, 0, "-", "dynast"], [280, 0, 0, "-", "nas"], [281, 0, 0, "-", "nas_utils"], [282, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[279, 4, 1, "", "estimate"], [279, 4, 1, "", "execute"], [279, 4, 1, "", "init_by_cfg"], [279, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[279, 4, 1, "", "create_acc_predictor"], [279, 4, 1, "", "create_latency_predictor"], [279, 4, 1, "", "create_macs_predictor"], [279, 4, 1, "", "estimate"], [279, 4, 1, "", "init_cfg"], [279, 4, 1, "", "init_for_search"], [279, 4, 1, "", "search"], [279, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[267, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[267, 4, 1, "", "estimate"], [267, 4, 1, "", "execute"], [267, 4, 1, "", "init_by_cfg"], [267, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[268, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[268, 4, 1, "", "create_acc_predictor"], [268, 4, 1, "", "create_latency_predictor"], [268, 4, 1, "", "create_macs_predictor"], [268, 4, 1, "", "estimate"], [268, 4, 1, "", "init_cfg"], [268, 4, 1, "", "init_for_search"], [268, 4, 1, "", "search"], [268, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[269, 0, 0, "-", "dynas_manager"], [270, 0, 0, "-", "dynas_predictor"], [271, 0, 0, "-", "dynas_search"], [272, 0, 0, "-", "dynas_utils"], [274, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[269, 2, 1, "", "ParameterManager"], [269, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[269, 4, 1, "", "create_training_set"], [269, 4, 1, "", "import_csv"], [269, 4, 1, "", "onehot_generic"], [269, 4, 1, "", "process_param_dict"], [269, 4, 1, "", "random_sample"], [269, 4, 1, "", "random_samples"], [269, 4, 1, "", "set_seed"], [269, 4, 1, "", "translate2param"], [269, 4, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[269, 4, 1, "", "create_training_set"], [269, 4, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[270, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[270, 4, 1, "", "get_metrics"], [270, 4, 1, "", "get_parameters"], [270, 4, 1, "", "load"], [270, 4, 1, "", "predict"], [270, 4, 1, "", "save"], [270, 4, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[271, 2, 1, "", "ProblemMultiObjective"], [271, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[271, 4, 1, "", "configure_age"], [271, 4, 1, "", "configure_nsga2"], [271, 4, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[272, 2, 1, "", "EvaluationInterface"], [272, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [272, 2, 1, "", "EvaluationInterfaceResNet50"], [272, 2, 1, "", "EvaluationInterfaceTransformerLT"], [272, 2, 1, "", "OFARunner"], [272, 2, 1, "", "Runner"], [272, 2, 1, "", "TorchVisionReference"], [272, 2, 1, "", "TransformerLTRunner"], [272, 1, 1, "", "get_macs"], [272, 1, 1, "", "get_torchvision_model"], [272, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[272, 4, 1, "", "clear_csv"], [272, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[272, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[272, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[272, 4, 1, "", "clear_csv"], [272, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[272, 4, 1, "", "estimate_accuracy_top1"], [272, 4, 1, "", "estimate_latency"], [272, 4, 1, "", "estimate_macs"], [272, 4, 1, "", "get_subnet"], [272, 4, 1, "", "measure_latency"], [272, 4, 1, "", "validate_macs"], [272, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[272, 4, 1, "", "measure_latency"], [272, 4, 1, "", "validate_macs"], [272, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[272, 4, 1, "", "measure_latency"], [272, 4, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[275, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[276, 0, 0, "-", "modules_supernetwork"], [277, 0, 0, "-", "transformer_interface"], [278, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[276, 2, 1, "", "MultiheadAttentionSuper"], [276, 1, 1, "", "get_incremental_state"], [276, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[276, 4, 1, "", "forward"], [276, 4, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[277, 1, 1, "", "compute_bleu"], [277, 1, 1, "", "compute_latency"], [277, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[278, 2, 1, "", "TransformerDecoder"], [278, 2, 1, "", "TransformerDecoderLayer"], [278, 2, 1, "", "TransformerEncoder"], [278, 2, 1, "", "TransformerEncoderLayer"], [278, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[278, 4, 1, "", "extract_features"], [278, 4, 1, "", "forward"], [278, 4, 1, "", "max_positions"], [278, 4, 1, "", "output_layer"], [278, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[278, 4, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[278, 4, 1, "", "forward"], [278, 4, 1, "", "max_positions"], [278, 4, 1, "", "reorder_encoder_out"], [278, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[278, 4, 1, "", "forward"], [278, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[280, 2, 1, "", "NAS"], [280, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[280, 4, 1, "", "count_model_parameters"], [280, 4, 1, "", "dump_search_results"], [280, 4, 1, "", "estimate"], [280, 4, 1, "", "find_best_model_archs"], [280, 4, 1, "", "init_search_cfg"], [280, 4, 1, "", "load_search_results"], [280, 4, 1, "", "metrics_conversion"], [280, 5, 1, "", "model_builder"], [280, 4, 1, "", "params_vec2params_dict"], [280, 4, 1, "", "search"], [280, 5, 1, "", "search_algorithm"], [280, 5, 1, "", "search_space"], [280, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[281, 1, 1, "", "create_search_space_pool"], [281, 1, 1, "", "find_pareto_front"], [281, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[282, 2, 1, "", "BayesianOptimizationSearcher"], [282, 2, 1, "", "GridSearcher"], [282, 2, 1, "", "RandomSearcher"], [282, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[282, 4, 1, "", "get_feedback"], [282, 4, 1, "", "indices2params_vec"], [282, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[282, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[282, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[282, 4, 1, "", "get_feedback"], [282, 4, 1, "", "params_vec2params_dict"], [282, 4, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[283, 2, 1, "", "Pruning"], [283, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[283, 3, 1, "", "conf"], [283, 5, 1, "", "evaluation_distributed"], [283, 4, 1, "", "execute"], [283, 4, 1, "", "generate_hooks"], [283, 4, 1, "", "generate_pruners"], [283, 4, 1, "", "pre_process"], [283, 4, 1, "", "prepare"], [283, 3, 1, "", "pruners"], [283, 5, 1, "", "pruning_func"], [283, 5, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[283, 4, 1, "", "on_after_compute_loss"], [283, 4, 1, "", "on_batch_begin"], [283, 4, 1, "", "on_batch_end"], [283, 4, 1, "", "on_epoch_begin"], [283, 4, 1, "", "on_epoch_end"], [283, 4, 1, "", "on_step_begin"], [283, 4, 1, "", "on_step_end"], [283, 4, 1, "", "on_train_begin"], [283, 4, 1, "", "on_train_end"], [283, 4, 1, "", "post_epoch_end"], [283, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[284, 2, 1, "", "PATTERNS"], [285, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[284, 3, 1, "", "patterns"], [284, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, 2, 1, "", "PATTERNS"], [286, 0, 0, "-", "pattern"], [287, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[285, 3, 1, "", "patterns"], [285, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, 2, 1, "", "PATTERNS"], [286, 2, 1, "", "PatternBase"], [286, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[286, 3, 1, "", "patterns"], [286, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[286, 4, 1, "", "compute_sparsity"], [286, 4, 1, "", "reduce"], [286, 4, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, 2, 1, "", "TilePatternBase"], [287, 2, 1, "", "TilePattern_1x1"], [287, 2, 1, "", "TilePattern_1x16"], [287, 2, 1, "", "TilePattern_1x2"], [287, 2, 1, "", "TilePattern_2x2"], [287, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[287, 4, 1, "", "compute_sparsity"], [287, 4, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[289, 0, 0, "-", "logger"], [290, 0, 0, "-", "patterns"], [291, 0, 0, "-", "prune_utils"], [292, 0, 0, "-", "pruner"], [293, 0, 0, "-", "pruning"], [294, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, 2, 1, "", "Pattern"], [290, 2, 1, "", "PatternNInM"], [290, 2, 1, "", "PatternNxM"], [290, 1, 1, "", "get_pattern"], [290, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[290, 4, 1, "", "get_block_size_dict"], [290, 4, 1, "", "get_mask_single"], [290, 4, 1, "", "get_masks"], [290, 4, 1, "", "get_masks_global"], [290, 4, 1, "", "get_masks_local"], [290, 4, 1, "", "get_pattern_lock_masks"], [290, 4, 1, "", "get_sparsity_ratio"], [290, 3, 1, "", "is_global"], [290, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[290, 3, 1, "", "M"], [290, 3, 1, "", "N"], [290, 4, 1, "", "get_masks_global"], [290, 4, 1, "", "get_pattern_lock_masks"], [290, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[290, 3, 1, "", "block_size"], [290, 4, 1, "", "get_block_size_dict"], [290, 4, 1, "", "get_masks_global"], [290, 4, 1, "", "get_pattern_lock_masks"], [290, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, 1, 1, "", "check_config"], [291, 1, 1, "", "parse_not_to_prune"], [291, 1, 1, "", "parse_to_prune"], [291, 1, 1, "", "process_and_check_config"], [291, 1, 1, "", "process_config"], [291, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, 2, 1, "", "MagnitudePruner"], [292, 2, 1, "", "PatternLockPruner"], [292, 2, 1, "", "Pruner"], [292, 2, 1, "", "SnipMomentumPruner"], [292, 2, 1, "", "SnipPruner"], [292, 1, 1, "", "get_pruner"], [292, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[292, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[292, 4, 1, "", "on_after_optimizer_step"], [292, 4, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[292, 4, 1, "", "check_is_pruned_step"], [292, 3, 1, "", "config"], [292, 3, 1, "", "current_sparsity_ratio"], [292, 3, 1, "", "end_step"], [292, 3, 1, "", "global_step"], [292, 4, 1, "", "mask_weights"], [292, 3, 1, "", "masks"], [292, 3, 1, "", "max_sparsity_ratio_per_layer"], [292, 3, 1, "", "modules"], [292, 4, 1, "", "on_after_eval"], [292, 4, 1, "", "on_after_optimizer_step"], [292, 4, 1, "", "on_before_eval"], [292, 4, 1, "", "on_before_optimizer_step"], [292, 4, 1, "", "on_epoch_begin"], [292, 4, 1, "", "on_epoch_end"], [292, 4, 1, "", "on_step_begin"], [292, 4, 1, "", "on_step_end"], [292, 4, 1, "", "on_train_begin"], [292, 4, 1, "", "on_train_end"], [292, 3, 1, "", "pattern"], [292, 3, 1, "", "scheduler"], [292, 3, 1, "", "scores"], [292, 3, 1, "", "start_step"], [292, 3, 1, "", "target_sparsity_ratio"], [292, 3, 1, "", "update_frequency_on_step"], [292, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[292, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[292, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[293, 3, 1, "", "config_file_path"], [293, 4, 1, "", "get_sparsity_ratio"], [293, 3, 1, "", "model"], [293, 4, 1, "", "on_after_eval"], [293, 4, 1, "", "on_after_optimizer_step"], [293, 4, 1, "", "on_before_eval"], [293, 4, 1, "", "on_before_optimizer_step"], [293, 4, 1, "", "on_epoch_begin"], [293, 4, 1, "", "on_epoch_end"], [293, 4, 1, "", "on_step_begin"], [293, 4, 1, "", "on_step_end"], [293, 4, 1, "", "on_train_begin"], [293, 4, 1, "", "on_train_end"], [293, 3, 1, "", "pruner_info"], [293, 3, 1, "", "pruners"], [293, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, 2, 1, "", "IterativeScheduler"], [294, 2, 1, "", "OneshotScheduler"], [294, 2, 1, "", "Scheduler"], [294, 1, 1, "", "get_scheduler"], [294, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[294, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[294, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[294, 3, 1, "", "config"], [294, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[295, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[295, 5, 1, "", "calib_dataloader"], [295, 4, 1, "", "dataset"], [295, 4, 1, "", "execute"], [295, 5, 1, "", "metric"], [295, 5, 1, "", "model"], [295, 5, 1, "", "objective"], [295, 5, 1, "", "postprocess"], [295, 4, 1, "", "pre_process"], [295, 5, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[296, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[296, 4, 1, "", "append"], [296, 4, 1, "", "combine"], [296, 5, 1, "", "eval_func"], [296, 5, 1, "", "model"], [296, 5, 1, "", "train_func"]], "neural_compressor.metric": [[304, 2, 1, "", "BaseMetric"], [304, 2, 1, "", "METRICS"], [304, 2, 1, "", "Metric"], [298, 0, 0, "-", "bleu"], [299, 0, 0, "-", "bleu_util"], [300, 0, 0, "-", "coco_label_map"], [301, 0, 0, "-", "coco_tools"], [302, 0, 0, "-", "evaluate_squad"], [303, 0, 0, "-", "f1"], [305, 0, 0, "-", "metric"], [304, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[304, 5, 1, "", "hvd"], [304, 5, 1, "", "metric"], [304, 4, 1, "", "reset"], [304, 4, 1, "", "result"], [304, 4, 1, "", "update"]], "neural_compressor.metric.METRICS": [[304, 3, 1, "", "metrics"], [304, 4, 1, "", "register"]], "neural_compressor.metric.bleu": [[298, 2, 1, "", "BLEU"], [298, 2, 1, "", "UnicodeRegex"], [298, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[298, 3, 1, "", "labels"], [298, 3, 1, "", "predictions"], [298, 4, 1, "", "reset"], [298, 4, 1, "", "result"], [298, 4, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[298, 3, 1, "", "nondigit_punct_re"], [298, 4, 1, "", "property_chars"], [298, 3, 1, "", "punct_nondigit_re"], [298, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[299, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[301, 2, 1, "", "COCOEvalWrapper"], [301, 2, 1, "", "COCOWrapper"], [301, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [301, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [301, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[301, 4, 1, "", "ComputeMetrics"], [301, 4, 1, "", "GetAgnosticMode"], [301, 4, 1, "", "GetCategory"], [301, 4, 1, "", "GetCategoryIdList"], [301, 4, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[301, 4, 1, "", "LoadAnnotations"], [301, 3, 1, "", "dataset"], [301, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[302, 1, 1, "", "evaluate"], [302, 1, 1, "", "exact_match_score"], [302, 1, 1, "", "f1_score"], [302, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[303, 1, 1, "", "evaluate"], [303, 1, 1, "", "f1_score"], [303, 1, 1, "", "metric_max_over_ground_truths"], [303, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[305, 2, 1, "", "Accuracy"], [305, 2, 1, "", "BaseMetric"], [305, 2, 1, "", "COCOmAPv2"], [305, 2, 1, "", "F1"], [305, 2, 1, "", "GeneralTopK"], [305, 2, 1, "", "Loss"], [305, 2, 1, "", "MAE"], [305, 2, 1, "", "METRICS"], [305, 2, 1, "", "MSE"], [305, 2, 1, "", "MXNetMetrics"], [305, 2, 1, "", "Metric"], [305, 2, 1, "", "ONNXRTGLUE"], [305, 2, 1, "", "ONNXRTITMetrics"], [305, 2, 1, "", "ONNXRTQLMetrics"], [305, 2, 1, "", "PyTorchLoss"], [305, 2, 1, "", "PyTorchMetrics"], [305, 2, 1, "", "RMSE"], [305, 2, 1, "", "ROC"], [305, 2, 1, "", "SquadF1"], [305, 2, 1, "", "TensorflowCOCOMAP"], [305, 2, 1, "", "TensorflowMAP"], [305, 2, 1, "", "TensorflowMetrics"], [305, 2, 1, "", "TensorflowTopK"], [305, 2, 1, "", "TensorflowVOCMAP"], [305, 2, 1, "", "WrapMXNetMetric"], [305, 2, 1, "", "WrapONNXRTMetric"], [305, 2, 1, "", "WrapPyTorchMetric"], [305, 2, 1, "", "mIOU"], [305, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[305, 3, 1, "", "label_list"], [305, 3, 1, "", "pred_list"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 3, 1, "", "sample"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[305, 5, 1, "", "hvd"], [305, 5, 1, "", "metric"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[305, 3, 1, "", "k"], [305, 3, 1, "", "num_correct"], [305, 3, 1, "", "num_sample"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 3, 1, "", "sample"], [305, 3, 1, "", "sum"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[305, 3, 1, "", "compare_label"], [305, 3, 1, "", "label_list"], [305, 3, 1, "", "pred_list"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[305, 3, 1, "", "metrics"], [305, 4, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[305, 3, 1, "", "compare_label"], [305, 3, 1, "", "label_list"], [305, 3, 1, "", "pred_list"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[305, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[305, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[305, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[305, 4, 1, "", "compute"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[305, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[305, 3, 1, "", "mse"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[305, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[305, 3, 1, "", "k"], [305, 3, 1, "", "num_correct"], [305, 3, 1, "", "num_sample"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "update"]], "neural_compressor.model": [[308, 2, 1, "", "BaseModel"], [308, 2, 1, "", "Model"], [307, 0, 0, "-", "base_model"], [309, 0, 0, "-", "keras_model"], [310, 0, 0, "-", "model"], [311, 0, 0, "-", "mxnet_model"], [312, 0, 0, "-", "nets_factory"], [313, 0, 0, "-", "onnx_model"], [314, 0, 0, "-", "tensorflow_model"], [315, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[308, 4, 1, "", "export"], [308, 4, 1, "", "framework"], [308, 5, 1, "", "graph_info"], [308, 5, 1, "", "model"], [308, 4, 1, "", "save"]], "neural_compressor.model.base_model": [[307, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[307, 4, 1, "", "export"], [307, 4, 1, "", "framework"], [307, 5, 1, "", "graph_info"], [307, 5, 1, "", "model"], [307, 4, 1, "", "save"]], "neural_compressor.model.keras_model": [[309, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[309, 4, 1, "", "export"], [309, 4, 1, "", "framework"], [309, 5, 1, "", "graph_info"], [309, 5, 1, "", "model"], [309, 4, 1, "", "save"]], "neural_compressor.model.model": [[310, 2, 1, "", "Model"], [310, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[311, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[311, 4, 1, "", "framework"], [311, 5, 1, "", "model"], [311, 4, 1, "", "save"]], "neural_compressor.model.onnx_model": [[313, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[313, 4, 1, "", "export"], [313, 4, 1, "", "find_node_by_name"], [313, 4, 1, "", "find_nodes_by_initializer"], [313, 4, 1, "", "framework"], [313, 4, 1, "", "get_scale_zero"], [313, 5, 1, "", "graph_info"], [313, 5, 1, "", "model"], [313, 4, 1, "", "save"], [313, 4, 1, "", "save_model_to_file"]], "neural_compressor.model.tensorflow_model": [[314, 2, 1, "", "TensorflowBaseModel"], [314, 2, 1, "", "TensorflowCheckpointModel"], [314, 2, 1, "", "TensorflowQATModel"], [314, 2, 1, "", "TensorflowSavedModelModel"], [314, 1, 1, "", "checkpoint_session"], [314, 1, 1, "", "estimator_session"], [314, 1, 1, "", "frozen_pb_session"], [314, 1, 1, "", "get_model_type"], [314, 1, 1, "", "graph_def_session"], [314, 1, 1, "", "graph_session"], [314, 1, 1, "", "keras_session"], [314, 1, 1, "", "load_saved_model"], [314, 1, 1, "", "saved_model_session"], [314, 1, 1, "", "slim_session"], [314, 1, 1, "", "validate_and_inference_input_output"], [314, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[314, 4, 1, "", "framework"], [314, 5, 1, "", "graph_info"], [314, 5, 1, "", "model"], [314, 4, 1, "", "save"], [314, 5, 1, "", "weights"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[314, 5, 1, "", "model"], [314, 4, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[314, 5, 1, "", "model"], [314, 4, 1, "", "report_sparsity"], [314, 4, 1, "", "save"]], "neural_compressor.model.torch_model": [[315, 2, 1, "", "IPEXModel"], [315, 2, 1, "", "PyTorchBaseModel"], [315, 2, 1, "", "PyTorchFXModel"], [315, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[315, 5, 1, "", "graph_info"], [315, 4, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[315, 4, 1, "", "framework"], [315, 4, 1, "", "get_all_weight_names"], [315, 4, 1, "", "get_gradient"], [315, 4, 1, "", "get_inputs"], [315, 4, 1, "", "get_weight"], [315, 5, 1, "", "model"], [315, 4, 1, "", "prune_weights_"], [315, 4, 1, "", "report_sparsity"], [315, 4, 1, "", "update_gradient"], [315, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[315, 4, 1, "", "export"], [315, 5, 1, "", "graph_info"], [315, 4, 1, "", "save"]], "neural_compressor.objective": [[316, 2, 1, "", "Accuracy"], [316, 2, 1, "", "Footprint"], [316, 2, 1, "", "ModelSize"], [316, 2, 1, "", "Objective"], [316, 2, 1, "", "Performance"], [316, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[316, 4, 1, "", "end"], [316, 4, 1, "", "start"]], "neural_compressor.objective.Footprint": [[316, 4, 1, "", "end"], [316, 4, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[316, 4, 1, "", "end"], [316, 4, 1, "", "start"]], "neural_compressor.objective.Objective": [[316, 4, 1, "", "end"], [316, 4, 1, "", "reset"], [316, 4, 1, "", "result"], [316, 4, 1, "", "result_list"], [316, 4, 1, "", "start"]], "neural_compressor.objective.Performance": [[316, 4, 1, "", "end"], [316, 4, 1, "", "start"]], "neural_compressor.pruner": [[317, 0, 0, "-", "criteria"], [319, 0, 0, "-", "logger"], [320, 0, 0, "-", "patterns"], [323, 0, 0, "-", "pruner_legacy"], [327, 0, 0, "-", "pruners"], [328, 0, 0, "-", "regs"], [329, 0, 0, "-", "schedulers"], [330, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[317, 2, 1, "", "GradientCriterion"], [317, 2, 1, "", "MagnitudeCriterion"], [317, 2, 1, "", "PruningCriterion"], [317, 2, 1, "", "SnipCriterion"], [317, 2, 1, "", "SnipMomentumCriterion"], [317, 1, 1, "", "get_criterion"], [317, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[317, 4, 1, "", "on_after_optimizer_step"], [317, 3, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[317, 4, 1, "", "on_step_begin"], [317, 3, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[317, 4, 1, "", "on_after_optimizer_step"], [317, 4, 1, "", "on_step_begin"], [317, 3, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[317, 4, 1, "", "on_after_optimizer_step"], [317, 3, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[317, 4, 1, "", "on_after_optimizer_step"], [317, 3, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[320, 2, 1, "", "BasePattern"], [320, 2, 1, "", "PatternNInM"], [320, 2, 1, "", "PatternNxM"], [320, 1, 1, "", "get_pattern"], [320, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[320, 4, 1, "", "adjust_ratio"], [320, 4, 1, "", "check_layer_validity"], [320, 3, 1, "", "config"], [320, 4, 1, "", "get_block_size_dict"], [320, 4, 1, "", "get_masks"], [320, 4, 1, "", "get_masks_global"], [320, 4, 1, "", "get_masks_local"], [320, 4, 1, "", "get_pattern_lock_masks"], [320, 4, 1, "", "get_reduced_masks_from_data"], [320, 4, 1, "", "get_single_mask_per_target_ratio"], [320, 4, 1, "", "get_sparsity_ratio"], [320, 4, 1, "", "get_sparsity_ratio_each_layer"], [320, 3, 1, "", "invalid_layers"], [320, 3, 1, "", "is_global"], [320, 3, 1, "", "keep_mask_layers"], [320, 3, 1, "", "max_sparsity_ratio_per_op"], [320, 3, 1, "", "min_sparsity_ratio_per_op"], [320, 3, 1, "", "modules"], [320, 3, 1, "", "pattern"], [320, 4, 1, "", "reduce_tensor"], [320, 3, 1, "", "target_sparsity"], [320, 4, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[320, 3, 1, "", "M"], [320, 3, 1, "", "N"], [320, 4, 1, "", "check_layer_validity"], [320, 4, 1, "", "get_ele_mask_per_threshold"], [320, 4, 1, "", "get_least_ninm_mask_from_data"], [320, 4, 1, "", "get_masks_global"], [320, 4, 1, "", "get_pattern_lock_masks"], [320, 4, 1, "", "get_reduced_masks_from_data"], [320, 4, 1, "", "get_sparsity_ratio"], [320, 4, 1, "", "reduce_scores"], [320, 4, 1, "", "reshape_orig_to_pattern"], [320, 4, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[320, 3, 1, "", "block_size"], [320, 4, 1, "", "check_layer_validity"], [320, 4, 1, "", "count_new_masked_cnts"], [320, 4, 1, "", "get_block_size_dict"], [320, 4, 1, "", "get_mask_per_threshold"], [320, 4, 1, "", "get_masks_global"], [320, 4, 1, "", "get_pattern_lock_masks"], [320, 4, 1, "", "get_reduced_masks_from_data"], [320, 4, 1, "", "get_sparsity_ratio"], [320, 4, 1, "", "get_sparsity_ratio_progressive"], [320, 4, 1, "", "reduce_scores"], [320, 4, 1, "", "reshape_orig_to_pattern"], [320, 4, 1, "", "reshape_reduced_to_orig"], [320, 4, 1, "", "update_new_added_masks"], [320, 4, 1, "", "update_progressive_masks"], [320, 4, 1, "", "update_progressive_masks_global"], [320, 4, 1, "", "update_progressive_masks_linear"], [320, 4, 1, "", "update_progressive_masks_local"], [320, 4, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[321, 0, 0, "-", "gradient_sensitivity"], [322, 0, 0, "-", "group_lasso"], [324, 0, 0, "-", "magnitude"], [325, 0, 0, "-", "pattern_lock"], [326, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[326, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruners": [[327, 2, 1, "", "BasePruner"], [327, 2, 1, "", "BasicPruner"], [327, 2, 1, "", "PatternLockPruner"], [327, 2, 1, "", "ProgressivePruner"], [327, 1, 1, "", "get_pruner"], [327, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[327, 4, 1, "", "check_is_pruned_step"], [327, 3, 1, "", "config"], [327, 3, 1, "", "current_sparsity_ratio"], [327, 3, 1, "", "end_step"], [327, 3, 1, "", "global_step"], [327, 4, 1, "", "mask_weights"], [327, 4, 1, "", "mask_weights_general"], [327, 3, 1, "", "masks"], [327, 3, 1, "", "max_sparsity_ratio_per_op"], [327, 3, 1, "", "modules"], [327, 4, 1, "", "on_after_eval"], [327, 4, 1, "", "on_after_optimizer_step"], [327, 4, 1, "", "on_before_eval"], [327, 4, 1, "", "on_before_optimizer_step"], [327, 4, 1, "", "on_epoch_begin"], [327, 4, 1, "", "on_epoch_end"], [327, 4, 1, "", "on_step_begin"], [327, 4, 1, "", "on_step_end"], [327, 4, 1, "", "on_train_begin"], [327, 4, 1, "", "on_train_end"], [327, 3, 1, "", "pattern"], [327, 3, 1, "", "pruning_frequency"], [327, 3, 1, "", "scheduler"], [327, 3, 1, "", "scores"], [327, 3, 1, "", "start_step"], [327, 3, 1, "", "target_sparsity_ratio"], [327, 4, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[327, 3, 1, "", "criterion"], [327, 4, 1, "", "on_after_optimizer_step"], [327, 4, 1, "", "on_before_optimizer_step"], [327, 3, 1, "", "pattern"], [327, 3, 1, "", "reg"], [327, 3, 1, "", "scheduler"], [327, 4, 1, "", "set_global_step"], [327, 4, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[327, 4, 1, "", "on_after_optimizer_step"], [327, 4, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[327, 4, 1, "", "check_is_pruned_progressive_step"], [327, 4, 1, "", "check_progressive_validity"], [327, 4, 1, "", "on_after_optimizer_step"], [327, 4, 1, "", "on_before_optimizer_step"], [327, 4, 1, "", "on_step_begin"], [327, 4, 1, "", "print_progressive_sparsity"], [327, 4, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.regs": [[328, 2, 1, "", "BaseReg"], [328, 2, 1, "", "GroupLasso"], [328, 1, 1, "", "get_reg"], [328, 1, 1, "", "get_reg_type"], [328, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[328, 4, 1, "", "on_after_optimizer_step"], [328, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[328, 3, 1, "", "alpha"], [328, 4, 1, "", "on_after_optimizer_step"], [328, 4, 1, "", "on_before_optimizer_step"], [328, 3, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[329, 2, 1, "", "IterativeScheduler"], [329, 2, 1, "", "OneshotScheduler"], [329, 2, 1, "", "PruningScheduler"], [329, 1, 1, "", "get_scheduler"], [329, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[329, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[329, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[329, 3, 1, "", "config"], [329, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[330, 2, 1, "", "WeightPruningConfig"], [330, 1, 1, "", "check_config"], [330, 1, 1, "", "parse_to_prune"], [330, 1, 1, "", "process_config"], [330, 1, 1, "", "reset_none_to_default"]], "neural_compressor.pruning": [[331, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[331, 3, 1, "", "config_file_path"], [331, 4, 1, "", "get_sparsity_ratio"], [331, 3, 1, "", "model"], [331, 4, 1, "", "on_after_eval"], [331, 4, 1, "", "on_after_optimizer_step"], [331, 4, 1, "", "on_before_eval"], [331, 4, 1, "", "on_before_optimizer_step"], [331, 4, 1, "", "on_epoch_begin"], [331, 4, 1, "", "on_epoch_end"], [331, 4, 1, "", "on_step_begin"], [331, 4, 1, "", "on_step_end"], [331, 4, 1, "", "on_train_begin"], [331, 4, 1, "", "on_train_end"], [331, 3, 1, "", "pruner_info"], [331, 3, 1, "", "pruners"], [331, 4, 1, "", "update_config"]], "neural_compressor.quantization": [[332, 1, 1, "", "fit"]], "neural_compressor.strategy": [[333, 0, 0, "-", "auto_mixed_precision"], [334, 0, 0, "-", "basic"], [335, 0, 0, "-", "bayesian"], [336, 0, 0, "-", "conservative"], [337, 0, 0, "-", "exhaustive"], [338, 0, 0, "-", "hawq_v2"], [340, 0, 0, "-", "mse"], [341, 0, 0, "-", "mse_v2"], [342, 0, 0, "-", "random"], [343, 0, 0, "-", "strategy"], [345, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[333, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[333, 4, 1, "", "next_tune_cfg"], [333, 4, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[334, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[334, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[335, 2, 1, "", "BayesianTuneStrategy"], [335, 2, 1, "", "TargetSpace"], [335, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[335, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[335, 4, 1, "", "get_target"], [335, 4, 1, "", "max"], [335, 4, 1, "", "random_sample"], [335, 4, 1, "", "register"], [335, 4, 1, "", "res"]], "neural_compressor.strategy.conservative": [[336, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[336, 4, 1, "", "next_tune_cfg"], [336, 4, 1, "", "stop"], [336, 4, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[337, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[337, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[338, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[338, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[340, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[340, 4, 1, "", "mse_impact_lst"], [340, 4, 1, "", "mse_metric_gap"], [340, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[341, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[341, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[342, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[342, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[343, 2, 1, "", "TuneStrategy"], [343, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[343, 4, 1, "", "next_tune_cfg"], [343, 4, 1, "", "stop"], [343, 4, 1, "", "traverse"]], "neural_compressor.strategy.utils": [[344, 0, 0, "-", "helper"], [346, 0, 0, "-", "tuning_sampler"], [347, 0, 0, "-", "tuning_space"], [348, 0, 0, "-", "tuning_structs"]], "neural_compressor.training": [[349, 2, 1, "", "CompressionManager"], [349, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[349, 4, 1, "", "export"], [349, 4, 1, "", "save"]], "neural_compressor.utils": [[353, 2, 1, "", "KL_Divergence"], [353, 2, 1, "", "LayerHistogramCollector"], [350, 0, 0, "-", "collect_layer_histogram"], [351, 0, 0, "-", "constant"], [352, 0, 0, "-", "create_obj_from_config"], [354, 0, 0, "-", "kl_divergence"], [355, 0, 0, "-", "load_huggingface"], [356, 0, 0, "-", "logger"], [357, 0, 0, "-", "options"], [358, 0, 0, "-", "pytorch"], [359, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[353, 4, 1, "", "expand_quantized_bins"], [353, 4, 1, "", "get_threshold"], [353, 4, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[353, 4, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[350, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[350, 4, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[352, 1, 1, "", "create_eval_func"], [352, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[354, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[354, 4, 1, "", "expand_quantized_bins"], [354, 4, 1, "", "get_threshold"], [354, 4, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[358, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[359, 2, 1, "", "LazyImport"], [359, 2, 1, "", "MODE"], [359, 1, 1, "", "combine_histogram"], [359, 1, 1, "", "dump_data_to_local"], [359, 1, 1, "", "dump_elapsed_time"], [359, 1, 1, "", "equal_dicts"], [359, 1, 1, "", "get_size"], [359, 1, 1, "", "get_tuning_history"], [359, 1, 1, "", "load_data_from_pkl"], [359, 1, 1, "", "recover"]], "neural_compressor.ux": [[432, 0, 0, "-", "components"], [488, 0, 0, "-", "inc_bench"], [497, 0, 0, "-", "utils"], [522, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[363, 0, 0, "-", "benchmark"], [367, 0, 0, "-", "config_generator"], [374, 0, 0, "-", "configuration_wizard"], [408, 0, 0, "-", "db_manager"], [413, 0, 0, "-", "diagnosis"], [421, 0, 0, "-", "file_browser"], [427, 0, 0, "-", "graph"], [433, 0, 0, "-", "jobs_management"], [437, 0, 0, "-", "manage_workspace"], [439, 0, 0, "-", "model"], [458, 0, 0, "-", "model_zoo"], [460, 0, 0, "-", "names_mapper"], [467, 0, 0, "-", "optimization"], [480, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[363, 2, 1, "", "Benchmarks"], [360, 0, 0, "-", "benchmark"], [361, 0, 0, "-", "benchmark_model"], [362, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[360, 2, 1, "", "Benchmark"], [360, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[360, 5, 1, "", "config_filename"], [360, 5, 1, "", "configuration_data"], [360, 4, 1, "", "execute"], [360, 4, 1, "", "generate_config"], [360, 5, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[361, 1, 1, "", "benchmark_model"], [361, 1, 1, "", "parse_args"], [361, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[362, 1, 1, "", "benchmark_result_update"], [362, 1, 1, "", "benchmark_result_update_pytorch_script"], [362, 1, 1, "", "execute_benchmark"], [362, 1, 1, "", "execute_real_benchmark"], [362, 1, 1, "", "pytorch_script_bench_optimizations"], [362, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[364, 0, 0, "-", "benchmark_config_generator"], [365, 0, 0, "-", "config_generator"], [366, 0, 0, "-", "graph_optimization_config_generator"], [368, 0, 0, "-", "mixed_precision_config_generator"], [369, 0, 0, "-", "profiling_config_generator"], [370, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[364, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[364, 4, 1, "", "generate"], [364, 4, 1, "", "generate_accuracy_config"], [364, 4, 1, "", "generate_evaluation_config"], [364, 4, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[365, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[365, 4, 1, "", "generate"], [365, 4, 1, "", "generate_dataloader_config"], [365, 4, 1, "", "generate_model_config"], [365, 4, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[366, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[366, 4, 1, "", "generate"], [366, 4, 1, "", "generate_evaluation_config"], [366, 4, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[368, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[368, 4, 1, "", "generate"], [368, 4, 1, "", "generate_evaluation_config"], [368, 4, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[369, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[369, 4, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[370, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[370, 4, 1, "", "generate"], [370, 4, 1, "", "generate_evaluation_config"], [370, 4, 1, "", "generate_quantization_config"], [370, 4, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[371, 0, 0, "-", "configuration_parser"], [372, 0, 0, "-", "get_boundary_nodes"], [373, 0, 0, "-", "get_configuration"], [375, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[371, 2, 1, "", "ConfigurationParser"], [371, 1, 1, "", "normalize_string_list"], [371, 1, 1, "", "parse_list_value"], [371, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[371, 4, 1, "", "get_param_type"], [371, 4, 1, "", "parse"], [371, 4, 1, "", "parse_dataloader"], [371, 4, 1, "", "parse_evaluation_data"], [371, 4, 1, "", "parse_metric"], [371, 4, 1, "", "parse_transforms"], [371, 4, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[372, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[373, 1, 1, "", "get_predefined_configuration"], [373, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[375, 2, 1, "", "Feeder"], [375, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[375, 4, 1, "", "feed"], [375, 4, 1, "", "get_dataloaders"], [375, 4, 1, "", "get_domains"], [375, 4, 1, "", "get_frameworks"], [375, 4, 1, "", "get_metrics"], [375, 4, 1, "", "get_models"], [375, 4, 1, "", "get_objectives"], [375, 4, 1, "", "get_precisions"], [375, 4, 1, "", "get_quantization_approaches"], [375, 4, 1, "", "get_strategies"], [375, 4, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[408, 2, 1, "", "DBManager"], [376, 0, 0, "-", "db_manager"], [385, 0, 0, "-", "db_models"], [403, 0, 0, "-", "db_operations"], [409, 0, 0, "-", "params_interfaces"], [410, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[408, 4, 1, "", "create_all"], [408, 4, 1, "", "create_sqlalchemy_engine"], [408, 5, 1, "", "engine"], [408, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[376, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[376, 4, 1, "", "create_all"], [376, 4, 1, "", "create_sqlalchemy_engine"], [376, 5, 1, "", "engine"], [376, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[377, 0, 0, "-", "benchmark"], [378, 0, 0, "-", "benchmark_result"], [379, 0, 0, "-", "dataloader"], [380, 0, 0, "-", "dataset"], [381, 0, 0, "-", "domain"], [382, 0, 0, "-", "domain_flavour"], [383, 0, 0, "-", "example"], [384, 0, 0, "-", "framework"], [386, 0, 0, "-", "metric"], [387, 0, 0, "-", "model"], [388, 0, 0, "-", "optimization"], [389, 0, 0, "-", "optimization_type"], [390, 0, 0, "-", "precision"], [391, 0, 0, "-", "profiling"], [392, 0, 0, "-", "profiling_result"], [393, 0, 0, "-", "project"], [394, 0, 0, "-", "transform"], [395, 0, 0, "-", "tuning_details"], [396, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[377, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[377, 4, 1, "", "add"], [377, 4, 1, "", "build_info"], [377, 4, 1, "", "clean_status"], [377, 4, 1, "", "delete_benchmark"], [377, 4, 1, "", "details"], [377, 4, 1, "", "list"], [377, 4, 1, "", "update_batch_size"], [377, 4, 1, "", "update_config_path"], [377, 4, 1, "", "update_cores_per_instance"], [377, 4, 1, "", "update_dataset"], [377, 4, 1, "", "update_duration"], [377, 4, 1, "", "update_execution_command"], [377, 4, 1, "", "update_log_path"], [377, 4, 1, "", "update_mode"], [377, 4, 1, "", "update_number_of_instance"], [377, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[378, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[378, 4, 1, "", "add"], [378, 4, 1, "", "build_info"], [378, 4, 1, "", "update_accuracy"], [378, 4, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[379, 2, 1, "", "Dataloader"], [379, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[379, 4, 1, "", "list"], [379, 4, 1, "", "list_by_framework"], [379, 4, 1, "", "query_to_list"], [379, 4, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[380, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[380, 4, 1, "", "add"], [380, 4, 1, "", "build_info"], [380, 4, 1, "", "delete_dataset"], [380, 4, 1, "", "details"], [380, 4, 1, "", "list"], [380, 4, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[381, 2, 1, "", "Domain"], [381, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[381, 4, 1, "", "get_domain_id"], [381, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[382, 2, 1, "", "DomainFlavour"], [382, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[382, 4, 1, "", "get_domain_flavour_id"], [382, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[383, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[384, 2, 1, "", "Framework"], [384, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[384, 4, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[386, 2, 1, "", "Metric"], [386, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[386, 4, 1, "", "list"], [386, 4, 1, "", "list_by_framework"], [386, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[387, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[387, 4, 1, "", "add"], [387, 4, 1, "", "build_info"], [387, 4, 1, "", "delete_model"], [387, 4, 1, "", "details"], [387, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[388, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[388, 4, 1, "", "add"], [388, 4, 1, "", "build_info"], [388, 4, 1, "", "clean_status"], [388, 4, 1, "", "delete_optimization"], [388, 4, 1, "", "details"], [388, 4, 1, "", "get_optimization_by_project_and_model"], [388, 4, 1, "", "get_pinned_benchmarks"], [388, 4, 1, "", "list"], [388, 4, 1, "", "pin_accuracy_benchmark"], [388, 4, 1, "", "pin_performance_benchmark"], [388, 4, 1, "", "unpin_benchmark"], [388, 4, 1, "", "update_batch_size"], [388, 4, 1, "", "update_config_path"], [388, 4, 1, "", "update_dataset"], [388, 4, 1, "", "update_duration"], [388, 4, 1, "", "update_execution_command"], [388, 4, 1, "", "update_log_path"], [388, 4, 1, "", "update_optimized_model"], [388, 4, 1, "", "update_precision"], [388, 4, 1, "", "update_sampling_size"], [388, 4, 1, "", "update_status"], [388, 4, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[389, 2, 1, "", "OptimizationType"], [389, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[389, 4, 1, "", "add"], [389, 4, 1, "", "get_optimization_type_by_id"], [389, 4, 1, "", "get_optimization_type_by_name"], [389, 4, 1, "", "get_optimization_type_for_precision"], [389, 4, 1, "", "get_optimization_type_id"], [389, 4, 1, "", "list"], [389, 4, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[390, 2, 1, "", "Precision"], [390, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[390, 4, 1, "", "add"], [390, 4, 1, "", "get_precision_by_id"], [390, 4, 1, "", "get_precision_by_name"], [390, 4, 1, "", "get_precision_id"], [390, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[391, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[391, 4, 1, "", "add"], [391, 4, 1, "", "build_info"], [391, 4, 1, "", "clean_status"], [391, 4, 1, "", "delete_profiling"], [391, 4, 1, "", "details"], [391, 4, 1, "", "list"], [391, 4, 1, "", "update_dataset"], [391, 4, 1, "", "update_duration"], [391, 4, 1, "", "update_execution_command"], [391, 4, 1, "", "update_log_path"], [391, 4, 1, "", "update_num_threads"], [391, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[392, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[392, 4, 1, "", "add"], [392, 4, 1, "", "build_info"], [392, 4, 1, "", "bulk_add"], [392, 4, 1, "", "delete_results"], [392, 4, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[393, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[393, 4, 1, "", "create_project"], [393, 4, 1, "", "delete_project"], [393, 4, 1, "", "get_model_by_name"], [393, 4, 1, "", "list_projects"], [393, 4, 1, "", "project_details"], [393, 4, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[394, 2, 1, "", "Transform"], [394, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[394, 4, 1, "", "list"], [394, 4, 1, "", "list_by_domain"], [394, 4, 1, "", "list_by_framework"], [394, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[395, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[395, 4, 1, "", "add"], [395, 4, 1, "", "delete_tuning_details"], [395, 4, 1, "", "update"], [395, 4, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[396, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[396, 4, 1, "", "add"], [396, 4, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[403, 2, 1, "", "BenchmarkAPIInterface"], [403, 2, 1, "", "DatasetAPIInterface"], [403, 2, 1, "", "DiagnosisAPIInterface"], [403, 2, 1, "", "DictionariesAPIInterface"], [403, 2, 1, "", "ExamplesAPIInterface"], [403, 2, 1, "", "ModelAPIInterface"], [403, 2, 1, "", "OptimizationAPIInterface"], [403, 2, 1, "", "ProfilingAPIInterface"], [403, 2, 1, "", "ProjectAPIInterface"], [397, 0, 0, "-", "benchmark_api_interface"], [398, 0, 0, "-", "dataset_api_interface"], [399, 0, 0, "-", "db_operations"], [400, 0, 0, "-", "diagnosis_api_interface"], [401, 0, 0, "-", "dictionaries_api_interface"], [402, 0, 0, "-", "examples_api_interface"], [404, 0, 0, "-", "model_api_interface"], [405, 0, 0, "-", "optimization_api_interface"], [406, 0, 0, "-", "profiling_api_interface"], [407, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[403, 4, 1, "", "add_benchmark"], [403, 4, 1, "", "add_result"], [403, 4, 1, "", "clean_status"], [403, 4, 1, "", "delete_benchmark"], [403, 4, 1, "", "edit_benchmark"], [403, 4, 1, "", "get_benchmark_details"], [403, 4, 1, "", "list_benchmarks"], [403, 4, 1, "", "parse_benchmark_data"], [403, 4, 1, "", "parse_benchmark_edit_data"], [403, 4, 1, "", "update_benchmark_accuracy"], [403, 4, 1, "", "update_benchmark_duration"], [403, 4, 1, "", "update_benchmark_performance"], [403, 4, 1, "", "update_benchmark_status"], [403, 4, 1, "", "update_execution_command"], [403, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[403, 4, 1, "", "add_dataset"], [403, 4, 1, "", "check_if_custom_metric_or_dataloader"], [403, 4, 1, "", "dataloader_path"], [403, 4, 1, "", "delete_dataset"], [403, 4, 1, "", "generate_custom_template"], [403, 4, 1, "", "generate_template"], [403, 4, 1, "", "get_dataset_details"], [403, 4, 1, "", "get_predefined_dataset"], [403, 4, 1, "", "list_datasets"], [403, 4, 1, "", "parse_dataset_data"], [403, 4, 1, "", "prepare_predefined_dataloader"], [403, 4, 1, "", "prepare_predefined_transform"], [403, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[403, 4, 1, "", "generate_optimization"], [403, 4, 1, "", "get_op_details"], [403, 4, 1, "", "get_op_list"], [403, 4, 1, "", "histogram"], [403, 4, 1, "", "model_wise_params"], [403, 4, 1, "", "parse_model_wise_config"], [403, 4, 1, "", "parse_op_wise_config"], [403, 4, 1, "", "parse_optimization_data"], [403, 4, 1, "", "parse_wise_parameters"], [403, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[403, 4, 1, "", "list_dataloaders"], [403, 4, 1, "", "list_dataloaders_by_framework"], [403, 4, 1, "", "list_domain_flavours"], [403, 4, 1, "", "list_domains"], [403, 4, 1, "", "list_metrics"], [403, 4, 1, "", "list_metrics_by_framework"], [403, 4, 1, "", "list_optimization_types"], [403, 4, 1, "", "list_optimization_types_for_precision"], [403, 4, 1, "", "list_precisions"], [403, 4, 1, "", "list_transforms"], [403, 4, 1, "", "list_transforms_by_domain"], [403, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[403, 4, 1, "", "create_project"], [403, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[403, 4, 1, "", "add_model"], [403, 4, 1, "", "delete_model"], [403, 4, 1, "", "get_model_details"], [403, 4, 1, "", "list_models"], [403, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[403, 4, 1, "", "add_optimization"], [403, 4, 1, "", "add_quantization_optimization"], [403, 4, 1, "", "add_standard_optimization"], [403, 4, 1, "", "add_tuning_history"], [403, 4, 1, "", "clean_status"], [403, 4, 1, "", "delete_optimization"], [403, 4, 1, "", "edit_optimization"], [403, 4, 1, "", "get_optimization_details"], [403, 4, 1, "", "list_optimizations"], [403, 4, 1, "", "parse_optimization_data"], [403, 4, 1, "", "parse_optimization_edit_data"], [403, 4, 1, "", "parse_tuning_history"], [403, 4, 1, "", "pin_accuracy_benchmark"], [403, 4, 1, "", "pin_performance_benchmark"], [403, 4, 1, "", "update_execution_command"], [403, 4, 1, "", "update_optimization_duration"], [403, 4, 1, "", "update_optimization_status"], [403, 4, 1, "", "update_optimized_model"], [403, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[403, 4, 1, "", "add_profiling"], [403, 4, 1, "", "add_result"], [403, 4, 1, "", "bulk_add_results"], [403, 4, 1, "", "clean_status"], [403, 4, 1, "", "delete_profiling"], [403, 4, 1, "", "edit_profiling"], [403, 4, 1, "", "get_profiling_details"], [403, 4, 1, "", "list_profilings"], [403, 4, 1, "", "parse_profiling_data"], [403, 4, 1, "", "parse_profiling_edit_data"], [403, 4, 1, "", "parse_profiling_result_data"], [403, 4, 1, "", "update_execution_command"], [403, 4, 1, "", "update_log_path"], [403, 4, 1, "", "update_profiling_duration"], [403, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[403, 4, 1, "", "add_dummy_dataset"], [403, 4, 1, "", "add_model"], [403, 4, 1, "", "create_project"], [403, 4, 1, "", "delete_project"], [403, 4, 1, "", "get_project_details"], [403, 4, 1, "", "list_projects"], [403, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[397, 2, 1, "", "BenchmarkAPIInterface"], [397, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[397, 4, 1, "", "add_benchmark"], [397, 4, 1, "", "add_result"], [397, 4, 1, "", "clean_status"], [397, 4, 1, "", "delete_benchmark"], [397, 4, 1, "", "edit_benchmark"], [397, 4, 1, "", "get_benchmark_details"], [397, 4, 1, "", "list_benchmarks"], [397, 4, 1, "", "parse_benchmark_data"], [397, 4, 1, "", "parse_benchmark_edit_data"], [397, 4, 1, "", "update_benchmark_accuracy"], [397, 4, 1, "", "update_benchmark_duration"], [397, 4, 1, "", "update_benchmark_performance"], [397, 4, 1, "", "update_benchmark_status"], [397, 4, 1, "", "update_execution_command"], [397, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[398, 2, 1, "", "DatasetAPIInterface"], [398, 1, 1, "", "initialize_associations"], [398, 1, 1, "", "initialize_precision_optimization_types_association"], [398, 1, 1, "", "search_in_list_of_dict"], [398, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [398, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[398, 4, 1, "", "add_dataset"], [398, 4, 1, "", "check_if_custom_metric_or_dataloader"], [398, 4, 1, "", "dataloader_path"], [398, 4, 1, "", "delete_dataset"], [398, 4, 1, "", "generate_custom_template"], [398, 4, 1, "", "generate_template"], [398, 4, 1, "", "get_dataset_details"], [398, 4, 1, "", "get_predefined_dataset"], [398, 4, 1, "", "list_datasets"], [398, 4, 1, "", "parse_dataset_data"], [398, 4, 1, "", "prepare_predefined_dataloader"], [398, 4, 1, "", "prepare_predefined_transform"], [398, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[399, 1, 1, "", "initialize_associations"], [399, 1, 1, "", "initialize_precision_optimization_types_association"], [399, 1, 1, "", "search_in_list_of_dict"], [399, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [399, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[400, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[400, 4, 1, "", "generate_optimization"], [400, 4, 1, "", "get_op_details"], [400, 4, 1, "", "get_op_list"], [400, 4, 1, "", "histogram"], [400, 4, 1, "", "model_wise_params"], [400, 4, 1, "", "parse_model_wise_config"], [400, 4, 1, "", "parse_op_wise_config"], [400, 4, 1, "", "parse_optimization_data"], [400, 4, 1, "", "parse_wise_parameters"], [400, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[401, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[401, 4, 1, "", "list_dataloaders"], [401, 4, 1, "", "list_dataloaders_by_framework"], [401, 4, 1, "", "list_domain_flavours"], [401, 4, 1, "", "list_domains"], [401, 4, 1, "", "list_metrics"], [401, 4, 1, "", "list_metrics_by_framework"], [401, 4, 1, "", "list_optimization_types"], [401, 4, 1, "", "list_optimization_types_for_precision"], [401, 4, 1, "", "list_precisions"], [401, 4, 1, "", "list_transforms"], [401, 4, 1, "", "list_transforms_by_domain"], [401, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[402, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[402, 4, 1, "", "create_project"], [402, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[404, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[404, 4, 1, "", "add_model"], [404, 4, 1, "", "delete_model"], [404, 4, 1, "", "get_model_details"], [404, 4, 1, "", "list_models"], [404, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[405, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[405, 4, 1, "", "add_optimization"], [405, 4, 1, "", "add_quantization_optimization"], [405, 4, 1, "", "add_standard_optimization"], [405, 4, 1, "", "add_tuning_history"], [405, 4, 1, "", "clean_status"], [405, 4, 1, "", "delete_optimization"], [405, 4, 1, "", "edit_optimization"], [405, 4, 1, "", "get_optimization_details"], [405, 4, 1, "", "list_optimizations"], [405, 4, 1, "", "parse_optimization_data"], [405, 4, 1, "", "parse_optimization_edit_data"], [405, 4, 1, "", "parse_tuning_history"], [405, 4, 1, "", "pin_accuracy_benchmark"], [405, 4, 1, "", "pin_performance_benchmark"], [405, 4, 1, "", "update_execution_command"], [405, 4, 1, "", "update_optimization_duration"], [405, 4, 1, "", "update_optimization_status"], [405, 4, 1, "", "update_optimized_model"], [405, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[406, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[406, 4, 1, "", "add_profiling"], [406, 4, 1, "", "add_result"], [406, 4, 1, "", "bulk_add_results"], [406, 4, 1, "", "clean_status"], [406, 4, 1, "", "delete_profiling"], [406, 4, 1, "", "edit_profiling"], [406, 4, 1, "", "get_profiling_details"], [406, 4, 1, "", "list_profilings"], [406, 4, 1, "", "parse_profiling_data"], [406, 4, 1, "", "parse_profiling_edit_data"], [406, 4, 1, "", "parse_profiling_result_data"], [406, 4, 1, "", "update_execution_command"], [406, 4, 1, "", "update_log_path"], [406, 4, 1, "", "update_profiling_duration"], [406, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[407, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[407, 4, 1, "", "add_dummy_dataset"], [407, 4, 1, "", "add_model"], [407, 4, 1, "", "create_project"], [407, 4, 1, "", "delete_project"], [407, 4, 1, "", "get_project_details"], [407, 4, 1, "", "list_projects"], [407, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[409, 2, 1, "", "BenchmarkAddParamsInterface"], [409, 2, 1, "", "BenchmarkEditParamsInterface"], [409, 2, 1, "", "DatasetAddParamsInterface"], [409, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [409, 2, 1, "", "ModelAddParamsInterface"], [409, 2, 1, "", "OptimizationAddParamsInterface"], [409, 2, 1, "", "OptimizationEditParamsInterface"], [409, 2, 1, "", "ProfilingAddParamsInterface"], [409, 2, 1, "", "ProfilingEditParamsInterface"], [409, 2, 1, "", "ProfilingResultAddParamsInterface"], [409, 2, 1, "", "TuningHistoryInterface"], [409, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[409, 4, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[409, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[409, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[410, 1, 1, "", "get_framework_dataloaders_config"], [410, 1, 1, "", "get_framework_transforms_config"], [410, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[411, 0, 0, "-", "diagnosis"], [412, 0, 0, "-", "factory"], [414, 0, 0, "-", "onnx_diagnosis"], [416, 0, 0, "-", "op_details"], [417, 0, 0, "-", "op_entry"], [418, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[411, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[411, 4, 1, "", "calculate_mse"], [411, 4, 1, "", "get_histogram_data"], [411, 4, 1, "", "get_op_details"], [411, 4, 1, "", "get_op_list"], [411, 4, 1, "", "get_tensors_info"], [411, 4, 1, "", "load_quantization_config"], [411, 4, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[412, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[412, 4, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[415, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[415, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[415, 5, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[416, 2, 1, "", "OpActivation"], [416, 2, 1, "", "OpDetails"], [416, 2, 1, "", "OpPattern"], [416, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[416, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[417, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[417, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[419, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[419, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[419, 5, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[420, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[420, 1, 1, "", "create_dir_entry"], [420, 1, 1, "", "create_entry"], [420, 1, 1, "", "create_file_entry"], [420, 1, 1, "", "filter_requested_entries"], [420, 1, 1, "", "get_directory_entries"], [420, 1, 1, "", "get_filter_value"], [420, 1, 1, "", "get_non_hidden_directory_entries"], [420, 1, 1, "", "get_requested_path"], [420, 1, 1, "", "get_setting_value"], [420, 1, 1, "", "is_dataset_or_directory_entry"], [420, 1, 1, "", "is_directory_entry"], [420, 1, 1, "", "is_model_or_directory_entry"], [420, 1, 1, "", "should_show_files"], [420, 1, 1, "", "should_show_only_model_files"], [420, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[422, 0, 0, "-", "attribute"], [423, 0, 0, "-", "collapser"], [424, 0, 0, "-", "edge"], [425, 0, 0, "-", "graph"], [426, 0, 0, "-", "graph_reader"], [428, 0, 0, "-", "node"], [429, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[422, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[423, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[423, 4, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[424, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[424, 5, 1, "", "source"], [424, 5, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[425, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[425, 4, 1, "", "add_edge"], [425, 4, 1, "", "add_node"], [425, 5, 1, "", "edges"], [425, 4, 1, "", "get_node"], [425, 4, 1, "", "get_target_nodes"], [425, 4, 1, "", "highlight_pattern"], [425, 5, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[426, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[426, 4, 1, "", "find_pattern_in_graph"], [426, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[428, 2, 1, "", "GroupNode"], [428, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[430, 0, 0, "-", "onnxrt_reader"], [431, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[430, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[430, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[431, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[431, 4, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[434, 0, 0, "-", "jobs_control_queue"], [435, 0, 0, "-", "jobs_manager"], [436, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[437, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[438, 0, 0, "-", "domain"], [440, 0, 0, "-", "model"], [441, 0, 0, "-", "model_type_getter"], [442, 0, 0, "-", "onnxrt"], [444, 0, 0, "-", "pytorch"], [446, 0, 0, "-", "repository"], [447, 0, 0, "-", "shape"], [449, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[438, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[440, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[440, 5, 1, "", "domain"], [440, 4, 1, "", "ensure_supported_path"], [440, 4, 1, "", "get_framework_name"], [440, 4, 1, "", "get_input_nodes"], [440, 4, 1, "", "get_model_graph"], [440, 4, 1, "", "get_output_nodes"], [440, 4, 1, "", "get_tensors_info"], [440, 4, 1, "", "guard_requirements_installed"], [440, 5, 1, "", "input_shape"], [440, 5, 1, "", "shape_elements_order"], [440, 5, 1, "", "supports_graph"], [440, 4, 1, "", "supports_path"], [440, 5, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[441, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[443, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[443, 2, 1, "", "OnnxrtModel"], [443, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[443, 5, 1, "", "domain"], [443, 5, 1, "", "filtered_input_nodes"], [443, 4, 1, "", "get_framework_name"], [443, 4, 1, "", "get_model_graph"], [443, 4, 1, "", "guard_requirements_installed"], [443, 5, 1, "", "input_shape"], [443, 5, 1, "", "nc_model_instance"], [443, 5, 1, "", "shape_elements_order"], [443, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[445, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[445, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[445, 4, 1, "", "get_framework_name"], [445, 4, 1, "", "guard_requirements_installed"], [445, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[446, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[446, 4, 1, "", "get_framework_from_path"], [446, 4, 1, "", "get_frameworks"], [446, 4, 1, "", "get_model"], [446, 4, 1, "", "get_supported_frameworks"], [446, 4, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[447, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[447, 4, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[448, 0, 0, "-", "frozen_pb"], [450, 0, 0, "-", "keras"], [451, 0, 0, "-", "meta_graph"], [452, 0, 0, "-", "model"], [453, 0, 0, "-", "saved_model"], [454, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[448, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[448, 4, 1, "", "supports_path"], [448, 5, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[450, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[450, 4, 1, "", "get_input_nodes"], [450, 4, 1, "", "get_output_nodes"], [450, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[451, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[451, 4, 1, "", "get_input_nodes"], [451, 4, 1, "", "get_model_graph"], [451, 4, 1, "", "get_output_nodes"], [451, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[452, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[452, 4, 1, "", "get_framework_name"], [452, 4, 1, "", "get_input_nodes"], [452, 4, 1, "", "get_model_graph"], [452, 4, 1, "", "get_output_nodes"], [452, 4, 1, "", "guard_requirements_installed"], [452, 5, 1, "", "input_shape"], [452, 5, 1, "", "nc_model_instance"], [452, 5, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[453, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[453, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[454, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[455, 0, 0, "-", "download_config"], [456, 0, 0, "-", "download_model"], [457, 0, 0, "-", "downloader"], [459, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[455, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[456, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[457, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[457, 4, 1, "", "download"], [457, 4, 1, "", "download_config"], [457, 4, 1, "", "download_file"], [457, 4, 1, "", "download_model"], [457, 4, 1, "", "download_yaml_config"], [457, 4, 1, "", "get_yaml_url"], [457, 4, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[459, 1, 1, "", "check_version"], [459, 1, 1, "", "get_available_models"], [459, 1, 1, "", "get_framework_module_name"], [459, 1, 1, "", "get_installed_frameworks"], [459, 1, 1, "", "list_models"], [459, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[461, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[461, 2, 1, "", "MappingDirection"], [461, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[461, 5, 1, "", "domain_flavour_mappings"], [461, 5, 1, "", "domain_mappings"], [461, 5, 1, "", "framework_mappings"], [461, 4, 1, "", "map_name"], [461, 5, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[467, 2, 1, "", "Optimizations"], [462, 0, 0, "-", "execute_optimization"], [463, 0, 0, "-", "factory"], [465, 0, 0, "-", "graph_optimizer"], [468, 0, 0, "-", "mixed_precision"], [471, 0, 0, "-", "neural_coder_optimization"], [473, 0, 0, "-", "optimization"], [474, 0, 0, "-", "tune"], [477, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[462, 1, 1, "", "check_if_collect_tuning_history"], [462, 1, 1, "", "execute_optimization"], [462, 1, 1, "", "execute_optimization_pytorch_script"], [462, 1, 1, "", "execute_optimization_regular"], [462, 1, 1, "", "parse_logs"], [462, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[463, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[463, 4, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[464, 0, 0, "-", "graph_optimization"], [466, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[464, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[464, 5, 1, "", "configuration_data"], [464, 4, 1, "", "execute"], [464, 4, 1, "", "generate_config"], [464, 5, 1, "", "optimization_script"], [464, 5, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[466, 1, 1, "", "optimize_graph"], [466, 1, 1, "", "optimize_graph_config"], [466, 1, 1, "", "parse_args"], [466, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[469, 0, 0, "-", "mixed_precision"], [470, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[469, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[469, 5, 1, "", "configuration_data"], [469, 4, 1, "", "execute"], [469, 4, 1, "", "generate_config"], [469, 5, 1, "", "optimization_script"], [469, 5, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[470, 1, 1, "", "optimize_graph"], [470, 1, 1, "", "optimize_graph_config"], [470, 1, 1, "", "parse_args"], [470, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[472, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[472, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[473, 2, 1, "", "DataloaderInterface"], [473, 2, 1, "", "Optimization"], [473, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[473, 5, 1, "", "command"], [473, 5, 1, "", "config_filename"], [473, 5, 1, "", "configuration_data"], [473, 4, 1, "", "execute"], [473, 4, 1, "", "generate_config"], [473, 5, 1, "", "optimization_script"], [473, 5, 1, "", "output_model_dir"], [473, 5, 1, "", "output_model_name"], [473, 5, 1, "", "parameters"], [473, 5, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[475, 0, 0, "-", "tune_model"], [476, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[475, 1, 1, "", "parse_args"], [475, 1, 1, "", "set_eager_execution"], [475, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[476, 2, 1, "", "AccuracyCriterion"], [476, 2, 1, "", "Tuning"], [476, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[476, 5, 1, "", "configuration_data"], [476, 4, 1, "", "execute"], [476, 4, 1, "", "generate_config"], [476, 5, 1, "", "optimization_script"], [476, 5, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[477, 2, 1, "", "TuningHistory"], [477, 2, 1, "", "Watcher"], [477, 1, 1, "", "tuning_history"], [477, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[477, 4, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[477, 4, 1, "", "history_file_modification_time"], [477, 4, 1, "", "stop"], [477, 4, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[478, 0, 0, "-", "execute_profiling"], [479, 0, 0, "-", "factory"], [481, 0, 0, "-", "profile_model"], [482, 0, 0, "-", "profiler"], [483, 0, 0, "-", "profiling"], [485, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[478, 1, 1, "", "execute_profiling"], [478, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[479, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[479, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[481, 1, 1, "", "load_profiling_details"], [481, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[482, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[482, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[483, 2, 1, "", "DataloaderInterface"], [483, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[483, 5, 1, "", "config_filename"], [483, 5, 1, "", "config_path"], [483, 4, 1, "", "execute"], [483, 4, 1, "", "generate_config"], [483, 5, 1, "", "profiling_data"], [483, 5, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[484, 0, 0, "-", "factory"], [486, 0, 0, "-", "profiler"], [487, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[484, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[484, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[486, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[486, 4, 1, "", "build_dataloader"], [486, 4, 1, "", "convert_nodes_to_list"], [486, 4, 1, "", "create_tf_config"], [486, 4, 1, "", "get_node_by_name"], [486, 4, 1, "", "initialize_graph"], [486, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[487, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[488, 1, 1, "", "main"], [488, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[490, 0, 0, "-", "consts"], [491, 0, 0, "-", "environment"], [492, 0, 0, "-", "exceptions"], [493, 0, 0, "-", "executor"], [494, 0, 0, "-", "expiring_dict"], [495, 0, 0, "-", "github_info"], [496, 0, 0, "-", "hw_info"], [498, 0, 0, "-", "json_serializer"], [499, 0, 0, "-", "logger"], [500, 0, 0, "-", "parser"], [501, 0, 0, "-", "proc"], [502, 0, 0, "-", "processes"], [503, 0, 0, "-", "singleton"], [504, 0, 0, "-", "templates"], [507, 0, 0, "-", "utils"], [512, 0, 0, "-", "workload"], [518, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[490, 2, 1, "", "DomainFlavours"], [490, 2, 1, "", "Domains"], [490, 2, 1, "", "ExecutionStatus"], [490, 2, 1, "", "Frameworks"], [490, 2, 1, "", "OptimizationTypes"], [490, 2, 1, "", "Precisions"], [490, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[491, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[491, 4, 1, "", "clean_workloads_wip_status"], [491, 4, 1, "", "ensure_workdir_exists_and_writeable"], [491, 4, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[492, 7, 1, "", "AccessDeniedException"], [492, 7, 1, "", "ClientErrorException"], [492, 7, 1, "", "InternalException"], [492, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[493, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[493, 5, 1, "", "additional_log_names"], [493, 4, 1, "", "call"], [493, 4, 1, "", "call_one"], [493, 4, 1, "", "is_multi_commands"], [493, 5, 1, "", "log_name"], [493, 5, 1, "", "process_duration"], [493, 4, 1, "", "refresh_workdir"], [493, 5, 1, "", "request_id"], [493, 5, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[494, 2, 1, "", "ExpiringDict"], [494, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[494, 4, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[495, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[495, 4, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[496, 2, 1, "", "HWInfo"], [496, 1, 1, "", "get_bios_version"], [496, 1, 1, "", "get_distribution"], [496, 1, 1, "", "get_framework_dependency_info"], [496, 1, 1, "", "get_framework_info"], [496, 1, 1, "", "get_kernel_version"], [496, 1, 1, "", "get_number_of_sockets"], [496, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[496, 4, 1, "", "initialize"], [496, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[498, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[498, 4, 1, "", "serialize"], [498, 4, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[499, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[500, 2, 1, "", "AccuracyParser"], [500, 2, 1, "", "BenchmarkParserFactory"], [500, 2, 1, "", "OptimizationParser"], [500, 2, 1, "", "Parser"], [500, 2, 1, "", "PerformanceParser"], [500, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[500, 5, 1, "", "patterns"], [500, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[500, 4, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[500, 5, 1, "", "patterns"], [500, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[500, 5, 1, "", "patterns"], [500, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[500, 5, 1, "", "patterns"], [500, 4, 1, "", "process"], [500, 4, 1, "", "summarize_partial"], [500, 4, 1, "", "summarize_value"], [500, 4, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[500, 5, 1, "", "patterns"], [500, 4, 1, "", "process"], [500, 4, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[501, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[501, 5, 1, "", "info"], [501, 5, 1, "", "info_path"], [501, 5, 1, "", "is_ok"], [501, 5, 1, "", "output"], [501, 5, 1, "", "output_path"], [501, 4, 1, "", "remove_logs"], [501, 4, 1, "", "run"], [501, 5, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[502, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[502, 5, 1, "", "is_ok"], [502, 4, 1, "", "remove_successful_logs"], [502, 4, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[503, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[505, 0, 0, "-", "metric"], [506, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[505, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[505, 5, 1, "", "acc_input_model"], [505, 5, 1, "", "acc_optimized_model"], [505, 5, 1, "", "accuracy"], [505, 4, 1, "", "calculate_throughput"], [505, 4, 1, "", "insert_data"], [505, 5, 1, "", "latency"], [505, 5, 1, "", "optimization_time"], [505, 5, 1, "", "path_optimized_model"], [505, 5, 1, "", "profiling_data"], [505, 5, 1, "", "size_input_model"], [505, 5, 1, "", "size_optimized_model"], [505, 5, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[506, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[506, 4, 1, "", "clean_logs"], [506, 4, 1, "", "clean_status"], [506, 4, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[507, 1, 1, "", "check_module"], [507, 1, 1, "", "deprecated"], [507, 1, 1, "", "determine_ip"], [507, 1, 1, "", "export_to_csv"], [507, 1, 1, "", "filter_transforms"], [507, 1, 1, "", "get_dataset_path"], [507, 1, 1, "", "get_file_extension"], [507, 1, 1, "", "get_framework_from_path"], [507, 1, 1, "", "get_height_width_from_size"], [507, 1, 1, "", "get_metrics_dict"], [507, 1, 1, "", "get_model_zoo_config_path"], [507, 1, 1, "", "get_model_zoo_model_path"], [507, 1, 1, "", "get_module_version"], [507, 1, 1, "", "get_predefined_config_path"], [507, 1, 1, "", "get_shape_from_transforms"], [507, 1, 1, "", "get_size"], [507, 1, 1, "", "is_dataset_file"], [507, 1, 1, "", "is_development_env"], [507, 1, 1, "", "is_hidden"], [507, 1, 1, "", "load_dataloader_config"], [507, 1, 1, "", "load_help_nc_params"], [507, 1, 1, "", "load_metrics_config"], [507, 1, 1, "", "load_model_config"], [507, 1, 1, "", "load_model_wise_params"], [507, 1, 1, "", "load_precisions_config"], [507, 1, 1, "", "load_transforms_config"], [507, 1, 1, "", "load_transforms_filter_config"], [507, 1, 1, "", "normalize_domain"], [507, 1, 1, "", "normalize_framework"], [507, 1, 1, "", "normalize_string"], [507, 1, 1, "", "parse_bool_value"], [507, 1, 1, "", "parse_to_float_list"], [507, 1, 1, "", "parse_to_string_list"], [507, 1, 1, "", "parse_version"], [507, 1, 1, "", "release_tag"], [507, 1, 1, "", "replace_with_values"], [507, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[508, 0, 0, "-", "config"], [509, 0, 0, "-", "dataloader"], [510, 0, 0, "-", "evaluation"], [511, 0, 0, "-", "graph_optimization"], [513, 0, 0, "-", "mixed_precision"], [514, 0, 0, "-", "model"], [515, 0, 0, "-", "pruning"], [516, 0, 0, "-", "quantization"], [517, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[508, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[508, 4, 1, "", "dump"], [508, 4, 1, "", "get_performance_configs"], [508, 4, 1, "", "get_performance_cores_per_instance"], [508, 4, 1, "", "get_performance_num_of_instance"], [508, 4, 1, "", "initialize"], [508, 4, 1, "", "load"], [508, 4, 1, "", "process_transform"], [508, 4, 1, "", "remove_accuracy_metric"], [508, 4, 1, "", "remove_dataloader"], [508, 4, 1, "", "set_accuracy_and_performance_batch_sizes"], [508, 4, 1, "", "set_accuracy_goal"], [508, 4, 1, "", "set_accuracy_metric"], [508, 4, 1, "", "set_evaluation_dataloader"], [508, 4, 1, "", "set_evaluation_dataset_path"], [508, 4, 1, "", "set_inputs"], [508, 4, 1, "", "set_optimization_precision"], [508, 4, 1, "", "set_outputs"], [508, 4, 1, "", "set_performance_cores_per_instance"], [508, 4, 1, "", "set_performance_iterations"], [508, 4, 1, "", "set_performance_num_of_instance"], [508, 4, 1, "", "set_performance_warmup"], [508, 4, 1, "", "set_quantization_approach"], [508, 4, 1, "", "set_quantization_batch_size"], [508, 4, 1, "", "set_quantization_dataloader"], [508, 4, 1, "", "set_quantization_dataset_path"], [508, 4, 1, "", "set_quantization_sampling_size"], [508, 4, 1, "", "set_transform"], [508, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[509, 2, 1, "", "Dataloader"], [509, 2, 1, "", "Dataset"], [509, 2, 1, "", "Filter"], [509, 2, 1, "", "LabelBalance"], [509, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[509, 4, 1, "", "serialize"], [509, 4, 1, "", "set_dataset"], [509, 4, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[509, 4, 1, "", "is_dummy"], [509, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[509, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[510, 2, 1, "", "Accuracy"], [510, 2, 1, "", "Configs"], [510, 2, 1, "", "Evaluation"], [510, 2, 1, "", "Metric"], [510, 2, 1, "", "Performance"], [510, 2, 1, "", "Postprocess"], [510, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[510, 4, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[510, 5, 1, "", "name"], [510, 5, 1, "", "param"], [510, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[511, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[511, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[513, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[513, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[514, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[514, 5, 1, "", "inputs"], [514, 5, 1, "", "outputs"], [514, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[515, 2, 1, "", "AdamOptimizer"], [515, 2, 1, "", "AdamWOptimizer"], [515, 2, 1, "", "Approach"], [515, 2, 1, "", "Criterion"], [515, 2, 1, "", "CrossEntropyLossCriterion"], [515, 2, 1, "", "KnowledgeDistillationLossCriterion"], [515, 2, 1, "", "Optimizer"], [515, 2, 1, "", "Pruning"], [515, 2, 1, "", "SGDOptimizer"], [515, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [515, 2, 1, "", "Train"], [515, 2, 1, "", "WeightCompressionApproach"], [515, 1, 1, "", "parse_dict_value_to_float"], [515, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[515, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[516, 2, 1, "", "Advance"], [516, 2, 1, "", "Calibration"], [516, 2, 1, "", "Quantization"], [516, 2, 1, "", "WiseConfig"], [516, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[517, 2, 1, "", "AccCriterion"], [517, 2, 1, "", "Diagnosis"], [517, 2, 1, "", "ExitPolicy"], [517, 2, 1, "", "MultiObjectives"], [517, 2, 1, "", "Strategy"], [517, 2, 1, "", "Tuning"], [517, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[517, 5, 1, "", "objective"], [517, 5, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[517, 4, 1, "", "set_max_trials"], [517, 4, 1, "", "set_performance_only"], [517, 4, 1, "", "set_random_seed"], [517, 4, 1, "", "set_timeout"], [517, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[518, 1, 1, "", "float_representer"], [518, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[519, 0, 0, "-", "communication"], [520, 0, 0, "-", "configuration"], [521, 0, 0, "-", "exceptions"], [523, 0, 0, "-", "router"], [524, 0, 0, "-", "server"], [527, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[519, 2, 1, "", "Message"], [519, 2, 1, "", "MessageQueue"], [519, 2, 1, "", "Request"], [519, 2, 1, "", "Response"], [519, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[519, 5, 1, "", "data"], [519, 5, 1, "", "status"], [519, 5, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[519, 4, 1, "", "get"], [519, 4, 1, "", "post_error"], [519, 4, 1, "", "post_failure"], [519, 4, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[520, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[520, 4, 1, "", "determine_gui_port"], [520, 4, 1, "", "determine_log_level"], [520, 4, 1, "", "determine_server_port"], [520, 4, 1, "", "determine_url_prefix"], [520, 4, 1, "", "determine_values_from_environment"], [520, 4, 1, "", "dump_token_to_file"], [520, 4, 1, "", "get_command_line_args"], [520, 4, 1, "", "get_url"], [520, 5, 1, "", "global_config_directory"], [520, 4, 1, "", "is_port_taken"], [520, 4, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[521, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[523, 2, 1, "", "DeferredRoutingDefinition"], [523, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [523, 2, 1, "", "RealtimeRoutingDefinition"], [523, 2, 1, "", "Router"], [523, 2, 1, "", "RoutingDefinition"], [523, 1, 1, "", "find_pattern_in_graph"], [523, 1, 1, "", "get_model_graph"], [523, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[523, 4, 1, "", "handle"]], "neural_compressor.ux.web.server": [[524, 1, 1, "", "allow_api_call"], [524, 1, 1, "", "block_iframe"], [524, 1, 1, "", "block_sniffing"], [524, 1, 1, "", "build_parameters"], [524, 1, 1, "", "disable_cache"], [524, 1, 1, "", "get_tls_args"], [524, 1, 1, "", "handle_api_call"], [524, 1, 1, "", "page_not_found"], [524, 1, 1, "", "require_api_token"], [524, 1, 1, "", "root"], [524, 1, 1, "", "run_server"], [524, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[525, 0, 0, "-", "benchmark"], [526, 0, 0, "-", "history_snapshot_parser"], [528, 0, 0, "-", "model"], [529, 0, 0, "-", "optimization"], [530, 0, 0, "-", "profiling"], [531, 0, 0, "-", "request_data_processor"], [532, 0, 0, "-", "response_generator"], [533, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[525, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[526, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[526, 4, 1, "", "extract_accuracy"], [526, 4, 1, "", "extract_performance"], [526, 4, 1, "", "parse_history_item"], [526, 4, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[528, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[528, 4, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[529, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[530, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[530, 4, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[531, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[531, 4, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[532, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[532, 4, 1, "", "add_refresh"], [532, 4, 1, "", "from_exception"], [532, 4, 1, "", "get_status_code_for_exception"], [532, 4, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[533, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[533, 4, 1, "", "get_code_template"], [533, 4, 1, "", "get_config"], [533, 4, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 538], "coven": [0, 538], "code": [0, 2, 538], "conduct": [0, 538], "our": [0, 538], "pledg": [0, 538], "standard": [0, 538], "respons": [0, 538], "scope": [0, 538], "enforc": [0, 538], "attribut": [0, 190, 198, 207, 236, 245, 256, 284, 308, 422, 538], "fx": 1, "overview": 1, "usag": [1, 2, 3, 4, 570, 572], "note": 1, "detail": [1, 536], "common": [1, 10, 215, 216, 217, 218, 219, 220, 221, 222, 547], "problem": 1, "dynam": [1, 2, 545, 566], "quantiz": [1, 4, 6, 27, 40, 67, 295, 332, 516, 535, 543, 545, 565, 566, 567, 574], "static": [1, 566], "awar": [1, 4, 566], "train": [1, 4, 349, 544, 566], "neural": [2, 6, 25, 536, 551, 552, 562, 563, 569], "architectur": [2, 3, 6, 25, 541, 552], "search": [2, 25], "introduct": [2, 7, 536, 542, 543, 544, 548, 549, 552, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 569, 570, 572, 573], "na": [2, 25, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 565], "api": [2, 6, 7, 9, 21, 542, 550, 555, 556, 559, 560, 562, 565], "basic": [2, 334, 572], "1": [2, 536, 544, 547, 550, 553, 574], "python": [2, 6, 29, 555, 565], "yaml": [2, 537, 539, 543, 544, 548, 573], "2": [2, 21, 536, 547, 550, 553, 574], "onli": 2, "advanc": 2, "custom": [2, 536, 555, 559, 572], "exampl": [2, 3, 4, 7, 383, 537, 542, 543, 544, 546, 549, 556, 557, 559, 560, 562, 563, 566, 570, 574], "ptq": [3, 574], "design": [3, 4, 541, 570, 572], "pytorch": [3, 69, 358, 444, 445, 535, 540, 555, 567, 570, 571, 574], "mobilenetv2": 3, "model": [3, 6, 19, 219, 307, 308, 309, 310, 311, 312, 313, 314, 315, 387, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 514, 528, 536, 557, 558, 572, 574], "helper": [3, 344], "function": [3, 31, 35, 36, 43, 62, 68, 69, 91, 92, 94, 136, 165, 167, 171, 172, 174, 176, 178, 188, 196, 198, 202, 205, 206, 207, 210, 212, 213, 214, 215, 217, 220, 222, 226, 234, 236, 240, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 272, 276, 277, 281, 286, 290, 291, 292, 294, 298, 299, 301, 302, 303, 304, 305, 310, 314, 316, 317, 320, 326, 327, 328, 329, 330, 332, 335, 343, 349, 352, 358, 359, 361, 362, 371, 372, 373, 375, 379, 381, 382, 384, 386, 389, 390, 394, 397, 398, 399, 410, 420, 437, 441, 443, 454, 455, 456, 459, 462, 466, 470, 472, 475, 477, 478, 481, 487, 488, 496, 499, 507, 515, 518, 519, 523, 524, 544], "secur": [5, 536, 544], "polici": 5, "report": 5, "vulner": 5, "intel": [6, 536, 551, 552, 574], "compressor": [6, 536, 551, 552, 569], "instal": [6, 536, 544, 553], "prerequisit": [6, 553], "linux": [6, 553], "get": [6, 7, 335, 542, 548, 555, 556, 559, 560, 562, 565, 566, 573], "start": [6, 7, 536, 542, 548, 555, 556, 559, 560, 562, 565, 566, 573], "jupyterlab": 6, "extens": [6, 574], "gui": 6, "system": [6, 536, 561], "requir": 6, "valid": [6, 574], "hardwar": [6, 574], "environ": [6, 491], "support": [6, 7, 535, 538, 540, 542, 544, 548, 552, 555, 556, 557, 559, 560, 562, 565, 566, 571, 573], "cpu": [6, 574], "base": 6, "64": 6, "compat": 6, "processor": 6, "gpu": 6, "built": [6, 540, 550, 555], "": 6, "xe": 6, "onnx": [6, 169, 535, 574], "multipl": [6, 559, 574], "vendor": 6, "through": [6, 574], "runtim": [6, 535, 574], "softwar": 6, "document": [6, 551], "select": 6, "public": [6, 564], "event": [6, 564], "addit": 6, "content": [6, 12, 25, 31, 35, 36, 37, 38, 41, 43, 44, 45, 58, 62, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 350, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 428, 430, 431, 437, 438, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536], "hire": 6, "adaptor": [7, 8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "matrix": [7, 535, 542, 548, 552, 555, 556, 557, 559, 560, 562, 565, 566, 573], "work": [7, 566], "flow": [7, 566], "queri": [7, 70], "background": 7, "ad": 7, "new": [7, 536, 572], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 12, 25, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 167, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 301, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 415, 416, 417, 419, 422, 423, 424, 425, 426, 428, 430, 431, 438, 440, 443, 445, 446, 447, 448, 450, 451, 452, 453, 457, 461, 463, 464, 467, 469, 473, 476, 477, 479, 482, 483, 484, 486, 490, 491, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 523, 525, 526, 528, 529, 530, 531, 532, 533], "benchmark": [11, 176, 214, 360, 361, 362, 363, 377, 525, 536, 537, 565], "bleu": [12, 257, 298], "modul": [12, 31, 35, 36, 38, 41, 43, 44, 45, 62, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 171, 172, 173, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 283, 286, 287, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 315, 316, 317, 320, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 349, 350, 352, 354, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 428, 430, 431, 437, 438, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533], "criterion": [13, 215], "data": [14, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "dataload": [15, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 216, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 379, 509, 537, 539], "basedataload": 15, "dataset": [16, 196, 197, 198, 199, 200, 201, 202, 203, 234, 235, 236, 237, 238, 239, 240, 241, 380, 536, 540, 550], "transform": [17, 208, 209, 210, 211, 212, 213, 246, 247, 248, 249, 394, 550, 571], "metric": [18, 218, 257, 258, 259, 260, 261, 262, 263, 264, 298, 299, 300, 301, 302, 303, 304, 305, 386, 505, 550, 555], "optim": [20, 220, 388, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 529, 536, 549, 560], "compon": [21, 223, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "experiement": 21, "deprec": 21, "0": [21, 574], "distil": [22, 250, 542, 543, 565, 574], "mixedprecis": 23, "modelconvers": 24, "packag": [25, 37, 58, 174, 190, 202, 206, 207, 210, 217, 228, 240, 244, 245, 247, 251, 256, 263, 279, 284, 285, 297, 304, 308, 323, 339, 353, 363, 403, 408, 467], "prune": [26, 283, 293, 331, 515, 562, 563, 565, 574], "schedul": [28, 294, 296, 329, 562, 563], "strategi": [30, 183, 184, 185, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 569, 572], "6ece06672ed3_v1_14": 31, "6f0d0f71d92e_v1_13": 32, "9e89549a08c8_v1_11": 33, "block_mask": 34, "env": 35, "neural_compressor": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534], "kera": [38, 450], "keras_util": [39, 40], "mxnet": [41, 535, 540, 555, 571, 574], "mxnet_util": [42, 43], "util": [43, 68, 165, 171, 254, 330, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 410, 454, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "onnxrt": [44, 442, 443, 540, 555, 571], "ox_util": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "calibr": 45, "oper": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "activ": 47, "argmax": 48, "attent": 49, "binary_op": 50, "concat": 51, "conv": 52, "direct_q8": 53, "embed_layernorm": 54, "gather": 55, "gavgpool": 56, "gemm": 57, "lstm": 59, "matmul": 60, "maxpool": 61, "op": 62, "pad": 63, "pool": 64, "resiz": 65, "split": 66, "tensorflow": [71, 448, 449, 450, 451, 452, 453, 454, 535, 540, 555, 567, 570, 571, 574], "tf_util": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], "graph_convert": 72, "graph_converter_without_calib": 73, "graph_rewrit": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "bf16": [74, 75], "bf16_convert": [74, 166], "gener": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "convert_add_to_biasadd": 76, "convert_layout": 77, "convert_leakyrelu": 78, "convert_nan_to_random": 79, "convert_placeholder_to_const": 80, "dequantize_cast_optim": 81, "dilated_contract": 82, "dummy_biasadd": 83, "expanddims_optim": 84, "fetch_weight_from_reshap": 85, "fold_batch_norm": 86, "fold_const": 87, "fuse_biasadd_add": 88, "fuse_column_wise_mul": 89, "fuse_conv_with_math": 90, "fuse_decomposed_bn": 91, "fuse_decomposed_in": 92, "fuse_gelu": 93, "fuse_layer_norm": 94, "fuse_pad_with_conv": 95, "fuse_pad_with_fp32_conv": 96, "fuse_reshape_transpos": 97, "graph_cse_optim": 98, "grappler_pass": 99, "insert_print_nod": 101, "move_squeeze_after_relu": 102, "pre_optim": 103, "remove_training_nod": 104, "rename_batch_norm": 105, "split_shared_input": 106, "strip_equivalent_nod": 107, "strip_unused_nod": 108, "switch_optim": 109, "update_ent": 110, "graph_bas": 111, "int8": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 574], "freeze_fake_qu": 113, "freeze_valu": 114, "freeze_value_without_calib": 115, "fuse_conv_redundant_dequant": 116, "fuse_conv_requant": 117, "fuse_matmul_redundant_dequant": 118, "fuse_matmul_requant": 119, "meta_op_optim": 121, "post_hostconst_convert": 122, "post_quantized_op_cs": 123, "rnn_convert": 124, "scale_propag": 125, "qdq": [126, 127, 128, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 574], "insert_qdq_pattern": 127, "merge_duplicated_qdq": 128, "share_qdq_y_pattern": 129, "graph_util": 130, "quantize_graph": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "qat": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 574], "fake_quant": 133, "quantize_config": 135, "quantize_help": 136, "quantize_lay": [137, 138, 139, 140, 141], "optimize_lay": 138, "quantize_layer_add": 139, "quantize_layer_bas": 140, "quantize_layer_bn": 141, "quantize_wrapp": 142, "fuse_qdq_bn": 143, "fuse_qdq_concatv2": 144, "fuse_qdq_conv": 145, "fuse_qdq_deconv": 146, "fuse_qdq_in": 147, "fuse_qdq_matmul": 148, "fuse_qdq_pool": 149, "optimize_qdq": 151, "quantize_graph_bas": 152, "quantize_graph_bn": 153, "quantize_graph_concatv2": 154, "quantize_graph_conv": 155, "quantize_graph_for_intel_cpu": 156, "quantize_graph_matmul": 157, "quantize_graph_pool": 158, "quantize_graph_common": 159, "transform_graph": [160, 161, 162, 163, 164], "bias_correct": 160, "graph_transform_bas": 161, "insert_log": 163, "rerange_quantized_concat": 164, "torch_util": [166, 167, 168, 169, 170, 171, 222], "hawq_metr": 167, "symbolic_trac": 170, "algorithm": [172, 173, 174, 175], "fast_bias_correct": 173, "weight_correct": 175, "conf": [177, 178, 179, 180], "config": [177, 181, 508, 537, 539, 559], "dotdict": 178, "pythonic_config": 180, "contrib": [182, 183, 184, 185], "sigopt": [184, 569, 572], "tpe": [185, 572], "base_dataload": [186, 224], "default_dataload": [188, 226], "fetcher": [189, 227], "submodul": [190, 202, 206, 210, 217, 228, 240, 244, 247, 251, 256, 263, 273, 275, 279, 285, 288, 297, 304, 318, 353, 363, 367, 374, 385, 403, 408, 413, 414, 418, 421, 427, 429, 432, 433, 439, 442, 444, 449, 458, 460, 465, 467, 468, 471, 474, 480, 485, 489, 497, 504, 512, 522, 527], "mxnet_dataload": [191, 229], "onnxrt_dataload": [192, 230], "pytorch_dataload": [193, 231], "sampler": [194, 232], "tensorflow_dataload": [195, 233], "bert_dataset": [196, 234], "coco_dataset": [197, 235], "dummy_dataset": [199, 237], "dummy_dataset_v2": [200, 238], "imagenet_dataset": [201, 239], "style_transfer_dataset": [203, 241], "filter": [204, 205, 206, 242, 243, 244], "coco_filt": [204, 242], "subpackag": [207, 245, 256, 273, 274, 279, 284, 297, 408, 413, 427, 432, 439, 467, 480, 489, 497, 522], "coco_transform": 208, "imagenet_transform": [209, 246], "postprocess": [211, 221], "token": [212, 248], "experiment": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "export": [251, 252, 253, 254], "qlinear2qdq": 252, "torch2onnx": 253, "graph_optim": [255, 464, 465, 466, 511], "bleu_util": [258, 299], "coco_label_map": [259, 300], "coco_tool": [260, 301], "evaluate_squad": [261, 302], "f1": [262, 303], "mixed_precis": [265, 468, 469, 470, 513], "model_convers": 266, "basic_na": 267, "dyna": 268, "dynast": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "dynas_manag": 269, "dynas_predictor": 270, "dynas_search": 271, "dynas_util": 272, "supernetwork": [274, 275, 276, 277, 278], "machine_transl": [275, 276, 277, 278], "modules_supernetwork": 276, "transformer_interfac": 277, "transformer_supernetwork": 278, "nas_util": 281, "search_algorithm": 282, "pruning_recip": [284, 285, 286, 287], "pattern": [285, 286, 287, 290, 320, 562, 563], "tile_pattern": 287, "pytorch_prun": [288, 289, 290, 291, 292, 293, 294], "logger": [289, 319, 356, 499], "prune_util": 291, "pruner": [292, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330], "mix_precis": 306, "base_model": 307, "keras_model": 309, "mxnet_model": 311, "nets_factori": 312, "onnx_model": 313, "tensorflow_model": 314, "torch_model": 315, "object": [316, 559], "criteria": [317, 562, 563], "pruner_legaci": [321, 322, 323, 324, 325, 326], "gradient_sensit": 321, "group_lasso": 322, "magnitud": 324, "pattern_lock": 325, "reg": 328, "auto_mixed_precis": 333, "bayesian": [335, 572], "target": 335, "valu": 335, "param": 335, "conserv": 336, "exhaust": [337, 572], "hawq_v2": 338, "mse": [340, 572], "mse_v2": [341, 572], "random": [342, 572], "tuning_sampl": 346, "tuning_spac": 347, "tuning_struct": 348, "collect_layer_histogram": 350, "constant": 351, "create_obj_from_config": 352, "kl_diverg": 354, "load_huggingfac": 355, "option": [357, 536, 544, 553], "ux": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "benchmark_model": 361, "execute_benchmark": 362, "config_gener": [364, 365, 366, 367, 368, 369, 370], "benchmark_config_gener": 364, "graph_optimization_config_gener": 366, "mixed_precision_config_gener": 368, "profiling_config_gener": 369, "quantization_config_gener": 370, "configuration_wizard": [371, 372, 373, 374, 375], "configuration_pars": 371, "get_boundary_nod": 372, "get_configur": 373, "params_feed": 375, "db_manag": [376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "db_model": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "benchmark_result": 378, "domain": [381, 438], "domain_flavour": 382, "framework": [384, 548, 557, 565], "optimization_typ": 389, "precis": [390, 549, 556, 567], "profil": [391, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 530, 536], "profiling_result": 392, "project": [393, 536], "tuning_detail": 395, "tuning_histori": [396, 477], "db_oper": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407], "benchmark_api_interfac": 397, "dataset_api_interfac": 398, "diagnosis_api_interfac": 400, "dictionaries_api_interfac": 401, "examples_api_interfac": 402, "model_api_interfac": 404, "optimization_api_interfac": 405, "profiling_api_interfac": 406, "project_api_interfac": 407, "params_interfac": 409, "diagnosi": [411, 412, 413, 414, 415, 416, 417, 418, 419, 536], "factori": [412, 463, 479, 484], "onnx_diagnosi": [414, 415], "onnxrt_diagnosi": 415, "op_detail": 416, "op_entri": 417, "tensorflow_diagnosi": [418, 419], "file_brows": [420, 421], "graph": [422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 536, 549], "collaps": 423, "edg": 424, "graph_read": 426, "node": 428, "reader": [429, 430, 431], "onnxrt_read": 430, "tensorflow_read": 431, "jobs_manag": [433, 434, 435, 436], "jobs_control_queu": 434, "request": [436, 538], "manage_workspac": 437, "model_type_gett": 441, "repositori": 446, "shape": 447, "frozen_pb": 448, "meta_graph": 451, "saved_model": 453, "model_zoo": [455, 456, 457, 458, 459], "download_config": 455, "download_model": 456, "download": 457, "list_model": 459, "names_mapp": [460, 461], "execute_optim": 462, "optimize_model": [466, 470, 472], "neural_coder_optim": [471, 472], "tune": [474, 475, 476, 517, 549, 566, 572], "tune_model": 475, "execute_profil": 478, "profile_model": 481, "tensorflow_profil": [484, 485, 486, 487], "inc_bench": 488, "const": 490, "except": [492, 521], "executor": 493, "expiring_dict": 494, "github_info": 495, "hw_info": 496, "json_seri": 498, "parser": 500, "proc": 501, "process": 502, "singleton": 503, "templat": [504, 505, 506, 538], "workdir": 506, "workload": [508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 533], "evalu": [510, 537, 544], "yaml_util": 518, "web": [519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "commun": 519, "configur": [520, 544, 548, 561, 565, 569, 572, 573], "router": 523, "server": 524, "servic": [525, 526, 527, 528, 529, 530, 531, 532, 533], "history_snapshot_pars": 526, "request_data_processor": 531, "response_gener": 532, "version": 534, "ipex": 535, "refer": [535, 563], "bench": 536, "tabl": 536, "from": [536, 553], "binari": [536, 553], "sourc": [536, 553], "home": 536, "screen": 536, "creat": [536, 539], "predefin": 536, "displai": 536, "list": [536, 540, 571], "remov": 536, "develop": 536, "tab": 536, "wizard": 536, "edit": 536, "entri": 536, "inform": [536, 554], "file": [537, 539, 548, 573], "us": [537, 539, 549, 558], "user": [537, 539, 540, 543, 544, 550, 565, 573], "specif": [537, 539, 540, 572], "run": 537, "contribut": 538, "guidelin": 538, "pull": 538, "checklist": 538, "how": [539, 549, 558], "workflow": 541, "knowledg": [542, 574], "intermedi": 542, "layer": 542, "self": 542, "defin": [543, 544], "distribut": 544, "infer": 544, "horovod": 544, "pure": 544, "option2": 544, "horovodrun": 544, "follow": 544, "ar": 544, "frequent": 547, "ask": 547, "question": 547, "build": [547, 555], "issu": [547, 568], "3": [547, 553], "featur": [548, 552, 565, 566, 573], "fp32": 549, "auto": [549, 567], "mix": [549, 556, 567], "default": 549, "incompat": [550, 568], "chang": [550, 568], "between": 550, "v1": 550, "face": 550, "section": 551, "infrastructur": 552, "ai": 553, "kit": 553, "window": 553, "legal": 554, "licens": 554, "citat": 554, "trademark": 554, "singl": [555, 559], "multi": [555, 560], "convers": 558, "orchestr": 560, "One": 560, "shot": 560, "network": [562, 563], "type": 563, "regular": 563, "full": 564, "49": 564, "2022": 564, "31": 564, "2021": 564, "14": 564, "2018": 564, "2020": 564, "4": 564, "style": 565, "access": 565, "fundament": 566, "approach": 566, "post": 566, "accuraci": 566, "turn": 567, "ON": 567, "dure": 567, "releas": 568, "known": 568, "prepar": 569, "perform": 569, "benefit": 569, "comparison": 569, "differ": 569, "tensorboard": 570, "part": 572, "relat": 572, "mlperf": 574, "10": 574, "torch": 574, "12": 574, "mode": 574, "11": 574, "7": 574}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [538, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [538, "our-pledge"]], "Our Standards": [[0, "our-standards"], [538, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [538, "our-responsibilities"]], "Scope": [[0, "scope"], [538, "scope"]], "Enforcement": [[0, "enforcement"], [538, "enforcement"]], "Attribution": [[0, "attribution"], [538, "attribution"]], "FX": [[1, "fx"]], "Overview": [[1, "overview"]], "Usage": [[1, "usage"], [4, "usage"], [570, "usage"], [570, "id2"], [572, "usage"], [572, "id2"], [572, "id4"], [572, "id6"], [572, "id8"], [572, "id10"], [572, "id12"], [572, "id14"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [545, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Introduction": [[2, "introduction"], [7, "introduction"], [536, "introduction"], [542, "introduction"], [543, "introduction"], [544, "introduction"], [548, "introduction"], [549, "introduction"], [552, "introduction"], [555, "introduction"], [556, "introduction"], [557, "introduction"], [558, "introduction"], [559, "introduction"], [560, "introduction"], [562, "introduction"], [563, "introduction"], [565, "introduction"], [570, "introduction"], [572, "introduction"], [573, "introduction"]], "NAS API": [[2, "nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "Examples": [[2, "examples"], [4, "examples"], [537, "examples"], [542, "examples"], [543, "examples"], [546, "examples"], [549, "examples"], [556, "examples"], [557, "examples"], [560, "examples"], [562, "examples"], [566, "examples"], [570, "examples"], [570, "id3"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [541, "design"], [570, "design"], [570, "id1"], [572, "design"], [572, "id1"], [572, "id3"], [572, "id5"], [572, "id7"], [572, "id9"], [572, "id11"], [572, "id13"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [559, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Security Policy": [[5, "security-policy"]], "Report a Vulnerability": [[5, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[6, "intel-neural-compressor"]], "Installation": [[6, "installation"], [553, "installation"]], "Prerequisites": [[6, "prerequisites"], [553, "prerequisites"], [553, "id1"]], "Install on Linux": [[6, "install-on-linux"]], "Getting Started": [[6, "getting-started"]], "Quantization with Python API": [[6, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[6, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[6, "quantization-with-gui"]], "System Requirements": [[6, "system-requirements"]], "Validated Hardware Environment": [[6, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[6, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[6, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[6, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[6, "validated-software-environment"]], "Validated Models": [[6, "validated-models"], [574, "validated-models"]], "Documentation": [[6, "documentation"]], "Selected Publications/Events": [[6, "selected-publications-events"]], "Additional Content": [[6, "additional-content"]], "Hiring": [[6, "hiring"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [566, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "APIs": [[9, "apis"]], "Common": [[10, "common"]], "Benchmark": [[11, "benchmark"], [565, "benchmark"]], "BLEU": [[12, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[12, "module-contents"], [31, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [41, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [62, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [133, "module-contents"], [135, "module-contents"], [136, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [320, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [354, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [430, "module-contents"], [431, "module-contents"], [437, "module-contents"], [438, "module-contents"], [440, "module-contents"], [441, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"]], "Classes": [[12, "classes"], [25, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [133, "classes"], [135, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [260, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [276, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [290, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [301, "classes"], [304, "classes"], [305, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [320, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [349, "classes"], [350, "classes"], [353, "classes"], [354, "classes"], [359, "classes"], [360, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [419, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [428, "classes"], [430, "classes"], [431, "classes"], [438, "classes"], [440, "classes"], [443, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [457, "classes"], [461, "classes"], [463, "classes"], [464, "classes"], [467, "classes"], [469, "classes"], [473, "classes"], [476, "classes"], [477, "classes"], [479, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [486, "classes"], [490, "classes"], [491, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [519, "classes"], [520, "classes"], [523, "classes"], [525, "classes"], [526, "classes"], [528, "classes"], [529, "classes"], [530, "classes"], [531, "classes"], [532, "classes"], [533, "classes"]], "Criterion": [[13, "criterion"]], "Data": [[14, "data"]], "Dataloader": [[15, "dataloader"]], "BaseDataLoader": [[15, "basedataloader"]], "dataloaders": [[15, "dataloaders"]], "Datasets": [[16, "datasets"]], "Transforms": [[17, "transforms"]], "Metric": [[18, "metric"]], "Model": [[19, "model"], [557, "model"]], "Optimizer": [[20, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[21, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[22, "distillation"], [542, "distillation"], [565, "distillation"]], "MixedPrecision": [[23, "mixedprecision"]], "ModelConversion": [[24, "modelconversion"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [37, "package-contents"], [58, "package-contents"], [174, "package-contents"], [190, "package-contents"], [202, "package-contents"], [206, "package-contents"], [207, "package-contents"], [210, "package-contents"], [217, "package-contents"], [228, "package-contents"], [240, "package-contents"], [244, "package-contents"], [245, "package-contents"], [247, "package-contents"], [251, "package-contents"], [256, "package-contents"], [263, "package-contents"], [279, "package-contents"], [284, "package-contents"], [285, "package-contents"], [297, "package-contents"], [304, "package-contents"], [308, "package-contents"], [323, "package-contents"], [339, "package-contents"], [353, "package-contents"], [363, "package-contents"], [403, "package-contents"], [408, "package-contents"], [467, "package-contents"]], "Pruning": [[26, "pruning"], [562, "pruning"], [565, "pruning"]], "Quantization": [[27, "quantization"], [565, "quantization"], [566, "quantization"]], "Scheduler": [[28, "scheduler"]], "Pythonic": [[29, "pythonic"]], "Strategy": [[30, "strategy"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "Functions": [[31, "functions"], [35, "functions"], [36, "functions"], [43, "functions"], [62, "functions"], [68, "functions"], [69, "functions"], [91, "functions"], [92, "functions"], [94, "functions"], [136, "functions"], [165, "functions"], [167, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [178, "functions"], [188, "functions"], [196, "functions"], [198, "functions"], [202, "functions"], [205, "functions"], [206, "functions"], [207, "functions"], [210, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [220, "functions"], [222, "functions"], [226, "functions"], [234, "functions"], [236, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [257, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [272, "functions"], [276, "functions"], [277, "functions"], [281, "functions"], [286, "functions"], [290, "functions"], [291, "functions"], [292, "functions"], [294, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [310, "functions"], [314, "functions"], [316, "functions"], [317, "functions"], [320, "functions"], [326, "functions"], [327, "functions"], [328, "functions"], [329, "functions"], [330, "functions"], [332, "functions"], [335, "functions"], [343, "functions"], [349, "functions"], [352, "functions"], [358, "functions"], [359, "functions"], [361, "functions"], [362, "functions"], [371, "functions"], [372, "functions"], [373, "functions"], [375, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [384, "functions"], [386, "functions"], [389, "functions"], [390, "functions"], [394, "functions"], [397, "functions"], [398, "functions"], [399, "functions"], [410, "functions"], [420, "functions"], [437, "functions"], [441, "functions"], [443, "functions"], [454, "functions"], [455, "functions"], [456, "functions"], [459, "functions"], [462, "functions"], [466, "functions"], [470, "functions"], [472, "functions"], [475, "functions"], [477, "functions"], [478, "functions"], [481, "functions"], [487, "functions"], [488, "functions"], [496, "functions"], [499, "functions"], [507, "functions"], [515, "functions"], [518, "functions"], [519, "functions"], [523, "functions"], [524, "functions"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.keras": [[38, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[39, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[40, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[41, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[42, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[44, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[46, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[47, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[49, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[51, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[52, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[58, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[65, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[66, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[67, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[68, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[69, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[70, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[71, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[131, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[165, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[168, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[169, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[175, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[176, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "Submodules": [[190, "submodules"], [202, "submodules"], [206, "submodules"], [210, "submodules"], [217, "submodules"], [228, "submodules"], [240, "submodules"], [244, "submodules"], [247, "submodules"], [251, "submodules"], [256, "submodules"], [263, "submodules"], [273, "submodules"], [275, "submodules"], [279, "submodules"], [285, "submodules"], [288, "submodules"], [297, "submodules"], [304, "submodules"], [318, "submodules"], [353, "submodules"], [363, "submodules"], [367, "submodules"], [374, "submodules"], [385, "submodules"], [403, "submodules"], [408, "submodules"], [413, "submodules"], [414, "submodules"], [418, "submodules"], [421, "submodules"], [427, "submodules"], [429, "submodules"], [432, "submodules"], [433, "submodules"], [439, "submodules"], [442, "submodules"], [444, "submodules"], [449, "submodules"], [458, "submodules"], [460, "submodules"], [465, "submodules"], [467, "submodules"], [468, "submodules"], [471, "submodules"], [474, "submodules"], [480, "submodules"], [485, "submodules"], [489, "submodules"], [497, "submodules"], [504, "submodules"], [512, "submodules"], [522, "submodules"], [527, "submodules"]], "Attributes": [[190, "attributes"], [198, "attributes"], [207, "attributes"], [236, "attributes"], [245, "attributes"], [256, "attributes"], [284, "attributes"], [308, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "Subpackages": [[207, "subpackages"], [245, "subpackages"], [256, "subpackages"], [273, "subpackages"], [274, "subpackages"], [279, "subpackages"], [284, "subpackages"], [297, "subpackages"], [408, "subpackages"], [413, "subpackages"], [427, "subpackages"], [432, "subpackages"], [439, "subpackages"], [467, "subpackages"], [480, "subpackages"], [489, "subpackages"], [497, "subpackages"], [522, "subpackages"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[253, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[254, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[257, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[269, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[273, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[274, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[275, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[283, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[284, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[289, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[295, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[296, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[297, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[298, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[299, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[300, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[301, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[302, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[303, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[304, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[305, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[306, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[307, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[308, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[309, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[310, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[311, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[312, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[313, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[314, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[315, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[316, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[317, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[318, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[319, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[320, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[321, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[322, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[323, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[324, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[325, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[326, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[327, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.regs": [[328, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[329, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[330, "module-neural_compressor.pruner.utils"]], "neural_compressor.pruning": [[331, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[332, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[333, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[334, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[335, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[335, "get-the-target-value-of-params"]], "neural_compressor.strategy.conservative": [[336, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[337, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[338, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[339, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[340, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[341, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[342, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[343, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.helper": [[344, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[345, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[346, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[347, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[348, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[349, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[350, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[351, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[352, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[353, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[354, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[355, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[356, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[357, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[358, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[359, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[360, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[361, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[362, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[363, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[364, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[365, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[366, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[367, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[371, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[372, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[373, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[374, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[375, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[376, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[377, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[379, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[380, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[381, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[382, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[383, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[384, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[385, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[386, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[387, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[388, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[389, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[390, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[391, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[392, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[393, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[394, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[395, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[396, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[397, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[398, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[399, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[400, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[401, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[403, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[408, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[409, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[410, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[411, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[412, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[413, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[414, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[415, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[416, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[417, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[420, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[421, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[422, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[423, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[424, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[425, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[426, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[427, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[428, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[429, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[430, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[431, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[432, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[433, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[434, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[435, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[436, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[437, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[438, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[439, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[440, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[441, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[442, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[443, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[444, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[445, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[446, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[447, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[448, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[449, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[450, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[451, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[452, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[453, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[454, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[455, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[456, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[457, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[458, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[459, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[460, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[461, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[462, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[463, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[464, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[465, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[466, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[467, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[468, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[469, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[470, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[471, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[472, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[473, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[474, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[475, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[476, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[477, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[478, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[479, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[480, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[481, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[482, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[483, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[484, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[485, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[486, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[487, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[488, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[489, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[490, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[491, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[492, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[493, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[494, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[495, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[496, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[497, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[498, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[499, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[500, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[501, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[502, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[503, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[504, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[505, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[506, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[507, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[508, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[509, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[510, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[511, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[512, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[513, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[514, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[515, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[516, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[517, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[518, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[519, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[520, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[521, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[522, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[523, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[524, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[525, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[526, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[527, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[528, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[529, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[530, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[531, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[532, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[533, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[534, "module-neural_compressor.version"]], "Quantization Support Matrix": [[535, "quantization-support-matrix"]], "TensorFlow": [[535, "tensorflow"], [540, "tensorflow"], [555, "tensorflow"], [571, "tensorflow"]], "PyTorch": [[535, "pytorch"], [540, "pytorch"], [555, "pytorch"], [567, "pytorch"]], "PyTorch IPEX": [[535, "pytorch-ipex"]], "MXNet": [[535, "mxnet"], [540, "mxnet"], [555, "mxnet"], [571, "mxnet"]], "ONNX Runtime": [[535, "onnx-runtime"]], "Reference": [[535, "reference"], [563, "reference"]], "Intel\u00ae Neural Compressor Bench": [[536, "intel-neural-compressor-bench"]], "Table of Contents": [[536, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[536, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[536, "option-1-install-from-binary"], [553, "option-1-install-from-binary"], [553, "id2"]], "Option 2 Install from source": [[536, "option-2-install-from-source"], [553, "option-2-install-from-source"], [553, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[536, "start-the-intel-neural-compressor-bench"]], "Home screen": [[536, "home-screen"]], "Create new project": [[536, "create-new-project"]], "Predefined model": [[536, "predefined-model"]], "Custom model": [[536, "custom-model"]], "Display model graph": [[536, "display-model-graph"]], "Project list": [[536, "project-list"]], "Remove project": [[536, "remove-project"]], "Develop the project": [[536, "develop-the-project"]], "Optimization tab": [[536, "optimization-tab"]], "Optimization table": [[536, "optimization-table"]], "Optimization wizard": [[536, "optimization-wizard"]], "Editing optimization entries": [[536, "editing-optimization-entries"]], "Optimization details": [[536, "optimization-details"]], "Benchmark tab": [[536, "benchmark-tab"]], "Benchmark table": [[536, "benchmark-table"]], "Benchmark wizard": [[536, "benchmark-wizard"]], "Editing benchmark entries": [[536, "editing-benchmark-entries"]], "Benchmark details": [[536, "benchmark-details"]], "Profiling tab": [[536, "profiling-tab"]], "Profiling table": [[536, "profiling-table"]], "Profiling wizard": [[536, "profiling-wizard"]], "Editing profiling entries": [[536, "editing-profiling-entries"]], "Profiling details": [[536, "profiling-details"]], "Diagnosis tab": [[536, "diagnosis-tab"]], "Dataset tab": [[536, "dataset-tab"]], "Dataset list": [[536, "dataset-list"]], "Dataset wizard": [[536, "dataset-wizard"]], "Dataset details": [[536, "dataset-details"]], "Custom dataset": [[536, "custom-dataset"]], "Project information": [[536, "project-information"]], "System information": [[536, "system-information"]], "Security": [[536, "security"]], "Benchmarking": [[537, "benchmarking"]], "Config evaluation filed in a yaml file": [[537, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[537, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[538, "contribution-guidelines"]], "Pull Request Checklist": [[538, "pull-request-checklist"]], "Pull Request Template": [[538, "pull-request-template"]], "Support": [[538, "support"]], "DataLoader": [[539, "dataloader"]], "How to use it": [[539, "how-to-use-it"], [549, "how-to-use-it"], [558, "how-to-use-it"]], "Config dataloader in a yaml file": [[539, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[539, "create-a-user-specific-dataloader"]], "Dataset": [[540, "dataset"]], "Built-in dataset support list": [[540, "built-in-dataset-support-list"]], "ONNXRT": [[540, "onnxrt"], [555, "onnxrt"], [571, "onnxrt"]], "User-specific dataset": [[540, "user-specific-dataset"]], "Architecture": [[541, "architecture"], [552, "architecture"]], "Workflow": [[541, "workflow"]], "Knowledge Distillation": [[542, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[542, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[542, "self-distillation"]], "Distillation Support Matrix": [[542, "distillation-support-matrix"]], "Get Started with Distillation API": [[542, "get-started-with-distillation-api"]], "Distillation for Quantization": [[543, "distillation-for-quantization"]], "User-defined yaml": [[543, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[544, "distributed-training-and-inference-evaluation"]], "horovod installation": [[544, "horovod-installation"]], "Distributed training and inference (evaluation)": [[544, "id1"]], "Option 1: pure yaml configuration": [[544, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[544, "option2-user-defined-training-function"]], "horovodrun": [[544, "horovodrun"]], "security": [[544, "security"]], "Following examples are supported": [[544, "following-examples-are-supported"]], "Frequently Asked Questions": [[547, "frequently-asked-questions"]], "Common Build Issues": [[547, "common-build-issues"]], "Issue 1:": [[547, "issue-1"]], "Issue 2:": [[547, "issue-2"]], "Issue 3:": [[547, "issue-3"]], "Framework YAML Configuration Files": [[548, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[548, "supported-feature-matrix"], [552, "supported-feature-matrix"], [565, "supported-feature-matrix"], [566, "supported-feature-matrix"], [573, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[548, "get-started-with-framework-yaml-files"]], "Graph Optimization": [[549, "graph-optimization"]], "FP32 Optimization": [[549, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[549, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[549, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[549, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[549, "id1"]], "Incompatible changes between v1.2 and v1.1": [[550, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[550, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[550, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[551, "intel-neural-compressor-documentation"]], "Sections": [[551, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[552, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[553, "linux-installation"]], "Option 3 Install from AI Kit": [[553, "option-3-install-from-ai-kit"]], "Windows Installation": [[553, "windows-installation"]], "Legal Information": [[554, "legal-information"]], "License": [[554, "license"]], "Citation": [[554, "citation"]], "Trademarks": [[554, "trademarks"]], "Metrics": [[555, "metrics"]], "Supported Built-in Metric Matrix": [[555, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[555, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[555, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[555, "build-custom-metric-with-python-api"]], "Mixed Precision": [[556, "mixed-precision"]], "Mixed Precision Support Matrix": [[556, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[556, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[557, "supported-framework-model-matrix"]], "Model Conversion": [[558, "model-conversion"]], "Objective": [[559, "objective"]], "Single Objective": [[559, "single-objective"]], "Multiple Objectives": [[559, "multiple-objectives"]], "Objective Support Matrix": [[559, "objective-support-matrix"]], "Get Start with Objective API": [[559, "get-start-with-objective-api"]], "Config Single Objective": [[559, "config-single-objective"]], "Config Multiple Objectives": [[559, "config-multiple-objectives"]], "Config Custom Objective": [[559, "config-custom-objective"]], "Optimization Orchestration": [[560, "optimization-orchestration"]], "One-shot": [[560, "one-shot"]], "Multi-shot": [[560, "multi-shot"]], "Orchestration Support Matrix": [[560, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[560, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[561, "system-configuration"]], "Neural Network Pruning": [[562, "neural-network-pruning"], [563, "neural-network-pruning"]], "Pruning Patterns": [[562, "pruning-patterns"], [563, "pruning-patterns"]], "Pruning Criteria": [[562, "pruning-criteria"], [563, "pruning-criteria"]], "Pruning Schedule": [[562, "pruning-schedule"], [563, "pruning-schedule"]], "Pruning Support Matrix": [[562, "pruning-support-matrix"]], "Get Started with Pruning API": [[562, "get-started-with-pruning-api"]], "Pruning Type": [[563, "pruning-type"]], "Regularization": [[563, "regularization"]], "Pruning Examples": [[563, "pruning-examples"]], "Full Publications/Events (49)": [[564, "full-publications-events-49"]], "2022 (31)": [[564, "id1"]], "2021 (14)": [[564, "id2"]], "2018 - 2020 (4)": [[564, "id3"]], "Pythonic Style Access for Configurations": [[565, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[565, "pythonic-api-for-user-configurations"], [565, "id1"]], "Pythonic API for Framework Configurations": [[565, "pythonic-api-for-framework-configurations"], [565, "id2"]], "Get Started with Pythonic API for Configurations": [[565, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[565, "nas"]], "Quantization Introduction": [[566, "quantization-introduction"]], "Quantization Fundamentals": [[566, "quantization-fundamentals"]], "Quantization Approaches": [[566, "quantization-approaches"]], "Post Training Dynamic Quantization": [[566, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[566, "post-training-static-quantization"]], "Quantization Aware Training": [[566, "quantization-aware-training"]], "Accuracy Aware Tuning": [[566, "accuracy-aware-tuning"]], "Get Started": [[566, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[567, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[567, "tensorflow"]], "Release": [[568, "release"]], "Known Issues": [[568, "known-issues"]], "Incompatible Changes": [[568, "incompatible-changes"]], "SigOpt Strategy": [[569, "sigopt-strategy"]], "Preparation": [[569, "preparation"]], "SigOpt introduction": [[569, "sigopt-introduction"]], "Neural Compressor configuration": [[569, "neural-compressor-configuration"]], "Performance": [[569, "performance"]], "Benefit for Sigopt strategy": [[569, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[569, "performance-comparison-of-different-strategies"]], "TensorBoard": [[570, "tensorboard"]], "PyTorch TensorBoard": [[570, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[570, "tensorflow-tensorboard"]], "Transform": [[571, "transform"]], "Transform support list": [[571, "transform-support-list"]], "Pytorch": [[571, "pytorch"]], "Tuning Strategies": [[572, "tuning-strategies"]], "Strategy Design": [[572, "strategy-design"]], "Configurations": [[572, "configurations"]], "Model-specific configurations": [[572, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[572, "strategy-tuning-part-related-configurations"]], "Basic": [[572, "basic"]], "Bayesian": [[572, "bayesian"]], "MSE": [[572, "mse"]], "MSE_v2": [[572, "mse-v2"]], "TPE": [[572, "tpe"]], "Exhaustive": [[572, "exhaustive"]], "Random": [[572, "random"]], "SigOpt": [[572, "sigopt"]], "Customize a New Tuning Strategy": [[572, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[573, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[573, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[574, "validated-mlperf-models"]], "Validated Quantization Examples": [[574, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[574, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[574, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[574, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[574, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[574, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[574, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[574, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[574, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[574, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[12, "neural_compressor.experimental.metric.bleu.BLEU"], [257, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [257, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[12, "module-neural_compressor.experimental.metric.bleu"], [31, "module-6ece06672ed3_v1_14"], [32, "module-6f0d0f71d92e_v1_13"], [33, "module-9e89549a08c8_v1_11"], [34, "module-block_mask"], [35, "module-env"], [36, "module-neural_compressor.adaptor.adaptor"], [37, "module-neural_compressor.adaptor"], [38, "module-neural_compressor.adaptor.keras"], [39, "module-neural_compressor.adaptor.keras_utils"], [40, "module-neural_compressor.adaptor.keras_utils.quantizer"], [41, "module-neural_compressor.adaptor.mxnet"], [42, "module-neural_compressor.adaptor.mxnet_utils"], [43, "module-neural_compressor.adaptor.mxnet_utils.util"], [44, "module-neural_compressor.adaptor.onnxrt"], [45, "module-neural_compressor.adaptor.ox_utils.calibration"], [46, "module-neural_compressor.adaptor.ox_utils"], [47, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [49, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [51, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [52, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [55, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [58, "module-neural_compressor.adaptor.ox_utils.operators"], [59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [62, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [63, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [65, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [66, "module-neural_compressor.adaptor.ox_utils.operators.split"], [67, "module-neural_compressor.adaptor.ox_utils.quantizer"], [68, "module-neural_compressor.adaptor.ox_utils.util"], [69, "module-neural_compressor.adaptor.pytorch"], [70, "module-neural_compressor.adaptor.query"], [71, "module-neural_compressor.adaptor.tensorflow"], [72, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [130, "module-neural_compressor.adaptor.tf_utils.graph_util"], [131, "module-neural_compressor.adaptor.tf_utils"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [162, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [165, "module-neural_compressor.adaptor.tf_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [168, "module-neural_compressor.adaptor.torch_utils"], [169, "module-neural_compressor.adaptor.torch_utils.onnx"], [170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [171, "module-neural_compressor.adaptor.torch_utils.util"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.weight_correction"], [176, "module-neural_compressor.benchmark"], [177, "module-neural_compressor.conf.config"], [178, "module-neural_compressor.conf.dotdict"], [179, "module-neural_compressor.conf"], [180, "module-neural_compressor.conf.pythonic_config"], [181, "module-neural_compressor.config"], [182, "module-neural_compressor.contrib"], [183, "module-neural_compressor.contrib.strategy"], [184, "module-neural_compressor.contrib.strategy.sigopt"], [185, "module-neural_compressor.contrib.strategy.tpe"], [186, "module-neural_compressor.data.dataloaders.base_dataloader"], [187, "module-neural_compressor.data.dataloaders.dataloader"], [188, "module-neural_compressor.data.dataloaders.default_dataloader"], [189, "module-neural_compressor.data.dataloaders.fetcher"], [190, "module-neural_compressor.data.dataloaders"], [191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [194, "module-neural_compressor.data.dataloaders.sampler"], [195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [196, "module-neural_compressor.data.datasets.bert_dataset"], [197, "module-neural_compressor.data.datasets.coco_dataset"], [198, "module-neural_compressor.data.datasets.dataset"], [199, "module-neural_compressor.data.datasets.dummy_dataset"], [200, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [201, "module-neural_compressor.data.datasets.imagenet_dataset"], [202, "module-neural_compressor.data.datasets"], [203, "module-neural_compressor.data.datasets.style_transfer_dataset"], [204, "module-neural_compressor.data.filters.coco_filter"], [205, "module-neural_compressor.data.filters.filter"], [206, "module-neural_compressor.data.filters"], [207, "module-neural_compressor.data"], [208, "module-neural_compressor.data.transforms.coco_transform"], [209, "module-neural_compressor.data.transforms.imagenet_transform"], [210, "module-neural_compressor.data.transforms"], [211, "module-neural_compressor.data.transforms.postprocess"], [212, "module-neural_compressor.data.transforms.tokenization"], [213, "module-neural_compressor.data.transforms.transform"], [214, "module-neural_compressor.experimental.benchmark"], [215, "module-neural_compressor.experimental.common.criterion"], [216, "module-neural_compressor.experimental.common.dataloader"], [217, "module-neural_compressor.experimental.common"], [218, "module-neural_compressor.experimental.common.metric"], [219, "module-neural_compressor.experimental.common.model"], [220, "module-neural_compressor.experimental.common.optimizer"], [221, "module-neural_compressor.experimental.common.postprocess"], [222, "module-neural_compressor.experimental.common.torch_utils"], [223, "module-neural_compressor.experimental.component"], [224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [228, "module-neural_compressor.experimental.data.dataloaders"], [229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.sampler"], [233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [234, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [235, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [236, "module-neural_compressor.experimental.data.datasets.dataset"], [237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [240, "module-neural_compressor.experimental.data.datasets"], [241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [242, "module-neural_compressor.experimental.data.filters.coco_filter"], [243, "module-neural_compressor.experimental.data.filters.filter"], [244, "module-neural_compressor.experimental.data.filters"], [245, "module-neural_compressor.experimental.data"], [246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [247, "module-neural_compressor.experimental.data.transforms"], [248, "module-neural_compressor.experimental.data.transforms.tokenization"], [249, "module-neural_compressor.experimental.data.transforms.transform"], [250, "module-neural_compressor.experimental.distillation"], [251, "module-neural_compressor.experimental.export"], [252, "module-neural_compressor.experimental.export.qlinear2qdq"], [253, "module-neural_compressor.experimental.export.torch2onnx"], [254, "module-neural_compressor.experimental.export.utils"], [255, "module-neural_compressor.experimental.graph_optimization"], [256, "module-neural_compressor.experimental"], [257, "module-neural_compressor.experimental.metric.bleu"], [258, "module-neural_compressor.experimental.metric.bleu_util"], [259, "module-neural_compressor.experimental.metric.coco_label_map"], [260, "module-neural_compressor.experimental.metric.coco_tools"], [261, "module-neural_compressor.experimental.metric.evaluate_squad"], [262, "module-neural_compressor.experimental.metric.f1"], [263, "module-neural_compressor.experimental.metric"], [264, "module-neural_compressor.experimental.metric.metric"], [265, "module-neural_compressor.experimental.mixed_precision"], [266, "module-neural_compressor.experimental.model_conversion"], [267, "module-neural_compressor.experimental.nas.basic_nas"], [268, "module-neural_compressor.experimental.nas.dynas"], [269, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [270, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [271, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [272, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [273, "module-neural_compressor.experimental.nas.dynast"], [274, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [275, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [279, "module-neural_compressor.experimental.nas"], [280, "module-neural_compressor.experimental.nas.nas"], [281, "module-neural_compressor.experimental.nas.nas_utils"], [282, "module-neural_compressor.experimental.nas.search_algorithms"], [283, "module-neural_compressor.experimental.pruning"], [284, "module-neural_compressor.experimental.pruning_recipes"], [285, "module-neural_compressor.experimental.pruning_recipes.patterns"], [286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [288, "module-neural_compressor.experimental.pytorch_pruner"], [289, "module-neural_compressor.experimental.pytorch_pruner.logger"], [290, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [292, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [293, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [295, "module-neural_compressor.experimental.quantization"], [296, "module-neural_compressor.experimental.scheduler"], [297, "module-neural_compressor"], [298, "module-neural_compressor.metric.bleu"], [299, "module-neural_compressor.metric.bleu_util"], [300, "module-neural_compressor.metric.coco_label_map"], [301, "module-neural_compressor.metric.coco_tools"], [302, "module-neural_compressor.metric.evaluate_squad"], [303, "module-neural_compressor.metric.f1"], [304, "module-neural_compressor.metric"], [305, "module-neural_compressor.metric.metric"], [306, "module-neural_compressor.mix_precision"], [307, "module-neural_compressor.model.base_model"], [308, "module-neural_compressor.model"], [309, "module-neural_compressor.model.keras_model"], [310, "module-neural_compressor.model.model"], [311, "module-neural_compressor.model.mxnet_model"], [312, "module-neural_compressor.model.nets_factory"], [313, "module-neural_compressor.model.onnx_model"], [314, "module-neural_compressor.model.tensorflow_model"], [315, "module-neural_compressor.model.torch_model"], [316, "module-neural_compressor.objective"], [317, "module-neural_compressor.pruner.criteria"], [318, "module-neural_compressor.pruner"], [319, "module-neural_compressor.pruner.logger"], [320, "module-neural_compressor.pruner.patterns"], [321, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [322, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [323, "module-neural_compressor.pruner.pruner_legacy"], [324, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [325, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [326, "module-neural_compressor.pruner.pruner_legacy.pruner"], [327, "module-neural_compressor.pruner.pruners"], [328, "module-neural_compressor.pruner.regs"], [329, "module-neural_compressor.pruner.schedulers"], [330, "module-neural_compressor.pruner.utils"], [331, "module-neural_compressor.pruning"], [332, "module-neural_compressor.quantization"], [333, "module-neural_compressor.strategy.auto_mixed_precision"], [334, "module-neural_compressor.strategy.basic"], [335, "module-neural_compressor.strategy.bayesian"], [336, "module-neural_compressor.strategy.conservative"], [337, "module-neural_compressor.strategy.exhaustive"], [338, "module-neural_compressor.strategy.hawq_v2"], [339, "module-neural_compressor.strategy"], [340, "module-neural_compressor.strategy.mse"], [341, "module-neural_compressor.strategy.mse_v2"], [342, "module-neural_compressor.strategy.random"], [343, "module-neural_compressor.strategy.strategy"], [344, "module-neural_compressor.strategy.utils.helper"], [345, "module-neural_compressor.strategy.utils"], [346, "module-neural_compressor.strategy.utils.tuning_sampler"], [347, "module-neural_compressor.strategy.utils.tuning_space"], [348, "module-neural_compressor.strategy.utils.tuning_structs"], [349, "module-neural_compressor.training"], [350, "module-neural_compressor.utils.collect_layer_histogram"], [351, "module-neural_compressor.utils.constant"], [352, "module-neural_compressor.utils.create_obj_from_config"], [353, "module-neural_compressor.utils"], [354, "module-neural_compressor.utils.kl_divergence"], [355, "module-neural_compressor.utils.load_huggingface"], [356, "module-neural_compressor.utils.logger"], [357, "module-neural_compressor.utils.options"], [358, "module-neural_compressor.utils.pytorch"], [359, "module-neural_compressor.utils.utility"], [360, "module-neural_compressor.ux.components.benchmark.benchmark"], [361, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [362, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [363, "module-neural_compressor.ux.components.benchmark"], [364, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [365, "module-neural_compressor.ux.components.config_generator.config_generator"], [366, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [367, "module-neural_compressor.ux.components.config_generator"], [368, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [369, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [370, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [371, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [372, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [373, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [374, "module-neural_compressor.ux.components.configuration_wizard"], [375, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [376, "module-neural_compressor.ux.components.db_manager.db_manager"], [377, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [378, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [379, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [380, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [381, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [382, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [383, "module-neural_compressor.ux.components.db_manager.db_models.example"], [384, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [385, "module-neural_compressor.ux.components.db_manager.db_models"], [386, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [387, "module-neural_compressor.ux.components.db_manager.db_models.model"], [388, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [389, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [390, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [391, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [392, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [393, "module-neural_compressor.ux.components.db_manager.db_models.project"], [394, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [395, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [396, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [397, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [398, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [399, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [400, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [401, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [402, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [403, "module-neural_compressor.ux.components.db_manager.db_operations"], [404, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [408, "module-neural_compressor.ux.components.db_manager"], [409, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [410, "module-neural_compressor.ux.components.db_manager.utils"], [411, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [412, "module-neural_compressor.ux.components.diagnosis.factory"], [413, "module-neural_compressor.ux.components.diagnosis"], [414, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [415, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [416, "module-neural_compressor.ux.components.diagnosis.op_details"], [417, "module-neural_compressor.ux.components.diagnosis.op_entry"], [418, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [419, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [420, "module-neural_compressor.ux.components.file_browser.file_browser"], [421, "module-neural_compressor.ux.components.file_browser"], [422, "module-neural_compressor.ux.components.graph.attribute"], [423, "module-neural_compressor.ux.components.graph.collapser"], [424, "module-neural_compressor.ux.components.graph.edge"], [425, "module-neural_compressor.ux.components.graph.graph"], [426, "module-neural_compressor.ux.components.graph.graph_reader"], [427, "module-neural_compressor.ux.components.graph"], [428, "module-neural_compressor.ux.components.graph.node"], [429, "module-neural_compressor.ux.components.graph.reader"], [430, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [431, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [432, "module-neural_compressor.ux.components"], [433, "module-neural_compressor.ux.components.jobs_management"], [434, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [435, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [436, "module-neural_compressor.ux.components.jobs_management.request"], [437, "module-neural_compressor.ux.components.manage_workspace"], [438, "module-neural_compressor.ux.components.model.domain"], [439, "module-neural_compressor.ux.components.model"], [440, "module-neural_compressor.ux.components.model.model"], [441, "module-neural_compressor.ux.components.model.model_type_getter"], [442, "module-neural_compressor.ux.components.model.onnxrt"], [443, "module-neural_compressor.ux.components.model.onnxrt.model"], [444, "module-neural_compressor.ux.components.model.pytorch"], [445, "module-neural_compressor.ux.components.model.pytorch.model"], [446, "module-neural_compressor.ux.components.model.repository"], [447, "module-neural_compressor.ux.components.model.shape"], [448, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [449, "module-neural_compressor.ux.components.model.tensorflow"], [450, "module-neural_compressor.ux.components.model.tensorflow.keras"], [451, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [452, "module-neural_compressor.ux.components.model.tensorflow.model"], [453, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [454, "module-neural_compressor.ux.components.model.tensorflow.utils"], [455, "module-neural_compressor.ux.components.model_zoo.download_config"], [456, "module-neural_compressor.ux.components.model_zoo.download_model"], [457, "module-neural_compressor.ux.components.model_zoo.downloader"], [458, "module-neural_compressor.ux.components.model_zoo"], [459, "module-neural_compressor.ux.components.model_zoo.list_models"], [460, "module-neural_compressor.ux.components.names_mapper"], [461, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [462, "module-neural_compressor.ux.components.optimization.execute_optimization"], [463, "module-neural_compressor.ux.components.optimization.factory"], [464, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [465, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [466, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [467, "module-neural_compressor.ux.components.optimization"], [468, "module-neural_compressor.ux.components.optimization.mixed_precision"], [469, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [470, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [471, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [472, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [473, "module-neural_compressor.ux.components.optimization.optimization"], [474, "module-neural_compressor.ux.components.optimization.tune"], [475, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [476, "module-neural_compressor.ux.components.optimization.tune.tuning"], [477, "module-neural_compressor.ux.components.optimization.tuning_history"], [478, "module-neural_compressor.ux.components.profiling.execute_profiling"], [479, "module-neural_compressor.ux.components.profiling.factory"], [480, "module-neural_compressor.ux.components.profiling"], [481, "module-neural_compressor.ux.components.profiling.profile_model"], [482, "module-neural_compressor.ux.components.profiling.profiler"], [483, "module-neural_compressor.ux.components.profiling.profiling"], [484, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [485, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [486, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [487, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [488, "module-neural_compressor.ux.inc_bench"], [489, "module-neural_compressor.ux"], [490, "module-neural_compressor.ux.utils.consts"], [491, "module-neural_compressor.ux.utils.environment"], [492, "module-neural_compressor.ux.utils.exceptions"], [493, "module-neural_compressor.ux.utils.executor"], [494, "module-neural_compressor.ux.utils.expiring_dict"], [495, "module-neural_compressor.ux.utils.github_info"], [496, "module-neural_compressor.ux.utils.hw_info"], [497, "module-neural_compressor.ux.utils"], [498, "module-neural_compressor.ux.utils.json_serializer"], [499, "module-neural_compressor.ux.utils.logger"], [500, "module-neural_compressor.ux.utils.parser"], [501, "module-neural_compressor.ux.utils.proc"], [502, "module-neural_compressor.ux.utils.processes"], [503, "module-neural_compressor.ux.utils.singleton"], [504, "module-neural_compressor.ux.utils.templates"], [505, "module-neural_compressor.ux.utils.templates.metric"], [506, "module-neural_compressor.ux.utils.templates.workdir"], [507, "module-neural_compressor.ux.utils.utils"], [508, "module-neural_compressor.ux.utils.workload.config"], [509, "module-neural_compressor.ux.utils.workload.dataloader"], [510, "module-neural_compressor.ux.utils.workload.evaluation"], [511, "module-neural_compressor.ux.utils.workload.graph_optimization"], [512, "module-neural_compressor.ux.utils.workload"], [513, "module-neural_compressor.ux.utils.workload.mixed_precision"], [514, "module-neural_compressor.ux.utils.workload.model"], [515, "module-neural_compressor.ux.utils.workload.pruning"], [516, "module-neural_compressor.ux.utils.workload.quantization"], [517, "module-neural_compressor.ux.utils.workload.tuning"], [518, "module-neural_compressor.ux.utils.yaml_utils"], [519, "module-neural_compressor.ux.web.communication"], [520, "module-neural_compressor.ux.web.configuration"], [521, "module-neural_compressor.ux.web.exceptions"], [522, "module-neural_compressor.ux.web"], [523, "module-neural_compressor.ux.web.router"], [524, "module-neural_compressor.ux.web.server"], [525, "module-neural_compressor.ux.web.service.benchmark"], [526, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [527, "module-neural_compressor.ux.web.service"], [528, "module-neural_compressor.ux.web.service.model"], [529, "module-neural_compressor.ux.web.service.optimization"], [530, "module-neural_compressor.ux.web.service.profiling"], [531, "module-neural_compressor.ux.web.service.request_data_processor"], [532, "module-neural_compressor.ux.web.service.response_generator"], [533, "module-neural_compressor.ux.web.service.workload"], [534, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[12, "module-neural_compressor.experimental.metric.bleu"], [257, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [257, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [257, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.result"], [257, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.update"], [257, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "run_migrations_offline() (in module env)": [[35, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[35, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[38, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[38, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[39, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[40, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[41, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[42, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[44, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[46, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[47, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[49, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[51, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[52, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[58, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[62, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[62, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[65, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[66, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[67, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[68, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[69, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[70, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[71, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[131, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[165, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[168, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[169, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[175, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[175, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[176, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[176, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[176, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[187, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[190, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[191, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[193, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[196, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[198, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[198, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[198, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[198, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[199, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[203, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[207, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[207, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[207, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[207, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[207, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[207, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[207, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[207, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[207, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[207, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[208, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[210, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[211, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TRANSFORMS"], [213, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[213, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[215, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[216, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[218, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[219, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[220, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[221, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[223, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[241, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[245, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[247, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [249, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[250, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[251, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[251, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[251, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[253, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[254, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[254, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[254, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[254, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[256, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[256, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[256, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[256, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[256, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[256, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[256, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[256, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[256, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[256, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[256, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[256, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[256, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[256, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[256, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[256, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[256, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[256, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[256, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[256, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[256, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[256, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[256, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[256, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[256, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[256, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[256, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[256, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[256, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[256, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[256, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[256, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[256, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[256, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[256, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[256, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[256, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[256, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[256, "neural_compressor.experimental.Component.train_func"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[258, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[263, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[263, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[263, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[263, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[263, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[263, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[263, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[264, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[264, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[264, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[264, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[264, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[264, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[264, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[264, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[264, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[264, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[264, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[264, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[264, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[264, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[264, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[264, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[264, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[264, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[264, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[264, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[264, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[264, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[264, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[264, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[264, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[264, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[264, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[265, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[265, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[265, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[269, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[271, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[271, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[273, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[274, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[275, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[276, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[276, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[276, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[276, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[276, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[279, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[279, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[279, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[279, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[279, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[279, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[279, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[279, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[280, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[280, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[280, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[280, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[283, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[283, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[283, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[283, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[283, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[283, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[283, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[283, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[283, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[283, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[283, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[283, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[284, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[284, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[284, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[284, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[289, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[295, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[295, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[295, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[295, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[295, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[295, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[296, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[296, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[296, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[296, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[296, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[296, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[296, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[297, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[297, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[297, "neural_compressor.Pruning"]], "config_file_path (neural_compressor.pruning attribute)": [[297, "neural_compressor.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruning attribute)": [[297, "neural_compressor.Pruning.model"]], "neural_compressor": [[297, "module-neural_compressor"]], "on_after_eval() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruning attribute)": [[297, "neural_compressor.Pruning.pruner_info"]], "pruners (neural_compressor.pruning attribute)": [[297, "neural_compressor.Pruning.pruners"]], "update_config() (neural_compressor.pruning method)": [[297, "neural_compressor.Pruning.update_config"]], "bleu (class in neural_compressor.metric.bleu)": [[298, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[298, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[298, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[298, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[298, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[298, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[298, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[298, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[298, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[298, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[298, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[298, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[298, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[299, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[299, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[300, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[301, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[301, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[301, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[301, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[301, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[301, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[301, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[301, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[302, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[302, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[302, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[302, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[302, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[303, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[303, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[303, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[303, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[303, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[304, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[304, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[304, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[304, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[304, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[304, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[304, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[304, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[304, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[304, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[304, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[304, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[305, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[305, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[305, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[305, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[305, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[305, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[305, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[305, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[305, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[305, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[305, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[305, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[305, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[305, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[305, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[305, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[305, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[305, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[305, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[305, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[305, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[305, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[305, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[305, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[305, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[305, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[305, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[305, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[305, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[305, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[305, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[305, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[305, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[305, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[305, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[305, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[305, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[305, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[305, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[305, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[305, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[305, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[305, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[305, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[305, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[305, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[305, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[305, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[305, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[305, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[305, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[305, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[305, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[305, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[305, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[305, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[305, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[305, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[305, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[305, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[305, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[305, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[305, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[305, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[305, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[305, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[305, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[305, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[305, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[305, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[305, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[305, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[305, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[305, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[305, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[305, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[305, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[305, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[305, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[305, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[305, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[305, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[305, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[305, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[305, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[305, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[306, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[307, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[307, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[307, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[307, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[307, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[307, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[307, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[308, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[308, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[308, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[308, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[308, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[308, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[308, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[308, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[309, "neural_compressor.model.keras_model.KerasModel"]], "export() (neural_compressor.model.keras_model.kerasmodel method)": [[309, "neural_compressor.model.keras_model.KerasModel.export"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[309, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[309, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[309, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[309, "module-neural_compressor.model.keras_model"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[309, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[310, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[310, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[310, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[311, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[311, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[311, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[311, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[311, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "neural_compressor.model.nets_factory": [[312, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[313, "neural_compressor.model.onnx_model.ONNXModel"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[313, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[313, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[313, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[313, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[314, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[314, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "neural_compressor.model.tensorflow_model": [[314, "module-neural_compressor.model.tensorflow_model"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[314, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[314, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[314, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[314, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[314, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[315, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[315, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[315, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[315, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.ipexmodel property)": [[315, "neural_compressor.model.torch_model.IPEXModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[315, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[315, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[315, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[315, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[315, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[316, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[316, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[316, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[316, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[316, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[316, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[316, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[316, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[316, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[316, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[316, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[316, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[316, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[316, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[316, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[316, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[316, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[316, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[316, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[316, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[317, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[317, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[317, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[317, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[317, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[317, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[317, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[317, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[317, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[317, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[317, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[317, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[317, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[318, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[319, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[320, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[320, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[320, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[320, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[320, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[320, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[320, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[320, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[320, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[320, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[320, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[320, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[320, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[321, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[322, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[323, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[324, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[325, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[326, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[326, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "basepruner (class in neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[327, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[327, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[327, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[327, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[327, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[327, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[327, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[327, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[327, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[327, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[327, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[327, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[327, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[327, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[327, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "basereg (class in neural_compressor.pruner.regs)": [[328, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[328, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[328, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[328, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[328, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[328, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[328, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[328, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[328, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[328, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[328, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[328, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[329, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[329, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[329, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[329, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[329, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[329, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[329, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[329, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[329, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[329, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "weightpruningconfig (class in neural_compressor.pruner.utils)": [[330, "neural_compressor.pruner.utils.WeightPruningConfig"]], "check_config() (in module neural_compressor.pruner.utils)": [[330, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[330, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[330, "neural_compressor.pruner.utils.parse_to_prune"]], "process_config() (in module neural_compressor.pruner.utils)": [[330, "neural_compressor.pruner.utils.process_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[330, "neural_compressor.pruner.utils.reset_none_to_default"]], "pruning (class in neural_compressor.pruning)": [[331, "neural_compressor.pruning.Pruning"]], "config_file_path (neural_compressor.pruning.pruning attribute)": [[331, "neural_compressor.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruning.pruning attribute)": [[331, "neural_compressor.pruning.Pruning.model"]], "neural_compressor.pruning": [[331, "module-neural_compressor.pruning"]], "on_after_eval() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruning.pruning attribute)": [[331, "neural_compressor.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruning.pruning attribute)": [[331, "neural_compressor.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruning.pruning method)": [[331, "neural_compressor.pruning.Pruning.update_config"]], "fit() (in module neural_compressor.quantization)": [[332, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[332, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[333, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[333, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[333, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[333, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[334, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[334, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[334, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[335, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[335, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[335, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[335, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[335, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[335, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[335, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[335, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[335, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[335, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[336, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[336, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[336, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[336, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[336, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[337, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[337, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[337, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[338, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[338, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[338, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[339, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[340, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[340, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[340, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[340, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[340, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[341, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[341, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[341, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[342, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[342, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[342, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[343, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[343, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[343, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[343, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[343, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[343, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "neural_compressor.strategy.utils.helper": [[344, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[345, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[346, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[347, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[348, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[349, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[349, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[349, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[349, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[349, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[350, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[350, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[350, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[351, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[352, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[352, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[352, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[353, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[353, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[353, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[353, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[353, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[353, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[353, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[354, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[354, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[354, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[354, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[354, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[355, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[356, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[357, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[358, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[358, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[359, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[359, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[360, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[360, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[360, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[361, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[361, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[361, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[361, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[362, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[362, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[363, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[363, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[364, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[364, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[364, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[364, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[364, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[364, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[365, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[365, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[365, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[365, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[365, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[365, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[366, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[366, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[367, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[368, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[369, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[370, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[371, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[371, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[372, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[372, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[373, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[373, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[373, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[374, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[375, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[375, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[376, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[376, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[376, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[376, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[376, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[376, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[377, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[378, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[379, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[380, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[381, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[381, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[381, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[382, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[382, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[382, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[383, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[383, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[384, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[384, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[384, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[385, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[386, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[386, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[386, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[387, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[388, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[389, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[390, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[391, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[392, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[393, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[394, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[395, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[395, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[396, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[396, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[397, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[397, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[398, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[398, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[399, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[399, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[399, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[399, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[399, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[399, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[400, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[400, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[401, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[403, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[408, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[408, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[408, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[408, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[408, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[408, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[409, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[409, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[410, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[410, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[410, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[410, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[411, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[411, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[412, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[412, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[412, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[413, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[414, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[415, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[415, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[415, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[416, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[416, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[416, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[416, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[416, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[416, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[417, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[417, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[417, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[419, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[419, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[420, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[420, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[421, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[422, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[422, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[423, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[423, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[423, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[424, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[424, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[424, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[424, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[425, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[425, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[425, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[425, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[425, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[425, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[425, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[425, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[425, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[426, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[426, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[426, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[426, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[427, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[428, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[428, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[428, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[429, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[430, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[430, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[430, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[431, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[431, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[431, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[432, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[433, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[434, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[435, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[436, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[437, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[437, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[438, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[438, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[439, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[440, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[440, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[440, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[440, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[440, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[440, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[440, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[440, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[440, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[440, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[441, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[441, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[442, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[443, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[443, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[443, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[444, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[445, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[445, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[445, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[445, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[445, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[446, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[446, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[447, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[447, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[447, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[448, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[448, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[448, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[448, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[449, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[450, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[450, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[450, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[450, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[450, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[451, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[451, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[451, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[451, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[451, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[451, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[452, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[452, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[453, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[453, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[453, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[454, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[454, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[455, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[455, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[456, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[456, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[457, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[457, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[458, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[459, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[459, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[460, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[461, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[461, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[462, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[462, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[463, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[463, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[463, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[464, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[464, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[465, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[466, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[466, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[466, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[466, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[466, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[467, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[467, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[468, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[469, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[469, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[470, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[470, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[470, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[470, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[470, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[471, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[472, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[472, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[473, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[473, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[473, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[473, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[474, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[475, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[475, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[475, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[475, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[476, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[476, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[477, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[477, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[477, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[477, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[477, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[477, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[477, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[477, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[477, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[478, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[478, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[478, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[479, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[479, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[479, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[480, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[481, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[481, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[481, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[482, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[482, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[482, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[483, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[483, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[483, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[484, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[484, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[484, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[485, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[486, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[486, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[487, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[487, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[488, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[488, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[488, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[489, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[490, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[490, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[491, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[491, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[491, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[491, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[491, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[492, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[492, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[492, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[492, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[492, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[493, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[493, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[493, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[493, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[493, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[493, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[493, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[493, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[493, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[493, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[493, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[494, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[494, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[494, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[494, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[495, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[495, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[495, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[496, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[496, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[496, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[496, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[497, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[498, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[498, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[498, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[498, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[499, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[499, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[500, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[500, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[500, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[500, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[500, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[500, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[500, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[500, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[500, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[500, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[500, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[500, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[500, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[501, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[501, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[501, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[501, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[501, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[502, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[502, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[502, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[502, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[502, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[503, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[503, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[504, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[505, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[505, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[505, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[506, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[506, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[506, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[506, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[506, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[507, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[507, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[508, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[508, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[508, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[508, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[509, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[509, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[509, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[509, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[509, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[510, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[510, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[510, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[510, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[510, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[510, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[511, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[511, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[511, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[512, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[513, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[513, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[513, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[514, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[514, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[514, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[514, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[514, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[515, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[515, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[515, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[516, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[516, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[516, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[516, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[516, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[516, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[517, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[517, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[517, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[517, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[517, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[518, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[518, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[518, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[519, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[519, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[519, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[519, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[519, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[519, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[519, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[519, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[519, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[519, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[519, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[519, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[519, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[520, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[520, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[520, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[520, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[520, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[521, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[521, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[522, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[523, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[523, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[523, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[524, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[524, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[525, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[525, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[526, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[526, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[526, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[526, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[526, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[526, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[527, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[528, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[528, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[528, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[529, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[529, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[530, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[530, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[530, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[531, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[531, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[531, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[532, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[532, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[532, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[532, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[532, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[532, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[533, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[533, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[533, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[533, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[533, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[534, "module-neural_compressor.version"]]}})