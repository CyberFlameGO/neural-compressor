Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruners/gradient_sensitivity/index", "autoapi/neural_compressor/pruners/group_lasso/index", "autoapi/neural_compressor/pruners/index", "autoapi/neural_compressor/pruners/magnitude/index", "autoapi/neural_compressor/pruners/pattern_lock/index", "autoapi/neural_compressor/pruners/pruner/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/helper/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "faq", "framework_yaml", "graph_optimization", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "model_conversion", "objective", "orchestration", "platform_configuration", "pruning", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruners/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruners/group_lasso/index.rst", "autoapi/neural_compressor/pruners/index.rst", "autoapi/neural_compressor/pruners/magnitude/index.rst", "autoapi/neural_compressor/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/pruners/pruner/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/helper/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "faq.md", "framework_yaml.md", "graph_optimization.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "model_conversion.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 1, 2, 3, 7, 35, 80, 135, 195, 223, 233, 255, 259, 284, 286, 295, 522, 523, 524, 525, 526, 528, 530, 535, 541, 544, 545, 546, 548, 551, 552, 554, 555, 556, 557], "interest": [0, 6, 524, 555], "foster": [0, 524], "an": [0, 2, 3, 4, 6, 7, 12, 35, 43, 86, 91, 92, 94, 135, 159, 160, 175, 189, 194, 198, 202, 207, 213, 217, 222, 223, 227, 232, 236, 240, 245, 249, 255, 256, 259, 260, 261, 268, 273, 274, 275, 290, 292, 295, 296, 297, 307, 406, 411, 484, 523, 524, 525, 527, 531, 535, 541, 542, 545, 549, 554, 555, 556, 557], "open": [0, 6, 217, 255, 487, 522, 524, 533, 549], "welcom": [0, 524, 537], "environ": [0, 214, 291, 445, 474, 475, 483, 506, 522, 524, 557], "we": [0, 1, 3, 4, 6, 7, 12, 35, 68, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 94, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 130, 159, 160, 175, 195, 214, 216, 217, 233, 256, 259, 266, 273, 292, 295, 524, 525, 530, 534, 535, 541, 544, 545, 546, 548, 550, 551, 554, 555, 557], "maintain": [0, 6, 263, 299, 524, 543, 548, 553], "make": [0, 1, 3, 7, 159, 160, 175, 194, 232, 284, 286, 288, 362, 394, 426, 522, 524, 525, 534, 541, 551, 552, 557], "particip": [0, 524], "project": [0, 213, 249, 363, 366, 371, 373, 374, 377, 383, 384, 388, 389, 390, 391, 392, 393, 394, 418, 524, 537, 549, 554, 557], "commun": [0, 291, 475, 508, 509, 510, 522, 524], "harass": [0, 524], "free": [0, 184, 185, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 524, 541, 545, 554], "experi": [0, 524, 554, 557], "everyon": [0, 524], "regardless": [0, 259, 295, 524], "ag": [0, 270, 524], "bodi": [0, 524], "size": [0, 3, 123, 186, 188, 189, 195, 198, 202, 204, 207, 209, 213, 224, 226, 227, 233, 236, 240, 242, 245, 246, 249, 259, 268, 271, 284, 295, 307, 345, 363, 373, 374, 491, 493, 494, 522, 523, 524, 525, 526, 530, 533, 535, 545, 548, 556, 557, 558, 559], "disabl": [0, 165, 482, 510, 524], "ethnic": [0, 524], "sex": [0, 178, 524], "characterist": [0, 524], "gender": [0, 524], "ident": [0, 3, 98, 104, 130, 159, 284, 524, 528, 535], "express": [0, 71, 256, 292, 524], "level": [0, 3, 41, 44, 485, 506, 524, 557], "educ": [0, 524], "socio": [0, 524], "econom": [0, 524], "statu": [0, 130, 363, 374, 377, 381, 383, 389, 391, 392, 477, 505, 518, 524, 545], "nation": [0, 198, 236, 524], "person": [0, 6, 178, 524, 549], "appear": [0, 522, 524], "race": [0, 524], "religion": [0, 524], "sexual": [0, 524], "orient": [0, 524], "exampl": [0, 1, 6, 45, 135, 167, 196, 197, 198, 209, 212, 213, 234, 235, 236, 246, 248, 249, 259, 260, 261, 263, 269, 287, 295, 296, 297, 299, 335, 371, 388, 394, 418, 442, 443, 444, 445, 487, 493, 522, 524, 526, 531, 536, 537, 538, 544, 552, 553, 556, 557], "behavior": [0, 7, 259, 295, 524, 528, 534, 543, 555, 557, 558], "contribut": [0, 6, 537], "creat": [0, 2, 7, 31, 32, 33, 35, 71, 130, 142, 159, 186, 196, 198, 216, 217, 224, 234, 236, 250, 255, 259, 267, 268, 273, 274, 275, 290, 295, 307, 321, 338, 362, 379, 388, 389, 393, 394, 472, 492, 505, 518, 524, 526, 531, 535, 543, 544, 551, 554, 555, 557], "posit": [0, 130, 213, 249, 522, 524, 541], "includ": [0, 6, 7, 41, 196, 198, 202, 205, 206, 207, 210, 213, 215, 234, 236, 240, 243, 244, 245, 247, 249, 254, 255, 259, 264, 284, 288, 289, 295, 339, 340, 522, 524, 526, 539, 540, 541, 548, 551, 552, 555, 557], "us": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 41, 43, 44, 62, 68, 69, 71, 94, 133, 135, 136, 142, 167, 172, 174, 176, 177, 178, 184, 185, 194, 195, 196, 197, 198, 199, 200, 203, 207, 210, 212, 213, 214, 215, 220, 232, 233, 234, 235, 236, 237, 238, 241, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 263, 264, 265, 266, 269, 271, 273, 275, 277, 280, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 299, 310, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 329, 336, 339, 340, 345, 389, 394, 399, 400, 404, 406, 418, 425, 427, 452, 456, 477, 493, 495, 505, 506, 522, 524, 526, 528, 529, 530, 531, 534, 536, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559], "inclus": [0, 524], "languag": [0, 12, 256, 292, 524, 549], "Being": [0, 524], "respect": [0, 524, 529, 534, 548, 558], "differ": [0, 1, 2, 3, 6, 12, 160, 172, 174, 175, 189, 198, 213, 215, 227, 236, 249, 254, 255, 256, 262, 263, 270, 273, 274, 276, 279, 284, 289, 290, 292, 298, 299, 522, 524, 525, 526, 528, 530, 532, 535, 536, 538, 541, 543, 544, 545, 548, 551, 555, 556, 557], "viewpoint": [0, 524], "gracefulli": [0, 524], "accept": [0, 35, 522, 524, 542], "construct": [0, 196, 199, 200, 203, 207, 210, 211, 216, 217, 218, 219, 221, 234, 237, 238, 241, 298, 299, 302, 304, 338, 523, 524, 526, 530, 557], "critic": [0, 6, 524], "focus": [0, 7, 524, 535], "what": [0, 176, 194, 232, 291, 335, 522, 524], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 21, 29, 30, 35, 36, 38, 41, 43, 44, 45, 69, 71, 77, 78, 84, 86, 88, 94, 105, 109, 110, 116, 117, 118, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 167, 171, 175, 176, 184, 185, 186, 187, 190, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 209, 213, 214, 216, 217, 220, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 249, 255, 256, 259, 261, 262, 263, 265, 268, 271, 275, 277, 285, 286, 287, 290, 291, 292, 295, 297, 298, 299, 307, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 344, 362, 394, 406, 426, 429, 431, 432, 434, 436, 437, 439, 445, 480, 482, 484, 486, 487, 491, 493, 495, 501, 506, 508, 522, 523, 524, 525, 526, 528, 530, 531, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558], "best": [0, 2, 4, 6, 69, 213, 249, 250, 254, 255, 266, 267, 273, 274, 289, 524, 539, 545, 551, 556, 557], "show": [0, 3, 522, 523, 524, 528, 530, 548, 557], "empathi": [0, 524], "toward": [0, 4, 524, 528], "other": [0, 1, 69, 91, 92, 94, 159, 195, 233, 261, 290, 297, 303, 308, 322, 484, 488, 510, 522, 524, 531, 534, 535, 538, 540, 543, 545, 547, 548, 551, 556, 557, 559], "member": [0, 7, 255, 264, 524], "unaccept": [0, 524], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 21, 29, 30, 36, 38, 41, 44, 45, 62, 69, 71, 77, 94, 98, 116, 117, 118, 130, 133, 135, 139, 141, 165, 167, 171, 172, 173, 174, 176, 177, 178, 184, 185, 186, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 210, 213, 215, 217, 218, 220, 223, 224, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 247, 249, 250, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 308, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 338, 339, 340, 344, 345, 363, 364, 366, 369, 373, 374, 377, 378, 381, 382, 389, 394, 397, 399, 400, 401, 402, 403, 404, 405, 418, 425, 426, 475, 522, 523, 524, 525, 526, 528, 529, 530, 531, 534, 535, 536, 538, 539, 541, 542, 543, 545, 546, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559], "imageri": [0, 524], "unwelcom": [0, 524], "attent": [0, 196, 234, 524, 528], "advanc": [0, 6, 167, 502, 524, 525, 551, 557, 558], "troll": [0, 524], "insult": [0, 524], "derogatori": [0, 524], "comment": [0, 524, 526, 541, 556], "polit": [0, 524], "attack": [0, 524], "public": [0, 130, 524], "privat": [0, 255, 264, 524], "publish": [0, 524, 540, 542], "inform": [0, 5, 6, 7, 8, 9, 10, 14, 21, 29, 30, 43, 71, 133, 167, 184, 185, 216, 217, 218, 219, 259, 284, 286, 287, 288, 290, 295, 298, 299, 302, 304, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 361, 397, 426, 481, 482, 487, 488, 524, 528, 531, 534, 537, 543, 548, 552, 553, 555, 558, 559], "physic": [0, 214, 524], "electron": [0, 524], "address": [0, 198, 236, 510, 522, 524, 542, 549], "without": [0, 1, 130, 165, 213, 249, 259, 286, 295, 493, 522, 524, 525, 528, 530, 535, 541, 548, 549, 550, 551, 557], "explicit": [0, 159, 524], "permiss": [0, 524], "which": [0, 2, 4, 6, 7, 12, 38, 43, 44, 69, 71, 79, 130, 135, 159, 184, 196, 197, 198, 209, 214, 234, 235, 236, 246, 255, 256, 259, 261, 269, 271, 274, 275, 278, 279, 280, 284, 285, 286, 287, 288, 292, 295, 297, 304, 307, 319, 320, 322, 329, 491, 522, 523, 524, 525, 526, 528, 530, 531, 534, 535, 538, 541, 542, 543, 544, 546, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559], "could": [0, 71, 184, 185, 198, 236, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 524, 529, 535, 544, 546, 548, 551, 557], "reason": [0, 105, 216, 217, 524, 525, 555, 557], "consid": [0, 1, 165, 263, 299, 524, 525, 528, 557], "inappropri": [0, 524], "profession": [0, 524], "set": [0, 2, 3, 4, 6, 36, 38, 41, 43, 44, 45, 69, 70, 71, 121, 130, 135, 159, 165, 176, 178, 184, 185, 186, 188, 196, 198, 201, 213, 214, 220, 224, 226, 234, 236, 239, 249, 250, 252, 254, 255, 259, 264, 265, 266, 268, 273, 277, 285, 290, 291, 295, 307, 308, 310, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 347, 384, 385, 386, 389, 406, 452, 456, 461, 482, 486, 491, 492, 494, 495, 496, 505, 506, 510, 522, 523, 524, 525, 526, 530, 534, 535, 536, 538, 541, 542, 550, 551, 554, 557, 558], "ar": [0, 2, 3, 4, 6, 7, 12, 36, 38, 45, 69, 86, 98, 142, 152, 181, 196, 213, 223, 234, 249, 255, 256, 259, 263, 269, 271, 275, 284, 285, 286, 287, 290, 291, 292, 295, 299, 321, 338, 344, 345, 426, 429, 431, 438, 479, 488, 522, 523, 524, 525, 526, 528, 529, 531, 532, 534, 536, 538, 540, 541, 542, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559], "clarifi": [0, 524], "expect": [0, 71, 142, 198, 236, 348, 464, 487, 524, 533, 551, 557], "take": [0, 2, 36, 38, 71, 184, 185, 189, 213, 217, 218, 227, 249, 284, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 524, 525, 528, 534, 548, 551, 552, 556, 557, 558], "appropri": [0, 524], "fair": [0, 524], "correct": [0, 3, 160, 175, 259, 260, 261, 263, 285, 295, 296, 297, 299, 447, 522, 524], "action": [0, 524, 535], "ani": [0, 1, 94, 142, 159, 167, 250, 255, 259, 261, 295, 297, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 373, 374, 375, 376, 377, 378, 382, 384, 385, 395, 397, 402, 403, 406, 408, 414, 423, 426, 429, 433, 436, 437, 438, 440, 443, 445, 448, 452, 456, 458, 461, 464, 467, 472, 473, 479, 480, 482, 484, 486, 487, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 509, 510, 517, 518, 522, 524, 525, 530], "instanc": [0, 1, 2, 7, 133, 135, 136, 142, 184, 185, 196, 214, 234, 255, 260, 261, 263, 266, 273, 274, 296, 297, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 363, 401, 405, 429, 438, 522, 524, 557, 558, 559], "have": [0, 3, 12, 98, 130, 165, 194, 212, 216, 217, 232, 248, 256, 259, 263, 270, 284, 286, 292, 295, 299, 522, 524, 525, 530, 534, 540, 541, 542, 545, 548, 551], "right": [0, 1, 209, 246, 259, 295, 491, 522, 524, 525, 556], "remov": [0, 3, 71, 86, 98, 109, 121, 123, 130, 135, 152, 159, 215, 252, 261, 297, 363, 366, 373, 374, 377, 379, 381, 383, 429, 487, 488, 494, 523, 524, 535, 548, 555, 557], "edit": [0, 1, 383, 389, 391, 392, 395, 524], "reject": [0, 524], "commit": [0, 524], "wiki": [0, 524], "issu": [0, 5, 522, 524, 539, 551, 555], "align": [0, 213, 249, 524, 556], "thi": [0, 2, 3, 4, 6, 7, 12, 35, 38, 43, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 110, 111, 114, 115, 124, 125, 128, 129, 130, 135, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 167, 171, 175, 184, 185, 195, 196, 197, 198, 199, 200, 201, 203, 212, 213, 216, 217, 222, 223, 233, 234, 235, 236, 237, 238, 239, 241, 248, 249, 255, 256, 259, 260, 261, 263, 268, 276, 277, 284, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 299, 310, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 521, 522, 523, 524, 525, 526, 528, 530, 531, 534, 535, 538, 540, 541, 542, 543, 544, 548, 551, 552, 553, 554, 555, 556, 557], "ban": [0, 524], "temporarili": [0, 524], "perman": [0, 524], "thei": [0, 142, 176, 214, 255, 291, 523, 524, 528, 534, 541, 545, 548], "deem": [0, 524], "threaten": [0, 524], "offens": [0, 524], "harm": [0, 524], "appli": [0, 4, 133, 148, 223, 255, 257, 284, 286, 293, 522, 524, 546, 548, 551, 552, 554, 557, 558], "both": [0, 2, 4, 7, 165, 274, 276, 524, 525, 529, 550, 551], "within": [0, 1, 254, 255, 259, 289, 295, 308, 321, 524, 542, 549], "space": [0, 2, 7, 176, 184, 185, 254, 255, 261, 266, 268, 270, 273, 274, 275, 276, 289, 291, 297, 318, 321, 322, 323, 326, 327, 328, 329, 493, 524, 525, 548, 551, 557, 558], "when": [0, 2, 4, 12, 68, 77, 88, 94, 142, 165, 196, 197, 205, 206, 207, 213, 234, 235, 243, 244, 245, 249, 256, 257, 269, 284, 285, 286, 292, 293, 491, 493, 506, 510, 522, 524, 525, 526, 531, 535, 548, 551, 556, 557], "individu": [0, 2, 94, 267, 268, 273, 284, 524], "repres": [0, 68, 198, 203, 236, 241, 259, 261, 263, 295, 297, 299, 365, 367, 368, 370, 372, 375, 376, 379, 380, 491, 524, 526, 551, 557], "its": [0, 2, 71, 121, 130, 133, 142, 167, 192, 198, 212, 213, 230, 236, 248, 249, 257, 258, 262, 263, 286, 290, 293, 294, 298, 299, 321, 322, 522, 524, 525, 528, 540, 541, 542, 547, 548, 554, 556, 557], "offici": [0, 165, 256, 260, 261, 292, 296, 297, 522, 524, 541], "e": [0, 41, 44, 70, 94, 268, 270, 290, 484, 486, 510, 524, 528, 530, 535, 557], "mail": [0, 524], "post": [0, 3, 4, 7, 36, 41, 44, 184, 185, 213, 223, 249, 252, 255, 290, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 505, 524, 529, 530, 538, 539, 546, 555, 557], "via": [0, 142, 254, 255, 277, 289, 291, 317, 510, 524, 530, 535, 538, 554], "social": [0, 524], "media": [0, 524], "account": [0, 268, 524, 554, 557], "act": [0, 194, 232, 524], "appoint": [0, 524], "onlin": [0, 6, 35, 524, 554], "offlin": [0, 35, 345, 524, 551], "event": [0, 524, 555], "represent": [0, 80, 268, 363, 364, 366, 369, 373, 374, 377, 378, 381, 382, 504, 524, 529, 545, 551], "mai": [0, 130, 159, 165, 310, 524, 525, 533, 540, 542, 547, 549, 551], "further": [0, 94, 524, 542, 543], "defin": [0, 2, 3, 4, 7, 38, 41, 43, 44, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 117, 124, 125, 128, 129, 130, 159, 184, 185, 215, 266, 267, 270, 273, 274, 275, 276, 277, 284, 285, 286, 287, 288, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 420, 421, 422, 505, 522, 524, 526, 528, 534, 538, 541, 545, 546, 548, 551, 554, 555, 557, 558], "abus": [0, 524], "otherwis": [0, 185, 198, 213, 236, 249, 322, 329, 524, 526, 550, 556], "report": [0, 522, 524, 554], "contact": [0, 524, 553, 554], "mlp": [0, 524], "mlpc": [0, 524], "dl": [0, 254, 255, 264, 277, 289, 291, 317, 524, 536, 549], "intel": [0, 2, 5, 7, 69, 217, 220, 251, 255, 262, 263, 284, 287, 298, 299, 474, 487, 524, 527, 528, 529, 532, 534, 535, 539, 540, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 555, 557, 558], "com": [0, 3, 6, 167, 196, 234, 256, 257, 260, 261, 284, 287, 292, 293, 296, 297, 487, 522, 524, 526, 535, 539, 540, 553, 554, 559], "all": [0, 1, 3, 4, 6, 7, 36, 38, 44, 45, 62, 69, 71, 84, 87, 109, 110, 122, 142, 172, 174, 186, 187, 190, 194, 198, 202, 205, 206, 207, 210, 213, 214, 215, 220, 223, 224, 232, 236, 240, 243, 244, 245, 247, 249, 252, 255, 256, 259, 261, 262, 263, 275, 278, 279, 280, 281, 284, 287, 290, 292, 295, 297, 298, 299, 301, 302, 307, 309, 310, 316, 319, 320, 321, 322, 326, 327, 329, 339, 340, 349, 360, 362, 371, 387, 389, 394, 399, 400, 413, 415, 418, 419, 425, 426, 429, 431, 438, 444, 451, 453, 457, 458, 460, 466, 471, 475, 484, 488, 510, 522, 524, 525, 526, 530, 534, 535, 539, 546, 547, 548, 549, 551, 552, 556, 557], "complaint": [0, 524], "review": [0, 524], "investig": [0, 524], "result": [0, 2, 3, 12, 36, 38, 41, 44, 69, 71, 165, 184, 209, 213, 214, 215, 246, 249, 255, 256, 259, 260, 261, 262, 263, 268, 270, 274, 292, 295, 296, 297, 298, 299, 310, 319, 320, 321, 323, 324, 326, 327, 328, 329, 346, 348, 363, 364, 377, 378, 383, 389, 392, 395, 469, 509, 512, 522, 523, 524, 525, 528, 530, 531, 535, 538, 540, 541, 545, 548, 549, 551, 554, 555, 556, 557, 559], "necessari": [0, 2, 68, 250, 255, 524, 543, 554, 557], "circumst": [0, 524, 550], "team": [0, 261, 297, 524, 552], "oblig": [0, 524], "confidenti": [0, 522, 524], "regard": [0, 524, 552], "incid": [0, 524], "detail": [0, 6, 38, 71, 213, 249, 363, 366, 373, 374, 377, 379, 381, 383, 384, 386, 389, 390, 391, 392, 393, 397, 402, 462, 467, 481, 524, 534, 536, 541, 542, 548, 553, 554, 555, 557, 559], "specif": [0, 2, 3, 7, 38, 41, 44, 69, 70, 71, 135, 136, 187, 190, 196, 197, 198, 199, 203, 205, 206, 207, 214, 220, 234, 235, 236, 237, 241, 243, 244, 245, 255, 256, 259, 265, 266, 273, 274, 292, 295, 309, 374, 384, 385, 386, 389, 397, 412, 522, 524, 528, 531, 534, 536, 541, 542, 543, 545, 550, 558], "polici": [0, 6, 326, 327, 524, 535, 547, 558], "separ": [0, 212, 248, 509, 522, 524, 536, 540, 546, 550], "who": [0, 524], "do": [0, 12, 36, 38, 41, 44, 69, 195, 196, 233, 234, 250, 251, 252, 255, 256, 259, 287, 290, 292, 295, 322, 344, 522, 524, 526, 530, 534, 535, 538, 541, 545, 552, 553, 557], "follow": [0, 2, 3, 4, 7, 9, 45, 94, 110, 113, 116, 117, 118, 119, 130, 198, 236, 255, 256, 259, 277, 292, 295, 521, 522, 523, 524, 526, 528, 531, 534, 535, 539, 540, 541, 543, 544, 546, 548, 550, 551, 555, 557], "good": [0, 524, 531, 551, 557], "faith": [0, 524], "face": [0, 524, 549, 553], "temporari": [0, 524], "repercuss": [0, 524], "determin": [0, 3, 506, 524, 531], "": [0, 2, 3, 41, 68, 70, 80, 86, 94, 130, 142, 159, 160, 175, 178, 186, 195, 198, 212, 213, 214, 216, 217, 218, 224, 233, 236, 248, 249, 255, 261, 269, 271, 284, 286, 297, 298, 299, 304, 318, 319, 320, 322, 323, 324, 326, 327, 329, 339, 340, 395, 426, 479, 480, 523, 524, 528, 530, 531, 534, 535, 538, 539, 542, 546, 547, 548, 549, 550, 551, 553, 554, 558], "leadership": [0, 524], "adapt": [0, 38, 41, 44, 69, 70, 71, 524], "from": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 41, 43, 68, 69, 71, 85, 91, 92, 94, 130, 133, 135, 142, 152, 159, 165, 184, 185, 186, 189, 193, 196, 197, 198, 199, 200, 201, 203, 208, 209, 215, 216, 217, 223, 224, 227, 231, 234, 235, 236, 237, 238, 239, 241, 246, 250, 252, 253, 255, 256, 259, 260, 261, 265, 268, 269, 270, 271, 275, 277, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 308, 310, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 344, 345, 363, 366, 367, 368, 370, 373, 374, 375, 376, 377, 379, 381, 383, 384, 386, 389, 390, 391, 392, 393, 395, 406, 411, 429, 432, 441, 442, 443, 445, 467, 472, 486, 487, 491, 493, 494, 495, 510, 512, 517, 518, 523, 524, 525, 526, 528, 529, 530, 532, 533, 535, 538, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], "version": [0, 1, 6, 7, 38, 41, 43, 44, 70, 71, 77, 184, 251, 252, 445, 477, 482, 493, 522, 524, 534, 539, 540, 547, 549, 557], "1": [0, 1, 3, 4, 6, 7, 36, 38, 41, 44, 45, 68, 69, 71, 78, 98, 114, 133, 135, 163, 165, 173, 175, 186, 188, 191, 192, 193, 195, 196, 197, 199, 200, 203, 204, 209, 213, 214, 215, 216, 217, 224, 226, 229, 230, 231, 233, 234, 235, 237, 238, 241, 242, 246, 249, 254, 255, 259, 260, 261, 263, 268, 271, 277, 284, 286, 289, 290, 291, 295, 296, 297, 299, 317, 318, 322, 338, 348, 464, 472, 521, 523, 524, 525, 526, 528, 531, 534, 535, 541, 542, 545, 546, 547, 548, 550, 551, 553, 555, 556, 557, 558], "4": [0, 3, 6, 7, 12, 71, 77, 205, 206, 207, 208, 209, 210, 213, 243, 244, 245, 246, 247, 249, 256, 257, 259, 292, 293, 295, 484, 523, 524, 525, 533, 534, 538, 539, 541, 547, 548, 556, 557, 559], "avail": [0, 6, 8, 9, 10, 14, 21, 29, 30, 35, 304, 361, 365, 367, 368, 372, 375, 376, 380, 445, 522, 538, 547, 554, 557], "http": [0, 3, 6, 167, 196, 198, 234, 236, 256, 257, 259, 260, 261, 284, 286, 287, 292, 293, 295, 296, 297, 518, 522, 526, 535, 539, 540, 553], "www": [0, 198, 236, 526, 559], "org": [0, 6, 259, 286, 295, 522, 539], "html": 0, "For": [0, 1, 3, 4, 5, 7, 135, 198, 212, 213, 223, 236, 248, 249, 255, 259, 260, 261, 263, 268, 284, 287, 295, 296, 297, 299, 318, 322, 484, 522, 524, 529, 530, 534, 535, 538, 548, 552, 555, 557, 558, 559], "answer": [0, 213, 249, 260, 261, 296, 297, 524, 556, 559], "common": [0, 4, 6, 9, 211, 255, 265, 271, 274, 275, 276, 284, 290, 291, 338, 487, 488, 493, 523, 524, 525, 526, 528, 530, 535, 536, 539, 543, 544, 548, 551], "question": [0, 7, 213, 249, 260, 261, 296, 297, 524, 539, 556, 559], "about": [0, 397, 426, 479, 481, 482, 487, 488, 522, 524, 525, 531, 552, 559], "see": [0, 1, 3, 5, 213, 249, 256, 259, 292, 295, 522, 524, 535, 540, 544, 548, 555, 559], "faq": [0, 6, 524], "pytorch": [1, 6, 7, 195, 196, 198, 201, 202, 205, 206, 207, 210, 213, 215, 220, 222, 233, 234, 236, 239, 240, 243, 244, 245, 247, 249, 251, 252, 253, 254, 255, 262, 263, 264, 282, 284, 287, 289, 298, 299, 309, 318, 348, 418, 425, 448, 458, 475, 528, 530, 531, 532, 534, 538, 539, 542, 543, 548, 549, 550, 551, 553, 557, 558], "toolkit": [1, 6, 539, 549], "develop": [1, 167, 493, 524, 539, 542, 549, 551, 552, 554], "transform": [1, 6, 14, 31, 44, 68, 74, 86, 114, 115, 117, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 160, 163, 164, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 255, 291, 357, 361, 366, 371, 384, 387, 389, 394, 396, 418, 493, 494, 495, 496, 523, 525, 526, 528, 529, 530, 548, 549, 552, 555, 557, 558], "nn": [1, 3, 4, 171, 215, 251, 252, 271, 318, 543, 548, 555], "modul": [1, 3, 4, 251, 272, 273, 282, 283, 483, 490, 498, 522, 523, 528, 538, 541, 543, 550, 552, 555], "With": [1, 4, 7, 121, 525, 545, 548, 549, 551, 559], "convert": [1, 3, 4, 36, 38, 43, 68, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 127, 128, 129, 196, 209, 212, 213, 234, 246, 248, 249, 255, 259, 263, 265, 274, 276, 285, 295, 299, 301, 302, 303, 309, 335, 365, 372, 380, 472, 484, 535, 542, 544, 551, 552, 556], "torch": [1, 3, 4, 69, 167, 171, 215, 251, 252, 263, 271, 299, 309, 318, 530, 542, 543, 548, 551, 555], "graphmodul": [1, 69, 171, 552], "can": [1, 2, 3, 4, 6, 7, 80, 160, 167, 175, 176, 184, 185, 195, 198, 213, 214, 216, 217, 233, 236, 249, 255, 259, 261, 263, 284, 286, 287, 288, 291, 295, 297, 299, 310, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 448, 477, 484, 493, 522, 523, 525, 526, 528, 530, 531, 534, 535, 538, 539, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558], "automat": [1, 6, 198, 201, 208, 209, 236, 239, 246, 254, 255, 264, 271, 289, 522, 526, 538, 542, 546, 556, 557], "insert": [1, 3, 71, 127, 130, 133, 152, 163, 251, 252, 538, 551, 552, 555], "quant": [1, 3, 71, 171, 551], "dequant": [1, 3, 113, 116, 118, 119, 121, 148, 167, 171, 326, 397, 555], "oper": [1, 3, 68, 130, 165, 209, 246, 284, 505, 509, 522, 545, 551, 556, 557], "symbolic_trac": 1, "fake": [1, 4, 71, 133, 551], "valu": [1, 3, 4, 36, 38, 41, 44, 45, 68, 69, 71, 79, 80, 86, 91, 92, 94, 114, 115, 130, 135, 159, 160, 165, 175, 177, 178, 184, 185, 196, 199, 200, 209, 213, 214, 215, 234, 237, 238, 246, 249, 259, 263, 269, 270, 284, 285, 287, 295, 299, 309, 310, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 336, 338, 339, 345, 357, 359, 361, 365, 367, 368, 370, 372, 375, 376, 380, 384, 385, 406, 408, 447, 476, 479, 480, 484, 486, 491, 493, 501, 503, 504, 506, 517, 522, 525, 526, 531, 534, 541, 545, 548, 550, 551, 556, 557, 558], "call": [1, 2, 7, 35, 43, 142, 223, 255, 259, 270, 271, 277, 284, 286, 287, 291, 295, 317, 362, 394, 479, 487, 488, 522, 525, 536, 548, 551, 555, 556, 557], "proxi": 1, "fed": 1, "model": [1, 2, 4, 7, 10, 36, 38, 41, 43, 44, 45, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 136, 159, 165, 167, 171, 176, 181, 184, 185, 192, 195, 196, 198, 213, 214, 215, 217, 218, 223, 230, 233, 234, 236, 249, 250, 251, 252, 253, 254, 255, 263, 264, 265, 266, 267, 269, 271, 273, 274, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 338, 344, 345, 347, 348, 349, 351, 361, 363, 371, 374, 377, 379, 386, 387, 388, 389, 390, 391, 393, 394, 395, 397, 401, 405, 406, 411, 412, 413, 416, 417, 418, 442, 443, 445, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 466, 468, 471, 472, 475, 476, 483, 491, 493, 498, 508, 509, 513, 523, 525, 526, 528, 529, 530, 531, 535, 536, 538, 540, 541, 542, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 558], "record": [1, 3, 196, 197, 198, 204, 215, 222, 234, 235, 236, 242, 526, 554, 555, 557], "Then": [1, 259, 295, 522, 535], "get": [1, 38, 41, 44, 69, 70, 71, 91, 92, 94, 130, 135, 142, 159, 165, 171, 176, 178, 186, 189, 207, 210, 213, 214, 220, 222, 223, 224, 227, 245, 247, 249, 252, 253, 254, 255, 264, 271, 276, 277, 284, 286, 288, 289, 290, 291, 307, 308, 309, 310, 326, 327, 339, 340, 345, 346, 351, 357, 358, 359, 361, 363, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 401, 405, 406, 411, 423, 426, 427, 429, 431, 432, 436, 437, 438, 440, 443, 445, 447, 448, 449, 450, 455, 459, 462, 463, 465, 469, 470, 472, 474, 481, 482, 486, 491, 493, 494, 496, 500, 503, 505, 506, 509, 510, 514, 516, 517, 518, 519, 522, 523, 525, 526, 538, 539, 555, 557], "sure": [1, 3, 159, 284, 286, 288, 426, 522], "replac": [1, 3, 44, 109, 110, 130, 261, 297, 322, 493, 530, 535, 553], "backend": [1, 38, 41, 44, 45, 69, 70, 71, 187, 188, 192, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 220, 225, 226, 228, 230, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 264, 521, 530, 531, 536, 538, 550, 551, 556, 558], "pytorch_fx": [1, 198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 550], "conf": [1, 2, 4, 172, 174, 184, 185, 214, 255, 264, 265, 277, 290, 301, 302, 303, 309, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 504, 523, 525, 528, 535, 536, 557], "yaml": [1, 4, 7, 69, 70, 71, 176, 177, 178, 184, 185, 196, 198, 214, 223, 234, 236, 250, 254, 255, 265, 266, 267, 273, 274, 277, 289, 290, 291, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 346, 350, 351, 352, 353, 354, 356, 358, 359, 441, 443, 450, 455, 459, 462, 504, 526, 528, 531, 535, 536, 541, 544, 545, 548, 550, 555, 556, 557], "you": [1, 4, 6, 194, 196, 232, 234, 259, 286, 295, 522, 523, 524, 525, 526, 530, 539, 540, 541, 553, 554, 555, 557], "usual": [1, 4, 36, 38, 41, 44, 69, 71, 196, 234, 255, 277, 525, 528, 546, 551], "neural": [1, 7, 21, 43, 69, 167, 208, 209, 210, 213, 214, 217, 220, 223, 246, 247, 249, 251, 255, 262, 263, 265, 277, 284, 287, 289, 290, 298, 299, 304, 401, 405, 429, 438, 474, 481, 493, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 545, 546, 549, 551, 553, 555, 556, 557, 558], "_": [1, 3, 4, 7, 184, 185, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 521, 528, 530, 531, 534, 535, 541, 542, 543, 545, 548, 551, 552, 553, 554, 555, 557, 558], "compressor": [1, 2, 7, 43, 69, 208, 209, 210, 213, 214, 217, 220, 223, 246, 247, 249, 251, 255, 262, 263, 265, 284, 287, 289, 290, 298, 299, 304, 401, 405, 429, 438, 474, 481, 493, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 545, 546, 548, 549, 551, 553, 555, 556, 557, 558], "sourc": [1, 6, 36, 38, 45, 71, 217, 255, 257, 265, 293, 410, 540, 544, 549], "code": [1, 6, 7, 184, 185, 214, 255, 265, 287, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 384, 389, 407, 425, 487, 488, 518, 519, 525, 526, 528, 530, 536, 538, 540, 541, 545, 546, 548, 549, 550, 551, 554, 555, 556, 557], "shown": [1, 2, 406, 522, 528, 535, 541, 545, 546, 557], "below": [1, 2, 4, 7, 78, 90, 98, 290, 319, 320, 521, 524, 528, 530, 535, 536, 541, 545, 546, 548, 550, 551, 555, 557], "arg": [1, 2, 3, 43, 69, 77, 127, 196, 197, 198, 234, 235, 236, 254, 255, 265, 284, 289, 290, 301, 302, 303, 308, 309, 310, 321, 335, 350, 352, 354, 355, 356, 365, 367, 368, 370, 372, 375, 376, 380, 479, 487, 506, 525, 526, 528, 530, 543, 548, 551, 555, 556], "tune": [1, 4, 6, 7, 36, 38, 41, 43, 44, 69, 71, 176, 184, 185, 196, 198, 234, 236, 254, 255, 289, 291, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 356, 374, 381, 382, 389, 391, 395, 418, 448, 453, 463, 475, 483, 494, 498, 522, 525, 526, 530, 531, 538, 540, 542, 545, 548, 549, 552, 553, 554, 555, 558], "neural_compressor": [1, 2, 4, 6, 12, 523, 525, 526, 528, 530, 535, 536, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 556, 557, 558], "experiment": [1, 2, 4, 6, 12, 208, 291, 472, 523, 525, 526, 528, 530, 535, 542, 543, 544, 545, 546, 548, 550, 552, 553, 556], "import": [1, 2, 3, 4, 6, 165, 255, 265, 268, 335, 345, 523, 525, 526, 528, 530, 535, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 555, 556], "eval": [1, 3, 4, 44, 223, 255, 259, 265, 295, 555], "q_model": [1, 4, 69, 167, 255, 265, 525, 526, 530, 536, 541, 543, 544, 545, 551], "fit": [1, 4, 6, 176, 318, 321, 525, 526, 528, 530, 536, 541, 543, 545, 546, 548, 551], "save": [1, 2, 3, 7, 36, 38, 41, 44, 69, 71, 130, 198, 202, 207, 236, 240, 245, 251, 252, 269, 274, 290, 301, 302, 303, 305, 307, 308, 309, 322, 335, 336, 339, 345, 535, 536, 542, 543, 544, 548, 551], "tuned_checkpoint": 1, "return": [1, 2, 3, 4, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 74, 77, 80, 81, 84, 85, 86, 87, 91, 92, 94, 98, 105, 109, 110, 114, 115, 116, 117, 118, 119, 127, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 167, 171, 172, 174, 178, 184, 185, 186, 188, 195, 198, 202, 205, 206, 207, 209, 210, 212, 213, 214, 215, 220, 224, 226, 233, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 280, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 338, 339, 340, 344, 345, 363, 364, 366, 373, 374, 375, 376, 377, 379, 381, 382, 406, 409, 410, 411, 412, 443, 479, 482, 484, 486, 487, 488, 493, 496, 505, 506, 509, 526, 530, 541, 542, 543, 545, 551, 555, 557], "now": [1, 2, 213, 249, 491, 526, 530, 535, 544, 550, 556, 557], "support": [1, 2, 3, 38, 41, 44, 68, 69, 70, 71, 98, 105, 122, 184, 185, 186, 195, 196, 198, 202, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 220, 223, 224, 233, 234, 236, 240, 243, 244, 245, 246, 247, 249, 255, 262, 263, 265, 270, 271, 275, 277, 278, 279, 280, 284, 286, 290, 298, 299, 304, 310, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 339, 340, 361, 426, 429, 431, 432, 434, 436, 437, 439, 445, 476, 484, 493, 522, 523, 531, 535, 544, 549, 552, 554, 557, 559], "auto": [1, 319, 345], "method": [1, 2, 3, 4, 6, 69, 130, 142, 159, 160, 171, 189, 194, 195, 196, 198, 202, 205, 206, 207, 210, 213, 216, 217, 227, 232, 233, 234, 236, 240, 243, 244, 245, 247, 249, 255, 262, 263, 268, 271, 274, 275, 276, 280, 289, 298, 299, 301, 302, 303, 305, 307, 308, 309, 479, 484, 488, 505, 523, 525, 528, 529, 531, 541, 546, 548, 551, 552, 556, 557], "avoid": [1, 196, 234, 555], "user": [1, 2, 3, 6, 7, 41, 70, 130, 176, 184, 185, 187, 190, 198, 201, 205, 206, 207, 213, 214, 220, 223, 236, 239, 243, 244, 245, 249, 254, 255, 268, 270, 277, 287, 289, 290, 291, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 345, 478, 528, 531, 534, 535, 538, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 555, 556, 557], "log": [1, 163, 277, 348, 363, 374, 377, 383, 389, 391, 392, 448, 479, 485, 486, 487, 488, 492, 506, 522, 554, 555, 557], "output": [1, 3, 4, 7, 12, 35, 45, 69, 71, 77, 83, 84, 94, 98, 109, 110, 116, 118, 123, 130, 133, 142, 159, 165, 178, 184, 185, 212, 215, 217, 218, 222, 248, 250, 251, 252, 254, 255, 256, 259, 263, 268, 269, 284, 292, 295, 298, 299, 308, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 339, 363, 374, 377, 383, 389, 391, 392, 426, 436, 437, 438, 452, 456, 459, 479, 487, 494, 500, 522, 525, 528, 530, 534, 535, 536, 541, 543, 548, 550, 551, 555, 556, 557, 558], "fail": [1, 130, 488], "symbol": [1, 43, 171, 256, 292, 318, 543], "trace": [1, 69, 167, 171, 251, 252, 318], "info": [1, 36, 38, 41, 44, 69, 130, 207, 210, 211, 216, 217, 221, 252, 284, 290, 304, 363, 364, 366, 373, 374, 377, 378, 382, 479, 482, 487, 493, 509, 522, 524, 535, 543], "entir": [1, 3, 4, 318, 548], "conduct": 1, "combin": [1, 7, 41, 70, 184, 185, 209, 223, 246, 255, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 531, 538, 546, 549, 552, 556, 557], "imper": 1, "control": [1, 36, 38, 41, 71, 110, 172, 174, 271, 389, 394, 522, 547, 557], "flow": [1, 2, 255, 260, 261, 277, 296, 297], "therefor": [1, 4, 551, 553], "int8": [1, 4, 7, 36, 38, 41, 44, 68, 69, 70, 71, 160, 167, 175, 209, 246, 251, 252, 322, 326, 327, 339, 340, 397, 521, 522, 526, 529, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558], "consist": [1, 79, 87, 522, 524, 557], "lot": [1, 531], "9": [1, 3, 4, 6, 270, 539, 548, 550, 558, 559], "higher": [1, 4, 184, 185, 275, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 528, 541, 542, 548, 551, 554], "between": [1, 3, 7, 71, 160, 167, 175, 213, 215, 249, 260, 262, 263, 268, 270, 271, 296, 298, 299, 326, 397, 505, 509, 523, 528, 535, 538, 541, 551, 553, 554, 556, 557], "don": [1, 35, 160, 175, 484, 522, 557], "t": [1, 3, 7, 35, 91, 92, 94, 130, 159, 160, 175, 213, 216, 217, 249, 261, 270, 271, 290, 297, 484, 492, 522, 523, 525, 528, 530, 542, 548, 557, 558, 559], "need": [1, 4, 7, 35, 36, 38, 41, 43, 44, 69, 71, 76, 77, 78, 79, 82, 83, 86, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 151, 152, 156, 159, 176, 184, 185, 186, 194, 195, 198, 205, 206, 207, 213, 216, 217, 218, 219, 224, 232, 233, 236, 243, 244, 245, 249, 250, 255, 262, 263, 268, 277, 290, 298, 299, 302, 304, 307, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 512, 522, 523, 525, 526, 528, 530, 538, 542, 545, 548, 550, 551, 552, 553, 556, 557, 558], "becaus": [1, 213, 249, 259, 284, 295, 548, 551, 556, 557], "modifi": [1, 80, 86, 94, 105, 198, 236, 287, 473, 522, 523, 530, 534, 558], "8": [1, 3, 4, 6, 133, 212, 248, 484, 534, 539, 545, 549, 559], "As": [1, 105, 259, 295, 522, 525, 528, 531, 548, 557], "cannot": [1, 259, 295, 482, 533, 555], "handl": [1, 5, 84, 86, 165, 255, 268, 269, 270, 289, 484, 509, 510, 525], "tensor": [1, 3, 36, 38, 41, 43, 44, 45, 68, 69, 71, 94, 130, 142, 159, 165, 167, 213, 215, 249, 251, 252, 280, 281, 284, 286, 288, 307, 308, 309, 326, 327, 339, 340, 386, 389, 397, 426, 526, 548, 551, 553, 555, 556, 557, 559], "iter": [1, 2, 4, 7, 36, 38, 41, 43, 44, 45, 69, 71, 165, 184, 185, 189, 194, 198, 199, 202, 207, 216, 217, 227, 232, 236, 237, 240, 245, 274, 286, 288, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 339, 340, 363, 487, 494, 525, 528, 548, 550, 555, 557, 558], "so": [1, 7, 142, 213, 249, 286, 335, 531, 533, 538, 541, 551, 552, 555, 556, 557], "might": [1, 522, 524, 557], "meet": [1, 6, 290, 322, 535, 545, 549, 550, 551, 555, 557], "failur": [1, 505], "sometim": [1, 130, 159, 548, 551], "order": [1, 12, 171, 256, 257, 290, 292, 293, 319, 320, 326, 327, 426, 429, 438, 495, 541, 548, 550, 555, 557], "successfulli": [1, 530, 549], "suggest": [1, 276, 554], "two": [1, 2, 117, 130, 167, 198, 202, 203, 207, 214, 236, 240, 241, 245, 259, 284, 288, 290, 295, 345, 522, 523, 526, 528, 530, 534, 535, 541, 542, 546, 548, 551, 552, 554, 557, 558], "approach": [1, 2, 6, 69, 177, 255, 266, 267, 268, 273, 274, 361, 494, 501, 528, 531, 538, 549, 550, 557, 558], "preprocess": [1, 196, 207, 210, 213, 234, 245, 247, 249, 250, 255, 525, 530, 556], "here": [1, 3, 4, 6, 35, 94, 142, 259, 266, 273, 295, 522, 526, 530, 534, 541, 545, 548, 551, 553, 554, 557], "non": [1, 3, 142, 220, 285, 547, 548, 557], "traceabl": [1, 69], "class": [1, 2, 3, 62, 136, 275, 316, 318, 420, 421, 523, 525, 526, 528, 531, 535, 541, 545, 546, 555, 557, 558], "name": [1, 3, 6, 36, 38, 44, 45, 68, 69, 71, 77, 86, 87, 91, 92, 94, 130, 135, 136, 152, 159, 165, 167, 172, 174, 178, 196, 197, 198, 201, 202, 205, 206, 207, 210, 211, 213, 214, 215, 217, 218, 220, 221, 222, 234, 235, 236, 239, 240, 243, 244, 245, 247, 249, 251, 252, 258, 259, 262, 263, 268, 269, 271, 277, 280, 284, 286, 288, 290, 294, 295, 298, 299, 304, 308, 309, 336, 339, 345, 363, 367, 368, 370, 373, 374, 375, 376, 377, 379, 397, 406, 408, 426, 429, 431, 432, 438, 445, 446, 447, 448, 459, 472, 479, 482, 493, 495, 496, 517, 522, 523, 526, 530, 531, 534, 535, 540, 541, 543, 547, 553, 554, 555, 557, 558, 559], "select": [1, 2, 196, 234, 267, 271, 273, 522, 538, 539, 551, 555, 557], "object": [1, 2, 3, 6, 12, 36, 38, 41, 43, 44, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 124, 125, 128, 129, 130, 133, 136, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 167, 171, 172, 174, 176, 177, 178, 184, 185, 186, 187, 189, 190, 194, 196, 197, 198, 202, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 227, 232, 234, 235, 236, 240, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 259, 262, 263, 264, 267, 268, 270, 273, 274, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 298, 299, 302, 303, 304, 305, 308, 309, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 336, 338, 339, 340, 344, 345, 361, 375, 376, 379, 381, 422, 484, 487, 493, 503, 505, 506, 510, 522, 523, 525, 526, 533, 541, 542, 543, 546, 550, 551, 556, 557], "pass": [1, 3, 4, 7, 101, 105, 165, 176, 212, 248, 287, 290, 345, 440, 492, 505, 506, 523, 525, 526, 528, 530, 536, 541, 545, 548, 550, 551, 552, 557, 558], "them": [1, 86, 130, 196, 234, 525, 534, 536, 546, 548, 557], "dict": [1, 36, 38, 41, 43, 44, 69, 71, 133, 135, 136, 142, 165, 167, 171, 177, 178, 184, 185, 195, 198, 214, 215, 220, 233, 236, 251, 252, 255, 258, 259, 260, 261, 263, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 294, 295, 296, 297, 299, 303, 308, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 336, 338, 339, 344, 345, 346, 348, 351, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 402, 403, 406, 414, 423, 426, 433, 441, 442, 443, 445, 447, 448, 449, 450, 455, 459, 462, 463, 464, 465, 467, 469, 470, 472, 479, 480, 482, 484, 486, 487, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 509, 510, 512, 514, 516, 517, 519, 541, 550, 555, 557], "These": [1, 3, 538], "function": [1, 2, 4, 7, 38, 41, 44, 71, 86, 130, 159, 184, 185, 197, 223, 235, 254, 255, 266, 273, 274, 277, 287, 290, 307, 319, 320, 322, 323, 324, 326, 327, 328, 336, 339, 522, 523, 525, 528, 536, 538, 539, 541, 542, 548, 551, 554, 555, 557], "If": [1, 86, 91, 92, 94, 98, 105, 130, 184, 185, 198, 213, 236, 249, 259, 271, 284, 285, 286, 295, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 522, 524, 526, 530, 535, 539, 540, 541, 542, 545, 546, 551, 554, 555, 556, 557], "conv2d": [1, 3, 41, 70, 84, 85, 89, 90, 95, 96, 160, 301, 302, 303, 307, 308, 309, 534, 555], "won": 1, "detect": [1, 69, 167, 171, 259, 263, 295, 299, 304, 426, 429, 438, 493, 522], "maskrcnn": 1, "tool": [1, 6, 7, 165, 345, 525, 535, 540, 549, 551], "test": [1, 6, 45, 213, 249, 268, 522, 524, 539, 559], "net": [1, 3], "py": [1, 2, 3, 7, 130, 165, 167, 257, 259, 260, 261, 286, 293, 295, 296, 297, 509, 522, 530, 539, 544, 551, 553, 555], "prepare_custom_config_dict": 1, "non_traceable_module_class": 1, "anchorgener": 1, "rpnpostprocessor": 1, "pooler": 1, "postprocessor": 1, "maskrcnnfpnfeatureextractor": 1, "maskpostprocessor": 1, "fpn": 1, "rpnhead": 1, "decor": [1, 2, 7, 36, 62, 91, 92, 94, 165, 172, 174, 207, 210, 213, 220, 245, 247, 249, 262, 263, 275, 280, 284, 286, 288, 298, 299, 310, 316, 329, 345, 489, 557], "wrap": [1, 71, 136, 142, 215, 259, 295, 357, 530], "untrac": 1, "part": [1, 45, 250, 255, 259, 284, 286, 295, 525, 528, 535, 539, 542, 548], "like": [1, 2, 7, 36, 38, 41, 44, 69, 71, 98, 121, 123, 130, 159, 165, 184, 185, 186, 198, 202, 207, 224, 236, 240, 245, 254, 255, 263, 269, 286, 289, 290, 299, 301, 302, 303, 307, 308, 309, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 522, 524, 528, 531, 535, 538, 544, 546, 548, 551, 557], "global": [1, 135, 284, 506, 550, 557], "want": [1, 7, 91, 92, 94, 130, 194, 196, 232, 234, 286, 335, 522, 523, 526, 530, 541, 545, 546, 554, 555, 557], "move": [1, 71, 550, 553], "out": [1, 6, 159, 196, 197, 198, 234, 235, 236, 254, 255, 284, 289, 307, 524, 526, 550, 551], "keep": [1, 7, 284, 285, 553], "should": [1, 2, 3, 7, 38, 41, 44, 45, 69, 70, 71, 78, 98, 135, 136, 160, 164, 184, 185, 194, 196, 198, 202, 207, 212, 213, 217, 218, 232, 234, 236, 240, 245, 248, 249, 252, 257, 262, 263, 286, 290, 293, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 406, 484, 522, 526, 530, 541, 545, 551, 556, 557, 558], "try": [1, 194, 232, 426, 429, 438, 506, 551], "must": [1, 213, 249, 259, 263, 295, 299, 535, 539, 556, 557], "ssd": [1, 559], "resnet34": [1, 559], "ptq": [1, 530, 538, 551, 555], "python": [1, 9, 99, 142, 165, 198, 217, 236, 255, 259, 295, 345, 445, 522, 524, 526, 530, 539, 549, 552, 556], "r34": 1, "def": [1, 2, 3, 4, 7, 91, 92, 94, 152, 184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 526, 528, 530, 541, 545, 548, 551, 555, 557], "bboxes_labels_scor": 1, "bbox": [1, 259, 295, 541], "prob": 1, "criteria": [1, 254, 255, 277, 284, 286, 289, 291, 317, 557], "0": [1, 3, 4, 6, 9, 36, 38, 41, 45, 68, 69, 70, 77, 115, 159, 165, 173, 181, 186, 188, 191, 192, 193, 195, 196, 199, 200, 203, 209, 213, 215, 216, 217, 224, 226, 229, 230, 231, 233, 234, 237, 238, 241, 246, 249, 251, 252, 254, 255, 263, 268, 270, 271, 275, 277, 284, 289, 291, 299, 317, 479, 487, 522, 523, 525, 526, 528, 530, 531, 534, 540, 541, 542, 545, 547, 548, 550, 551, 554, 555, 556, 557, 558], "45": [1, 270, 559], "max_output": 1, "200": [1, 212, 248, 557, 559], "box": [1, 213, 249, 259, 263, 295, 299, 522, 541, 555, 556, 557], "label": [1, 12, 36, 38, 71, 184, 185, 196, 198, 199, 200, 201, 204, 209, 213, 215, 217, 218, 234, 236, 237, 238, 239, 242, 246, 249, 256, 258, 262, 263, 268, 269, 292, 294, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 414, 526, 541, 548, 556], "score": [1, 12, 256, 257, 259, 260, 261, 263, 284, 286, 292, 293, 295, 296, 297, 299, 541, 545, 548, 554, 557], "zip": 1, "split": [1, 159, 212, 213, 248, 249, 268, 556], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 171, 290, 321, 545, 546], "process": [2, 4, 7, 36, 38, 41, 44, 69, 71, 136, 167, 184, 185, 196, 197, 198, 207, 209, 210, 213, 214, 223, 234, 235, 236, 245, 246, 247, 249, 250, 251, 252, 255, 266, 267, 270, 273, 274, 277, 284, 286, 287, 288, 290, 291, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 360, 441, 442, 445, 475, 479, 483, 486, 487, 494, 522, 523, 525, 526, 528, 529, 530, 535, 546, 548, 551, 555, 556, 557, 558], "autom": 2, "design": [2, 142, 195, 217, 218, 223, 233, 255, 270, 289, 298, 299, 548, 551], "artifici": 2, "network": [2, 3, 6, 167, 268, 271, 286, 522, 528, 529, 549, 551], "ann": 2, "ha": [2, 7, 12, 36, 38, 41, 44, 69, 71, 86, 87, 91, 92, 94, 98, 117, 130, 142, 159, 214, 255, 256, 270, 284, 286, 292, 319, 320, 522, 525, 535, 538, 542, 550, 551, 552, 554], "been": [2, 12, 87, 212, 248, 256, 270, 284, 286, 292, 522, 528, 535, 542], "par": 2, "outperform": 2, "hand": [2, 259, 295, 522], "simplest": [2, 528], "launcher": [2, 528, 548], "configur": [2, 3, 7, 35, 36, 38, 41, 43, 44, 69, 70, 71, 130, 171, 176, 177, 181, 184, 185, 187, 190, 198, 201, 207, 214, 236, 239, 250, 251, 252, 254, 255, 259, 265, 266, 267, 268, 270, 273, 274, 277, 285, 287, 289, 290, 291, 295, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 344, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 374, 384, 386, 389, 448, 450, 455, 459, 462, 475, 477, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 508, 510, 522, 523, 526, 529, 541, 545, 553, 556, 559], "agent": 2, "path": [2, 3, 7, 36, 38, 41, 44, 69, 71, 159, 165, 176, 177, 196, 197, 198, 213, 234, 235, 236, 249, 250, 251, 252, 254, 255, 265, 266, 267, 268, 271, 273, 274, 277, 285, 287, 289, 290, 291, 303, 305, 308, 309, 317, 318, 335, 345, 346, 351, 363, 366, 373, 374, 377, 383, 384, 389, 391, 392, 406, 412, 423, 426, 429, 431, 432, 434, 436, 437, 438, 439, 443, 450, 455, 459, 462, 463, 469, 479, 487, 491, 493, 494, 503, 518, 522, 523, 525, 526, 528, 530, 535, 536, 541, 543, 544, 548, 556, 557, 558], "syntax": [2, 534], "note": [2, 3, 6, 36, 38, 41, 44, 69, 71, 78, 259, 287, 295, 321, 322, 379, 389, 393, 522, 523, 530, 531, 534, 535, 548, 551, 555, 557, 558, 559], "dyna": [2, 255, 268, 269, 270, 271, 272, 273, 291, 538, 550], "section": [2, 522, 528, 548, 550, 558], "option": [2, 36, 38, 41, 44, 69, 71, 130, 159, 181, 184, 185, 186, 196, 213, 215, 224, 234, 249, 251, 252, 255, 259, 265, 270, 271, 284, 290, 291, 295, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 345, 351, 362, 363, 364, 366, 373, 374, 377, 379, 381, 382, 384, 389, 394, 397, 426, 433, 436, 437, 438, 443, 452, 456, 462, 463, 465, 470, 479, 480, 484, 487, 491, 493, 494, 496, 499, 501, 503, 512, 518, 523, 525, 526, 531, 534, 535, 542, 556, 557, 558], "requir": [2, 3, 4, 7, 133, 142, 223, 255, 259, 271, 290, 295, 303, 308, 322, 347, 349, 357, 360, 413, 419, 426, 429, 431, 438, 444, 451, 452, 453, 454, 456, 457, 458, 460, 461, 466, 471, 475, 522, 523, 525, 529, 530, 534, 535, 539, 542, 543, 547, 551, 553, 555, 557, 558], "search_algorithm": [2, 177, 255, 273, 274, 291], "nsga2": [2, 270], "seed": [2, 165, 268, 270, 276, 503, 525, 531, 557, 558], "42": [2, 276, 547, 559], "supernet": [2, 270, 271], "ofa_mbv3_d234_e346_k357_w1": 2, "metric": [2, 6, 7, 10, 12, 36, 38, 41, 44, 69, 71, 184, 185, 214, 217, 250, 254, 255, 265, 266, 267, 269, 271, 273, 274, 275, 276, 277, 289, 290, 291, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 357, 361, 366, 371, 384, 387, 389, 394, 418, 475, 483, 486, 490, 493, 494, 496, 512, 522, 523, 525, 530, 535, 542, 554, 555, 557, 558, 559], "acc": [2, 3, 41, 44, 263, 271, 299, 310, 555, 559], "mac": [2, 267, 269, 271, 273], "popul": [2, 270], "50": [2, 259, 261, 270, 295, 297, 535, 559], "num_ev": [2, 270], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 268, 271, 493, 522], "batch_siz": [2, 3, 186, 188, 191, 192, 193, 194, 195, 196, 197, 216, 217, 224, 226, 229, 230, 231, 232, 233, 234, 235, 251, 252, 271, 351, 363, 374, 472, 494, 523, 525, 526, 530, 535, 536, 551], "64": [2, 3, 213, 249, 556, 559], "dataset_path": [2, 271, 494], "dataset": [2, 4, 6, 7, 14, 36, 38, 41, 44, 69, 71, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 207, 216, 217, 224, 226, 227, 229, 230, 231, 232, 233, 245, 254, 255, 259, 260, 261, 263, 265, 271, 289, 290, 291, 295, 296, 297, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 363, 371, 374, 377, 384, 389, 393, 394, 395, 406, 418, 491, 493, 494, 495, 523, 525, 530, 531, 535, 541, 551, 557, 558, 559], "imagenet": [2, 4, 198, 201, 209, 236, 239, 246, 271, 555, 556, 558, 559], "ilsvrc2012": [2, 271], "also": [2, 3, 6, 7, 12, 195, 198, 202, 207, 213, 233, 236, 240, 245, 249, 256, 292, 318, 522, 523, 524, 525, 528, 535, 538, 541, 545, 546, 548, 551, 552, 557], "nasconfig": [2, 177, 255, 267, 273, 274], "argument": [2, 287, 290, 347, 452, 456, 461, 467, 479, 487, 506, 523, 528, 535], "config": [2, 41, 43, 44, 69, 70, 71, 133, 135, 136, 142, 176, 184, 185, 196, 214, 223, 234, 254, 255, 268, 274, 277, 284, 285, 286, 287, 288, 291, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 338, 344, 345, 346, 347, 350, 351, 352, 354, 356, 359, 383, 389, 391, 392, 396, 397, 441, 443, 450, 452, 455, 456, 459, 461, 462, 469, 472, 475, 483, 493, 496, 497, 498, 499, 503, 504, 506, 514, 516, 519, 522, 526, 528, 530, 535, 538, 543, 548, 550, 552, 555, 557], "under": [2, 3, 130, 142, 198, 236, 344, 522, 526, 535, 540, 541, 546, 548, 551, 555, 557], "file": [2, 7, 69, 159, 165, 176, 177, 184, 185, 196, 197, 198, 201, 212, 213, 222, 234, 235, 236, 239, 248, 249, 250, 252, 254, 255, 259, 265, 266, 267, 268, 269, 271, 273, 274, 277, 285, 287, 289, 290, 291, 295, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 350, 351, 352, 353, 354, 355, 356, 406, 443, 452, 456, 463, 479, 486, 487, 492, 493, 494, 506, 510, 514, 516, 518, 519, 522, 526, 530, 533, 535, 536, 540, 541, 543, 545, 548, 550, 555, 556, 557], "input": [2, 7, 36, 38, 43, 45, 68, 69, 71, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 111, 114, 115, 124, 125, 127, 128, 129, 130, 135, 136, 142, 159, 165, 167, 171, 184, 185, 196, 197, 198, 200, 209, 212, 213, 215, 217, 218, 223, 234, 235, 236, 238, 246, 248, 249, 250, 251, 252, 254, 255, 259, 264, 271, 277, 290, 295, 298, 299, 304, 307, 308, 309, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 347, 357, 379, 383, 384, 386, 389, 390, 391, 392, 393, 426, 429, 436, 437, 438, 440, 452, 456, 461, 467, 491, 494, 500, 522, 525, 526, 528, 530, 534, 535, 536, 541, 542, 543, 548, 550, 551, 555, 556, 558], "aim": [2, 525, 557], "accord": [2, 7, 43, 71, 142, 184, 196, 197, 198, 207, 210, 213, 234, 235, 236, 245, 247, 249, 255, 288, 289, 309, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 492, 526, 530, 548, 552, 556, 557], "pleas": [2, 4, 5, 6, 7, 130, 167, 196, 197, 198, 201, 234, 235, 236, 239, 284, 286, 287, 522, 526, 529, 530, 539, 541, 542, 545, 548, 552, 553, 554], "regist": [2, 7, 36, 62, 172, 174, 198, 202, 205, 206, 207, 210, 213, 215, 220, 223, 236, 240, 243, 244, 245, 247, 249, 250, 255, 262, 263, 275, 276, 277, 278, 279, 280, 284, 286, 288, 298, 299, 310, 316, 321, 329, 523, 526, 530, 541, 545, 557], "__new__": 2, "self": [2, 3, 7, 87, 117, 255, 259, 277, 286, 295, 321, 506, 522, 526, 538, 541, 545, 554, 555, 557], "conf_fname_or_obj": [2, 176, 214, 223, 250, 254, 255, 264, 265, 266, 267, 273, 274, 277, 289, 290, 291, 317], "kwarg": [2, 68, 69, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 198, 207, 210, 211, 213, 217, 218, 221, 236, 249, 254, 255, 265, 287, 289, 290, 298, 299, 301, 302, 303, 305, 307, 308, 309, 318, 335, 344, 345, 350, 352, 354, 355, 356, 365, 367, 368, 370, 372, 375, 376, 380], "current": [2, 3, 7, 38, 41, 44, 70, 71, 86, 94, 98, 130, 135, 255, 265, 271, 284, 286, 287, 288, 321, 522, 530, 531, 534, 541, 545, 548, 551, 557], "built": [2, 7, 99, 142, 187, 192, 196, 197, 202, 204, 206, 207, 209, 210, 213, 217, 218, 220, 225, 228, 230, 234, 235, 240, 242, 244, 245, 246, 247, 249, 290, 298, 299, 523, 530, 545, 556, 557, 558], "inherit": [2, 7, 38, 41, 44, 69, 70, 71, 193, 213, 215, 223, 231, 249, 255, 286, 288, 525], "base": [2, 7, 12, 36, 38, 41, 43, 44, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 133, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 255, 256, 259, 262, 263, 264, 266, 267, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 284, 286, 288, 289, 290, 291, 292, 295, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 336, 339, 340, 345, 350, 351, 352, 354, 355, 356, 359, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 401, 402, 403, 405, 408, 410, 411, 414, 424, 426, 429, 431, 433, 434, 436, 437, 438, 439, 447, 450, 455, 459, 462, 472, 476, 478, 480, 482, 486, 487, 488, 489, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 506, 507, 509, 511, 515, 516, 526, 529, 530, 531, 534, 547, 554, 555, 557, 559], "nasbas": [2, 266, 267, 273, 274], "interfac": [2, 6, 38, 41, 44, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 187, 190, 207, 254, 255, 270, 271, 277, 289, 290, 291, 310, 317, 338, 339, 340, 346, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 459, 462, 469, 481, 538, 551, 553], "own": [2, 38, 41, 44, 69, 70, 71, 98, 194, 213, 232, 249, 522, 525, 526, 538, 541, 545, 554, 557], "just": [2, 3, 4, 35, 186, 207, 210, 211, 213, 216, 217, 218, 219, 221, 224, 249, 535, 546, 551, 556, 557], "nas_registri": [2, 275], "well": [2, 3, 35, 184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 526, 551, 553, 558], "wai": [2, 197, 198, 201, 235, 236, 239, 522, 525, 526, 541, 546, 548, 551, 557, 558], "__init__": [2, 3, 7, 526, 541, 545, 557], "search_spac": [2, 177, 266, 273, 274, 275, 276], "none": [2, 3, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 87, 114, 130, 136, 142, 159, 165, 167, 171, 176, 177, 178, 181, 184, 185, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 209, 213, 214, 215, 216, 217, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 249, 250, 251, 252, 254, 255, 256, 259, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 277, 281, 285, 289, 290, 291, 292, 295, 298, 299, 305, 308, 309, 310, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 338, 339, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 383, 384, 385, 388, 389, 392, 394, 395, 396, 411, 426, 429, 431, 438, 443, 445, 450, 452, 455, 456, 459, 461, 462, 463, 464, 468, 469, 472, 474, 477, 479, 480, 482, 485, 487, 488, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 503, 505, 506, 510, 518, 526, 541, 551, 555, 556, 557], "model_build": [2, 266, 273, 274], "initi": [2, 3, 68, 136, 165, 184, 185, 193, 196, 215, 223, 231, 234, 250, 255, 266, 267, 273, 274, 285, 286, 290, 307, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 362, 384, 385, 394, 443, 472, 474, 482, 494, 525, 526, 535, 541, 542, 548, 557], "select_model_arch": [2, 267, 273, 274], "propos": [2, 7, 274, 528, 542, 548, 557], "algorithm": [2, 6, 7, 12, 43, 177, 212, 248, 256, 263, 266, 270, 273, 274, 276, 292, 299, 326, 327, 339, 340, 528, 534, 538, 548, 551, 555, 557, 558], "next": [2, 184, 189, 227, 253, 274, 288, 319, 320, 321, 323, 324, 326, 327, 328, 329, 522, 542, 550, 557], "res_save_path": [2, 274], "estim": [2, 3, 4, 167, 263, 266, 267, 271, 273, 274, 299, 308, 557], "pragma": 2, "cover": [2, 524, 536, 549], "perform": [2, 4, 6, 7, 86, 121, 176, 196, 208, 209, 212, 214, 234, 246, 248, 254, 255, 266, 267, 269, 271, 273, 274, 277, 289, 291, 310, 317, 322, 350, 364, 374, 383, 389, 391, 477, 486, 494, 496, 503, 512, 522, 523, 525, 527, 529, 535, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559], "depend": [2, 36, 38, 43, 71, 86, 184, 185, 214, 255, 266, 273, 274, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 524, 533, 534, 535, 550, 557], "load_search_result": [2, 274], "load": [2, 3, 36, 38, 196, 198, 212, 213, 234, 236, 248, 249, 259, 269, 274, 295, 308, 318, 344, 345, 467, 493, 494, 525, 550, 551], "exist": [2, 31, 77, 159, 178, 214, 215, 259, 274, 295, 307, 308, 364, 383, 389, 391, 392, 429, 477, 492, 493, 535, 541, 548, 557], "dump_search_result": [2, 274], "find_best_model_arch": [2, 274], "find": [2, 6, 7, 68, 91, 92, 94, 165, 263, 274, 275, 299, 307, 321, 345, 443, 509, 522, 548, 554, 555, 557], "pareto": [2, 274, 275], "front": [2, 274, 275], "setter": [2, 216, 217], "A": [2, 3, 6, 38, 44, 69, 71, 78, 80, 94, 98, 99, 130, 133, 135, 136, 142, 159, 165, 171, 198, 202, 207, 212, 213, 216, 217, 218, 219, 236, 240, 245, 248, 249, 250, 255, 256, 259, 260, 261, 263, 266, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 292, 295, 296, 297, 298, 299, 302, 304, 321, 525, 532, 534, 541, 543, 548, 549, 556, 557, 558], "callabl": [2, 181, 261, 291, 297, 335, 493, 509, 510], "our": [2, 3, 6, 160], "leverag": [2, 99, 528, 535, 546, 551], "grid": [2, 276], "random": [2, 79, 159, 165, 209, 213, 246, 249, 268, 276, 321, 503, 531, 550, 556, 558], "bayesian": [2, 276, 540, 550], "optim": [2, 3, 4, 6, 10, 44, 69, 77, 81, 84, 85, 87, 98, 99, 109, 110, 116, 117, 118, 119, 136, 159, 181, 217, 223, 250, 254, 255, 269, 276, 286, 287, 289, 291, 335, 336, 339, 346, 348, 352, 354, 371, 375, 376, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 398, 399, 400, 401, 404, 405, 418, 469, 475, 476, 486, 491, 494, 497, 501, 508, 513, 528, 530, 534, 538, 539, 540, 543, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558], "given": [2, 35, 43, 44, 45, 71, 91, 92, 94, 135, 136, 165, 212, 213, 248, 249, 259, 295, 307, 318, 406, 412, 426, 429, 431, 432, 434, 436, 437, 439, 480, 493, 506, 525, 548, 556], "train": [2, 3, 6, 7, 36, 38, 41, 44, 69, 71, 86, 142, 184, 185, 196, 198, 213, 223, 234, 236, 249, 250, 255, 265, 266, 268, 269, 273, 277, 286, 287, 289, 290, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 501, 521, 526, 528, 529, 535, 538, 542, 544, 546, 548, 549, 557, 558, 559], "evalu": [2, 3, 4, 7, 12, 36, 38, 41, 44, 69, 71, 176, 184, 185, 196, 214, 234, 250, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 273, 274, 277, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 338, 350, 352, 354, 356, 357, 475, 483, 494, 498, 525, 526, 528, 535, 536, 538, 541, 542, 544, 545, 548, 551, 554, 555, 557, 558], "potenti": 2, "after": [2, 3, 4, 43, 45, 69, 171, 196, 209, 213, 216, 217, 223, 234, 246, 249, 250, 251, 252, 255, 268, 284, 286, 287, 288, 326, 480, 522, 523, 525, 526, 528, 538, 541, 544, 545, 546, 548, 551, 552, 554, 555, 556, 557], "sever": [2, 3, 159, 213, 249, 288, 522, 528, 538, 542, 548, 550, 556, 558], "procedur": [2, 177, 557], "lie": [2, 274], "through": [2, 3, 167, 184, 185, 212, 248, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 534, 536, 538, 539, 541, 545, 546, 550, 554], "basic_na": [2, 255, 273, 291], "basicna": [2, 266, 273], "compon": [2, 6, 9, 250, 255, 266, 273, 277, 289, 290, 291, 335, 475, 509, 512, 524, 525, 530, 540, 546, 547, 557], "super": [2, 3, 4, 261, 268, 271, 297, 545], "predictor": [2, 267, 268, 269, 271, 273], "predict": [2, 3, 12, 165, 213, 217, 218, 249, 256, 260, 261, 262, 263, 269, 271, 292, 296, 297, 298, 299, 528, 541, 555, 556], "4x": [2, 3, 551], "more": [2, 3, 4, 5, 6, 86, 159, 165, 184, 213, 249, 259, 284, 295, 319, 322, 329, 522, 526, 528, 530, 535, 538, 539, 541, 542, 545, 546, 548, 552, 557, 559], "sampl": [2, 6, 101, 127, 186, 189, 194, 196, 197, 198, 202, 207, 209, 213, 224, 227, 232, 234, 235, 236, 240, 245, 246, 249, 262, 263, 275, 298, 299, 321, 374, 429, 494, 525, 526, 538, 551, 556, 557, 558, 559], "effici": [2, 525, 528, 546, 549], "than": [2, 3, 4, 78, 86, 176, 196, 213, 234, 249, 259, 295, 526, 536, 541, 545, 546, 548, 551, 554, 556], "typic": [2, 86, 135, 142, 255, 265, 290, 529, 548], "one": [2, 6, 7, 12, 71, 130, 135, 152, 187, 190, 207, 213, 223, 249, 255, 256, 259, 262, 263, 265, 268, 284, 287, 288, 292, 295, 298, 299, 335, 488, 522, 525, 528, 529, 530, 534, 535, 538, 539, 541, 542, 545, 546, 548, 550, 551, 553, 556, 557], "shot": [2, 6, 223, 255, 286, 288, 538, 548, 549, 557], "figur": [2, 548], "first": [2, 3, 4, 7, 45, 71, 117, 160, 175, 178, 196, 212, 234, 248, 250, 255, 259, 295, 322, 406, 522, 526, 535, 539, 542, 550, 551, 552, 554, 555, 557, 558], "phase": [2, 172, 174, 290, 548, 551, 552, 557], "small": [2, 4, 259, 295, 522, 557], "sub": [2, 69, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 214, 252, 255, 271, 523], "randomli": [2, 213, 249, 276, 321, 556, 557], "valid": [2, 7, 36, 38, 41, 69, 70, 71, 78, 130, 159, 198, 236, 259, 271, 285, 286, 295, 308, 445, 510, 526, 528, 534, 538, 540, 548, 551, 553], "measur": [2, 7, 36, 38, 41, 44, 69, 71, 165, 214, 270, 271, 310, 512, 523, 528, 535, 541, 544, 555, 557], "provid": [2, 7, 130, 142, 184, 185, 207, 210, 213, 223, 245, 247, 249, 254, 255, 259, 268, 277, 289, 290, 291, 295, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 406, 426, 432, 479, 488, 512, 521, 522, 523, 524, 525, 529, 530, 531, 532, 538, 539, 542, 543, 550, 551, 555, 558, 559], "inner": 2, "loop": [2, 4, 310, 335, 534, 554, 557], "multi": [2, 98, 214, 255, 259, 270, 295, 357, 525, 526, 538, 545, 548, 557], "evolutionari": 2, "extens": [2, 7, 69, 290, 432, 493, 534, 538, 542, 543, 549, 557, 558], "cycl": [2, 525], "continu": [2, 259, 284, 295, 322, 548], "until": [2, 535, 557], "conclud": 2, "count": [2, 3, 43, 274, 526, 557], "met": [2, 185, 322, 329, 534, 542, 551, 555, 557], "create_acc_predictor": [2, 267, 273], "accuraci": [2, 3, 4, 6, 69, 176, 184, 185, 214, 250, 254, 255, 263, 267, 268, 269, 271, 273, 277, 289, 291, 299, 310, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 350, 364, 374, 383, 389, 391, 462, 486, 491, 494, 496, 512, 522, 523, 525, 529, 530, 531, 535, 541, 542, 544, 545, 546, 548, 549, 550, 553, 554, 555, 557, 558, 559], "create_macs_predictor": [2, 267, 273], "create_latency_predictor": [2, 267, 273], "latenc": [2, 267, 268, 269, 271, 273, 491, 535, 554, 557], "mobilenetv3": [2, 270, 271], "static": [3, 4, 7, 69, 130, 159, 253, 268, 290, 318, 357, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 398, 426, 429, 431, 432, 434, 436, 437, 438, 439, 449, 463, 465, 470, 472, 477, 479, 484, 486, 491, 492, 494, 506, 510, 517, 518, 538, 557, 559], "quantiz": [3, 7, 21, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 113, 117, 119, 121, 127, 133, 135, 136, 139, 141, 142, 152, 167, 171, 176, 184, 185, 209, 216, 217, 223, 246, 251, 252, 253, 254, 255, 265, 290, 291, 307, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 339, 340, 344, 345, 356, 361, 389, 391, 397, 475, 483, 494, 498, 522, 523, 525, 526, 530, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 549, 553, 555, 556, 557, 558], "involv": 3, "weight": [3, 4, 6, 7, 36, 38, 68, 69, 71, 84, 85, 86, 142, 159, 160, 167, 175, 251, 252, 262, 263, 281, 284, 286, 288, 298, 299, 308, 309, 402, 503, 521, 522, 529, 534, 536, 541, 545, 548, 550, 551, 555, 557, 558, 559], "float": [3, 4, 12, 36, 38, 41, 44, 68, 69, 71, 130, 159, 167, 196, 209, 234, 246, 256, 257, 259, 260, 261, 268, 270, 271, 284, 286, 287, 288, 292, 293, 295, 296, 297, 308, 309, 321, 348, 364, 373, 381, 382, 397, 403, 458, 463, 479, 480, 484, 486, 491, 493, 494, 501, 503, 504, 512, 521, 526, 531, 541, 550, 551, 556], "int": [3, 36, 38, 41, 43, 44, 69, 71, 130, 159, 165, 186, 195, 196, 197, 209, 213, 224, 233, 234, 235, 246, 249, 251, 252, 257, 259, 263, 268, 270, 271, 275, 293, 295, 299, 310, 351, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 394, 396, 440, 472, 479, 480, 482, 484, 485, 486, 487, 488, 493, 494, 496, 501, 503, 506, 518, 526, 541, 548, 550, 556], "feed": [3, 36, 38, 69, 165, 195, 233, 361, 528], "batch": [3, 4, 36, 38, 41, 43, 71, 86, 135, 186, 188, 189, 194, 195, 216, 217, 223, 224, 226, 227, 232, 233, 255, 271, 277, 291, 317, 335, 363, 374, 491, 522, 525, 528, 535, 548, 556, 557, 559], "data": [3, 6, 7, 10, 36, 38, 41, 43, 44, 45, 68, 69, 71, 79, 127, 130, 159, 165, 167, 171, 176, 184, 185, 214, 215, 216, 217, 251, 252, 253, 255, 271, 284, 290, 291, 307, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 346, 348, 351, 357, 358, 359, 361, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 406, 422, 423, 426, 429, 433, 438, 441, 442, 443, 445, 448, 450, 455, 459, 462, 464, 469, 472, 479, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 509, 514, 516, 517, 519, 522, 525, 526, 530, 531, 534, 535, 539, 541, 542, 551, 552, 554, 555, 556, 557], "comput": [3, 4, 12, 68, 71, 86, 142, 167, 223, 250, 255, 256, 257, 259, 260, 261, 263, 269, 292, 293, 295, 296, 297, 299, 529, 541, 542, 548, 551, 557], "distribut": [3, 6, 43, 160, 175, 186, 188, 189, 191, 192, 193, 194, 195, 216, 217, 224, 226, 227, 229, 230, 231, 232, 233, 250, 255, 277, 482, 528, 539, 551, 553, 557, 559], "activ": [3, 4, 6, 7, 36, 38, 41, 44, 45, 69, 71, 148, 167, 222, 251, 252, 326, 327, 402, 521, 522, 529, 531, 534, 547, 550, 551, 555, 557, 558], "done": [3, 4, 528, 544, 548, 551], "observ": [3, 531, 554, 555, 557], "point": [3, 4, 45, 68, 209, 246, 260, 261, 275, 296, 297, 310, 321, 521, 531, 541, 551, 556, 557], "how": [3, 5, 7, 213, 249, 250, 255, 270, 271, 284, 522, 523, 524, 526, 528, 530, 536, 548, 551, 556, 557, 558], "infer": [3, 4, 6, 7, 43, 45, 152, 159, 254, 255, 289, 308, 318, 521, 525, 528, 535, 542, 545, 548, 549, 551, 555, 557], "time": [3, 4, 165, 213, 249, 263, 299, 310, 321, 345, 480, 486, 487, 491, 506, 530, 533, 545, 548, 549, 551, 554, 555, 556, 557], "simpl": [3, 6, 213, 249, 522, 539, 554, 557], "techniqu": [3, 4, 6, 255, 538, 546, 548, 550, 551, 558], "would": [3, 130, 524, 535, 542, 551], "simpli": [3, 286, 530, 543], "divid": [3, 557], "rang": [3, 4, 7, 199, 200, 213, 237, 238, 249, 259, 268, 295, 335, 526, 528, 530, 531, 548, 551, 556], "256": [3, 203, 209, 241, 246, 523, 525, 526, 530, 556, 557, 559], "sophist": 3, "addit": [3, 86, 94, 171, 184, 335, 479, 522, 528, 535, 553], "step": [3, 4, 36, 38, 41, 71, 117, 223, 255, 284, 286, 287, 288, 310, 335, 522, 524, 528, 529, 530, 542, 548, 550, 552, 554, 555, 557], "allow": [3, 4, 220, 321, 510, 522, 523, 528, 530, 531, 535, 541, 542, 550, 557, 558], "u": [3, 94, 160, 175], "instead": [3, 177, 178, 195, 233, 345], "back": [3, 36, 38, 41, 44, 69, 71, 142, 213, 249, 268], "everi": [3, 7, 41, 70, 91, 92, 94, 284, 286, 287, 548, 557], "signific": [3, 6, 549, 551], "speed": [3, 6, 535, 549, 551], "up": [3, 6, 43, 94, 125, 213, 249, 255, 271, 277, 285, 310, 383, 522, 530, 534, 535, 538, 549, 550, 551, 554, 556, 558], "pre": [3, 136, 184, 185, 196, 234, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 526, 528, 535, 542, 548, 549, 551, 555, 557, 559], "notabl": 3, "modif": [3, 7, 463, 525, 534], "enabl": [3, 6, 69, 71, 286, 482, 522, 530, 535, 542, 547, 548, 549, 552], "floatfunct": 3, "quantstub": 3, "dequantstub": 3, "begin": [3, 136, 223, 255, 277, 286, 287, 291, 317, 528, 548, 557], "end": [3, 4, 7, 130, 165, 196, 212, 213, 223, 234, 248, 249, 255, 268, 286, 287, 291, 310, 317, 528, 534, 535, 539, 545, 548, 555, 556, 557], "relu6": [3, 98, 534], "relu": [3, 36, 98, 155, 534, 555], "_make_divis": 3, "v": [3, 94, 535, 558], "divisor": 3, "min_valu": 3, "taken": [3, 184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "origin": [3, 68, 69, 171, 196, 213, 214, 234, 249, 255, 268, 284, 285, 286, 287, 348, 526, 535, 548, 551, 556, 558], "tf": [3, 6, 71, 136, 142, 165, 195, 196, 197, 198, 213, 233, 234, 235, 236, 249, 308, 348, 522, 530, 543, 549, 552, 556], "repo": [3, 196, 234, 526, 532], "It": [3, 6, 7, 69, 77, 86, 184, 185, 222, 255, 261, 263, 268, 269, 275, 284, 289, 290, 297, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 522, 523, 528, 535, 548, 551, 554, 557, 558], "ensur": [3, 43, 45, 213, 249, 287, 321, 362, 394, 426, 429, 431, 438, 477, 522, 530, 531, 551, 556], "layer": [3, 7, 36, 38, 41, 44, 69, 70, 71, 94, 135, 136, 142, 215, 222, 284, 285, 287, 336, 338, 339, 345, 505, 525, 529, 538, 548, 553, 557], "channel": [3, 7, 160, 175, 209, 213, 246, 249, 271, 284, 426, 429, 438, 538, 539, 548, 556, 559], "number": [3, 4, 69, 91, 92, 186, 194, 197, 209, 213, 224, 232, 235, 246, 249, 260, 261, 263, 270, 274, 284, 296, 297, 299, 321, 339, 340, 429, 482, 491, 494, 522, 526, 530, 531, 541, 548, 551, 554, 556, 557], "divis": 3, "seen": [3, 7, 345], "github": [3, 6, 167, 196, 234, 256, 257, 260, 261, 284, 287, 292, 293, 296, 297, 441, 443, 481, 522, 524, 526, 532, 539, 540, 553], "tensorflow": [3, 6, 7, 77, 99, 101, 105, 130, 142, 165, 195, 196, 197, 198, 201, 202, 203, 205, 206, 207, 210, 213, 215, 220, 233, 234, 235, 236, 239, 240, 241, 243, 244, 245, 247, 249, 252, 253, 254, 255, 257, 259, 262, 263, 264, 265, 289, 293, 295, 298, 299, 308, 318, 404, 405, 417, 418, 425, 471, 472, 473, 475, 522, 528, 530, 532, 534, 535, 538, 539, 540, 542, 543, 544, 548, 549, 550, 551, 554, 557, 558], "blob": [3, 167, 256, 257, 260, 261, 284, 292, 293, 296, 297], "master": [3, 256, 257, 260, 261, 284, 287, 292, 293, 296, 297], "research": [3, 540], "slim": [3, 259, 295, 308, 543], "mobilenet": [3, 554, 559], "param": [3, 7, 45, 68, 69, 70, 71, 85, 91, 92, 94, 114, 115, 130, 159, 165, 167, 171, 186, 214, 220, 224, 259, 262, 263, 295, 298, 299, 304, 308, 318, 345, 365, 396, 493, 496, 543, 557], "new_v": 3, "max": [3, 44, 45, 68, 71, 160, 175, 213, 249, 260, 261, 296, 297, 321, 503, 521, 522, 551, 556, 557], "2": [3, 4, 6, 7, 9, 68, 70, 71, 77, 98, 173, 197, 214, 235, 259, 261, 263, 271, 280, 281, 286, 295, 297, 299, 319, 320, 521, 526, 528, 530, 534, 535, 538, 540, 541, 542, 545, 546, 547, 548, 551, 553, 556, 557], "round": [3, 4, 160, 175, 521, 531, 551], "down": [3, 86], "doe": [3, 4, 12, 256, 259, 268, 292, 295, 526, 531, 541, 553, 556, 557], "go": [3, 322, 534, 550, 556], "10": [3, 6, 198, 236, 259, 295, 321, 472, 522, 526, 539, 550, 556], "convbnrelu": 3, "sequenti": [3, 71, 194, 232, 290, 546, 557], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "3": [3, 4, 6, 45, 70, 71, 94, 135, 165, 198, 202, 207, 210, 213, 236, 240, 245, 247, 249, 259, 271, 295, 484, 526, 528, 530, 534, 535, 541, 542, 545, 548, 550, 551, 556, 557, 559], "stride": [3, 213, 249, 556], "group": [3, 414, 538, 548, 555, 556, 557, 559], "pad": [3, 95, 96, 196, 213, 234, 249, 526, 556], "bia": [3, 71, 159, 160, 251, 252, 555], "fals": [3, 4, 7, 36, 38, 41, 43, 44, 45, 69, 71, 87, 95, 96, 114, 117, 124, 130, 133, 144, 151, 156, 160, 163, 164, 165, 185, 186, 188, 191, 192, 193, 195, 196, 198, 209, 213, 214, 215, 216, 217, 222, 224, 226, 229, 230, 231, 233, 234, 236, 246, 249, 259, 262, 263, 268, 269, 270, 271, 284, 295, 298, 299, 307, 322, 329, 338, 414, 433, 479, 482, 487, 488, 493, 512, 518, 525, 526, 534, 541, 545, 550, 551, 555, 556, 557, 558], "batchnorm2d": 3, "momentum": [3, 286, 538, 548, 558], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 545], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 86], "dw": 3, "linear": [3, 68, 251, 252, 284, 528], "conv": [3, 36, 45, 117, 155, 550], "add": [3, 12, 45, 68, 76, 88, 130, 135, 139, 148, 165, 196, 198, 220, 234, 236, 256, 263, 285, 287, 290, 292, 299, 322, 357, 363, 364, 366, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 395, 411, 493, 518, 522, 524, 526, 530, 534, 535, 541, 544, 545, 554, 555, 557], "skip_add": 3, "forward": [3, 4, 43, 215, 550, 551, 555], "x": [3, 43, 195, 213, 233, 249, 271, 321, 528, 530, 543, 548, 551, 555, 556], "els": [3, 43, 86, 87, 165, 194, 232, 322, 479, 493, 555], "num_class": [3, 263, 299], "1000": [3, 270, 491, 535, 557, 558], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 6, 167, 324, 530, 557, 559], "main": [3, 6, 184, 220, 287, 319, 322, 329, 474, 510, 530, 551], "width": [3, 209, 213, 246, 249, 271, 284, 530, 551, 556, 558], "multipli": [3, 531], "adjust": [3, 4, 271, 551], "each": [3, 4, 7, 38, 41, 44, 45, 69, 70, 71, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 135, 160, 164, 167, 194, 198, 201, 209, 213, 232, 236, 239, 246, 249, 257, 259, 260, 261, 270, 271, 286, 293, 295, 296, 297, 308, 309, 310, 326, 327, 339, 340, 522, 525, 526, 528, 531, 534, 545, 546, 548, 554, 555, 556, 557], "amount": 3, "structur": [3, 130, 286, 422, 538, 548, 551, 555, 559], "multipl": [3, 86, 135, 187, 188, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 220, 225, 226, 228, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 264, 286, 319, 320, 479, 526, 546, 554, 557], "turn": [3, 541], "off": [3, 91, 92, 94, 552], "block": [3, 268, 284, 287, 510, 538, 545, 548], "input_channel": 3, "32": [3, 167, 259, 295, 530, 536, 548, 559], "last_channel": 3, "1280": 3, "c": [3, 94, 98, 198, 236, 522, 526, 533, 539], "n": [3, 94, 197, 213, 235, 249, 257, 284, 293, 482, 526, 528, 548, 556], "16": [3, 31, 535, 548, 559], "6": [3, 6, 41, 522, 534, 551, 559], "24": [3, 31, 557, 559], "96": [3, 259, 295, 559], "160": 3, "320": 3, "onli": [3, 7, 38, 41, 44, 45, 69, 71, 77, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 135, 160, 175, 196, 214, 216, 217, 220, 234, 255, 265, 284, 286, 493, 503, 505, 506, 523, 525, 530, 534, 535, 539, 542, 550, 555, 557, 558], "check": [3, 4, 6, 43, 69, 86, 87, 130, 135, 142, 165, 171, 185, 198, 236, 255, 265, 285, 290, 322, 329, 345, 384, 389, 426, 429, 431, 432, 434, 436, 437, 439, 445, 448, 463, 479, 480, 482, 487, 493, 495, 522, 524, 530, 535, 539], "element": [3, 45, 194, 232, 259, 284, 287, 295, 526, 538, 541, 548], "assum": [3, 7, 212, 248, 259, 275, 295, 534], "know": [3, 130, 216, 217, 250, 255, 277, 480, 530, 553], "len": [3, 167, 213, 249, 321, 526, 530, 548, 556], "rais": [3, 12, 86, 91, 92, 94, 105, 130, 215, 256, 259, 262, 263, 284, 285, 286, 292, 295, 298, 299, 321, 493, 506, 548], "valueerror": [3, 12, 86, 91, 92, 94, 105, 130, 256, 259, 263, 292, 295, 299, 533], "empti": [3, 135, 259, 295], "list": [3, 6, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 71, 77, 80, 130, 135, 142, 159, 165, 171, 184, 185, 189, 196, 209, 212, 213, 214, 215, 227, 234, 246, 248, 249, 251, 252, 255, 256, 257, 259, 260, 261, 263, 268, 270, 271, 275, 277, 284, 287, 292, 293, 295, 296, 297, 299, 308, 309, 310, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 339, 340, 357, 359, 361, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 406, 409, 411, 412, 414, 426, 429, 432, 433, 436, 437, 438, 440, 445, 448, 450, 452, 455, 456, 459, 462, 472, 479, 484, 486, 487, 488, 491, 493, 494, 495, 496, 497, 499, 500, 501, 503, 505, 512, 521, 534, 545, 550, 552, 555, 557], "got": [3, 165, 319, 320, 533, 535, 555], "format": [3, 36, 38, 41, 44, 45, 68, 69, 71, 77, 165, 196, 197, 198, 202, 207, 234, 235, 236, 240, 245, 251, 252, 255, 259, 265, 268, 274, 295, 448, 484, 526, 528, 530, 541, 542, 543, 544, 551], "build": [3, 6, 7, 43, 135, 142, 152, 252, 253, 266, 268, 273, 274, 303, 305, 308, 309, 363, 364, 366, 377, 378, 382, 406, 463, 472, 493, 510, 522, 539, 543, 549, 557], "featur": [3, 130, 181, 196, 197, 209, 213, 215, 234, 235, 246, 249, 291, 523, 524, 525, 527, 528, 535, 542, 543, 549, 553, 556], "invert": 3, "residu": 3, "output_channel": 3, "last": [3, 69, 71, 117, 171, 184, 186, 224, 284, 319, 320, 321, 323, 324, 326, 327, 328, 329, 463, 522, 542, 551, 557], "classifi": [3, 196, 234, 263, 299, 322, 526, 528], "dropout": 3, "m": [3, 68, 94, 284, 528, 535, 559], "isinst": 3, "init": [3, 215, 526, 541, 545], "kaiming_normal_": 3, "mode": [3, 7, 35, 36, 38, 41, 44, 68, 69, 71, 130, 205, 214, 243, 255, 259, 295, 308, 345, 363, 486, 522, 523, 535, 538, 551, 552], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 531, 550, 554, 557, 558, 559], "mean": [3, 4, 86, 94, 186, 209, 213, 224, 246, 249, 259, 261, 263, 269, 271, 284, 295, 297, 299, 310, 523, 525, 530, 531, 534, 541, 548, 551, 556, 557, 558], "fuse": [3, 4, 36, 43, 69, 71, 88, 89, 93, 94, 95, 96, 116, 117, 118, 119, 121, 155, 167, 171, 555], "bn": [3, 36, 86, 105, 559], "prior": [3, 43, 113, 557], "chang": [3, 105, 121, 160, 175, 286, 288, 345, 359, 364, 463, 485, 491, 524, 525, 530, 533, 541, 555, 556, 557], "numer": [3, 4, 263, 299, 521, 542, 549], "fuse_model": [3, 4], "type": [3, 7, 12, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 81, 84, 85, 86, 87, 94, 98, 109, 110, 116, 117, 118, 121, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 167, 171, 172, 174, 178, 185, 186, 194, 196, 198, 202, 205, 206, 207, 210, 213, 215, 220, 224, 232, 234, 236, 240, 243, 244, 245, 247, 249, 251, 252, 253, 255, 256, 257, 259, 262, 263, 265, 268, 270, 275, 278, 279, 280, 284, 286, 288, 290, 292, 293, 295, 298, 299, 301, 302, 303, 307, 308, 309, 310, 316, 321, 322, 329, 335, 338, 344, 357, 375, 376, 384, 385, 387, 389, 427, 479, 482, 484, 486, 489, 522, 526, 534, 538, 542, 548, 551, 556, 558], "fuse_modul": 3, "true": [3, 4, 43, 69, 71, 86, 87, 109, 130, 133, 135, 163, 165, 167, 185, 186, 194, 196, 198, 199, 212, 213, 214, 224, 232, 234, 236, 237, 248, 249, 251, 252, 257, 259, 263, 268, 280, 284, 293, 295, 299, 322, 329, 443, 479, 482, 487, 488, 493, 526, 530, 534, 541, 545, 550, 551, 552, 555, 556, 557, 558], "idx": [3, 275, 526], "str": [3, 12, 36, 38, 43, 44, 69, 130, 159, 167, 172, 174, 186, 196, 197, 198, 202, 205, 206, 207, 209, 210, 213, 215, 220, 224, 234, 235, 236, 240, 243, 244, 245, 246, 247, 249, 251, 252, 253, 256, 257, 259, 261, 262, 263, 268, 270, 271, 275, 280, 292, 293, 295, 297, 298, 299, 301, 302, 303, 309, 335, 338, 346, 347, 348, 351, 357, 358, 359, 361, 362, 363, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 388, 389, 394, 395, 396, 397, 402, 403, 406, 408, 409, 410, 411, 412, 414, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 445, 447, 448, 450, 452, 455, 456, 459, 461, 462, 463, 464, 467, 468, 469, 472, 479, 481, 482, 484, 486, 487, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 509, 510, 517, 518, 526, 541, 550, 555, 556], "help": [3, 6, 80, 222, 265, 307, 361, 493, 525, 543, 557], "averagemet": 3, "store": [3, 45, 198, 236, 259, 278, 279, 280, 284, 286, 295, 536], "averag": [3, 167, 259, 260, 261, 263, 295, 296, 297, 299, 528, 541, 545, 548, 557], "fmt": 3, "f": [3, 94, 528, 530, 551], "reset": [3, 12, 256, 262, 263, 292, 298, 299, 310, 506, 541], "val": [3, 71, 165, 198, 201, 236, 239, 285, 545], "avg": [3, 4, 551], "sum": [3, 263, 299, 528], "updat": [3, 12, 31, 86, 98, 130, 135, 142, 252, 256, 262, 263, 271, 284, 286, 292, 298, 299, 309, 348, 363, 364, 365, 366, 374, 377, 379, 381, 383, 389, 391, 392, 393, 396, 463, 486, 494, 497, 499, 503, 522, 525, 541, 547, 548, 557], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 43, 68, 69, 114, 115, 130, 159, 215, 268, 285, 288, 410, 411, 525, 526, 528, 530, 542, 548, 555, 556, 558], "topk": [3, 523, 525, 530, 541], "over": [3, 4, 6, 198, 202, 207, 236, 240, 245, 259, 263, 295, 299, 538, 541, 550, 557], "k": [3, 263, 299, 541, 548], "top": [3, 130, 213, 249, 254, 255, 263, 277, 289, 291, 299, 317, 319, 320, 541, 556, 559], "specifi": [3, 38, 41, 44, 45, 69, 70, 71, 130, 159, 184, 185, 213, 214, 249, 254, 255, 259, 262, 263, 266, 269, 271, 273, 274, 277, 289, 290, 291, 295, 298, 299, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 345, 361, 363, 366, 373, 374, 375, 377, 378, 379, 383, 384, 386, 387, 389, 391, 392, 396, 397, 398, 411, 443, 447, 448, 449, 465, 470, 486, 493, 506, 510, 522, 529, 530, 531, 534, 541, 545, 550, 551, 556, 557, 558], "no_grad": 3, "maxk": 3, "pred": [3, 165, 262, 263, 298, 299, 541], "eq": 3, "view": [3, 6, 522, 524, 532, 553], "expand_a": 3, "re": [3, 69, 71, 321, 535, 557], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 198, 236, 259, 268, 295, 525, 526, 530, 535, 536, 550, 551, 556, 557, 558, 559], "criterion": [3, 4, 10, 69, 167, 181, 217, 220, 250, 255, 291, 462, 501, 528, 535, 548, 551, 557, 558], "data_load": [3, 4, 7, 44, 71], "neval_batch": [3, 4], "top1": [3, 4, 271, 551], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 45, 200, 209, 215, 238, 246, 259, 263, 295, 299, 526, 534, 541, 547, 550, 556, 558, 559], "cnt": [3, 4, 528], "imag": [3, 4, 197, 198, 201, 203, 209, 213, 235, 236, 239, 241, 246, 249, 259, 271, 295, 491, 522, 526, 530, 535, 550, 555, 556, 559], "loss": [3, 4, 6, 69, 142, 181, 215, 223, 254, 255, 263, 277, 289, 291, 299, 317, 335, 528, 529, 530, 531, 541, 542, 548, 551, 557, 558], "acc1": 3, "acc5": 3, "print": [3, 4, 167, 263, 299, 522, 528, 530, 541, 557], "load_model": 3, "model_fil": 3, "state_dict": [3, 167, 530, 555], "load_state_dict": 3, "cpu": [3, 4, 116, 117, 118, 119, 127, 130, 159, 271, 524, 538, 542, 547, 549, 550, 552, 555], "print_size_of_model": 3, "temp": 3, "p": [3, 259, 295, 522], "mb": [3, 493], "o": [3, 6, 94, 406, 524, 547], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 308], "float_model_fil": 3, "start": [3, 71, 213, 249, 256, 259, 270, 292, 295, 310, 487, 506, 539, 555, 556], "min": [3, 45, 71, 160, 175, 521, 522, 551, 556], "per": [3, 7, 38, 41, 44, 69, 70, 71, 186, 195, 214, 224, 233, 259, 271, 295, 339, 340, 363, 522, 535, 547, 552, 557, 559], "qconfig": [3, 4, 43, 555], "default_qconfig": 3, "prepar": [3, 4, 6, 43, 69, 223, 250, 255, 277, 289, 384, 389, 474, 526, 530, 551], "calibr": [3, 7, 36, 38, 41, 43, 44, 69, 171, 176, 184, 185, 254, 255, 289, 290, 291, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 339, 340, 502, 525, 536, 538, 551, 557, 558], "fusion": [3, 7, 41, 70, 94, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 534], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 94, 98, 268, 528, 536], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 486, 551], "minmaxobserv": 3, "reduce_rang": [3, 45, 550], "dtype": [3, 68, 130, 159, 199, 200, 209, 213, 237, 238, 246, 249, 251, 252, 253, 525, 526, 534, 550, 555, 556, 557, 558], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 555], "min_val": [3, 339, 340], "max_val": [3, 339, 340], "quantizedconvrelu2d": 3, "scale": [3, 4, 36, 38, 45, 68, 71, 86, 160, 175, 209, 213, 246, 249, 252, 307, 521, 531, 551, 556], "15583468973636627": 3, "zero_point": [3, 45, 68, 252, 307], "quantizedconv2d": [3, 71], "19358506798744202": 3, "74": [3, 559], "631847": 3, "300": [3, 525], "67": [3, 559], "significantli": [3, 542, 548], "lower": [3, 212, 213, 248, 249, 261, 297, 493, 521, 529, 548, 549, 551, 556], "62": [3, 559], "same": [3, 7, 71, 80, 165, 196, 213, 234, 249, 259, 277, 295, 322, 345, 523, 525, 526, 528, 530, 534, 547, 550, 551, 555, 556, 557], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 86, 280, 525, 529, 542, 549, 551, 552, 557, 558], "almost": 3, "decreas": [3, 123], "improv": [3, 524, 535, 548, 551, 552, 557, 559], "repeat": [3, 281, 557], "exercis": 3, "recommend": [3, 7, 217, 218, 298, 299, 525, 534, 548, 550, 557], "x86": [3, 542], "basi": 3, "histogram": [3, 336, 339, 345, 386, 389, 397, 555], "collect": [3, 43, 71, 207, 210, 211, 213, 216, 217, 218, 219, 221, 245, 247, 249, 256, 261, 262, 263, 292, 297, 298, 299, 336, 339, 345, 346, 448, 469, 480, 482, 493, 494, 551, 555, 557], "pick": 3, "paramet": [3, 4, 12, 36, 38, 41, 43, 44, 45, 62, 68, 69, 71, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 124, 125, 128, 129, 130, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 167, 171, 172, 174, 176, 177, 178, 181, 184, 185, 186, 195, 196, 198, 202, 205, 206, 207, 209, 210, 212, 213, 214, 215, 220, 224, 233, 234, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 303, 305, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 338, 339, 340, 344, 345, 357, 361, 365, 366, 384, 385, 386, 389, 395, 397, 406, 432, 450, 455, 459, 462, 474, 479, 484, 486, 487, 492, 493, 495, 505, 506, 522, 525, 526, 530, 531, 538, 541, 548, 551, 554, 556, 557, 558], "manner": [3, 528, 543], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 521], "jit": [3, 555], "script": [3, 35, 256, 257, 260, 261, 292, 293, 296, 297, 347, 348, 431, 448, 450, 452, 455, 456, 458, 459, 461, 462, 467, 530, 538, 549], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 559], "increas": [3, 527, 538], "resnet50": [3, 6, 271, 530, 535, 551, 554, 559], "qat": [4, 69, 252, 255, 265, 529, 530, 538, 544, 551], "simul": 4, "low": [4, 6, 7, 41, 70, 71, 184, 185, 199, 200, 237, 238, 254, 255, 264, 289, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 523, 526, 530, 542, 549, 551, 557], "precis": [4, 6, 7, 36, 38, 41, 44, 69, 70, 71, 184, 185, 254, 255, 259, 261, 263, 264, 289, 295, 297, 299, 310, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 361, 371, 374, 375, 384, 385, 386, 387, 388, 389, 394, 418, 447, 452, 454, 455, 456, 476, 494, 497, 499, 521, 522, 523, 529, 530, 534, 538, 549, 550, 551, 557], "dure": [4, 43, 71, 86, 142, 268, 271, 284, 288, 290, 307, 488, 542, 543, 545, 546, 548, 551, 555, 558], "backward": [4, 259, 295, 335, 528, 530, 548, 551, 553], "mimic": [4, 551], "still": [4, 287, 551, 552], "thu": [4, 259, 295, 551], "made": [4, 7, 94, 269, 271, 551, 553], "while": [4, 6, 7, 38, 71, 286, 321, 522, 525, 535, 538, 542, 550, 551], "fact": [4, 551], "ultim": [4, 551], "yield": [4, 184, 185, 194, 216, 217, 232, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 551, 557], "either": [4, 185, 259, 295, 322, 329, 542, 546, 550, 551], "dynam": [4, 7, 86, 186, 224, 251, 252, 290, 353, 525, 528, 538, 549, 559], "training_func_for_nc": 4, "epoch": [4, 223, 250, 255, 277, 286, 287, 291, 317, 335, 528, 530, 548, 558], "30": [4, 6, 213, 249, 523, 525, 538, 556, 559], "sgd": [4, 181, 220, 291, 550, 558], "lr": [4, 530], "0001": [4, 181, 291, 550], "nepoch": [4, 528], "train_load": [4, 530], "zero_grad": [4, 528, 530, 548], "break": [4, 528, 530], "freez": [4, 113, 548], "disable_observ": 4, "norm": 4, "varianc": [4, 160, 175], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 86, 286, 326, 327, 486, 545, 548, 551, 553, 557], "alreadi": [4, 7, 198, 212, 214, 236, 248, 480, 506, 522, 526, 538], "implement": [4, 6, 12, 38, 41, 44, 69, 70, 71, 76, 77, 78, 79, 82, 83, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 104, 106, 107, 108, 111, 113, 114, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 184, 185, 191, 194, 195, 196, 198, 202, 207, 229, 232, 233, 234, 236, 240, 245, 256, 262, 263, 280, 284, 288, 292, 298, 299, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 523, 525, 526, 553, 555, 557, 558], "hook": [4, 69, 184, 215, 222, 223, 250, 255, 277, 319, 322, 329, 338, 528, 548, 555], "prepare_qat": [4, 223, 255], "high": [4, 199, 200, 237, 238, 526, 539, 549, 557], "accur": 4, "inc": [4, 6, 69, 213, 249, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 549, 550, 553], "switch": [4, 69, 109, 555], "run": [4, 6, 7, 35, 36, 38, 41, 43, 45, 69, 130, 165, 184, 185, 195, 212, 214, 233, 248, 255, 268, 271, 285, 286, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 444, 487, 508, 509, 510, 522, 524, 530, 533, 534, 535, 542, 548, 549, 551, 553, 554, 555, 557, 558], "better": [4, 71, 121, 184, 185, 275, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 529, 541, 542, 548, 549, 551, 554, 557], "match": [4, 130, 142, 212, 248, 259, 260, 295, 296, 528, 531], "zero": [4, 45, 68, 213, 249, 263, 284, 286, 287, 299, 521, 548, 556, 557], "fine": [4, 6, 196, 234, 526, 548, 549, 551], "num_train_batch": 4, "20": [4, 6, 213, 249, 270, 547, 556, 558, 559], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 114, 115, 116, 117, 118, 119, 122, 127, 130, 151, 156, 159, 164, 215, 271, 528, 548, 550], "quantized_model": 4, "api": [4, 8, 10, 14, 29, 30, 44, 69, 94, 99, 130, 142, 254, 255, 259, 289, 295, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 509, 510, 525, 535, 537, 538, 544, 553, 554, 557], "q_func": [4, 7, 36, 38, 41, 44, 69, 71, 184, 185, 255, 289, 290, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 557], "eval_dataload": [4, 184, 185, 223, 254, 255, 265, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 525, 536, 557], "val_load": [4, 551], "timeout": [4, 185, 322, 329, 503, 531, 550, 554, 557, 558], "constrain": 4, "71": [4, 559], "close": [4, 160, 175], "debug": [4, 399, 400, 404, 522, 557], "analyz": [4, 130, 159, 308, 548, 554, 555], "limit": [4, 321, 524, 528, 548, 555], "sinc": [4, 12, 254, 255, 256, 277, 289, 291, 292, 317, 463, 528, 531, 541, 546], "actual": [4, 71, 263, 299, 530], "arithmet": [4, 534], "easili": [4, 7, 545, 548], "relat": [4, 250, 255, 259, 277, 284, 291, 295, 317, 338, 425, 428, 430, 435, 511, 514, 515, 516, 519, 558], "refer": [4, 6, 7, 12, 167, 196, 234, 256, 257, 262, 263, 284, 286, 287, 292, 293, 298, 299, 523, 526, 529, 530, 536, 540, 541, 542, 545, 548, 550, 551, 553, 556, 557], "center": [5, 6, 213, 249, 556, 557], "work": [5, 254, 255, 277, 289, 525, 528, 548, 552, 553, 555], "resolv": 5, "guidelin": [5, 6, 537], "librari": [6, 217, 255, 521, 539, 549], "popular": [6, 7, 255, 526, 528, 548, 551, 557], "compress": [6, 223, 255, 277, 335, 528, 538, 545, 546, 548, 549, 551], "mainstream": 6, "deep": [6, 7, 178, 521, 525, 538, 539, 542, 549, 551, 557], "learn": [6, 7, 521, 525, 526, 536, 538, 539, 542, 548, 549, 551, 555, 557], "framework": [6, 7, 36, 38, 41, 44, 69, 71, 176, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 213, 215, 216, 217, 220, 225, 226, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 254, 255, 262, 263, 264, 271, 289, 290, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 338, 347, 361, 371, 387, 389, 394, 396, 398, 418, 426, 429, 431, 432, 438, 445, 447, 452, 456, 461, 465, 476, 482, 493, 494, 521, 522, 525, 526, 530, 531, 532, 535, 536, 538, 539, 541, 542, 548, 549, 551, 556, 557, 558, 559], "mxnet": [6, 7, 43, 191, 195, 198, 201, 202, 205, 206, 207, 210, 213, 229, 233, 236, 239, 240, 243, 244, 245, 247, 249, 254, 255, 262, 263, 289, 298, 299, 305, 318, 532, 534, 538, 542, 543, 550, 557, 558], "formerli": 6, "known": [6, 216, 217, 321, 548, 555, 557], "deliv": [6, 549], "unifi": [6, 7, 187, 190, 207, 254, 255, 289, 486, 525, 536, 538, 543], "across": [6, 45, 254, 255, 264, 289, 527, 548], "technologi": [6, 198, 236, 547], "prune": [6, 21, 159, 223, 255, 278, 279, 280, 282, 284, 285, 286, 288, 290, 291, 309, 335, 475, 483, 498, 530, 534, 538, 546, 549, 551, 558], "knowledg": [6, 215, 250, 255, 529, 538, 543, 558], "distil": [6, 21, 181, 215, 222, 223, 255, 291, 335, 538, 546, 558], "driven": [6, 542, 545, 555], "strategi": [6, 7, 9, 36, 38, 41, 43, 44, 69, 71, 171, 198, 236, 255, 289, 361, 381, 476, 493, 503, 530, 538, 549, 550, 551, 552, 553, 558], "quickli": [6, 557], "gener": [6, 7, 36, 38, 43, 68, 71, 114, 115, 142, 184, 185, 186, 195, 198, 199, 200, 201, 207, 210, 213, 214, 224, 233, 236, 237, 238, 239, 245, 247, 249, 252, 253, 255, 256, 264, 268, 277, 284, 287, 290, 292, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 384, 389, 395, 450, 455, 459, 461, 462, 467, 468, 469, 478, 487, 518, 522, 525, 528, 535, 541, 542, 545, 547, 548, 549, 551, 552, 555, 556, 557], "predefin": [6, 351, 384, 388, 389, 493], "sparsiti": [6, 281, 284, 286, 287, 288, 308, 309, 526, 538, 548, 559], "goal": [6, 176, 185, 250, 254, 255, 277, 289, 291, 317, 318, 322, 329, 494, 546, 551, 557], "teacher": [6, 181, 215, 250, 255, 291, 528, 529, 559], "student": [6, 196, 215, 222, 234, 250, 255, 526, 528, 529, 559], "ai": [6, 549, 552], "oneapi": [6, 539, 549], "analyt": [6, 539, 549], "visit": [6, 559], "websit": [6, 539], "io": [6, 525], "7": [6, 523, 525, 533, 534, 535, 539, 551, 553, 557], "releas": [6, 481, 493, 537, 539], "binari": [6, 165, 263, 299, 533, 541], "stabl": [6, 522, 539, 549], "basic": [6, 212, 248, 266, 273, 284, 538, 539, 550, 554], "pip": [6, 522, 530, 533, 539, 553], "Or": [6, 286], "full": [6, 68, 71, 196, 197, 198, 214, 234, 235, 236, 255, 522, 526, 533, 539, 540, 557], "nightli": [6, 522, 539], "git": [6, 522, 539], "clone": [6, 522, 539], "cd": [6, 522, 530, 539], "r": [6, 68, 94, 160, 175, 271, 522, 539, 547, 551, 559], "txt": [6, 201, 239, 487, 522, 526, 539], "pypi": [6, 522, 539], "found": [6, 250, 255, 266, 267, 273, 274, 307, 321, 478, 493, 510, 542, 557], "guid": [6, 196, 234, 526, 528, 539], "fp32": [6, 7, 36, 38, 41, 69, 70, 71, 116, 118, 160, 167, 175, 184, 185, 251, 252, 263, 299, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 397, 534, 541, 542, 550, 551, 552, 553, 554, 555, 557, 558, 559], "wget": [6, 535], "storag": [6, 259, 295, 535, 541], "googleapi": [6, 535], "v1_6": [6, 535], "mobilenet_v1_1": 6, "0_224_frozen": 6, "pb": [6, 71, 308, 318, 434, 437, 448, 530, 535, 543, 555, 559], "dummi": [6, 199, 200, 237, 238, 253, 263, 299, 389, 393, 495, 522, 526, 535, 541], "shape": [6, 130, 142, 159, 199, 200, 209, 213, 237, 238, 246, 249, 259, 284, 295, 418, 425, 426, 429, 438, 440, 475, 522, 526, 534, 535, 556], "224": [6, 209, 246, 271, 523, 525, 526, 530, 535, 556, 557, 558], "calib_dataload": [6, 216, 217, 255, 289, 290, 318, 525, 526, 536, 541, 551], "dataload": [6, 7, 14, 31, 36, 38, 41, 43, 44, 45, 69, 71, 167, 171, 176, 184, 185, 196, 207, 214, 217, 223, 234, 245, 250, 255, 265, 277, 289, 290, 291, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 338, 346, 351, 357, 361, 371, 384, 387, 389, 394, 396, 418, 459, 469, 472, 475, 483, 493, 494, 498, 522, 526, 530, 535, 536, 541, 542, 544, 551, 555, 556, 557, 558], "search": [6, 12, 21, 94, 177, 184, 185, 254, 255, 256, 266, 267, 268, 270, 271, 273, 274, 275, 276, 289, 292, 321, 323, 328, 384, 385, 412, 538, 541, 549, 555, 557], "jupyt": 6, "lab": 6, "manag": [6, 268, 269, 270, 271, 362, 394, 396, 419, 477, 492], "click": [6, 522, 538, 549, 555], "12": [6, 522], "onnxruntim": [6, 7, 44, 192, 230, 255, 264, 401, 405, 531, 538, 550], "raw": [6, 197, 201, 204, 235, 239, 242, 541, 557], "vision": 6, "classif": [6, 196, 213, 234, 249, 263, 287, 299, 528, 541, 549], "resnet": [6, 530, 535, 559], "v1": [6, 31, 32, 33, 71, 165, 208, 209, 246, 260, 261, 263, 296, 297, 299, 308, 530, 541, 543, 553, 554, 559], "inc_bench": [6, 291, 475, 522], "xeon": [6, 535, 540, 542, 547, 549, 551, 552, 559], "scalabl": [6, 535, 542, 547, 549, 551, 552, 559], "skylak": 6, "cascad": [6, 535], "lake": [6, 535, 542, 549], "cooper": [6, 542, 549], "icelak": 6, "futur": [6, 86, 184, 185, 216, 217, 320, 321, 322, 323, 324, 326, 327, 328, 329, 538, 542, 544], "sapphir": 6, "rapid": 6, "flex": 6, "seri": [6, 209, 246, 556], "amd": [6, 538, 559], "arm": [6, 538, 559], "nvidia": [6, 538, 548, 551, 559], "cento": [6, 487], "ubuntu": [6, 547], "04": [6, 484, 547, 559], "11": [6, 33, 484, 522, 535, 541, 542], "variabl": [6, 142, 198, 214, 236, 255, 264, 270, 321, 482, 506, 522], "tf_enable_onednn_opt": [6, 522], "onednn": [6, 521], "default": [6, 7, 12, 36, 38, 69, 71, 122, 130, 159, 165, 178, 181, 184, 185, 186, 188, 196, 197, 198, 209, 213, 215, 223, 224, 226, 234, 235, 236, 246, 249, 251, 252, 255, 256, 259, 262, 263, 265, 285, 291, 292, 295, 298, 299, 308, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 345, 365, 367, 368, 370, 372, 375, 376, 380, 402, 403, 406, 423, 433, 482, 484, 495, 496, 500, 501, 522, 523, 525, 526, 531, 534, 538, 541, 544, 545, 550, 552, 554, 556, 557, 558], "420": [6, 538], "speedup": [6, 538, 551], "geomean": [6, 538], "2x": [6, 538, 547], "vnni": [6, 538, 550, 551], "minim": [6, 160, 175, 321, 528, 541, 548, 551, 557], "overview": 6, "dive": [6, 534], "mix": [6, 7, 71, 319, 454, 455, 456, 499, 538, 557], "orchestr": [6, 335, 538], "benchmark": [6, 10, 36, 38, 41, 71, 216, 217, 255, 290, 291, 310, 364, 371, 374, 383, 389, 391, 394, 395, 418, 475, 476, 486, 491, 508, 513, 525, 535, 543, 544, 557, 558, 559], "convers": [6, 7, 78, 105, 255, 265, 542, 551, 552], "tensorboard": [6, 7, 36, 38, 41, 44, 69, 71, 335, 338, 557], "coder": [6, 538, 549], "topic": 6, "adaptor": [6, 9, 223, 255, 338, 538, 552, 553, 555, 557], "togeth": [6, 213, 249, 284, 290, 525, 528, 539, 549, 555, 556, 557], "tencent": [6, 549], "deepen": [6, 549], "cloud": [6, 549], "foundat": [6, 549], "digit": [6, 256, 292, 549], "intellig": [6, 549], "industri": [6, 526, 541, 549], "dec": [6, 549], "2022": [6, 31, 32, 33, 559], "fast": [6, 549], "achiev": [6, 254, 255, 289, 541, 546, 548, 549, 551, 555, 557], "sota": [6, 549], "nov": [6, 549], "virtual": [6, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 549], "applianc": [6, 549], "packag": [6, 7, 353, 360, 365, 367, 368, 370, 371, 372, 375, 376, 379, 380, 399, 400, 404, 407, 413, 415, 418, 419, 425, 444, 446, 451, 454, 457, 458, 460, 466, 471, 475, 508, 522, 533, 539, 549, 553, 557], "bitnami": [6, 549], "diffus": [6, 549], "few": [6, 522, 549, 557], "distilbert": [6, 196, 234, 526, 549, 559], "oct": [6, 549], "innov": [6, 549], "acceler": [6, 528, 548, 549, 552, 557], "legal": [6, 537], "secur": [6, 547, 549], "send": [6, 463, 505, 510, 524], "your": [6, 194, 196, 232, 234, 259, 295, 522, 523, 524, 526, 530, 540, 554, 555, 557], "resum": [6, 184, 185, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335], "solut": [7, 160, 175, 268, 533, 549, 557], "onnx": [7, 44, 45, 68, 192, 230, 251, 252, 253, 301, 302, 303, 309, 335, 348, 448, 532, 534, 538, 542, 543, 549, 550, 551], "runtim": [7, 487, 531, 532, 534, 538, 550, 551], "bridg": [7, 538], "vanilla": [7, 538], "10004": [7, 528, 534, 538, 542, 546, 550, 558], "complet": [7, 87, 522, 557, 558, 559], "subclass": [7, 36, 62, 172, 174, 191, 195, 198, 202, 205, 206, 207, 210, 213, 220, 229, 233, 236, 240, 243, 244, 245, 247, 249, 262, 263, 275, 278, 279, 280, 284, 286, 288, 298, 299, 310, 316, 329, 557], "adaptor_registri": [7, 36], "abc": [7, 133, 261, 297, 426, 486, 555, 557], "abcadaptor": 7, "framework_specific_info": [7, 36, 38, 41, 44, 69, 71], "tune_cfg": [7, 36, 38, 41, 43, 44, 69, 71, 171, 322], "postprocess": [7, 36, 38, 41, 44, 69, 71, 207, 210, 213, 214, 217, 245, 247, 249, 254, 255, 265, 289, 290, 291, 496, 523, 525, 555, 556], "query_fw_cap": [7, 36, 38, 41, 44, 69, 71, 557], "query_fused_pattern": [7, 36], "awar": [7, 36, 38, 41, 44, 69, 71, 167, 187, 190, 207, 223, 255, 265, 284, 289, 290, 529, 530, 538, 542, 544, 546, 559], "he": 7, "intersect": [7, 263, 299, 541], "graph": [7, 44, 45, 69, 71, 74, 80, 81, 82, 83, 84, 85, 86, 87, 94, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 124, 125, 128, 129, 130, 152, 159, 160, 163, 164, 165, 195, 233, 252, 254, 291, 301, 302, 307, 308, 309, 352, 354, 418, 426, 429, 437, 438, 440, 450, 451, 452, 457, 458, 472, 473, 475, 494, 497, 509, 526, 528, 530, 536, 541, 543, 551, 552, 555], "decid": [7, 71, 135, 136, 257, 286, 293, 319, 320, 326, 327, 406, 531, 553, 557], "besid": [7, 524, 528, 546], "introduc": [7, 98, 534, 548, 551, 553, 557], "describ": [7, 38, 44, 69, 71, 271, 522, 534, 555], "op": [7, 36, 38, 41, 44, 45, 69, 70, 71, 80, 84, 86, 89, 90, 93, 94, 95, 96, 98, 105, 109, 110, 113, 116, 117, 118, 119, 121, 127, 130, 159, 160, 163, 165, 251, 252, 319, 320, 322, 326, 327, 339, 340, 386, 389, 397, 402, 403, 411, 509, 522, 534, 535, 542, 551, 552, 553, 555, 557, 558], "sequenc": [7, 12, 71, 87, 196, 212, 213, 234, 248, 249, 256, 257, 261, 284, 292, 293, 297, 526, 534, 556], "past": 7, "abov": [7, 77, 259, 295, 523, 535, 548], "wa": [7, 159, 463, 522, 549, 557], "hidden": [7, 284, 493, 548], "corner": [7, 213, 249, 556], "effect": [7, 548], "mainten": 7, "difficult": 7, "correspond": [7, 12, 71, 142, 167, 196, 234, 256, 259, 263, 284, 286, 290, 292, 295, 299, 321, 534, 548, 550, 551, 554, 557], "abil": [7, 525, 534], "clear": [7, 12, 135, 194, 232, 256, 262, 263, 271, 292, 298, 299, 534, 541], "fragment": 7, "field": [7, 130, 159, 198, 236, 259, 290, 295, 522, 523, 530, 531, 535, 557, 558], "enumer": [7, 43, 68, 275, 335, 345, 349, 447, 453, 476, 530, 548, 555], "scenario": [7, 35, 361, 522, 523, 528, 535, 548], "hardwar": [7, 41, 70, 482, 528, 535, 538, 542, 547, 548, 549, 550], "doesn": [7, 130, 213, 249, 290, 492, 523, 525, 530, 558], "bf16": [7, 41, 70, 105, 116, 118, 322, 534, 535, 542, 552, 557], "granular": [7, 41, 70, 534, 538, 548, 557, 558], "scheme": [7, 41, 45, 68, 70, 510, 525, 534, 557, 558], "semant": [7, 534], "pattern": [7, 36, 41, 70, 71, 85, 86, 94, 117, 121, 127, 130, 155, 198, 236, 255, 278, 282, 286, 291, 386, 389, 402, 411, 412, 486, 509, 526, 534, 538, 546, 550, 559], "abstract": [7, 36, 41, 70, 80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129, 133, 142, 213, 215, 249, 250, 254, 255, 262, 263, 274, 276, 280, 284, 288, 289, 298, 299, 301, 302, 303, 305, 307, 308, 309, 310, 329, 351, 426, 437, 438, 459, 468, 486, 509, 536], "querybackendcap": [7, 38, 41, 44, 69, 70, 71], "tensorflowqueri": [7, 71], "look": [7, 534, 541, 545, 558], "microsoft": 7, "mla": [7, 521], "kernel": [7, 482, 547, 548, 557], "becom": [7, 86], "integr": [7, 165, 215, 522], "explor": 7, "attribut": [7, 68, 86, 130, 142, 159, 171, 177, 178, 223, 289, 413, 414, 418, 475, 491, 534, 536, 542, 550, 558], "whether": [7, 43, 44, 45, 69, 71, 135, 136, 165, 186, 194, 196, 209, 213, 224, 232, 234, 246, 249, 250, 255, 257, 259, 263, 277, 284, 286, 293, 295, 299, 345, 448, 526, 541, 556], "qlinear": [7, 198, 205, 236, 243, 263, 299, 559], "qdq": [7, 133, 171, 251, 252, 538, 551], "integ": [7, 142, 250, 255, 259, 263, 275, 284, 286, 288, 295, 299, 339, 340, 551, 557], "qtype": [7, 45, 68], "choic": [7, 196, 234, 522, 526, 541], "float32": [7, 45, 199, 200, 213, 237, 238, 249, 259, 295, 491, 523, 526, 551, 556], "uint8": [7, 68, 209, 246, 259, 295, 339, 340, 521, 526, 534, 550, 551, 556, 557, 558], "node": [7, 43, 45, 68, 71, 74, 77, 78, 79, 80, 86, 87, 88, 91, 92, 94, 98, 110, 123, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 252, 301, 302, 303, 307, 308, 309, 395, 408, 409, 410, 411, 412, 413, 418, 426, 429, 436, 437, 438, 472, 473, 475, 522, 530, 555], "exclud": [7, 110], "three": [7, 98, 196, 234, 287, 522, 525, 535, 539, 542, 546, 551, 552, 554, 555, 557], "onnxrt": [7, 196, 198, 205, 206, 207, 210, 213, 234, 236, 243, 244, 245, 247, 249, 262, 263, 298, 299, 400, 401, 416, 418, 425, 475], "onnxrt_qlinearopsadaptor": [7, 44], "dump_elapsed_tim": [7, 345], "recov": [7, 41, 44, 71, 345, 529], "q_config": [7, 41, 44, 45, 70, 71, 251, 252], "inspect_tensor": [7, 36, 38, 41, 44, 69, 71], "op_list": [7, 36, 38, 41, 44, 69, 71, 326, 555], "iteration_list": [7, 36, 38, 41, 44, 69, 71], "inspect_typ": [7, 36, 38, 41, 44, 69, 71, 397], "save_to_disk": [7, 36, 38, 41, 44, 69, 71], "save_path": [7, 41, 44, 71, 251, 252, 301, 302, 303, 309, 335, 543], "quantization_cfg": [7, 41, 44, 71], "set_tensor": [7, 36, 38, 41, 44, 69, 71], "tensor_dict": [7, 36, 38, 41, 44, 69, 71], "input_graph": [7, 44, 151, 152, 156, 159, 160, 347, 452, 456, 461, 468], "fp32_baselin": [7, 38, 41, 44, 69, 71, 338], "diagnosis_help": 7, "fp32_model": [7, 69, 71, 167, 251, 252, 326, 345, 525], "int8_model": [7, 251, 252], "experiement": 9, "deprec": [9, 250, 255, 493, 556], "bilingu": [12, 256, 292], "understudi": [12, 256, 292], "qualiti": [12, 256, 292], "text": [12, 212, 213, 248, 249, 256, 261, 287, 292, 297, 540, 549, 556, 559], "machin": [12, 256, 292, 359, 522, 539, 549, 555], "translat": [12, 71, 256, 257, 268, 271, 292, 293], "natur": [12, 256, 292], "anoth": [12, 36, 38, 71, 130, 213, 249, 255, 256, 265, 292, 335, 525, 528, 544, 556, 557], "approxim": [12, 256, 257, 292, 293, 541], "glue": [12, 256, 263, 292, 299, 526, 541], "word": [12, 212, 248, 256, 292, 535, 541, 559], "piec": [12, 212, 248, 256, 292, 541], "decod": [12, 208, 209, 246, 256, 292, 541, 556], "id": [12, 31, 32, 33, 212, 214, 248, 256, 258, 259, 260, 261, 292, 294, 295, 296, 297, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 379, 381, 382, 410, 411, 414, 479, 541, 554, 557], "token": [12, 196, 207, 210, 213, 234, 245, 247, 249, 255, 256, 257, 291, 292, 293, 506, 510, 522, 526, 541, 554, 556, 557], "By": [12, 35, 256, 292, 541, 543], "ngram": [12, 256, 292, 541], "breviti": [12, 256, 257, 292, 293, 541], "penalti": [12, 256, 257, 292, 293, 541], "beam": [12, 256, 292, 541, 557], "cach": [12, 196, 234, 256, 292, 427, 510, 533, 551], "error": [12, 69, 167, 256, 263, 269, 290, 292, 299, 478, 505, 541, 557], "occur": [12, 256, 292], "length": [12, 196, 213, 234, 249, 256, 259, 292, 295, 526, 541, 551, 556], "bleu_scor": [12, 256, 257, 292, 293], "schedul": [21, 255, 282, 286, 291, 335, 546], "mixedprecis": [21, 255, 264, 354, 455, 499, 542], "modelconvers": [21, 255, 265, 544], "architectur": [21, 214, 266, 267, 273, 274, 276, 528, 539, 548, 549], "na": [21, 177, 255, 291, 304, 538], "14": [31, 32, 251, 252, 559], "revis": [31, 32, 33], "6ece06672ed3": 31, "6f0d0f71d92e": [31, 32], "date": [31, 32, 33, 463], "08": [31, 213, 249, 556, 559], "31": [31, 559], "07": [31, 32, 558, 559], "229939": 31, "update_dataload": 31, "db_session": [31, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 391, 393, 396], "sqlalchemi": [31, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 388, 389, 391, 393, 394, 396, 533, 539], "orm": [31, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 388, 389, 391, 393, 396], "session": [31, 165, 195, 233, 308, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 391, 393, 394, 396, 555], "databas": [31, 198, 236, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 463, 477, 492], "update_transform": 31, "13": [32, 33, 318, 522, 559], "9e89549a08c8": [32, 33], "29": [32, 559], "41": [32, 535, 559], "291905": 32, "03": [33, 484, 559], "22": [33, 484, 487, 559], "34": [33, 559], "52": [33, 559], "916541": 33, "run_migrations_offlin": 35, "migrat": [35, 477], "context": [35, 550], "url": [35, 198, 236, 443, 506, 540], "engin": [35, 270, 362, 374, 394], "though": 35, "skip": [35, 310, 555, 557], "creation": [35, 360], "even": [35, 86, 522, 548], "dbapi": 35, "execut": [35, 38, 41, 44, 69, 71, 74, 77, 163, 223, 250, 255, 266, 267, 273, 277, 286, 289, 290, 318, 338, 344, 346, 347, 348, 363, 374, 377, 383, 389, 391, 392, 448, 450, 452, 455, 456, 459, 461, 462, 464, 469, 472, 476, 479, 487, 488, 509, 522, 528, 530, 535, 542, 546, 548, 551, 559], "emit": 35, "string": [35, 36, 38, 41, 44, 69, 70, 71, 80, 87, 130, 135, 136, 159, 165, 176, 177, 196, 198, 215, 220, 234, 236, 250, 252, 254, 255, 256, 259, 265, 266, 267, 270, 273, 274, 275, 277, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 303, 308, 309, 317, 318, 338, 339, 340, 345, 357, 472, 493, 517, 541, 556], "run_migrations_onlin": 35, "associ": [35, 259, 295, 384, 385], "connect": [35, 286, 374, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 522, 548, 554], "cl": [36, 62, 69, 172, 174, 198, 202, 205, 206, 207, 210, 213, 215, 220, 236, 240, 243, 244, 245, 247, 249, 275, 280, 284, 286, 288, 310, 316, 329], "quanit": [36, 41, 44], "chosen": [36, 38, 522], "categori": [36, 38, 71, 198, 236, 258, 259, 294, 295, 526], "mini": [36, 38, 41, 71, 559], "boolean": [36, 38, 41, 43, 71, 80, 270, 493], "inspect": [36, 38, 41, 44, 69, 71, 522, 553, 555], "capabl": [36, 38, 41, 44, 69, 70, 71, 534, 542, 550, 551, 557, 558], "queri": [36, 38, 41, 43, 44, 69, 71, 130, 135, 142, 165, 322, 365, 372, 380, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 551], "dump": [36, 38, 41, 44, 45, 69, 71, 130, 251, 252, 345, 355, 463, 484, 494, 506, 551, 555, 557], "contain": [36, 38, 41, 44, 45, 69, 71, 80, 91, 92, 94, 98, 130, 133, 159, 165, 167, 176, 184, 185, 196, 197, 198, 234, 235, 236, 250, 251, 252, 254, 255, 259, 260, 261, 265, 268, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 344, 349, 353, 360, 365, 367, 368, 370, 371, 372, 375, 376, 379, 380, 384, 389, 394, 399, 400, 404, 407, 413, 418, 419, 425, 444, 451, 453, 454, 457, 458, 460, 466, 471, 475, 479, 487, 525, 526, 528, 538, 541, 548, 555, 557], "bool": [36, 38, 43, 44, 45, 69, 86, 87, 130, 135, 159, 165, 167, 171, 185, 196, 198, 209, 213, 234, 236, 246, 249, 251, 252, 257, 259, 263, 268, 270, 271, 284, 293, 295, 299, 322, 329, 373, 406, 411, 414, 426, 429, 431, 432, 433, 434, 436, 437, 439, 443, 445, 448, 463, 479, 480, 482, 487, 488, 493, 495, 496, 506, 512, 518, 526, 541, 550, 556], "disk": [36, 38, 69, 71], "memori": [36, 38, 69, 98, 254, 255, 277, 289, 291, 317, 525, 529, 542, 545, 548, 551, 557], "numpi": [36, 38, 41, 44, 69, 71, 91, 92, 94, 130, 165, 213, 249, 253, 259, 263, 268, 270, 275, 295, 299, 339, 340, 533, 556], "arrai": [36, 38, 41, 44, 69, 71, 130, 159, 165, 213, 249, 259, 263, 268, 270, 275, 295, 299, 309, 321, 339, 340, 556], "node0_nam": [36, 38, 69, 71], "weight0_nam": [36, 38, 41, 44, 69, 71], "bias0_nam": [36, 38, 41, 44, 69, 71], "node1_nam": [36, 38, 69, 71], "weight1_nam": [36, 38, 69, 71], "bias1_nam": [36, 38, 69, 71], "output0_nam": [36, 38, 69, 71], "output1_nam": [36, 38, 69, 71], "respons": [36, 38, 41, 44, 69, 71, 482, 486, 492, 505, 509, 510, 514, 516, 518, 519, 551], "int32": [36, 38, 41, 44, 69, 71, 251, 252, 526], "someth": [36, 38, 41, 44, 69, 71, 184, 185, 198, 236, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "quantize_input": [36, 38, 71], "abl": [36, 38, 71, 105, 184, 185, 212, 248, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 548, 551], "where": [36, 38, 41, 45, 68, 69, 71, 142, 259, 263, 274, 276, 284, 295, 299, 528, 531, 548, 555, 557], "destinatin": [36, 38], "destin": [36, 38, 45, 71, 255, 265, 544], "kerasadaptor": 38, "boolen": [38, 44, 69, 71], "compare_label": [38, 41, 44, 69, 71, 263, 299, 541], "pipelin": [38, 41, 44, 69, 71, 250, 255, 266, 267, 273, 290, 529, 546], "get_optype_wise_": [38, 71], "quantizable_op_detail": 38, "wise": [38, 71, 160, 175, 284, 321, 386, 389, 493, 522, 525, 538, 548, 555, 557, 558], "union": [38, 71, 257, 259, 263, 293, 295, 299, 335, 357, 359, 374, 395, 433, 479, 482, 484, 486, 487, 493, 496, 497, 499, 501, 505, 541], "kei": [38, 44, 69, 71, 130, 135, 159, 165, 167, 178, 259, 275, 285, 287, 295, 308, 336, 338, 339, 345, 486, 501, 522, 555, 557], "kerasqueri": 38, "local_config_fil": [38, 41, 44, 69, 71], "get_vers": [38, 41, 44, 70, 71], "infom": [38, 44, 71, 216, 217, 252], "get_precis": [38, 41, 44, 70, 71, 361], "get_op_typ": [38, 41, 44, 69, 70, 71], "compos": [38, 44, 69, 71, 159, 213, 249, 525, 556, 557], "dictionari": [38, 44, 45, 69, 71, 91, 92, 94, 142, 167, 171, 177, 178, 181, 212, 248, 259, 266, 268, 271, 273, 274, 276, 291, 295, 365, 367, 368, 370, 372, 375, 376, 380, 384, 385, 387], "get_quantization_cap": [38, 41, 44, 69, 70, 71], "get_op_types_by_precis": [38, 44, 69, 71], "mxnetadaptor": 41, "nc_model": [41, 43, 277], "unimpl": [41, 44], "yet": [41, 44, 71, 522], "mxnetmodel": [41, 305], "data_x": [41, 43], "loader": [41, 43, 184, 185, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "modelwis": [41, 319, 320], "opwis": [41, 326, 327], "recover_tuned_model": [41, 71], "mxnetqueri": 41, "g": [41, 44, 70, 268, 270, 290, 486, 528, 535, 548, 553, 557], "fully_connect": 41, "get_fuse_pattern": [41, 70, 71], "etc": [41, 70, 176, 212, 223, 248, 250, 254, 255, 261, 269, 270, 277, 289, 291, 297, 317, 318, 344, 528, 538, 554], "get_mixed_precision_combin": [41, 70, 71], "optyp": 43, "enum": [43, 68, 345, 447, 476], "deriv": [43, 68, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 223, 250, 255, 284, 286, 288, 345], "new": [43, 68, 80, 130, 152, 165, 186, 198, 207, 210, 213, 214, 224, 236, 245, 247, 249, 284, 285, 288, 290, 307, 345, 388, 389, 393, 505, 523, 524, 530, 542, 549, 551, 553, 554, 556, 558], "isiter": 43, "obj": [43, 176, 195, 233, 250, 254, 255, 265, 266, 267, 273, 274, 277, 285, 289, 290, 291, 317, 318, 338, 345], "ensure_list": 43, "check_mx_vers": 43, "mx": [43, 525], "__version__": 43, "make_nc_model": 43, "sym_model": 43, "ctx": [43, 525], "input_desc": 43, "tupl": [43, 69, 130, 142, 184, 185, 209, 213, 215, 246, 249, 251, 252, 259, 268, 271, 295, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 412, 443, 493, 512, 526, 541, 548, 556], "symnet": 43, "aux": 43, "descript": [43, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 252, 253, 259, 274, 295], "ncmodel": 43, "suppli": 43, "prepare_model_data": 43, "dataloaderwrap": 43, "is_model_quant": 43, "query_quantizable_nod": 43, "map": [43, 45, 71, 152, 213, 249, 252, 254, 255, 258, 259, 260, 261, 263, 268, 277, 284, 286, 289, 291, 294, 295, 296, 297, 299, 317, 447, 523, 526, 530, 541, 548, 551], "quantize_sym_model": 43, "run_forward": 43, "b_filter": 43, "collector": 43, "pre_batch": 43, "post_batch": 43, "propag": [43, 142], "filter": [43, 196, 197, 198, 199, 200, 201, 203, 207, 234, 235, 236, 237, 238, 239, 241, 245, 255, 291, 366, 406, 429, 495, 526, 538, 548, 555, 557], "make_symbol_block": 43, "gluon": [43, 318, 543], "symbolblock": 43, "make_modul": 43, "parse_tune_config": 43, "quantizable_nod": 43, "distribute_calib_tensor": 43, "calib_tensor": 43, "calib_cfg": 43, "tensor_to_nod": 43, "kl": [43, 336, 339, 340, 534, 557, 558], "minmax": [43, 534, 557, 558], "calib_model": 43, "qsym_model": 43, "calib_data": [43, 525], "gather": [43, 45, 284, 482], "calibdata": 43, "threshold": [43, 45, 173, 259, 284, 295, 336, 339, 340, 541], "calibcollector": 43, "include_tensors_kl": 43, "include_tensors_minmax": 43, "num_bin": [43, 336, 339, 340], "8001": [43, 336, 339], "collectorbas": 43, "tensorcollector": 43, "include_nod": 43, "qtensor_to_tensor": 43, "onnxruntimeadaptor": 44, "rt": 44, "todo": [44, 196, 199, 234, 237, 259, 295, 339, 340, 491], "func": [44, 215, 290, 493, 510, 558], "onnxdataload": 44, "evalut": 44, "onnxtransform": 44, "onnxmetr": 44, "evaluaton": 44, "visualizaton": 44, "f1": [44, 255, 260, 262, 263, 291, 296, 298, 299, 523, 530, 541, 554, 559], "modelproto": [44, 252, 543], "onnxrt_integeropsadaptor": 44, "onnxrt_qdqadaptor": 44, "onnxrtqueri": 44, "get_graph_optim": 44, "onnxrtaug": 45, "model_wrapp": 45, "dump_op_typ": 45, "black_nod": 45, "white_nod": 45, "cpuexecutionprovid": 45, "augment": 45, "augment_graph": 45, "activation_onli": 45, "weight_onli": 45, "quantization_candid": 45, "get_intermediate_output": 45, "calib_mod": 45, "intermedi": [45, 68, 215, 538, 548, 551], "dump_calibr": 45, "naiv": 45, "give": [45, 525, 557], "pair": [45, 127, 135, 542], "minimum": [45, 68, 557], "second": [45, 88, 196, 234, 322, 406, 486, 522, 531, 545, 557, 558], "maximum": [45, 68, 78, 196, 213, 234, 249, 257, 284, 286, 293, 321, 526, 551, 556], "ad": [45, 142, 196, 234, 256, 292, 321, 363, 364, 366, 373, 374, 375, 376, 377, 381, 382, 522, 535, 542, 555], "reducemin": 45, "reducemax": 45, "calculate_quantization_param": 45, "quantization_threshold": 45, "calcul": [45, 69, 71, 167, 199, 200, 215, 237, 238, 260, 261, 271, 281, 284, 286, 287, 296, 297, 310, 326, 336, 339, 397, 486, 491, 526, 541, 545, 548, 551, 554, 557, 558], "matmul": [45, 70, 76, 89, 109, 110, 119, 148, 252, 284, 534], "param_nam": [45, 357], "conv_3": 45, "np": [45, 130, 159, 213, 249, 321, 530, 556], "conv_4": 45, "calculate_scale_zeropoint": 45, "last_nod": 45, "next_nod": 45, "rmin": [45, 68, 521], "rmax": [45, 68, 521], "quantize_rang": [45, 68], "op_registri": 62, "op_typ": [62, 69, 322, 326], "quanttyp": 68, "cast_tensor": 68, "tensorproto": 68, "tensor_target_dtyp": 68, "quantize_data_with_scale_zero": 68, "sym": [68, 534, 557, 558], "asym": [68, 534, 557, 558], "To": [68, 259, 280, 284, 288, 295, 484, 522, 524, 530, 542, 550, 552, 553, 557, 558], "pack": [68, 85], "b": [68, 94, 98, 196, 234, 252, 526, 541], "ab": [68, 286, 521, 551], "quantize_data": 68, "trasnform": 68, "equat": [68, 261, 263, 297, 299, 551], "q": [68, 127], "z": [68, 528], "real": [68, 69, 199, 216, 217, 237, 530, 549, 551], "quantizedvalu": 68, "new_quantized_nam": 68, "scale_nam": 68, "zero_point_nam": 68, "quantized_value_typ": 68, "axi": 68, "quint8": 68, "linearli": 68, "inputoutputinti": 68, "quantizediniti": 68, "quantized_data": 68, "quantizationmod": 68, "quantizedvaluetyp": 68, "quantformat": [68, 252], "attribute_to_kwarg": 68, "helper": [68, 69, 167, 171, 196, 197, 198, 212, 234, 235, 236, 248, 252, 488], "make_nod": 68, "find_by_nam": 68, "item_list": 68, "item": [68, 178, 212, 248, 285, 322, 395, 480, 512, 530, 554], "get_ops_recurs": 69, "prefix": [69, 165, 214, 255, 256, 292, 506, 535, 555], "graph_info": [69, 71, 301, 302, 303, 307, 308, 309], "templateadaptor": 69, "tampl": 69, "is_fused_modul": [69, 167, 171], "_propagate_qconfig_help": [69, 167, 171], "calculate_hessian_trac": 69, "enable_act": [69, 167], "hessian": [69, 167], "gradient": [69, 142, 286, 309, 538, 548, 557, 559], "amap": 69, "op_nam": [69, 322, 326, 397, 402, 403, 411, 412, 555], "hessian_trac": [69, 167], "pytorchadaptor": 69, "objext": 69, "summari": [69, 122, 123, 214, 255, 522, 524, 547, 555], "optimizer_tupl": 69, "criterion_tupl": 69, "is_fused_child": 69, "_post_eval_hook": [69, 555], "is_fused_op": 69, "is_last_fused_child": 69, "q_capabl": 69, "get_non_quant_modul": 69, "model_kwarg": 69, "non_quant_modul": 69, "custom": [69, 135, 176, 268, 290, 344, 384, 389, 528, 548, 554], "keyword": 69, "custom_non_quant_dict": 69, "pytorch_ipexadaptor": 69, "ipex": [69, 538, 551, 559], "unspport": 69, "No": [69, 533, 547, 549], "pytorch_fxadaptor": 69, "fx": [69, 171, 318, 538, 549, 551, 552, 559], "prepare_sub_graph": 69, "sub_module_list": 69, "fx_op_cfg": 69, "is_qat": 69, "example_input": [69, 251, 252], "recurs": [69, 345], "qconfigmap": 69, "prepare_fx": 69, "dir": [69, 171, 196, 234, 344, 526, 533, 536], "convert_sub_graph": 69, "fuse_fx_model": 69, "fused_model": 69, "calculate_op_sensit": [69, 71], "output_op_nam": [69, 71], "confidence_batch": [69, 71, 557], "fallback": [69, 71, 171, 319, 320, 535, 542, 552, 557], "requantize_cfg": [69, 71], "stage": [69, 71, 117, 487, 528, 555, 557], "sort": [69, 71, 159, 406, 557], "sensit": [69, 71, 286, 538, 548, 557], "ops_lst": 69, "pytorchqueri": 69, "set_quantization_config": 70, "organ": [70, 522, 558], "unsupported_precis": 70, "tensorflowadaptor": 71, "graphdef": [71, 80, 81, 84, 85, 87, 94, 98, 109, 110, 116, 117, 118, 119, 130, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 165, 308, 472, 543], "graph_def": [71, 77, 165, 308, 318, 440, 472, 473], "frozen": [71, 80, 308, 318, 434, 437, 522, 543], "ckpt": [71, 165, 308, 318, 559], "savedmodel": [71, 308, 318, 559], "folder": [71, 165, 198, 203, 236, 241, 318, 344, 526, 555], "larger": 71, "tuning_cfg_to_fw": 71, "tuning_cfg": 71, "pars": [71, 159, 196, 197, 209, 213, 234, 235, 246, 249, 347, 357, 383, 384, 386, 389, 390, 391, 392, 395, 448, 452, 456, 461, 467, 486, 493, 501, 512, 556], "compat": [71, 105, 165, 259, 268, 295, 308, 530, 543, 553], "definit": [71, 130, 189, 194, 227, 232, 411, 424, 433, 479, 509], "inspect_weight_and_bia": 71, "node_list": 71, "graph_node_name_map": [71, 165], "fused_node_map": 71, "pattern_map": 71, "seq": 71, "fused_mapping_revers": 71, "fused_map": 71, "inspect_activ": 71, "local": [71, 284, 345, 359, 389, 394, 407, 427, 522, 554, 557], "tensorflowbasemodel": [71, 308, 438], "quantizedv2": 71, "qat_convert": 71, "quantize_recip": [71, 135, 136], "kera": [71, 94, 136, 142, 220, 303, 308, 418, 425, 435, 530, 543], "converted_model": [71, 542], "mse": [71, 171, 263, 299, 327, 397, 403, 522, 541, 550, 553], "backup": 71, "cfg": [71, 95, 96, 177], "fallen": 71, "previou": [71, 274, 522, 553, 555, 557], "denot": 71, "tensorflow_itexadaptor": 71, "performance_onli": [71, 127, 151, 156, 164, 503, 557], "get_eightbit_pattern": 71, "qdq_enabl": 71, "eightbit": [71, 555], "generate_internal_pattern": 71, "intern": [71, 130, 167, 478, 525], "bf16convert": [74, 552], "fp32_op": [74, 127], "bf16_op": [74, 127, 552], "graph_bas": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129], "graphrewriterbas": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129], "do_transform": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 144, 151, 152, 156, 160, 163, 164], "convertaddtobiasaddoptim": 76, "addv2": [76, 93, 94, 534], "biasadd": [76, 88, 90, 148, 155, 534], "convertlayoutoptim": 77, "layout": 77, "nchw": 77, "nhwc": 77, "convertleakyreluoptim": 78, "subgraph": [78, 86, 90, 94], "leakyrelu": 78, "mul": [78, 89, 90, 93, 94, 148], "coeffici": [78, 269], "less": [78, 528, 548], "convertnantorandom": 79, "const": [79, 87, 88, 91, 92, 94, 109, 110, 123, 130, 291, 363, 374, 377, 383, 389, 391, 392, 396, 475, 483, 492], "nan": 79, "convertplaceholdertoconst": 80, "rewrit": [80, 81, 82, 83, 84, 85, 86, 87, 97, 102, 104, 105, 106, 107, 108, 111, 114, 115, 124, 125, 128, 129], "renam": [80, 105, 553], "placeholderwithdefault": 80, "constant": [80, 86, 130, 159, 251, 252, 321, 476, 525, 534, 556], "simplifi": 80, "input_graph_def": [80, 81, 84, 85, 87, 94, 98, 109, 110, 130, 159], "nodes_to_convert": 80, "placehold": [80, 194, 232], "strtobool": 80, "val_str": 80, "equival": [80, 268], "dequantizecastoptim": 81, "dilatedcontract": 82, "injectdummybiasaddoptim": 83, "expanddimsoptim": 84, "expanddim": 84, "whose": [84, 109, 110, 285, 536, 548, 557], "fetchweightfromreshapeoptim": 85, "fetch": [85, 189, 227, 259, 295, 525], "reshap": [85, 94, 280], "foldbatchnormnodesoptim": 86, "scale_after_norm": 86, "batchnormwithglobalnorm": 86, "nodedef": [86, 91, 92, 94, 130, 159, 472], "normal": [86, 94, 213, 249, 261, 297, 493, 523, 525, 545, 556], "fold": [86, 87, 251, 252, 534], "convolut": [86, 528, 548, 549], "onc": [86, 130, 165, 220, 288, 522, 525, 549], "That": [86, 522, 525], "opportun": 86, "rather": [86, 536], "expens": [86, 528, 557], "bake": 86, "identifi": [86, 91, 92, 94, 259, 295, 308], "simpler": 86, "form": [86, 94, 105, 259, 261, 295, 297, 487, 522, 528], "spot": 86, "fusedbatchnorm": [86, 105], "fusedbatchnormv3": 86, "_fusedbatchnormex": 86, "newer": 86, "style": [86, 189, 203, 227, 241, 524, 526, 536], "badli": [86, 94, 105], "duplic": [86, 94, 123, 321], "graphfoldconstantoptim": 87, "check_all_fold": 87, "check_const_input": 87, "node_nam": [87, 91, 92, 94, 130, 159, 165, 252, 307, 308, 378, 472], "supported_op_typ": 87, "fusebiasaddandaddoptim": 88, "fusecolumnwisemuloptim": 89, "depthwiseconv2dn": [89, 534], "fuseconvwithmathoptim": 90, "elimin": [90, 535], "math": [90, 551], "realdiv": [90, 93], "node_name_from_input": [91, 92, 94, 130, 159], "strip": [91, 92, 94, 165, 555], "port": [91, 92, 94, 159, 506, 510, 522], "underli": [91, 92, 94, 269], "node_from_map": [91, 92, 94], "node_map": [91, 92, 94], "pull": [91, 92, 94, 487], "entri": [91, 92, 94, 167, 220, 254, 290, 403, 406, 486, 493, 540], "index": [91, 92, 94, 135, 142, 189, 194, 198, 202, 207, 214, 227, 232, 236, 240, 245, 255, 275, 310, 345, 510, 525, 541], "isn": [91, 92, 94, 130], "present": [91, 92, 94, 522, 549], "values_from_const": [91, 92, 94, 130], "node_def": [91, 92, 94, 130], "extract": [91, 92, 94, 130, 198, 236, 512, 526], "ndarrai": [91, 92, 94, 130, 213, 249, 268, 270, 309, 321, 336, 339, 533, 556], "access": [91, 92, 94, 130, 142, 177, 178, 478, 493, 506, 510, 522], "get_const_dim_count": [91, 92], "dimens": [91, 92, 188, 213, 226, 249, 271, 281, 321, 526, 528, 548, 556], "fusegeluoptim": 93, "sqrt": 93, "erf": 93, "gelu": 93, "fuselayernormoptim": 94, "remap": 94, "smaller": [94, 213, 249, 528, 548, 556], "layernorm": 94, "case": [94, 98, 195, 212, 213, 214, 233, 248, 249, 254, 255, 263, 277, 289, 290, 291, 299, 317, 484, 488, 493, 522, 523, 525, 528, 530, 534, 536, 541, 545, 548, 549, 551, 556, 558], "fusedbatcnormv3": 94, "And": [94, 223, 255], "restrict": [94, 548, 554], "2d": 94, "3d": [94, 549, 559], "contraint": 94, "fusedop": 94, "fill": [94, 365, 367, 368, 370, 372, 375, 376, 380, 522, 554, 556], "gamma": 94, "beta": 94, "h": [94, 213, 249, 530, 556], "_mkllayernorm": 94, "fusepadwithconv2doptim": 95, "excluded_op_nam": [95, 96], "new_api": [95, 96, 101, 117, 124, 151, 156, 160], "itex_qdq_mod": [95, 96], "fusepadwithfp32conv2doptim": 96, "fusetransposereshapeoptim": 97, "graphcseoptim": 98, "cse": 98, "those": [98, 326, 327, 345, 528, 535, 536, 546, 548, 551, 557], "child": [98, 555], "b1": 98, "c1c2": 98, "d1": [98, 345], "c1": 98, "c2": 98, "bound": [98, 213, 214, 249, 255, 259, 268, 295, 321, 541, 556], "elim": 98, "grappleroptim": 99, "input_output_nam": 99, "opt_cfg": 99, "wrapper": [99, 142, 195, 207, 210, 213, 215, 216, 217, 218, 219, 233, 245, 247, 249, 259, 263, 295, 298, 299, 302, 304, 510, 518, 552], "grappler": [99, 534], "insertprintminmaxnod": 101, "pre_node_nam": 101, "post_node_nam": 101, "movesqueezeafterreluoptim": 102, "removetrainingnodesoptim": 104, "protected_nod": [104, 159], "types_to_splic": [104, 159], "checknumer": [104, 159], "stopgradi": 104, "renamebatchnormoptim": 105, "fusedbatchnormv2": 105, "due": [105, 548, 551, 555], "histor": 105, "latter": [105, 135], "former": 105, "platform": [105, 482, 535, 538, 549, 551, 554, 559], "vnni_bf16": 105, "amx": 105, "instruct": [105, 522, 528, 539, 542, 549, 550, 551], "splitsharedinputoptim": 106, "stripequivalentnodesoptim": 107, "output_node_nam": [107, 108, 151, 152, 156, 159, 165], "stripunusednodesoptim": 108, "input_node_nam": [108, 151, 156, 159, 165], "switchoptim": 109, "condit": [109, 196, 197, 198, 213, 234, 235, 236, 249, 526, 540, 556, 557], "enter": [109, 110], "updateenteroptim": 110, "workaround": 110, "freezefakequantopoptim": 113, "fake_qu": [113, 127, 151, 156], "freezevaluetransform": 114, "max_min_data": [114, 115], "postfix": [114, 115], "tensor_data": 114, "th": [114, 115], "gpu": [114, 115, 127, 130, 159, 538, 548, 550, 551], "itex_mod": [114, 127, 151, 156], "generate_output_graph": [114, 115], "max_name_valu": [114, 115], "freeze_max": [114, 115], "freeze_min": [114, 115], "generate_output_graph_rang": [114, 115], "freezevaluewithoutcalibtransform": 115, "95": [115, 259, 263, 295, 299, 541, 559], "fuseconvredundantdequantizetransform": 116, "_quantizedconv": 116, "_quantizeddeconv": 116, "successor": [116, 117, 118, 119], "fuseconvrequantizetransform": 117, "requant": [117, 119, 555], "fuse_pattern": 117, "sum_pattern": 117, "fusematmulredundantdequantizetransform": 118, "_quantizedmatmul": [118, 119], "fusematmulrequantizedequantizetransform": 119, "quantizedmatmul": 119, "quantizedmatmulwithbiasanddequant": 119, "fusematmulrequantizetransform": 119, "rtype": [119, 321, 488], "fusematmulrequantizedequantizenewapitransform": 119, "fusematmulrequantizenewapitransform": 119, "newapi": 119, "metainfochangingmemopoptim": 121, "metaop": 121, "posthostconstconvert": 122, "hostconst": 122, "postcseoptim": 123, "share": [123, 159, 533, 534, 557], "quantizev2": [123, 148], "quantizedrnnconvert": 124, "calibration_data": [124, 127], "rnn_detail": 124, "scalepropagationtransform": 125, "direct": [125, 284, 447], "generategraphwithqdqpattern": 127, "op_wise_config": [127, 151, 156], "quantized_nod": 127, "dq": 127, "befor": [127, 142, 196, 223, 234, 250, 251, 252, 255, 277, 284, 286, 287, 288, 326, 383, 522, 524, 525, 526, 528, 530, 533, 534, 535, 545, 548, 551, 554, 555, 557], "mergeduplicatedqdqoptim": 128, "shareqdqforitexypatternoptim": 129, "graphanalyz": 130, "extend_engin": 130, "singleton": [130, 291, 475, 483], "properti": [130, 142, 186, 188, 196, 198, 214, 215, 223, 224, 226, 234, 236, 250, 254, 255, 262, 263, 264, 265, 274, 277, 289, 290, 298, 299, 301, 302, 303, 305, 307, 308, 309, 346, 362, 394, 401, 405, 410, 411, 414, 426, 429, 434, 438, 447, 450, 455, 459, 462, 469, 479, 486, 487, 488, 491, 496, 500, 503, 505, 506, 540, 547], "getter": [130, 223, 250, 255, 274, 277, 289, 290, 308, 309, 427], "_graph": 130, "has_positive_input": 130, "retrun": 130, "neg": 130, "get_graph_input_output": 130, "clearli": 130, "similar": [130, 535, 550, 557, 558], "summarize_graph": 130, "writtern": 130, "googl": [130, 542, 549], "query_fusion_pattern_nod": 130, "aggreg": [130, 488], "_search_pattern": 130, "remove_node_with_single_input_output": 130, "rebuild": 130, "except": [130, 291, 345, 475, 483, 484, 493, 508, 518, 559], "remove_nod": 130, "replace_const_nod": 130, "new_const_nod": 130, "target_nod": 130, "old_constant_node_nam": 130, "replace_al": 130, "outdat": 130, "replace_constant_graph_with_constant_nod": 130, "new_nod": 130, "old_end_node_nam": 130, "replace_single_nod": 130, "old_output_node_nam": 130, "old_output_nam": 130, "old_input_node_nam": 130, "old_input_nam": 130, "bottom": [130, 319, 320, 522], "replace_nod": 130, "old_node_nam": 130, "output_nodes_nam": 130, "node_name_detail": 130, "parent": [130, 281, 286, 288, 555], "add_nod": [130, 411], "start_node_nam": 130, "end_node_nam": 130, "dump_graph": 130, "parse_graph": 130, "graphrewriterhelp": 130, "encapsul": [130, 184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 543], "compare_node_attr": 130, "node_a": 130, "node_b": 130, "compar": [130, 167, 263, 299, 326, 327, 522, 525, 529, 535, 541, 551, 554, 555, 557], "create_nod": [130, 159], "create_constant_nod": [130, 159], "datatyp": [130, 159, 552, 557], "set_attr_dtyp": [130, 159], "set_attr_tensor": [130, 159], "set_attr_type_list": [130, 159], "attr": [130, 159, 165], "set_attr_string_list": [130, 159], "set_attr_str": [130, 159], "set_attr_int_list": 130, "set_attr_int": [130, 159], "set_attr_float": [130, 159], "set_attr_bool": [130, 159], "fakequantizebas": 133, "get_config": [133, 142, 519], "serial": [133, 196, 234, 395, 402, 403, 433, 482, 484, 495, 496, 500, 501, 525], "fakequant": 133, "classmethod": [133, 142, 278, 279, 280, 481, 514, 516, 519], "from_config": [133, 142], "instanti": [133, 546], "per_channel": [133, 534, 557, 558], "num_bit": 133, "channel_axi": [133, 173, 175], "symmetr": [133, 521, 551, 556], "narrow_rang": 133, "quantizeconfig": [135, 136, 142], "There": [135, 263, 290, 299, 522, 528, 534, 538, 541, 542, 558], "add_quantize_recip": 135, "recip": [135, 251, 252, 254, 255, 289, 557], "layer_nam": [135, 284], "some": [135, 184, 196, 223, 234, 255, 285, 319, 322, 329, 493, 522, 531, 539, 541, 545, 548, 551, 552, 555, 557], "conv5_block3_3_conv": 135, "flase": 135, "conv5_block3_3_add": 135, "query_lay": 135, "layer_recip": 135, "remove_lay": 135, "layers_nam": 135, "get_quantize_recip": 135, "is_empti": 135, "clear_quantize_recip": 135, "init_quantize_config": 136, "model_nam": [136, 271, 373, 379, 493], "special": [136, 541, 545], "qat_clone_funct": 136, "leav": 136, "quantizewrapp": [136, 142], "wrapped_lay": 136, "quantizelayeradd": 139, "quantize_layer_bas": [139, 141], "quantizelayerbas": [139, 141], "quantizelayerbatchnorm": 141, "batchnorm": 141, "quantizewrapperbas": 142, "trainabl": 142, "sublay": 142, "trainable_weight": 142, "track": 142, "descent": 142, "non_trainable_weight": 142, "manual": [142, 198, 236, 526], "add_loss": 142, "regular": [142, 256, 285, 292, 548], "eager": [142, 287, 347, 452, 456, 461, 530, 538, 551, 552, 555, 559], "safe": [142, 339, 340, 524], "gradienttap": 142, "input_shap": [142, 200, 238, 426, 429, 438, 526], "tensorshap": 142, "compute_output_shap": 142, "caus": [142, 548], "state": [142, 167, 262, 263, 298, 299, 548], "happen": 142, "later": [142, 345, 535, 555], "output_shap": 142, "query_input_index": 142, "logic": [142, 184, 185, 319, 322, 329, 505, 557, 558], "live": 142, "output_obj": 142, "fusenodestartwithfusedbatchnormv3": [143, 153], "quantize_graph_bas": [143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158], "quantizenodebas": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "get_longest_fus": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "apply_the_transform": [143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158], "fusenodestartwithconcatv2": [144, 154], "fusenodestartwithconv2d": [145, 155], "fusenodestartwithdeconv2d": 146, "fusenodestartwithfusedinstancenorm": 147, "fusenodestartwithmatmul": [148, 157], "apply_matmul_biasadd_relu_fus": 148, "match_node_nam": [148, 155], "apply_matmul_biasadd_fus": 148, "apply_batchmatmulv2_fus": 148, "batchmatmul": 148, "batchmatmulv2": 148, "apply_batchmatmulv2_mul_add_fus": 148, "fusenodestartwithpool": [149, 158], "optimizeqdqgraph": 151, "op_wise_sequ": [151, 156], "quantizegraphbas": [151, 152, 156], "remove_dead_nod": 152, "output_nam": [152, 251, 252], "longer": [152, 196, 213, 234, 249, 526, 556], "add_output_graph_nod": 152, "output_nod": [152, 373], "create_nodes_map": 152, "apply_conv_biasadd_relu_fus": 155, "quantizegraphforintel": 156, "quantizegraphhelp": 159, "staticmethod": 159, "get_sorted_graph": 159, "reorder": 159, "easier": [159, 522, 549], "split_shared_input": 159, "in_graph": [159, 165], "ouput": 159, "remove_training_nod": 159, "aren": 159, "uncondition": 159, "copy_attr": 159, "attr_valu": 159, "copi": [159, 285], "unique_node_name_from_input": 159, "ensure_tensor_name_has_port": 159, "biascorrect": 160, "fp32_graph": 160, "weight_empir": 160, "graph_transform_bas": [160, 163, 164], "graphtransformbas": [160, 163, 164], "Will": [160, 187, 190, 207, 506, 528, 538], "task": [160, 196, 203, 234, 241, 263, 299, 526, 528, 538, 541], "w_int8": [160, 175], "w_fp32": [160, 175], "ratio": [160, 175, 209, 213, 246, 249, 284, 286, 287, 288, 526, 548, 556, 559], "equal": [160, 175, 541], "scale_c": [160, 175], "shift": [160, 175, 209, 246, 556], "notic": [160, 175, 214, 255, 540], "empir": [160, 175], "insertlog": 163, "input_pb": [163, 164], "node_name_list": 163, "show_nam": 163, "show_op": 163, "first_n": 163, "summar": [163, 528], "1024": [163, 198, 236], "messag": [163, 493, 505, 510, 557], "dump_fp32": 163, "rerangequantizedconcat": 164, "rerange_quant": 164, "concat": [164, 479], "disable_random": 165, "read_graph": 165, "in_graph_is_binari": 165, "read": [165, 198, 201, 213, 236, 239, 249, 285, 287, 412, 416, 417, 526, 552, 554], "write_graph": 165, "out_graph_def": 165, "out_graph_fil": 165, "write": [165, 205, 206, 207, 243, 244, 245, 259, 295, 345, 530, 536, 554, 555], "is_ckpt_format": 165, "model_path": [165, 412, 427, 432, 493], "is_saved_model_format": 165, "saved_model": [165, 255, 265, 418, 425, 435, 544], "get_tensor_by_nam": 165, "try_cnt": 165, "scope": [165, 223, 255], "tensor_nam": [165, 309], "suffix": 165, "iterator_sess_run": 165, "sess": [165, 308], "iter_op": 165, "feed_dict": [165, 195, 233], "output_tensor": [165, 308], "makeiter": 165, "strip_unused_nod": 165, "strip_unused_lib": 165, "r1": 165, "15": [165, 270, 534, 535, 559], "branch": 165, "strip_equivalent_nod": 165, "get_tensor_val_from_graph_nod": 165, "tensor_v": 165, "hessiantrac": 167, "yao": 167, "zhewei": 167, "et": 167, "al": 167, "pyhessian": 167, "2020": [167, 540], "ieee": [167, 542], "confer": 167, "big": 167, "dong": 167, "zhen": 167, "hawq": [167, 324], "system": [167, 214, 345, 482, 508, 509, 548], "33": [167, 268, 559], "18518": 167, "18529": 167, "openvinotoolkit": 167, "nncf": 167, "mse_metric_gap": [167, 326, 397], "fp32_tensor": [167, 326, 397], "dequantize_tensor": [167, 326, 397], "euclidean": [167, 326, 397, 528], "distanc": [167, 326, 327, 397, 528], "get_act_gap": 167, "gap": [167, 543], "get_avg_trac": 167, "num_sampl": [167, 263, 299], "compare_weight": 167, "float_dict": 167, "quantized_dict": 167, "being": [167, 259, 271, 290, 295, 339, 340, 414], "usag": [167, 195, 233, 255, 259, 265, 290, 295, 493, 522, 526, 530, 532, 535, 541, 544, 545, 550, 556], "wt_compare_dict": 167, "float_model": 167, "qmodel": 167, "compute_error": 167, "weight_dict": 167, "get_embedding_contigu": 171, "embed": 171, "contigu": [171, 548], "append_attr": 171, "fx_model": 171, "get_mse_order_per_fp32": 171, "example_inp": 171, "influenc": 171, "fallback_ord": 171, "algorithm_registri": [172, 174], "algorithm_typ": [172, 174], "registr": [172, 174, 198, 202, 205, 206, 207, 210, 213, 220, 236, 240, 243, 244, 245, 247, 249, 280], "algorithmschedul": [172, 174], "fastbiascorrect": 173, "weightcorrect": 175, "ep": 175, "1e": [175, 558], "05": [175, 259, 263, 295, 299, 487, 535, 541, 559], "benchmark_conf": [176, 177, 291], "prefer": [176, 254, 255, 289, 291, 318], "b_dataload": [176, 214, 255, 523, 544], "b_func": [176, 214, 255], "benchmarkconfig": 176, "cfg_fname": 177, "parser": [177, 291, 357, 475, 479, 483, 512], "quantization_conf": 177, "dotdict": 177, "pruning_conf": [177, 291, 317], "graph_optimization_conf": [177, 254, 255, 535], "mixedprecision_conf": 177, "distillation_conf": [177, 250, 255], "defaultconf": 177, "notat": [177, 178], "deep_get": 178, "dot": [178, 493, 542, 551], "nest": 178, "eg": [178, 198, 202, 207, 236, 240, 245, 526, 550], "john": 178, "deep_set": 178, "male": 178, "distillationconfig": [181, 291], "teacher_model": [181, 215, 250, 255, 291, 528], "learning_r": [181, 291, 550, 558], "altern": [181, 291], "sigopttunestrategi": 184, "q_dataload": [184, 185, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 536, 557], "eval_func": [184, 185, 223, 254, 255, 265, 290, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 523, 525, 526, 530, 542, 551, 557, 558], "q_hook": [184, 185, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "tunestrategi": [184, 185, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 557], "hpo": 184, "mandatori": [184, 185, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 531, 558], "reserv": [184, 185, 223, 255, 290, 320, 321, 322, 323, 324, 326, 327, 328, 329], "tuner": [184, 185, 254, 255, 289, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "scalar": [184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 339, 340, 541, 542, 551], "pseudo": [184, 185, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 555], "next_tune_cfg": [184, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 557], "travers": [184, 185, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 557], "concret": [184, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329], "overrid": [184, 223, 255, 289, 319, 322, 329, 345, 484], "constraint": [184, 254, 255, 289, 525, 554, 557, 558], "tpetunestrategi": 185, "stop": [185, 322, 329, 463, 487, 531, 557, 558], "trials_count": [185, 322, 329], "reach": [185, 284, 288, 322, 329, 524, 548, 557], "basedatalod": [186, 224], "basedataload": [186, 188, 191, 192, 193, 195, 224, 226, 229, 230, 231, 233], "last_batch": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "rollov": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "collate_fn": [186, 188, 189, 191, 192, 193, 195, 216, 217, 224, 226, 227, 229, 230, 231, 233, 526], "sampler": [186, 188, 190, 191, 192, 193, 195, 216, 217, 224, 226, 228, 229, 230, 231, 233, 245, 255, 530], "batch_sampl": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "num_work": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233, 551], "pin_memori": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233], "shuffl": [186, 188, 191, 192, 193, 195, 216, 217, 224, 226, 229, 230, 231, 233, 525, 551], "_generate_dataload": [186, 224], "drop": [186, 224, 259, 285, 295, 542, 548, 559], "incomplet": [186, 224], "discard": [186, 224], "entranc": [187, 190, 207], "dispatch": [187, 190, 207, 538], "default_col": [188, 226], "merg": [188, 226, 555, 557], "outer": [188, 226], "defaultdataload": [188, 192, 195, 226, 230, 233], "base_dataload": [188, 190, 191, 192, 193, 195, 226, 228, 229, 230, 231, 233, 245, 255], "drop_last": [189, 194, 227, 232], "iterablefetch": [189, 227], "indexfetch": [189, 227], "singl": [189, 196, 212, 213, 227, 234, 248, 249, 259, 268, 270, 286, 288, 295, 321, 379, 395, 414, 479, 512, 526, 548], "indic": [189, 194, 196, 227, 232, 234, 250, 255, 259, 275, 276, 295, 522, 523, 533, 555], "default_dataload": [190, 192, 195, 228, 230, 233, 245, 255], "fetcher": [190, 228, 245, 255], "mxnet_dataload": [190, 228, 245, 255], "onnxrt_dataload": [190, 228, 245, 255], "pytorch_dataload": [190, 228, 245, 255], "tensorflow_dataload": [190, 228, 245, 255, 472], "mxnetdataload": [191, 229], "onnxrtbertdataload": [192, 230], "bert": [192, 195, 196, 213, 230, 233, 234, 249, 526, 528, 531, 541, 548, 556, 559], "varient": [192, 230], "onnxrtdataload": [192, 230], "pytorchdataload": [193, 231], "data_sourc": [194, 232], "__iter__": [194, 198, 202, 207, 232, 236, 240, 245, 523, 525], "matter": [194, 232, 552], "iterablesampl": [194, 232], "squential": [194, 232], "iterabledataset": [194, 197, 198, 200, 201, 202, 207, 232, 235, 236, 238, 239, 240, 245], "indexdataset": [194, 232], "__getitem__": [194, 198, 202, 207, 210, 213, 232, 236, 240, 245, 247, 249, 523, 525, 526], "__len__": [194, 198, 202, 207, 232, 236, 240, 245, 525, 526], "inter": [194, 198, 202, 207, 232, 236, 240, 245], "retriev": [194, 232, 488], "sequentialsampl": [194, 232], "batchsampl": [194, 232], "tfdatadataload": [195, 233], "tensorflow1": [195, 233], "coupl": [195, 233], "satisfi": [195, 233, 539], "tf1": [195, 233, 543], "although": [195, 233, 554], "tensorflowbertdataload": [195, 233], "tensorflowmodelzoobertdataload": [195, 233], "zoo": [195, 213, 233, 249, 559], "tensorflowdataload": [195, 233, 472], "directli": [195, 233, 259, 263, 285, 295, 299, 541, 550, 551, 555], "pytorchbertdataset": [196, 234], "model_typ": [196, 234, 397, 427, 526], "tensordataset": [196, 234, 526], "link": [196, 234, 522, 526, 559], "huggingfac": [196, 234, 526], "easi": [196, 234, 255, 289, 522, 525, 549, 551, 554], "squad": [196, 213, 234, 249, 260, 261, 263, 296, 297, 299, 526, 541, 556, 559], "xlnet": [196, 234, 526], "xlm": [196, 234, 526, 559], "101": [196, 234, 263, 299, 541, 559], "2043": [196, 234], "2001": [196, 234], "onnxrtbertdataset": [196, 234], "data_dir": [196, 234, 526], "model_name_or_path": [196, 234, 526], "max_seq_length": [196, 213, 234, 249, 526, 556], "128": [196, 199, 200, 213, 234, 237, 238, 249, 526, 551, 556, 559], "do_lower_cas": [196, 212, 213, 234, 248, 249, 526, 556], "mrpc": [196, 234, 263, 299, 526, 541, 559], "dynamic_length": [196, 234, 526], "shortcut": [196, 234, 526], "truncat": [196, 213, 234, 249, 526, 556], "shorter": [196, 213, 234, 249, 526, 556], "lowercas": [196, 234, 526], "qqp": [196, 234, 526, 541, 559], "qnli": [196, 234, 526, 541, 559], "rte": [196, 234, 526, 541, 559], "st": [196, 234, 526, 541], "cola": [196, 234, 526, 541, 559], "mnli": [196, 234, 526, 541, 559], "wnli": [196, 234, 526, 541, 559], "mobilebert": [196, 234, 526, 528, 559], "roberta": [196, 234, 526, 559], "fix": [196, 234, 286, 524, 526, 557], "uncas": [196, 213, 234, 249, 526, 556, 559], "load_and_cache_exampl": [196, 234], "convert_examples_to_featur": [196, 213, 234, 249], "max_length": [196, 234], "label_list": [196, 234, 263, 299], "output_mod": [196, 234], "pad_token": [196, 234], "pad_token_segment_id": [196, 234], "mask_padding_with_zero": [196, 234], "inputfeatur": [196, 213, 234, 249], "input_id": [196, 213, 234, 249, 528, 548], "vocabulari": [196, 212, 213, 234, 248, 249, 556], "attention_mask": [196, 234, 548], "mask": [196, 234, 259, 281, 284, 286, 288, 295, 309, 548, 559], "NOT": [196, 234, 534], "token_type_id": [196, 234, 548], "segment": [196, 234, 257, 259, 293, 295], "portion": [196, 234], "problem": [196, 234, 263, 270, 299, 541, 542, 557], "regress": [196, 234, 524], "seq_length": [196, 234], "to_json_str": [196, 234], "json": [196, 197, 213, 234, 235, 249, 355, 467, 469, 477, 484, 493, 526, 543, 556], "tensorflowbertdataset": [196, 234], "root": [196, 197, 198, 201, 234, 235, 236, 239, 263, 269, 299, 301, 302, 303, 305, 307, 308, 309, 335, 510, 523, 525, 526, 530, 541, 557, 558], "label_fil": [196, 213, 234, 249, 526, 556], "tfrecord": [196, 197, 198, 202, 207, 234, 235, 236, 240, 245, 526], "parsedecodebert": [196, 234], "tensorflowmodelzoobertdataset": [196, 197, 234, 235], "num_cor": [196, 197, 201, 234, 235, 239, 526], "28": [196, 197, 201, 234, 235, 239, 526, 535, 559], "resiz": [196, 197, 209, 213, 234, 235, 246, 249, 523, 525, 526, 556, 557], "coco": [197, 204, 208, 235, 242, 259, 263, 295, 299, 541], "parsedecodecoco": [197, 235], "cocorecorddataset": [197, 235], "directori": [197, 198, 235, 236, 308, 344, 345, 406, 459, 477, 493, 506, 526, 530, 533, 555], "interleav": [197, 235, 526], "parallel": [197, 235, 526, 548], "cocoraw": [197, 235, 526], "img_dir": [197, 235, 526], "val2017": [197, 235, 526], "anno_dir": [197, 235, 526], "annot": [197, 235, 259, 295, 526, 541], "instances_val2017": [197, 235, 526], "arrang": [197, 198, 201, 235, 236, 239, 526, 548], "jpg": [197, 201, 203, 235, 239, 241, 526], "coconpi": [197, 235, 526], "npy_dir": [197, 235, 526], "npy": [197, 235, 526], "tensorflowdataset": [198, 236], "pytorchdataset": [198, 236], "mxnetdataset": [198, 236], "onnxrtqldataset": [198, 236], "onnxrtitdataset": [198, 236], "IT": [198, 205, 236, 243], "pytorchmxnetwrapdataset": [198, 236], "datafunc": [198, 236], "pytorchmxnetwrapfunct": [198, 213, 236, 249], "framework_dataset": [198, 236], "convent": [198, 236, 259, 295, 528], "imageclassifi": [198, 236], "choos": [198, 236, 522, 538, 553, 557, 558], "tensorflow_itex": [198, 201, 202, 203, 205, 206, 207, 236, 239, 240, 241, 243, 244, 245, 550], "onnxrt_qdq": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 550], "onnxrt_qlinearop": [198, 202, 205, 206, 207, 213, 236, 240, 243, 244, 245, 249, 550], "onnxrt_integerop": [198, 202, 205, 206, 207, 213, 236, 240, 243, 244, 245, 249, 531, 550], "pytorch_ipex": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 550, 558], "onnxrt_qoper": [198, 202, 205, 206, 207, 236, 240, 243, 244, 245, 550], "dataset_registri": [198, 202, 207, 236, 240, 245], "dataset_typ": [198, 202, 207, 236, 240, 245, 254, 255, 265, 289, 366], "dataset_format": [198, 202, 207, 236, 240, 245], "data_format": [198, 202, 207, 209, 236, 240, 245, 246], "raw_imag": [198, 202, 207, 236, 240, 245], "overwrit": [198, 202, 207, 236, 240, 245], "download_url": [198, 236], "filenam": [198, 236, 269, 345, 346, 443, 459, 463, 469, 479, 487, 526], "md5": [198, 236], "download": [198, 236, 418, 441, 442, 444, 445, 475, 522, 526, 535, 539, 553], "gen_bar_updat": [198, 236], "progress": [198, 236, 288], "bar": [198, 236, 522], "check_integr": [198, 236], "fpath": [198, 236], "checksum": [198, 236], "calculate_md5": [198, 236], "chunk_siz": [198, 236], "cifar10": [198, 236, 526], "cifar100": [198, 236, 526], "toronto": [198, 236, 526], "edu": [198, 236, 526], "kriz": [198, 236, 526], "cifar": [198, 236, 526, 559], "tar": [198, 236, 526], "gz": [198, 236, 526], "subset": [198, 201, 236, 239, 526], "internet": [198, 236, 522, 526], "put": [198, 236, 526, 528, 548], "again": [198, 236, 526, 535, 552, 557], "load_meta": [198, 236], "meta": [198, 236], "pytorchcifar10": [198, 236], "mxnetcifar10": [198, 236], "tensorflowcifar10": [198, 236], "pytorchcifar100": [198, 236], "mxnetcifar100": [198, 236], "tensorflowcifar100": [198, 236], "mnist": [198, 236, 526, 530], "institut": [198, 236], "standard": [198, 213, 236, 249, 541, 556, 557], "fashionmnist": [198, 236, 526], "npz": [198, 236, 526], "idx1": [198, 236, 526], "ubyt": [198, 236, 526], "idx3": [198, 236, 526], "t10k": [198, 236, 526], "class_to_idx": [198, 236], "read_data": [198, 236], "pytorchmnist": [198, 236], "mxnetmnist": [198, 236], "tensorflowmnist": [198, 236], "pytorchfashionmnist": [198, 236], "mxnetfashionmnist": [198, 236], "tensorflowfashionmnist": [198, 236], "imagefold": [198, 236, 523, 525, 526, 530], "subfold": [198, 236], "belong": [198, 236, 252, 304, 551], "class_1": [198, 236, 526], "xxx": [198, 236, 526, 528], "png": [198, 236, 526], "xxy": [198, 236, 526], "xxz": [198, 236, 526], "class_n": [198, 236, 526], "123": [198, 236, 526, 556], "nsdf3": [198, 236, 526], "asd932_": [198, 236, 526], "mxnetimagefold": [198, 236], "tensorflowimagefold": [198, 236], "tensorflowtfrecorddataset": [198, 236], "tensorflowimagerecord": [198, 236], "000": [198, 236, 526], "001": [198, 236, 526, 530, 558], "099": [198, 236, 526], "tensorflowvocrecord": [198, 236], "pascal": [198, 236], "voc": [198, 236, 263, 299], "2012": [198, 236], "00000": [198, 236], "00004": [198, 236], "00001": [198, 236], "00003": [198, 236], "dummydataset": [199, 200, 237, 238], "127": [199, 200, 237, 238, 526, 551, 559], "stand_norm": [199, 200, 237, 238, 526], "dummy_v2": [200, 238, 526], "sparse_dummy_v2": [200, 238, 526], "label_shap": [200, 238, 526], "sparsedummydataset": [200, 238], "dense_shap": [200, 238, 526], "sparse_ratio": [200, 238, 526], "imagenetraw": [201, 239, 526], "data_path": [201, 239, 526], "image_list": [201, 239, 526], "img1": [201, 239, 526], "img2": [201, 239, 526], "imgx": [201, 239, 526], "val_map": [201, 239, 526], "pytorchimagenetraw": [201, 239], "mxnetimagenetraw": [201, 239], "tensorflowimagenetraw": [201, 239], "inteltensorflow": [201, 203, 239, 241], "tensorflowimagenetdataset": [201, 239], "onnxrtimagenetdataset": [201, 239], "bert_dataset": [202, 207, 240, 245, 255, 291], "coco_dataset": [202, 207, 240, 245, 255, 291], "dummy_dataset": [202, 207, 240, 245, 255, 291], "dummy_dataset_v2": [202, 207, 240, 245, 255, 291], "imagenet_dataset": [202, 207, 240, 245, 255, 291], "style_transfer_dataset": [202, 207, 240, 245, 255, 291], "transfer": [203, 241, 250, 255, 526, 528, 529], "styletransferdataset": [203, 241], "content_fold": [203, 241, 526], "style_fold": [203, 241, 526], "crop_ratio": [203, 241, 526], "resize_shap": [203, 241, 526], "image_format": [203, 241, 526], "holder": [203, 241, 526], "labelbalancecocorecordfilt": [204, 242], "balanc": [204, 242, 547], "labelbalancecocorawfilt": [204, 242], "tensorflowfilt": [205, 243], "onnxrtqlfilt": [205, 243], "onnxrtitfilt": [205, 243], "pytorchfilt": [205, 243], "mxnetfilt": [205, 243], "filter_registri": [205, 206, 207, 243, 244, 245], "filter_typ": [205, 206, 207, 243, 244, 245], "__call__": [205, 206, 207, 243, 244, 245, 525], "coco_filt": [206, 207, 244, 245, 255, 291], "imagenet_transform": [207, 210, 245, 247, 255, 291], "transform_cl": [207, 210, 213, 245, 247, 249], "basetransform": [207, 208, 209, 210, 213, 245, 246, 247, 249], "transform_registri": [207, 210, 213, 245, 247, 249], "transform_typ": [207, 210, 213, 245, 247, 249], "postprocess_cl": [207, 210, 211, 217, 221, 523], "user_postprocess": [207, 210, 211, 217, 221], "parsedecodecocotransform": 208, "quantizedinput": [209, 246, 556], "desir": [209, 213, 246, 249, 556], "labelshift": [209, 246, 556], "label_shift": [209, 246, 556], "parsedecodeimagenet": [209, 246, 556], "proto": [209, 213, 246, 249, 556], "parsedecodeimagenettransform": [209, 246], "tensorflowresizecropimagenettransform": [209, 246], "height": [209, 213, 246, 249, 271, 284, 530, 548, 556, 558], "random_crop": [209, 246, 556], "resize_sid": [209, 246, 556], "resize_method": [209, 246], "bilinear": [209, 213, 246, 249, 556], "random_flip_left_right": [209, 246, 556], "mean_valu": [209, 246, 556], "channels_last": [209, 246], "subpixel": [209, 246], "rgb": [209, 246], "applic": [209, 246, 478, 506, 508, 510, 522, 549, 555, 556], "crop": [209, 213, 246, 249, 526, 556], "flip": [209, 213, 246, 249, 556], "left": [209, 213, 246, 249, 522, 556], "std": [209, 213, 246, 249, 271, 523, 525, 556], "bilinearimagenettransform": [209, 246], "central_fract": [209, 246, 556], "875": [209, 246, 556], "fraction": [209, 246, 556], "onnxbilinearimagenettransform": [209, 246], "onnxresizecropimagenettransform": [209, 246], "std_valu": [209, 246], "229": [209, 246, 523, 525], "225": [209, 246, 523, 525], "resizewithaspectratio": [209, 246], "87": [209, 246, 559], "inter_pol": [209, 246], "cv2": [209, 246], "inter_area": [209, 246], "aspect": [209, 213, 246, 249, 556], "convert_to_unicod": [212, 248], "unicod": [212, 248, 256, 292], "utf": [212, 248], "load_vocab": [212, 248], "vocab_fil": [212, 213, 248, 249, 556], "convert_by_vocab": [212, 248], "vocab": [212, 248], "whitespace_token": [212, 248], "whitespac": [212, 248, 261, 297], "clean": [212, 215, 248, 363, 374, 377, 383, 384, 389, 391, 392, 393, 477, 492, 524], "fulltoken": [212, 248], "tokenzi": [212, 248], "convert_tokens_to_id": [212, 248], "convert_ids_to_token": [212, 248], "basictoken": [212, 248], "punctuat": [212, 248, 256, 261, 292, 297], "wordpiecetoken": [212, 248], "unk_token": [212, 248], "unk": [212, 248], "max_input_chars_per_word": [212, 248], "wordpiec": [212, 213, 248, 249, 556], "greedi": [212, 248], "longest": [212, 213, 248, 249, 556], "unaff": [212, 248], "un": [212, 248], "aff": [212, 248], "concat_gener": [213, 249], "tensorflowtransform": [213, 249], "mxnettransform": [213, 249], "pytorchtransform": [213, 249], "onnxrtqltransform": [213, 249], "onnxrtittransform": [213, 249], "tensorflowwrapfunct": [213, 249], "transform_func": [213, 249], "pytorchmxnettransform": [213, 249], "get_torchvision_map": [213, 249], "interpol": [213, 249, 541, 556], "torchvis": [213, 249, 271], "composetransform": [213, 249], "transform_list": [213, 249, 556], "croptoboundingbox": [213, 249, 556], "offset_height": [213, 249, 556], "offset_width": [213, 249, 556], "target_height": [213, 249, 556], "target_width": [213, 249, 556], "vertic": [213, 249, 284, 556], "coordin": [213, 249, 321, 556], "horizont": [213, 249, 556], "mxnetcroptoboundingbox": [213, 249], "onnxrtcroptoboundingbox": [213, 249], "tensorflowcroptoboundingbox": [213, 249], "resizewithratio": [213, 249, 556], "min_dim": [213, 249, 556], "800": [213, 249, 556], "max_dim": [213, 249, 556], "1365": [213, 249, 556], "constant_valu": [213, 249], "side": [213, 249, 522, 526, 556], "exce": [213, 249, 556], "tensorflowresizewithratio": [213, 249], "transpos": [213, 249, 284, 556], "perm": [213, 249, 556], "permut": [213, 249, 556], "tensorflowtranspos": [213, 249], "mxnettranspos": [213, 249], "pytorchtranspos": [213, 249], "randomverticalflip": [213, 249, 556], "tensorflowrandomverticalflip": [213, 249], "randomhorizontalflip": [213, 249, 525, 556], "tensorflowrandomhorizontalflip": [213, 249], "toarrai": [213, 249, 556], "pil": [213, 249, 556], "casttftransform": [213, 249], "castonnxtransform": [213, 249], "castpytorchtransform": [213, 249], "centercroptftransform": [213, 249], "paddedcentercroptransform": [213, 249], "crop_pad": [213, 249], "resizetftransform": [213, 249], "nearest": [213, 249, 556], "bicub": [213, 249, 556], "resizepytorchtransform": [213, 249], "randomcroptftransform": [213, 249], "locat": [213, 249, 523, 530, 551, 553, 556, 557, 558], "randomresizedcroppytorchtransform": [213, 249], "randomresizedcropmxnettransform": [213, 249], "randomresizedcroptftransform": [213, 249], "get_param": [213, 249], "pramet": [213, 249], "normalizetftransform": [213, 249], "rescal": [213, 249, 556], "deviat": [213, 249, 556], "broadcast": [213, 249, 530, 556], "rescalekeraspretraintransform": [213, 249], "rescaletftransform": [213, 249], "rescaletransform": [213, 249], "alignimagechanneltransform": [213, 249], "dim": [213, 249, 280, 321, 556], "w": [213, 249, 271, 548, 556], "pytorchalignimagechannel": [213, 249], "tondarraytransform": [213, 249], "resizemxnettransform": [213, 249], "resizetransform": [213, 249], "cropresizetftransform": [213, 249], "y": [213, 249, 321, 556], "boundari": [213, 249, 395, 556], "area": [213, 249, 259, 295, 541, 556], "pytorchcropresizetransform": [213, 249], "mxnetcropresizetransform": [213, 249], "cropresizetransform": [213, 249], "centercroptransform": [213, 249], "mxnetnormalizetransform": [213, 249], "pytorchnormalizetransform": [213, 249], "normalizetransform": [213, 249], "randomcroptransform": [213, 249], "randomresizedcroptransform": [213, 249], "get_final_text": [213, 249], "pred_text": [213, 249], "orig_text": [213, 249], "squadexampl": [213, 249], "qas_id": [213, 249], "question_text": [213, 249], "doc_token": [213, 249], "orig_answer_text": [213, 249], "start_posit": [213, 249], "end_posit": [213, 249], "is_imposs": [213, 249], "unique_id": [213, 249], "example_index": [213, 249], "doc_span_index": [213, 249], "token_to_orig_map": [213, 249], "token_is_max_context": [213, 249], "input_mask": [213, 249, 528], "segment_id": [213, 249, 528], "read_squad_exampl": [213, 249], "input_fil": [213, 249], "doc_strid": [213, 249, 556], "max_query_length": [213, 249, 556], "output_fn": [213, 249], "inputbatch": [213, 249], "collecttransform": [213, 249], "10833": [213, 249], "tfsquadv1posttransform": [213, 249], "n_best_siz": [213, 249, 556], "384": [213, 249, 556], "max_answer_length": [213, 249, 556], "total": [213, 249, 263, 286, 288, 299, 308, 309, 310, 526, 556], "nbest_predict": [213, 249, 556], "long": [213, 249, 533, 556, 557], "document": [213, 249, 521, 530, 531, 542, 553, 556], "chunk": [213, 249, 556], "much": [213, 249, 250, 255, 528, 531, 535, 548, 556], "process_result": [213, 249], "get_postprocess_result": [213, 249], "tfmodelzoocollecttransform": [213, 249], "tfsquadv1modelzooposttransform": [213, 249], "squadv1": [213, 249, 556], "parsedecodevoctransform": [213, 249], "set_env_var": 214, "env_var": 214, "overwrite_exist": 214, "env": [214, 479, 487], "set_all_env_var": 214, "core": [214, 255, 270, 363, 522, 540, 547, 559], "get_architectur": 214, "get_threads_per_cor": 214, "thread": [214, 509, 522, 525, 547], "get_thread": 214, "get_physical_id": 214, "socket": [214, 482, 510, 547, 559], "get_core_id": 214, "get_bounded_thread": 214, "core_id": 214, "bind": 214, "command": [214, 255, 363, 374, 377, 383, 389, 391, 392, 459, 479, 487, 506, 522, 530, 535], "possibl": [214, 255, 268, 361, 426, 522, 531, 535, 546, 552, 557], "unnecessari": [214, 255], "Not": [214, 223, 255, 277, 478], "summary_benchmark": [214, 255], "config_inst": [214, 255], "trigger": [214, 255, 286, 535], "generate_prefix": [214, 255], "core_list": [214, 255], "numactl": [214, 255], "run_inst": [214, 255], "critet": 215, "tensorflowcrossentropyloss": 215, "pytorchcrossentropyloss": 215, "tensorflowknowledgedistillationloss": 215, "pytorchknowledgedistillationloss": [215, 528], "pytorchintermediatelayersknowledgedistillationloss": 215, "tensorflowcriterion": 215, "pytorchcriterion": 215, "criterion_cl": 215, "criterion_registri": 215, "criterion_typ": 215, "registry_criterion": 215, "param_dict": [215, 220, 268], "crossentropyloss": 215, "tensorflowsparsecategoricalcrossentropi": 215, "sparsecategoricalcrossentropyloss": 215, "knowledgedistillationframework": 215, "student_model": [215, 250, 255, 528], "knowledgedistillationloss": [215, 558], "temperatur": [215, 558], "loss_typ": [215, 558], "ce": [215, 558], "loss_weight": [215, 558], "teacher_model_forward": 215, "notimplementederror": [215, 262, 263, 298, 299], "teacher_student_loss_c": 215, "student_output": [215, 223, 255, 528], "teacher_output": [215, 223, 250, 255], "student_targets_loss_c": 215, "groud": 215, "truth": [215, 260, 261, 296, 297], "loss_cal": 215, "loss_cal_sloss": 215, "student_loss": [215, 223, 255, 528], "softcrossentropi": 215, "logit": [215, 528], "ground": [215, 260, 261, 296, 297], "kullbackleiblerdiverg": 215, "pytorchknowledgedistillationlosswrapp": 215, "tensorflowknowledgedistillationlosswrapp": 215, "tensorflowknowledgedistillationlossextern": 215, "intermediatelayersknowledgedistillationloss": 215, "layer_map": 215, "add_origin_loss": 215, "init_loss_func": 215, "init_feature_match": 215, "student_featur": 215, "teacher_featur": 215, "matcher": 215, "clear_featur": 215, "register_hooks_for_model": 215, "attributeerror": 215, "remove_all_hook": 215, "pytorch_linear_feature_match": 215, "pytorchintermediatelayersknowledgedistillationlosswrapp": 215, "selfknowledgedistillationloss": 215, "selfknowledg": 215, "pytorchselfknowledgedistillationloss": 215, "l2diverg": 215, "feature1": 215, "feature2": 215, "pytorchselfknowledgedistillationlosswrapp": 215, "torch_util": [217, 255, 291], "metric_cl": [217, 218, 262, 263, 298, 299, 523], "user_metr": [217, 218, 298, 299], "alwai": [217, 218, 259, 295, 298, 299, 523, 541, 548], "tensorflowoptim": 220, "pytorchoptim": 220, "optimizer_cl": 220, "optimizer_registri": 220, "optimizer_typ": 220, "cross": [220, 262, 263, 298, 299, 536, 557], "tensorflowsgd": 220, "tensorflowadamw": 220, "tensorflow_addon": 220, "adamw": 220, "tensorflowadam": 220, "adam": [220, 558], "pytorchsgd": 220, "util": [222, 251, 255, 257, 285, 291, 293, 350, 351, 352, 354, 356, 359, 363, 374, 377, 383, 384, 389, 391, 392, 394, 402, 403, 408, 410, 411, 414, 418, 424, 425, 433, 435, 459, 462, 466, 471, 475, 507, 530, 548, 551], "record_output": 222, "output_process": 222, "get_activ": 222, "mainli": [223, 255, 288, 551], "train_func": [223, 255, 290, 528, 530, 548], "train_dataload": [223, 255, 528, 548], "pre_process": [223, 250, 255, 266, 273, 277, 289, 530], "post_process": [223, 255], "on_train_begin": [223, 255, 277, 286, 287, 335, 528], "Be": [223, 255, 259, 295], "on_train_end": [223, 255, 277, 286, 287, 335], "pre_epoch_begin": [223, 255, 277], "post_epoch_end": [223, 255, 277], "on_epoch_begin": [223, 255, 277, 286, 287, 291, 317, 335, 338, 548], "on_step_begin": [223, 255, 277, 286, 287, 291, 317, 338, 548], "batch_id": [223, 255, 291, 317], "on_batch_begin": [223, 255, 277], "on_after_compute_loss": [223, 255, 277, 335, 528], "on_before_optimizer_step": [223, 255, 286, 287, 335, 548], "on_post_grad": [223, 255], "on_step_end": [223, 255, 277, 286, 287, 291, 317, 335, 338, 548], "on_batch_end": [223, 255, 277], "on_epoch_end": [223, 255, 277, 286, 287, 291, 317, 335, 338, 528, 548], "register_hook": [223, 255], "input_arg": [223, 255], "input_kwarg": [223, 255], "_epoch_ran": [250, 255], "ran": [250, 255], "eval_frequ": [250, 255], "frequenc": [250, 255, 286, 547, 558], "term": [250, 255, 528, 540, 541, 545, 546, 557], "best_scor": [250, 255], "best_model": [250, 255], "train_cfg": [250, 255, 338], "evaluation_distribut": [250, 255, 277], "train_distribut": [250, 255, 277], "on_post_forward": [250, 255], "init_train_cfg": [250, 255], "create_criterion": [250, 255], "create_optim": [250, 255], "disil": [250, 255], "generate_hook": [250, 255, 277], "torch2onnx": [251, 255, 291], "torch_to_fp32_onnx": [251, 252], "opset_vers": [251, 252], "dynamic_ax": [251, 252], "input_nam": [251, 252, 309], "do_constant_fold": [251, 252], "verbos": [251, 252, 268, 269, 270], "opset": [251, 252], "ax": [251, 252], "torch_to_int8_onnx": [251, 252], "quant_format": [251, 252], "u8s8": [251, 252], "qdq_op_fp32_bia": [251, 252], "optionl": [251, 252], "qdq_op_int32_bia": [251, 252], "qdq_op_fp32_bias_qdq": [251, 252], "update_weight_bia": 252, "fp32_onnx_path": [252, 253], "wegiht": 252, "set_data_typ": 252, "weight_typ": 252, "activation_typ": 252, "get_node_map": 252, "module_node_map": 252, "get_quantizable_onnx_op": 252, "quantize_nod": 252, "build_scale_map": 252, "int8_scale_info": 252, "scale_zp_dict": 252, "set_scale_info": 252, "int8_onnx_model": 252, "int8_onnx_path": 252, "recalculate_bia": 252, "recalcul": 252, "remove_nodes_by_nam": 252, "sub_graph_with_int32_bia": 252, "a_info": 252, "b_info": 252, "bias_nam": 252, "nodeproto": 252, "_type_": 252, "qdq_fp32_bia": 252, "excut": 252, "qdq_int32_bia": 252, "qdq_fp32_bias_qdq": 252, "onnx2numpy_dtyp": 253, "onnx_node_typ": 253, "dummydataread": 253, "ortq": 253, "dataread": 253, "get_next": 253, "variou": [254, 255, 264, 289, 538, 550], "bring": [254, 255, 289, 524, 551], "vari": [254, 255, 277, 289, 291, 317, 547, 559], "roc": [254, 255, 263, 277, 289, 291, 299, 317], "footprint": [254, 255, 277, 289, 291, 310, 317, 529, 545, 548, 550, 557], "flexibl": [254, 255, 277, 289, 291, 317, 523, 528, 548], "set_config_by_model": [254, 255, 264], "model_obj": [254, 255, 264], "export": [255, 259, 291, 295, 301, 302, 303, 309, 335, 493, 555], "bleu": [255, 257, 262, 291, 293, 298, 541], "bleu_util": [255, 262, 291, 298], "coco_label_map": [255, 262, 291, 298], "coco_tool": [255, 262, 291, 298], "evaluate_squad": [255, 262, 291, 298], "dynast": [255, 273, 291], "dynas_manag": [255, 271, 272, 273], "dynas_predictor": [255, 271, 272, 273], "dynas_search": [255, 272, 273], "dynas_util": [255, 270, 272, 273], "nas_util": [255, 273, 291], "pruning_recip": [255, 291], "tile_pattern": [255, 278, 279], "pytorch_prun": [255, 291], "logger": [255, 282, 291, 336, 339, 475, 479, 483], "prune_util": [255, 282, 291], "pruner": [255, 277, 282, 284, 287, 291, 504, 558], "graph_optim": [255, 264, 291, 352, 418, 453, 457, 458, 475, 483, 498, 535], "mixed_precis": [255, 291, 354, 418, 453, 475, 483, 498], "model_convers": [255, 291], "quantconf": [255, 289, 318], "qfunc": [255, 289], "routinu": [255, 289], "pruningconf": [255, 277], "pruning_func": [255, 277, 548], "generate_prun": [255, 277], "dens": [255, 277, 288, 548, 559], "spars": [255, 277, 286, 526, 548, 549], "graphoptim": [255, 264, 352, 450, 497], "unicoderegex": [256, 292], "hoc": [256, 292], "hack": [256, 292], "recogn": [256, 292], "nondigit_punct_r": [256, 292], "compil": [256, 292, 547], "preced": [256, 292], "punct_nondigit_r": [256, 292], "symbol_r": [256, 292], "property_char": [256, 292], "join": [256, 292], "bleu_token": [256, 292], "mose": [256, 292], "smt": [256, 292], "mosesdecod": [256, 292], "mteval": [256, 292], "v14": [256, 292], "pl": [256, 292], "l954": [256, 292], "l983": [256, 292], "tensor2tensor": [257, 293], "bleu_hook": [257, 293], "compute_bleu": [257, 293], "reference_corpu": [257, 293], "translation_corpu": [257, 293], "max_ord": [257, 293], "use_bp": [257, 293], "against": [257, 293], "gram": [257, 293], "flag": [257, 293, 335, 503], "third": [259, 295, 525, 557], "parti": [259, 295, 551], "pycocotool": [259, 295, 533, 539], "object_detect": [259, 295], "noth": [259, 295, 487], "jonathanhuang": [259, 295], "image_id": [259, 295, 541], "encod": [259, 268, 295, 556], "groundtruth": [259, 295], "invok": [259, 295], "groundtruth_dict": [259, 295], "exportgroundtruthtococo": [259, 295], "groundtruth_boxes_list": [259, 295], "groundtruth_classes_list": [259, 295], "max_num_class": [259, 295], "output_path": [259, 295, 307, 487, 542], "detections_list": [259, 295], "exportdetectionstococo": [259, 295], "detection_boxes_list": [259, 295], "detection_scores_list": [259, 295], "detection_classes_list": [259, 295], "cocowrapp": [259, 295], "loadannot": [259, 295], "cocoevalwrapp": [259, 295], "agnostic_mod": [259, 295], "computemetr": [259, 295], "detection_typ": [259, 295], "hold": [259, 295, 321, 525], "datastructur": [259, 295], "mscoco": [259, 295], "replic": [259, 295], "extern": [259, 295, 307, 522], "category_id": [259, 295], "iou_typ": [259, 295], "iou_thr": [259, 263, 295, 299, 541], "map_point": [259, 263, 295, 299, 541], "cocoev": [259, 295], "getcategori": [259, 295], "getagnosticmod": [259, 295], "agnost": [259, 295, 528], "getcategoryidlist": [259, 295], "accumul": [259, 295], "include_metrics_per_categori": [259, 295], "all_metrics_per_categori": [259, 295], "summeri": [259, 295], "per_category_ap": [259, 295], "care": [259, 295], "pollut": [259, 295], "mldash": [259, 295], "summary_metr": [259, 295], "iou": [259, 263, 295, 299], "increment": [259, 295, 319, 320, 557], "50iou": [259, 295], "75iou": [259, 295], "75": [259, 295, 559], "pixel": [259, 295, 556], "medium": [259, 295], "larg": [259, 295, 525, 528, 557, 559], "10000": [259, 295, 321], "recal": [259, 261, 263, 295, 297, 299], "bycategori": [259, 295], "supercategori": [259, 295], "performancebycategori": [259, 295], "category_stat": [259, 295], "exportsingleimagegroundtruthtococo": [259, 295], "next_annotation_id": [259, 295], "category_id_set": [259, 295], "groundtruth_box": [259, 295], "groundtruth_class": [259, 295], "groundtruth_mask": [259, 295], "groundtruth_is_crowd": [259, 295], "ingest": [259, 295], "ones": [259, 295], "exportsingleimagedetectionstococo": [259, 295], "uniqu": [259, 271, 290, 295, 321, 384, 385, 551], "assign": [259, 295, 345, 383, 384, 389, 390, 391, 392, 522, 530, 542, 550], "num_gt_box": [259, 295], "num_detect": [259, 263, 295, 299, 541, 558], "image_height": [259, 295], "image_width": [259, 295], "detection_mask": [259, 295], "crowd": [259, 295], "insid": [259, 295, 528, 548], "exportsingleimagedetectionboxestococo": [259, 295], "detection_box": [259, 295, 558], "detection_scor": [259, 295, 558], "detection_class": [259, 295, 558], "exporsingleimagedetectionboxestococo": [259, 295], "exportsingleimagedetectionmaskstococo": [259, 295], "allenai": [260, 261, 296, 297], "bi": [260, 261, 296, 297], "att": [260, 261, 296, 297], "f1_score": [260, 261, 296, 297], "ground_truth": [260, 261, 296, 297], "metric_max_over_ground_truth": [260, 261, 296, 297], "metric_fn": [260, 261, 296, 297], "exact_match_scor": [260, 296], "exact": [260, 296], "articl": [260, 261, 296, 297], "paragraph": [260, 261, 296, 297], "qa": [260, 261, 296, 297], "cantain": [260, 261, 296, 297], "normalize_answ": [261, 297], "extra": [261, 297], "newlin": [261, 297], "tab": [261, 297, 386, 389, 395, 509, 555], "harmon": [261, 263, 297, 299], "answer_start": [261, 297], "177": [261, 297], "denver": [261, 297], "bronco": [261, 297], "nfl": [261, 297], "afc": [261, 297], "bowl": [261, 297], "56be4db0acb8001400a502ec": [261, 297], "percentag": [261, 269, 297, 558], "basemetr": [262, 263, 298, 299], "single_output": [262, 263, 298, 299], "hvd": [262, 263, 298, 299, 530], "sample_weight": [262, 263, 298, 299], "metric_registri": [262, 263, 298, 299], "metric_typ": [262, 263, 298, 299], "decorator_metr": [262, 263, 298, 299], "tensorflowmetr": [263, 299], "pytorchmetr": [263, 299], "mxnetmetr": [263, 299], "onnxrtqlmetr": [263, 299], "onnxrtitmetr": [263, 299], "wrappytorchmetr": [263, 299], "wrapmxnetmetr": [263, 299], "wraponnxrtmetr": [263, 299], "proport": [263, 299], "were": [263, 299], "pred_list": [263, 299], "pytorchloss": [263, 299], "least": [263, 287, 299, 488, 548, 557], "mae": [263, 299, 541], "absolut": [263, 269, 299, 487, 531, 541, 547, 548, 551, 557], "magnitud": [263, 299, 538, 548, 559], "rmse": [263, 269, 299, 541, 557], "squar": [263, 269, 299, 541, 557], "tensorflowtopk": [263, 299], "among": [263, 299], "most": [263, 299, 522, 542, 548, 551, 557], "outcom": [263, 299], "num_correct": [263, 299], "generaltopk": [263, 299], "cocomapv2": [263, 299, 541], "anno_path": [263, 299, 541], "map_kei": [263, 299], "detectionboxes_precis": [263, 299], "output_index_map": [263, 299, 541], "tensorflowmap": [263, 299], "tensorflowcocomap": [263, 299], "tensorflowvocmap": [263, 299], "squadf1": [263, 299, 541], "miou": [263, 299], "21": [263, 299, 559], "hist": [263, 299, 339, 340], "onnxrtglu": [263, 299], "dlrm": [263, 299, 559], "conf_fnam": [266, 273], "init_by_cfg": [266, 273], "init_for_search": [267, 273], "init_cfg": [267, 273], "parametermanag": [268, 271], "hot": 268, "pymoo": [268, 270, 271], "process_param_dict": 268, "upper": [268, 270], "vector": [268, 274, 276], "onehot_gener": 268, "in_arrai": 268, "onehot": 268, "unus": 268, "depth": [268, 528, 552], "input_arrai": 268, "elast": 268, "supernetwork": [268, 271], "mapper": [268, 383, 446, 447], "random_sampl": [268, 321], "subnetwork": [268, 271], "trial_limit": 268, "100000": 268, "translate2param": 268, "pymoo_vector": 268, "translate2pymoo": 268, "import_csv": 268, "filepath": 268, "column_nam": 268, "drop_dupl": 268, "panda": 268, "datafram": [268, 308, 309], "purpos": [268, 534, 542, 550, 557], "subnet": [268, 271], "column": [268, 522, 548], "df": [268, 308, 309], "set_se": 268, "create_training_set": 268, "train_with_al": 268, "sklearn": 268, "alpha": 269, "default_alpha": 269, "cost_factor": 269, "default_cost_factor": 269, "max_iter": 269, "default_max_iter": 269, "regressor": 269, "get_paramet": 269, "get_metr": [269, 361], "mape": 269, "kendal": 269, "rank": [269, 530], "correl": 269, "spearman": 269, "searcher": [269, 276], "searchalgomanag": 270, "optuna": 270, "configure_nsga2": 270, "warm_pop": 270, "crossover_prob": 270, "crossover_eta": 270, "mutation_prob": 270, "02": [270, 559], "mutation_eta": 270, "configure_ag": 270, "run_search": 270, "save_histori": 270, "previous": [270, 525], "problemmultiobject": 270, "evaluation_interfac": 270, "evaluationinterfac": [270, 271], "param_count": 270, "param_upperbound": 270, "ofa": [270, 271], "mani": [270, 271, 310, 525, 539, 557, 558], "get_mac": 271, "input_s": 271, "measure_lat": 271, "warmup_step": 271, "measure_step": 271, "resolut": 271, "warm": [271, 310], "runner": 271, "ofarunn": 271, "acc_predictor": 271, "macs_predictor": 271, "latency_predictor": 271, "imagenetpath": 271, "w1": 271, "estimate_accuracy_top1": 271, "subnet_cfg": 271, "estimate_mac": 271, "estimate_lat": 271, "validate_top1": 271, "validate_mac": 271, "flop": 271, "fvcore": 271, "get_subnet": 271, "predictor_mod": 271, "csv_path": 271, "written": 271, "eval_subnet": 271, "clear_csv": 271, "evaluationinterfaceresnet50": 271, "evaluationinterfacemobilenetv3": 271, "get_torchvision_model": 271, "torchvisionrefer": 271, "baselin": [271, 554, 555], "builder": 274, "count_model_paramet": 274, "params_vec2params_dict": [274, 276], "paras_vec": 274, "metrics_convers": 274, "init_search_cfg": 274, "nas_method": 275, "create_search_space_pool": 275, "find_pareto_front": 275, "n_point": 275, "n_metric": 275, "n_pareto_point": 275, "get_feedback": 276, "feedback": 276, "para_vec": 276, "gridsearch": 276, "whole": [276, 508, 522, 531, 551, 559], "exhaust": [276, 550], "randomsearch": 276, "bayesianoptimizationsearch": 276, "indices2params_vec": 276, "tfpruningcallback": 277, "input_model": [277, 543, 555], "callback": [277, 336, 338, 339, 509], "pure": 277, "s_output": 277, "s_loss": 277, "t_output": 277, "support_pattern": [278, 279, 280], "pattern_registri": 280, "pattern_typ": 280, "patternbas": [280, 281], "mask_shap": [280, 281], "is_contigu": 280, "compute_spars": [280, 281], "abs_sum": 280, "abs_max": 280, "tile": 281, "tilepatternbas": 281, "nxm": [281, 284], "matrix": 281, "repeat_mask": 281, "ori_shap": 281, "tilepattern_1x1": 281, "1x1": [281, 528], "unstructur": [281, 538, 548, 559], "tilepattern_2x2": 281, "2x2": 281, "tilepattern_1x16": 281, "1x16": 281, "tilepattern_4x1": 281, "4x1": [281, 559], "tilepattern_1x2": 281, "1x2": 281, "register_pattern": 284, "registri": [284, 286, 288], "get_pattern": 284, "assertionerror": [284, 285, 286], "unit": [284, 486, 493, 524], "is_glob": 284, "contrast": [284, 556], "get_mask": 284, "target_sparsity_ratio": [284, 286], "pre_mask": 284, "max_sparsity_ratio_per_lay": [284, 286, 550], "get_masks_glob": 284, "get_mask_singl": 284, "exact_sparsity_ratio": 284, "obtain": [284, 285, 288, 554, 557], "get_block_size_dict": 284, "get_masks_loc": 284, "get_sparsity_ratio": [284, 287], "calul": 284, "ration": 284, "get_pattern_lock_mask": 284, "lock": [284, 538, 546, 548], "patternnxm": 284, "kept": 284, "block_siz": 284, "block_size_1": 284, "block_size_2": 284, "keep_pre_mask": 284, "unchang": 284, "patternninm": 284, "doc": [284, 541, 548], "md": [284, 530], "check_config": 285, "prune_config": 285, "everyth": 285, "reset_non_value_to_default": 285, "undefin": 285, "process_and_check_config": 285, "obejct": 285, "process_config": 285, "parse_to_prun": 285, "parse_not_to_prun": 285, "register_prun": 286, "get_prun": 286, "module_nam": [286, 288, 345, 493], "cuurent": 286, "current_sparsity_ratio": 286, "global_step": 286, "start_step": [286, 550], "end_step": [286, 550], "update_frequency_on_step": [286, 550], "mask_weight": 286, "formal": 286, "local_step": [286, 287], "judg": 286, "on_after_optimizer_step": [286, 287], "on_before_ev": [286, 287], "on_after_ev": [286, 287], "check_is_pruned_step": 286, "update_scor": 286, "magnitudeprun": 286, "snipprun": 286, "snip": [286, 538, 548, 559], "arxiv": 286, "1810": 286, "02340": 286, "snipmomentumprun": 286, "moreoev": 286, "patternlockprun": 286, "templat": [287, 291, 366, 384, 389, 475, 483, 519, 522, 557], "tree": 287, "nlp": [287, 531, 548, 551], "huggingface_model": 287, "config_file_path": 287, "pruner_info": 287, "update_items_for_all_prun": 287, "howev": [287, 548], "analys": 287, "elementwise_over_matmul_gemm_conv": 287, "elementwise_over_al": 287, "blockwise_over_matmul_gemm_conv": 287, "register_schedul": 288, "get_schedul": 288, "gradual": [288, 548], "update_sparsity_ratio": 288, "aggressive_ratio": 288, "current_prune_step": 288, "total_prune_step": 288, "oneshotschedul": 288, "aggress": 288, "iterativeschedul": 288, "target_ratio": 288, "server": [290, 291, 418, 425, 474, 475, 482, 483, 490, 493, 504, 506, 508, 522], "seper": [290, 326, 327], "opt_model": [290, 546], "fulli": [290, 551, 557], "saniti": 290, "illeg": 290, "sync": 290, "accordingli": [290, 557], "ux": 291, "config_gener": [291, 418, 475], "configuration_wizard": [291, 418, 475], "db_manag": [291, 418, 475, 512], "diagnosi": [291, 386, 389, 395, 418, 475, 503, 509], "file_brows": [291, 418, 475], "jobs_manag": [291, 418, 475], "model_zoo": [291, 418, 475], "names_mapp": [291, 418, 475], "profil": [291, 355, 371, 378, 389, 392, 394, 395, 418, 426, 434, 475, 476, 486, 491, 508, 513], "manage_workspac": [291, 418, 475], "workload": [291, 350, 351, 352, 354, 356, 359, 384, 389, 449, 463, 470, 475, 477, 483, 492, 493, 508, 511, 513, 514, 515, 516, 549], "executor": [291, 348, 475, 483], "expiring_dict": [291, 475, 483], "github_info": [291, 475, 483], "hw_info": [291, 475, 483], "json_seri": [291, 351, 402, 403, 408, 410, 411, 414, 424, 433, 459, 462, 475, 482, 483, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503], "proc": [291, 475, 483], "yaml_util": [291, 475, 483], "web": [291, 474, 475, 522, 555], "servic": [291, 475, 507, 508, 547], "router": [291, 475, 508], "basemodel": [301, 302, 303, 305, 307, 308, 309], "plai": [301, 302, 307, 309, 548, 549], "role": [301, 302, 307, 309, 548], "itself": [301, 302, 303, 305, 307, 308], "node_typ": [301, 302, 303, 307, 308, 309], "conv0": [301, 302, 303, 307, 308, 309, 555], "kerasmodel": [303, 436], "base_model": [303, 305, 307, 308, 309], "get_model_fwk_nam": 304, "fwk": 304, "onnxmodel": [307, 429], "find_node_by_nam": 307, "new_nodes_list": 307, "find_nodes_by_initi": 307, "get_scale_zero": 307, "save_model_to_fil": 307, "use_external_data_format": 307, "2gb": 307, "get_model_typ": [308, 427], "validate_graph_nod": 308, "validate_and_inference_input_output": 308, "input_tensor_nam": 308, "output_tensor_nam": 308, "graph_sess": 308, "graph_def_sess": 308, "frozen_pb_sess": 308, "load_saved_model": 308, "saved_model_tag": 308, "serv": [308, 510, 518], "signatur": 308, "tag": [308, 481, 493, 555], "metagraphdef": 308, "input_tensor": [308, 309], "keras_sess": 308, "slim_sess": 308, "checkpoint_sess": 308, "estimator_sess": 308, "input_fn": 308, "saved_model_sess": 308, "tensorflowsavedmodelmodel": 308, "report_spars": [308, 309], "total_spars": [308, 309], "tensorflowqatmodel": 308, "tensorflowcheckpointmodel": 308, "pytorchbasemodel": 309, "get_all_weight_nam": 309, "get_weight": 309, "update_weight": 309, "new_tensor": 309, "update_gradi": 309, "grad_nam": 309, "new_grad": 309, "grad": 309, "prune_weights_": 309, "place": [309, 539, 555], "get_input": 309, "get_gradi": 309, "pytorchmodel": 309, "pytorchfxmodel": 309, "ipexmodel": 309, "objective_registri": 310, "sart": 310, "result_list": 310, "models": [310, 545, 550, 557], "pruner_registri": 316, "calib_func": 318, "eval_metr": 318, "hybirdblock": 318, "paramt": 318, "automixedprecisiontunestrategi": 319, "tunabl": [319, 322], "prioriti": [319, 320, 322, 326, 327], "biggest": [319, 320], "impact": [319, 320, 326, 327, 553, 557], "tune_config": [319, 320, 322, 323, 324, 326, 327, 329], "basictunestrategi": 320, "bayesiantunestrategi": 321, "acq_max": 321, "ac": 321, "gp": 321, "y_max": 321, "random_se": [321, 335, 381, 503, 531, 554, 557, 558], "n_warmup": 321, "n_iter": 321, "acquisit": 321, "gaussian": [321, 557], "relev": 321, "acq": 321, "random_st": 321, "randomst": 321, "scipi": 321, "x_max": 321, "targetspac": 321, "pbound": 321, "9527": [321, 531, 554, 557, 558], "keyerror": 321, "amort": 321, "get_target": 321, "num": [321, 345, 541], "_kei": 321, "conservativetunestrategi": 322, "quantifi": 322, "quantifiable_op": 322, "quant_queu": 322, "fp16": [322, 542, 551], "thing": 322, "exhaustivetunestrategi": 323, "hawq_v2tunestrategi": 324, "msetunestrategi": 326, "tuningspac": [326, 327], "mse_impact_lst": 326, "best_qmodel": 326, "_summary_": [326, 335], "current_best_model": 326, "mse_v2tunestrategi": 327, "randomtunestrategi": 328, "strategy_registri": [329, 557], "compressionmanag": 335, "uesd": 335, "deal": 335, "commpon": 335, "prepare_compress": 335, "compression_manag": 335, "train_loop": 335, "path_to_sav": 335, "workspac": [335, 344, 383, 384, 389, 391, 392, 393, 423, 492, 494, 503, 543], "layerhistogramcollector": [336, 339], "layer_tensor": [336, 339], "include_lay": [336, 339], "diverg": [336, 339, 340, 528], "create_eval_func": 338, "postprocess_cfg": 338, "create_train_func": 338, "Their": 338, "kl_diverg": 339, "expand_quantized_bin": [339, 340], "quantized_bin": [339, 340], "reference_bin": [339, 340], "expand": [339, 340], "bin": [339, 340], "safe_entropi": [339, 340], "reference_distr_p": [339, 340], "p_sum": [339, 340], "candidate_distr_q": [339, 340], "q_sum": [339, 340], "entropi": [339, 340, 557], "get_threshold": [339, 340], "hist_edg": [339, 340], "quantized_typ": [339, 340], "num_quantized_bin": [339, 340], "255": [339, 340, 551], "historgram": [339, 340], "number_bin": [339, 340], "checkpoint_dir": 344, "history_cfg": 344, "checkpoint": [344, 543], "best_configur": 344, "best_model_weight": 344, "pt": [344, 543, 549, 552], "histori": [344, 382, 389, 391, 395, 448, 463, 512, 557], "snapshot": [344, 395, 512], "cfg_from_fil": 345, "yaml_fil": [345, 526, 530, 541, 545], "lazyimport": 345, "lazi": 345, "till": [345, 557], "get_siz": [345, 493], "equal_dict": 345, "d2": 345, "compare_kei": 345, "ignore_kei": 345, "ignor": [345, 526], "customized_msg": 345, "elaps": 345, "combine_histogram": 345, "old_hist": 345, "arr": 345, "old": [345, 553], "get_tuning_histori": 345, "tuning_history_path": [345, 463], "load_data_from_pkl": 345, "pkl": 345, "dump_data_to_loc": 345, "project_data": [346, 449, 450, 455, 459, 462, 469], "benchmark_data": 346, "workdir": [346, 459, 469, 475, 479, 483, 490], "config_filenam": [346, 459, 469], "configuration_data": [346, 450, 455, 459, 462], "generate_config": [346, 450, 455, 459, 462, 469], "dataloaderinterfac": [346, 459, 469], "dataloader_data": [346, 357, 384, 389, 459, 469], "parse_arg": [347, 452, 456, 461, 467], "benchmark_mod": [347, 486], "set_eager_execut": [347, 452, 456, 461], "request_id": [348, 448, 463, 464, 479, 487], "asd": [348, 464], "benchmark_id": [348, 363, 364, 374], "benchmark_result_upd": 348, "benchmark_result_update_pytorch_script": 348, "neural_coder_perform": 348, "neural_coder_tim": 348, "pytorch_script_bench_optim": 348, "command_line_of_script": 348, "pytorch_script_bench_original_model": 348, "execute_real_benchmark": 348, "project_detail": [348, 379, 448, 464], "benchmark_detail": 348, "benchmark_model": [349, 418, 475], "execute_benchmark": [349, 418, 475], "benchmarkconfiggener": 350, "configgener": [350, 351, 352, 354, 355, 356], "generate_evaluation_config": [350, 352, 354, 356], "generate_accuracy_config": 350, "generate_performance_config": 350, "workload_directori": 351, "configuration_path": 351, "jsonseri": [351, 402, 403, 408, 410, 411, 414, 424, 433, 459, 462, 482, 484, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503], "get_predefined_config_path": [351, 493], "generate_model_config": 351, "generate_dataloader_config": 351, "graphoptimizationconfiggener": 352, "generate_graph_optimization_config": 352, "benchmark_config_gener": [353, 418, 475], "graph_optimization_config_gener": [353, 418, 475], "mixed_precision_config_gener": [353, 418, 475], "profiling_config_gener": [353, 418, 475], "quantization_config_gener": [353, 418, 475], "mixedprecisionconfiggener": 354, "generate_mixed_precision_config": 354, "profilingconfiggener": 355, "quantizationconfiggener": 356, "generate_tuning_config": 356, "generate_quantization_config": 356, "configurationpars": 357, "input_data": 357, "parse_evaluation_data": 357, "evaluation_data": 357, "parse_transform": 357, "transforms_data": [357, 384, 389], "parse_dataload": 357, "parse_metr": 357, "metric_data": 357, "get_param_typ": 357, "param_group": 357, "parse_valu": 357, "required_typ": 357, "parse_list_valu": 357, "parse_multidim_list": 357, "dimension": 357, "normalize_string_list": 357, "string_list": 357, "bracket": 357, "miss": [357, 551], "get_predefined_configur": 359, "update_config_to_machine_specif": 359, "configuration_pars": [360, 418, 475], "get_boundary_nod": [360, 418, 475], "get_configur": [360, 418, 475], "params_feed": [360, 418, 475], "feeder": 361, "get_framework": [361, 432], "get_domain": 361, "domain": [361, 368, 371, 387, 389, 394, 418, 425, 426, 429, 447, 475, 476, 478, 493, 505, 510, 522, 548, 557], "get_model": [361, 432, 514], "get_dataload": 361, "get_transform": 361, "get_object": 361, "get_strategi": 361, "get_quantization_approach": 361, "get_possible_valu": 361, "bench": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 448, 474], "dbmanag": [362, 394], "database_loc": [362, 394], "log_level": [362, 394, 485], "initialize_databas": [362, 394], "create_sqlalchemy_engin": [362, 394], "create_al": [362, 394], "tabl": [362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 394], "project_id": [363, 366, 373, 374, 377, 379, 384, 388, 389], "model_id": [363, 373, 374, 377], "dataset_id": [363, 366, 374, 377, 384, 388, 389], "warmup_iter": 363, "number_of_inst": 363, "cores_per_inst": [363, 494, 523, 525, 535, 550], "execution_command": [363, 374, 377], "benchark": 363, "delete_benchmark": [363, 383, 389], "benchmark_nam": 363, "update_statu": [363, 374, 377], "execution_statu": [363, 374, 377], "executionstatu": [363, 374, 377, 383, 389, 391, 392, 476, 492], "update_dur": [363, 374, 377], "durat": [363, 374, 377, 383, 389, 391, 392, 479, 545, 554], "update_execution_command": [363, 374, 377, 383, 389, 391, 392], "update_log_path": [363, 374, 377, 389, 392], "update_config_path": [363, 374], "update_dataset": [363, 374, 377], "update_batch_s": [363, 374], "update_mod": 363, "update_cores_per_inst": 363, "update_number_of_inst": 363, "clean_statu": [363, 374, 377, 383, 389, 391, 392, 492], "status_to_clean": [363, 374, 377, 383, 389, 391, 392, 492], "build_info": [363, 364, 366, 373, 374, 377, 378, 382], "benchmark_result": [363, 371, 394, 418], "benchmarkresult": [363, 364], "update_accuraci": 364, "update_perform": 364, "list_by_framework": [365, 372, 380], "framework_id": [365, 372, 373, 380, 396], "query_to_list": [365, 372, 380], "dataloaders_queri": 365, "update_param": 365, "dataloader_id": 365, "fill_dictionari": [365, 367, 368, 370, 372, 375, 376, 380], "dataset_nam": [366, 384, 389], "template_path": 366, "delete_dataset": [366, 384, 389], "update_template_path": 366, "get_domain_id": 367, "domain_nam": 367, "domainflavour": [368, 476], "db": [368, 375, 376, 395, 396], "get_domain_flavour_id": 368, "domain_flavour_nam": 368, "flavour": [368, 387, 389, 447, 476], "get_framework_id": 370, "framework_nam": [370, 445, 482], "domain_flavour": [371, 394, 418, 424, 493], "optimization_typ": [371, 374, 394, 418], "profiling_result": [371, 377, 394, 418], "tuning_detail": [371, 374, 394, 418], "tuning_histori": [371, 374, 389, 391, 394, 418, 453, 475], "metrics_queri": 372, "input_nod": 373, "precision_id": [373, 374, 375, 376], "domain_id": [373, 380], "domain_flavour_id": 373, "supports_profil": [373, 426, 434], "supports_graph": [373, 426], "delete_model": [373, 389, 390], "optimization_type_id": 374, "sampling_s": [374, 494, 525, 557, 558], "tuning_details_id": [374, 381], "diagnosis_config": 374, "delete_optim": [374, 389, 391], "optimization_id": [374, 375, 389, 391, 448], "optimization_nam": [374, 375, 388, 389], "update_optimized_model": [374, 389, 391], "optimized_model_id": 374, "update_sampling_s": 374, "update_precis": 374, "update_tuning_detail": 374, "pin_accuracy_benchmark": [374, 389, 391], "pin": [374, 389, 391], "pin_performance_benchmark": [374, 389, 391], "get_optimization_by_project_and_model": 374, "unpin_benchmark": 374, "db_connect": 374, "unpin": 374, "optimizationtyp": [374, 375, 476], "tuningdetail": [374, 381, 462], "tuninghistori": [374, 382, 463], "optimized_model": [374, 535], "get_pinned_benchmark": 374, "list_for_precis": 375, "precision_nam": [375, 376], "get_optimization_type_for_precis": 375, "get_optimization_type_id": 375, "get_optimization_type_by_nam": 375, "get_optimization_type_by_id": 375, "get_precision_id": 376, "get_precision_by_nam": 376, "get_precision_by_id": 376, "num_thread": 377, "delete_profil": [377, 389, 392], "profiling_id": [377, 378, 389, 392, 464], "profiling_nam": 377, "update_num_thread": 377, "profilingresult": [377, 378], "total_execution_tim": 378, "accelerator_execution_tim": 378, "cpu_execution_tim": 378, "op_run": 378, "op_defin": 378, "get_result": 378, "bulk_add": 378, "params_interfac": [378, 383, 384, 386, 388, 389, 390, 391, 392, 394, 418, 475, 512], "profilingresultaddparamsinterfac": [378, 389, 392, 395], "bulk": [378, 389, 392], "delete_result": 378, "delet": [378, 383, 384, 389, 390, 391, 392, 393, 548], "create_project": [379, 388, 389, 393], "delete_project": [379, 389, 393], "project_nam": [379, 384, 389], "get_model_by_nam": 379, "list_project": [379, 389, 393], "update_not": 379, "list_by_domain": 380, "transforms_queri": 380, "accuracy_criterion_typ": 381, "accuracy_criterion_threshold": 381, "exit_polici": [381, 531, 554, 557, 558], "tuning_details_data": 381, "delete_tuning_detail": 381, "update_tuning_histori": 381, "tuning_history_id": 381, "minimal_accuraci": 382, "baseline_accuraci": 382, "baseline_perform": 382, "last_tune_accuraci": 382, "last_tune_perform": 382, "best_tune_accuraci": 382, "best_tune_perform": 382, "benchmarkapiinterfac": [383, 389], "get_benchmark_detail": [383, 389], "list_benchmark": [383, 389], "update_benchmark_accuraci": [383, 389], "update_benchmark_perform": [383, 389], "update_benchmark_statu": [383, 389], "update_benchmark_dur": [383, 389], "update_path": [383, 389, 391], "add_benchmark": [383, 389], "add_result": [383, 389, 392], "edit_benchmark": [383, 389], "parse_benchmark_data": [383, 389], "benchmarkaddparamsinterfac": [383, 389, 395], "parse_benchmark_edit_data": [383, 389], "benchmarkeditparamsinterfac": [383, 389, 395], "before_delete_benchmark_entri": 383, "sqlite3": 383, "db_model": [383, 394, 418, 475], "datasetapiinterfac": [384, 389], "get_dataset_detail": [384, 389], "list_dataset": [384, 389], "add_dataset": [384, 389], "set_template_path": [384, 389], "parsed_dataset_data": [384, 389], "datasetaddparamsinterfac": [384, 389, 395], "check_if_custom_metric_or_dataload": [384, 389], "dataset_data": [384, 389, 449, 450, 455, 459, 462, 495], "generate_custom_templ": [384, 389], "dataloader_path": [384, 389], "generate_templ": [384, 389], "template_typ": [384, 389], "parse_dataset_data": [384, 389], "get_predefined_dataset": [384, 389], "prepare_predefined_dataload": [384, 389], "prepare_predefined_transform": [384, 389], "ordereddict": [384, 389, 494], "set_database_vers": [384, 385], "version_num": [384, 385], "alembic_vers": [384, 385], "initialize_associ": [384, 385], "initialize_precision_optimization_types_associ": [384, 385], "search_in_list_of_dict_for_unique_valu": [384, 385], "list_of_dict": [384, 385], "search_in_list_of_dict": [384, 385], "diagnosisapiinterfac": [386, 389], "get_op_list": [386, 389, 397], "get_op_detail": [386, 389, 397], "generate_optim": [386, 389], "model_wise_param": [386, 389], "parse_optimization_data": [386, 389, 391], "diagnosisoptimizationparamsinterfac": [386, 389, 395], "parse_op_wise_config": [386, 389], "op_wise_param": [386, 389], "parse_wise_paramet": [386, 389], "params_per_typ": [386, 389], "set_op_wise_pattern_precis": [386, 389], "parse_model_wise_config": [386, 389], "dictionariesapiinterfac": [387, 389], "dictonari": [387, 389], "list_domain": [387, 389], "list_domain_flavour": [387, 389], "list_optimization_typ": [387, 389], "list_optimization_types_for_precis": [387, 389], "list_precis": [387, 389], "list_dataload": [387, 389], "list_dataloaders_by_framework": [387, 389], "list_transform": [387, 389], "list_transforms_by_framework": [387, 389], "list_transforms_by_domain": [387, 389], "list_metr": [387, 389], "list_metrics_by_framework": [387, 389], "examplesapiinterfac": [388, 389], "get_optimization_data": [388, 389], "optimizationaddparamsinterfac": [388, 389, 391, 395], "benchmark_api_interfac": [389, 394, 418], "dataset_api_interfac": [389, 394, 418], "diagnosis_api_interfac": [389, 394, 418], "dictionaries_api_interfac": [389, 394, 418], "examples_api_interfac": [389, 394, 418], "model_api_interfac": [389, 394, 418], "optimization_api_interfac": [389, 394, 418], "profiling_api_interfac": [389, 394, 418], "project_api_interfac": [389, 394, 418], "modelapiinterfac": [389, 390], "add_model": [389, 390, 393], "get_model_detail": [389, 390], "list_model": [389, 390, 418, 444, 475], "parse_model_data": [389, 390], "modeladdparamsinterfac": [389, 390, 395], "optimizationapiinterfac": [389, 391], "get_optimization_detail": [389, 391], "list_optim": [389, 391], "update_optimization_statu": [389, 391], "update_optimization_dur": [389, 391], "add_optim": [389, 391], "add_quantization_optim": [389, 391], "optimization_data": [389, 391, 449, 450, 455, 459, 462], "add_standard_optim": [389, 391], "edit_optim": [389, 391], "add_tuning_histori": [389, 391], "parse_tuning_histori": [389, 391], "tuninghistoryinterfac": [389, 391, 395, 512], "parse_optimization_edit_data": [389, 391], "optimizationeditparamsinterfac": [389, 391, 395], "profilingapiinterfac": [389, 392], "get_profiling_detail": [389, 392], "list_profil": [389, 392], "update_profiling_statu": [389, 392], "update_profiling_dur": [389, 392], "add_profil": [389, 392], "edit_profil": [389, 392], "bulk_add_result": [389, 392], "parse_profiling_data": [389, 392], "profilingaddparamsinterfac": [389, 392, 395], "parse_profiling_result_data": [389, 392], "parse_profiling_edit_data": [389, 392], "profilingeditparamsinterfac": [389, 392, 395], "projectapiinterfac": [389, 393], "get_project_detail": [389, 393], "add_dummy_dataset": [389, 393], "update_project_not": [389, 393], "db_oper": [394, 418, 475], "parse_nod": 395, "tuninghistoryiteminterfac": [395, 512], "update_dataloaders_param": 396, "dataloaders_to_upd": 396, "framework_dataloaders_config": 396, "get_framework_dataloaders_config": 396, "get_framework_transforms_config": 396, "get_tensors_info": [397, 426], "load_quantization_config": 397, "calculate_ms": 397, "input_model_tensor": 397, "optimized_model_tensor": 397, "op_detail": [397, 399, 418, 475], "opdetail": [397, 402], "get_histogram_data": 397, "draw": [397, 554, 557], "diagnosisfactori": 398, "get_diagnosi": 398, "onnx_diagnosi": [399, 418, 475], "onnxrt_diagnosi": [399, 400, 418], "tensorflow_diagnosi": [399, 418, 475], "factori": [399, 418, 453, 466, 471, 475, 486], "op_entri": [399, 418, 475], "onnxrtdiagnosi": 401, "onnxrtmodel": [401, 429], "serialization_typ": [402, 403, 433, 482, 484, 495, 496, 500, 501], "oppattern": 402, "pattern_data": 402, "opweight": 402, "weights_data": 402, "opactiv": 402, "op_activ": 402, "opentri": 403, "activation_min": 403, "activation_max": 403, "tensorflowdiagnosi": 405, "tensorflowmodel": [405, 434, 436, 437, 438, 439], "browser": [406, 522], "get_directory_entri": 406, "get_requested_path": 406, "request": [406, 418, 419, 420, 441, 442, 445, 463, 475, 479, 505, 507, 509, 510, 514, 516, 517, 519, 522, 525, 551], "get_non_hidden_directory_entri": 406, "create_dir_entri": 406, "direntri": 406, "create_file_entri": 406, "create_entri": 406, "is_directori": 406, "sort_entri": 406, "should_show_fil": 406, "should_show_only_model_fil": 406, "get_setting_valu": 406, "get_filter_valu": 406, "filter_requested_entri": 406, "filter_nam": 406, "is_directory_entri": 406, "is_model_or_directory_entri": 406, "is_dataset_or_directory_entri": 406, "brows": 407, "filesystem": [407, 493, 518], "attribute_typ": 408, "expanded_group": [409, 412], "edg": [411, 413, 418, 475, 556], "add_edg": 411, "source_id": 411, "target_id": 411, "get_nod": 411, "highlight_pattern": 411, "highlight": [411, 414, 522], "get_target_nod": 411, "reader": [412, 413, 418, 475], "graphread": 412, "find_pattern_in_graph": [412, 509], "displai": [413, 426], "onnxrt_read": [413, 415, 418], "tensorflow_read": [413, 415, 418], "collaps": [413, 418, 475, 522], "graph_read": [413, 418, 475], "groupnod": 414, "group_nam": 414, "onnxrtread": 416, "tensorflowread": 417, "jobs_control_queu": [418, 419, 475], "frozen_pb": [418, 425, 435], "meta_graph": [418, 425, 435], "model_type_gett": [418, 425, 475], "repositori": [418, 423, 425, 475, 481, 537], "download_config": [418, 443, 444, 475], "download_model": [418, 443, 444, 475], "optimize_model": [418, 451, 453, 454, 457], "neural_coder_optim": [418, 453, 475], "tune_model": [418, 453, 460], "execute_optim": [418, 453, 475], "tensorflow_profil": [418, 466, 475], "execute_profil": [418, 466, 475], "profile_model": [418, 466, 468, 472, 475], "job": 419, "_jobscontrolqueu": 420, "queu": 420, "jobsmanag": 420, "_jobsmmanag": 421, "_job": 421, "get_default_path": 423, "shape_elements_ord": [426, 429, 438, 493], "get_input_nod": [426, 436, 437, 438], "get_output_nod": [426, 436, 437, 438], "ensure_supported_path": 426, "get_model_graph": [426, 429, 437, 438, 509], "get_framework_nam": [426, 429, 431, 438], "supports_path": [426, 429, 431, 434, 436, 437, 439], "guard_requirements_instal": [426, 429, 431, 438], "instal": [426, 429, 431, 438, 445, 533, 547], "nc_model_inst": [429, 438], "onnx_model": 429, "filtered_input_nod": 429, "remove_number_of_samples_from_shap": 429, "pytorchscriptmodel": 431, "modelrepositori": 432, "get_framework_from_path": [432, 493], "get_supported_framework": 432, "is_model_path": 432, "trust": [433, 522], "frozenpbmodel": 434, "metagraphmodel": 437, "metagraph": 437, "tensorflow_model": 438, "savedmodelmodel": 439, "get_input_shap": 440, "fix_dynamic_shap": 440, "resourc": [443, 528, 548], "download_yaml_config": 443, "model_info": 443, "download_fil": 443, "download_path": 443, "header": [443, 518, 533], "report_progress": 443, "unpack_arch": 443, "archive_path": 443, "unpack": 443, "archiv": 443, "get_yaml_url": 443, "model_src_dir": 443, "yaml_relative_loc": 443, "get_available_model": 445, "check_vers": 445, "framework_vers": 445, "supported_vers": 445, "validate_model_list": 445, "model_list": 445, "get_framework_module_nam": 445, "get_installed_framework": 445, "mappingdirect": 447, "namesmapp": 447, "framework_map": 447, "domain_map": 447, "domain_flavour_map": 447, "precision_map": 447, "map_nam": 447, "parameter_typ": 447, "execute_optimization_pytorch_script": 448, "execute_optimization_regular": 448, "parse_model_data_to_bench_nam": 448, "parse_log": 448, "optimization_detail": 448, "check_if_collect_tuning_histori": 448, "optimizationfactori": 449, "get_optim": 449, "optimization_script": [450, 455, 459, 462], "optimize_graph": [452, 456], "output_graph": [452, 456, 461, 535], "optimize_graph_config": [452, 456], "optimize_pt_script": 458, "output_model_nam": 459, "output_model_dir": 459, "optimizationinterfac": 459, "accuracycriterion": 462, "optimization_workdir": 463, "watcher": 463, "process_succeed": 463, "signal": [463, 493, 531], "was_history_file_chang": 463, "history_file_modification_tim": 463, "send_history_snapshot": 463, "execute_real_profil": 464, "profiling_detail": 464, "profilerfactori": [465, 470], "get_profil": [465, 470], "profiling_data": [465, 469, 470, 472, 491], "load_profiling_detail": 467, "json_path": 467, "config_path": 469, "initialize_graph": 472, "tf_modul": 472, "create_tf_config": 472, "num_warmup": 472, "get_node_by_nam": 472, "convert_nodes_to_list": 472, "build_dataload": 472, "delete_assign": 473, "wsgi": 474, "prepare_environ": 474, "app": [475, 508], "history_snapshot_pars": [475, 508, 513], "request_data_processor": [475, 508, 513], "response_gener": [475, 508, 513, 514, 516, 519], "status": [476, 488, 492], "ensure_workdir_exists_and_writ": 477, "clean_workloads_wip_statu": 477, "wip": [477, 559], "workloads_list": 477, "migrate_databas": 477, "latest": [477, 487, 539, 549, 553], "alemb": [477, 533, 539], "notfoundexcept": [478, 506, 507], "accessdeniedexcept": 478, "deni": 478, "clienterrorexcept": 478, "internalexcept": 478, "workspace_path": [479, 493], "subject": [479, 505, 540], "send_respons": 479, "log_nam": 479, "additional_log_nam": [479, 487], "shell": [479, 487, 555], "process_dur": 479, "call_on": 479, "cwd": [479, 487], "universal_newlin": [479, 487], "startupinfo": [479, 487], "creationflag": [479, 487], "ignore_exit_cod": [479, 487], "pid": [479, 487], "env_arg": 479, "ncprocess": [479, 488], "refresh_workdir": 479, "is_multi_command": 479, "expir": 480, "expiringdictitem": 480, "expires_at": 480, "is_expir": 480, "expiringdict": 480, "initial_valu": 480, "ttl": 480, "120": 480, "userdict": 480, "githubinfo": 481, "hw": 482, "hwinfo": 482, "get_number_of_socket": 482, "get_distribut": 482, "distibut": 482, "get_bios_vers": 482, "bio": [482, 547], "is_turbo_boost_en": 482, "turbo": [482, 547], "boost": [482, 542, 549], "get_kernel_vers": 482, "get_framework_info": 482, "get_framework_dependency_info": 482, "subdepend": 482, "serializ": 484, "serialize_item": 484, "datetim": 484, "throw": 484, "typeerror": 484, "2016": 484, "84913": 484, "08t11": 484, "084913": 484, "change_log_level": 485, "line": [486, 487, 506, 522, 530, 538, 555], "optimizationpars": 486, "performancepars": 486, "update_parti": 486, "parsed_result": 486, "summarize_parti": 486, "summarize_valu": 486, "accuracypars": 486, "benchmarkparserfactori": 486, "get_pars": 486, "profilingpars": 486, "unify_tim": 486, "string_valu": 486, "micro": 486, "125": [486, 559], "6m": 486, "microsecond": 486, "output_dir": 487, "cmd": [487, 535], "docker": 487, "hub": 487, "aibt_tensorflow": 487, "7_3_mkldnn_tensorflow": 487, "111224": 487, "pull_imag": 487, "0c750a01": 487, "90e0": 487, "4aa8": 487, "99fe": 487, "a194d55a2046": 487, "time_start": 487, "2018": 487, "17t14": 487, "47": [487, 559], "352502": 487, "time_stop": 487, "25": [487, 559], "110410": 487, "info_path": 487, "tail": 487, "along": [487, 539], "is_ok": [487, 488], "subprocess": [487, 509], "popen": 487, "remove_log": 487, "properli": 488, "return_code_al": 488, "remove_successful_log": 488, "success": [488, 505, 539], "sent": 491, "throughput": [491, 535], "acc_input_model": 491, "acc_optimized_model": 491, "size_input_model": 491, "size_optimized_model": 491, "path_optimized_model": 491, "optimization_tim": 491, "insert_data": 491, "calculate_throughput": 491, "readi": 491, "ensure_working_path_exist": 492, "clean_log": 492, "workdir_path": 492, "is_hidden": 493, "get_dataset_path": 493, "get_file_extens": 493, "lead": [493, 528, 542, 548], "is_dataset_fil": 493, "normalize_domain": 493, "underscor": 493, "normalize_framework": 493, "normalize_str": 493, "string_to_norm": 493, "get_model_zoo_config_path": 493, "model_dict": 493, "get_model_zoo_model_path": 493, "check_modul": 493, "get_module_vers": 493, "add_unit": 493, "load_model_config": 493, "load_dataloader_config": 493, "load_transforms_config": 493, "load_transforms_filter_config": 493, "meaning": [493, 546], "load_precisions_config": 493, "load_model_wise_param": 493, "load_metrics_config": 493, "get_metrics_dict": 493, "load_help_nc_param": 493, "replace_with_valu": 493, "file_path": 493, "verify_file_path": 493, "determine_ip": 493, "ip": 493, "is_development_env": 493, "nc_mode": 493, "filter_transform": 493, "parse_bool_valu": 493, "release_tag": 493, "get_shape_from_transform": 493, "get_height_width_from_s": 493, "parse_to_string_list": 493, "parse_to_float_list": 493, "export_to_csv": 493, "parse_vers": 493, "string_vers": 493, "remove_dataload": 494, "datalad": 494, "remove_accuracy_metr": 494, "set_evaluation_dataload": 494, "udpat": 494, "set_evaluation_dataset_path": 494, "get_performance_config": 494, "set_performance_cores_per_inst": 494, "get_performance_cores_per_inst": 494, "set_performance_num_of_inst": 494, "num_of_inst": [494, 523, 525, 535, 550], "get_performance_num_of_inst": 494, "set_accuracy_and_performance_batch_s": 494, "set_quantization_dataload": 494, "set_quantization_dataset_path": 494, "set_quantization_batch_s": 494, "set_workspac": [494, 503], "set_accuracy_go": 494, "accuracy_go": 494, "set_accuracy_metr": 494, "set_transform": 494, "process_transform": 494, "set_quantization_approach": 494, "set_input": 494, "set_output": 494, "set_quantization_sampling_s": 494, "set_performance_warmup": 494, "warmup": [494, 550], "set_performance_iter": 494, "set_optimization_precis": 494, "yaml_path": 494, "is_dummi": 495, "labelbal": 495, "set_transforms_from_list": 495, "transforms_list": 495, "set_dataset": 495, "postprocessschema": 496, "set_accuracy_postprocess_transform": 496, "set_precis": [497, 499], "sgdoptim": 501, "adamwoptim": 501, "adamoptim": 501, "crossentropylosscriterion": 501, "sparsecategoricalcrossentropycriterion": 501, "knowledgedistillationlosscriterion": 501, "weightcompressionapproach": 501, "parse_dict_value_to_float": 501, "parse_dict_value_to_int": 501, "wiseconfigdetail": 502, "wiseconfig": 502, "multiobject": 503, "acccriterion": 503, "exitpolici": 503, "set_timeout": 503, "set_max_tri": 503, "max_trial": [503, 531, 557], "trial": [503, 557], "set_performance_onli": 503, "set_random_se": 503, "float_represent": 504, "dumper": 504, "pruner_represent": 504, "outsid": 505, "create_simple_respons": 505, "gui": [505, 506, 510, 522, 538, 539], "messagequeu": 505, "queue": [505, 510], "post_failur": 505, "post_success": 505, "post_error": 505, "wait": 505, "global_config_directori": 506, "set_up": 506, "determine_values_from_environ": 506, "get_command_line_arg": 506, "determine_server_port": 506, "tri": [506, 557], "max_ports_tri": 506, "port_default": 506, "determine_gui_port": 506, "client": [506, 522], "server_port": 506, "unless": [506, 534], "is_port_taken": 506, "determine_log_level": 506, "determine_url_prefix": 506, "get_url": 506, "dump_token_to_fil": 506, "servicenotfoundexcept": 507, "unknown": 507, "connector": 509, "routingdefinit": 509, "rout": 509, "realtimeroutingdefinit": 509, "realtim": 509, "deferredroutingdefinit": 509, "deferredsubprocessroutingdefinit": 509, "spawn": 509, "get_system_info": 509, "endpoint": 510, "run_serv": 510, "webserv": 510, "get_tls_arg": 510, "tl": [510, 522], "block_ifram": 510, "werkzeug": [510, 518], "ifram": 510, "csp": 510, "block_snif": 510, "mime": 510, "snif": 510, "require_api_token": 510, "author": [510, 540], "j": 510, "handle_api_cal": 510, "subpath": 510, "allow_api_cal": 510, "page_not_found": 510, "disable_cach": 510, "build_paramet": 510, "flask": [510, 522], "web_socket_publish": 510, "web_socket": 510, "flask_socketio": 510, "socketio": [510, 522], "benchmarkservic": 511, "workloadservic": [511, 515, 516, 519], "historysnapshotpars": 512, "history_snapshot": 512, "provide_perform": 512, "parse_history_snapshot": 512, "parse_history_item": 512, "history_item": 512, "extract_accuraci": 512, "extract_perform": 512, "modelservic": 514, "optimizationservic": 515, "profilingservic": 516, "generate_csv": 516, "processor": [517, 535, 542, 547, 549, 551, 552, 559], "requestdataprocessor": 517, "get_string_valu": 517, "responsegener": 518, "serve_from_filesystem": 518, "mimetyp": 518, "as_attach": 518, "add_refresh": 518, "refresh_tim": 518, "refresh": 518, "from_except": 518, "get_status_code_for_except": 518, "get_code_templ": 519, "get_output": 519, "asymmetr": [521, 551], "conda": [522, 533, 539, 553], "forg": [522, 533, 539], "setup": [522, 534, 539], "sign": [522, 551, 554], "certif": 522, "ui": 522, "5000": 522, "338174d13706855fc6924cec7b3a8ae8": 522, "listen": 522, "firewal": 522, "8080": 522, "cert": 522, "path_to_cert": 522, "crt": 522, "path_to_private_kei": 522, "encrypt": 522, "insecur": 522, "expos": 522, "forfeit": 522, "threat": 522, "button": [522, 538], "pop": 522, "recognit": [522, 530, 555], "finish": [522, 557], "synthet": 522, "plu": 522, "icon": 522, "unfold": 522, "On": [522, 551], "panel": 522, "navig": 522, "trash": 522, "visibl": 522, "cursor": 522, "prompt": [522, 530], "confirm": 522, "revers": 522, "exit": [522, 531, 535, 542, 557, 558], "pencil": 522, "light": [522, 529], "blue": 522, "color": 522, "row": [522, 548], "arrow": 522, "checkbox": 522, "chart": [522, 551, 554, 555], "offer": [522, 526], "conveni": 522, "variat": 522, "yellow": 522, "warn": 522, "remind": 522, "One": [522, 525, 530, 538, 548, 549], "dialog": 522, "cryptographi": 522, "centercrop": [523, 525, 556, 557], "totensor": [523, 525, 556], "485": [523, 525, 559], "456": [523, 525], "406": [523, 525], "enough": [523, 551], "benchmarkconf": 523, "lpot": [523, 535, 549, 553], "pylint": 524, "flake8": 524, "autopep8": 524, "motiv": 524, "explan": 524, "bug": 524, "reproduc": 524, "submit": 524, "page": 524, "intend": 524, "collabor": 524, "adher": 524, "often": [525, 528, 546, 548], "encount": 525, "consum": 525, "lack": 525, "faster": [525, 527, 549, 559], "dataloadermodul": 525, "hard": 525, "treat": 525, "eas": [525, 539, 549], "advantag": [525, 550], "life": 525, "launch": [525, 542], "__next__": 525, "randomresizedcrop": [525, 556], "imagerecordit": 525, "path_imgrec": 525, "label_width": 525, "preprocess_thread": 525, "data_nthread": 525, "data_shap": 525, "label_nam": 525, "rand_crop": 525, "rand_mirror": 525, "shuffle_dataset": 525, "shuffle_chunk_se": 525, "shuffle_se": 525, "data_layer_typ": 525, "combine_mean_std": 525, "helloworld": [526, 556], "ensp": [526, 541, 556], "imagerecord": [526, 530, 558], "image_nam": 526, "cocorecord": 526, "gt": [526, 556], "lt": [526, 547], "float16": 526, "int64": 526, "style_transf": 526, "content": 526, "tfrecorddataset": [526, 557], "aid": 527, "deploy": 527, "infrastructur": 527, "deploi": [528, 557], "power": [528, 547], "mobil": [528, 559], "workflow": [528, 539, 542, 555], "produc": 528, "softmax": 528, "l": [528, 555, 557], "kd": 528, "kullback": 528, "leibler": 528, "patient": 528, "compact": [528, 548], "ia": 528, "attach": 528, "shallow": 528, "deepest": 528, "deeper": 528, "paper": [528, 548], "10006": 528, "distillationconf": 528, "blendcnn": [528, 559], "loss_sum": 528, "iter_bar": 528, "tqdm": 528, "desc": [528, 548], "teacher_logit": 528, "promis": [529, 548], "huge": 529, "bit": [529, 542, 549, 551], "heavi": 529, "booster": 529, "degrad": 529, "retrain": 529, "incorpor": [529, 557], "novel": 529, "builtin": 530, "program": [530, 535, 542], "addition": [530, 557], "enable_eager_execut": 530, "yaml_file_path": 530, "evaluation_result": 530, "evaluation_time_cost": 530, "partit": 530, "distributedsampl": 530, "train_sampl": 530, "train_dataset": 530, "num_replica": 530, "train_kwarg": 530, "adadelta": 530, "distributedoptim": 530, "named_paramet": 530, "broadcast_paramet": 530, "root_rank": 530, "broadcast_optimizer_st": 530, "set_epoch": 530, "batch_idx": 530, "nll_loss": 530, "log_interv": 530, "0f": 530, "tloss": 530, "6f": 530, "dry_run": 530, "test_func": 530, "host": 530, "num_of_process": 530, "002": 530, "ssh": 530, "readm": 530, "exactli": 530, "resnet50_v1": [530, 535], "resizecropimagenet": [530, 556], "realiz": [530, 541, 545, 552, 554], "tow": 530, "situat": 530, "node1": 530, "node2": 530, "TO": 530, "your_node1_nam": 530, "your_node2_nam": 530, "resnet50_fp32_pretrained_model": [530, 535], "nc_resnet50_v1": 530, "factor": [531, 547, 559], "oppos": 531, "entail": 531, "preserv": 531, "post_training_dynamic_qu": [531, 550], "post_training_static_qu": [531, 550, 557], "accuracy_criterion": [531, 545, 550, 554, 557, 558], "rel": [531, 550, 554, 557, 558, 559], "earli": [531, 551, 557, 558], "determinist": [531, 557], "wide": [532, 542, 551], "varieti": [532, 550, 557], "demonstr": [532, 535, 544, 548, 555], "incompat": 533, "88": [533, 554, 559], "80": [533, 555, 559], "pyobject": 533, "reinstal": 533, "importerror": 533, "libgl": 533, "apt": [533, 539], "yum": [533, 539], "opencv": 533, "conflict": 533, "pend": 533, "27": [533, 539, 559], "quick": [534, 558], "friendli": [534, 558], "let": [534, 550, 558], "up1": 534, "up2": 534, "valid_mixed_precis": 534, "concatv2": 534, "maxpool": 534, "avgpool": 534, "per_tensor": [534, 557, 558], "addn": 534, "grappler_optim": 534, "constfold": 534, "debug_stripp": 534, "primarili": 535, "subexpress": 535, "bfloat16": [535, 542, 552], "explicitli": [535, 536], "op_to_stor": 535, "cpx": 535, "clx": 535, "force_bf16": 535, "executable_nc_wrapp": 535, "consequ": [535, 542], "resnet50_measur": 535, "8280": 535, "2021": 535, "165": 535, "139": 535, "567": [535, 559], "sec": [535, 559], "fp32_optimized_model": 535, "3x": 535, "325": 535, "99": [535, 559], "56": [535, 559], "068": 535, "992": 535, "major": [536, 551], "concept": [536, 554], "custom_metr": 536, "refin": 536, "broad": 538, "snippet": 538, "product": [538, 542, 547, 549, 551, 554, 557], "upload": 538, "qlinearop": [538, 551], "qintegerop": [538, 551], "lasso": [538, 548], "plan": [538, 542], "frequent": 539, "ask": 539, "consolid": 539, "streamlin": 539, "scienc": 539, "anaconda": 539, "suit": [539, 555], "esri": 539, "apach": 540, "softwar": [540, 542, 547, 549, 553], "copyright": 540, "mit": 540, "accompani": 540, "wish": 540, "bibtex": 540, "misc": 540, "feng": 540, "tian": 540, "chuanqi": 540, "wang": 540, "guom": 540, "zhang": 540, "penghui": 540, "cheng": 540, "pengxin": 540, "yuan": 540, "haihao": 540, "shen": 540, "jiong": 540, "gong": 540, "titl": 540, "howpublish": 540, "year": 540, "logo": [540, 547], "atom": 540, "phi": 540, "pentium": 540, "vtune": 540, "corpor": [540, 547], "subsidiari": [540, 547], "brand": [540, 547], "claim": [540, 547], "popularli": 541, "label_map": 541, "decis": 541, "ap": 541, "pr": 541, "curv": 541, "target_boxes_num": 541, "str_label": 541, "int_label": 541, "inturn": 541, "cocomap": 541, "vocmap": 541, "categor": 541, "multiclass": 541, "multilabel": 541, "multi_metr": 541, "higher_is_bett": [541, 545, 558], "newmetr": 541, "reflect": [541, 547, 556], "recent": 542, "growth": 542, "complex": 542, "half": 542, "sixteen": 542, "bandwidth": 542, "3rd": [542, 549, 551, 552], "gen": [542, 549, 552], "codenam": 542, "avx512": [542, 551], "vcvtne2ps2bf16": 542, "vcvtneps2bf16": 542, "vdpbf16p": 542, "forc": [542, 552], "user_defined_funct": 542, "avx512_bf16": 542, "persist": 543, "brought": [543, 551], "tf2": 543, "h5": 543, "onnx_ml_pb2": 543, "hybridblock": 543, "0000": 543, "inc_model": 543, "saved_result": 543, "tflite": 544, "multi_object": 545, "peak": 545, "start_tim": 545, "_result_list": 545, "customobj": 545, "simultan": [546, 550], "arbitrari": 546, "gain": [546, 549], "benefit": [546, 548], "Of": 546, "cours": 546, "prune_conf": 546, "post_training_quantization_conf": 546, "quantization_aware_training_conf": 546, "configurationintel": 547, "platinum": [547, 559], "8380": [547, 559], "manufactur": 547, "m50cyp2sbstd": 547, "se5c6200": 547, "86b": 547, "0022": 547, "d64": 547, "2105220049": 547, "microcod": 547, "0xd0002b1": 547, "30ghz": 547, "3ghz": 547, "40": [547, 558, 559], "perf": 547, "256gb": 547, "16x16gb": 547, "ddr4": 547, "3200mt": 547, "nic": 547, "ethernet": 547, "10g": 547, "x550t": 547, "drive": 547, "1x": 547, "intel_ssdsc2kw01": 547, "953": 547, "9g": 547, "ct1000mx500ssd1": 547, "931": 547, "5g": 547, "publicli": 547, "degre": 547, "mark": 547, "trademark": 547, "briefli": 548, "maxim": [548, 557], "art": 548, "increasingli": 548, "crucial": 548, "rule": 548, "salient": 548, "nonzero": 548, "irregular": 548, "anywher": 548, "2in4": 548, "amper": 548, "gemm": 548, "ic": [548, 549], "oc": 548, "kh": 548, "kw": 548, "examin": 548, "lowest": 548, "head": 548, "fastform": 548, "formula": 548, "num_train_epoch": 548, "pbar": 548, "progressbar": 548, "n_total": 548, "n_gpu": 548, "gradient_accumulation_step": 548, "clip_grad_norm_": 548, "max_grad_norm": 548, "rate": [548, 551], "cv": 548, "plug": 549, "twitter": 549, "linkedin": 549, "zone": 549, "hug": 549, "land": 549, "gcp": 549, "aw": [549, 559], "azur": 549, "marketplac": 549, "pat": 549, "keynot": 549, "intelon": 549, "sep": 549, "alibaba": 549, "chines": 549, "grain": 549, "aug": 549, "purif": 549, "sacrif": 549, "jun": 549, "partner": 549, "democrat": 549, "apr": 549, "ecosystem": 549, "mar": 549, "feb": 549, "sigopt": 549, "jan": 549, "tutori": 549, "bilibili": 549, "ml": 549, "doubl": 549, "mlperf": 549, "reconstruct": 549, "abound": 549, "cern": 549, "gan": 549, "3dgan": 549, "4th": 549, "iml": 549, "workshop": 549, "highli": 549, "intelcaff": 549, "aris": 550, "tell": 550, "henc": 550, "quant_aware_train": 550, "op_type_list": 550, "use_bf16": [550, 552], "weight_compress": [550, 558], "initial_spars": [550, 558], "target_spars": [550, 558], "98": [550, 559], "prune_typ": [550, 558], "basic_magnitud": [550, 558], "start_epoch": [550, 558], "end_epoch": [550, 558], "update_frequ": 550, "prune_domain": 550, "tile_pattern_1x1": 550, "inter_num_of_thread": 550, "intra_num_of_thread": 550, "graph_optimization_level": 550, "disable_al": 550, "veri": [551, 557], "invent": 551, "int4": 551, "cost": 551, "theoret": 551, "affin": 551, "zeropoint": 551, "overflow": 551, "solv": [551, 553, 557], "unseen": 551, "peopl": 551, "emul": 551, "pain": 551, "lossi": 551, "understand": [551, 555], "philosophi": 551, "val_dataset": 551, "val_dataload": 551, "worker": 551, "ping_memori": 551, "enhanc": 552, "cast": [552, 556], "bf16wrapper": 552, "retrac": 552, "site": 553, "assist": 553, "comparison": [553, 555], "sed": 553, "your_script": 553, "backbon": 554, "interact": 554, "mechan": 554, "sigopt_api_token": [554, 557], "sigopt_project_id": [554, 557], "sigopt_experiment_id": 554, "nc": [554, 557], "login": 554, "certain": 554, "suffici": 554, "ordinari": 554, "capac": 554, "sigopt_experiment_nam": [554, 557], "receiv": 554, "analysi": 554, "8266": 554, "8372": 554, "2132": 554, "83": [554, 559], "7495": 554, "8299": 554, "8294": 554, "85": [554, 559], "0837": 554, "8291": 554, "4469": 554, "visual": [555, 557], "discov": 555, "why": 555, "valuabl": 555, "instrument": 555, "writer": 555, "_pre_eval_hook": 555, "submodul": 555, "whitelist": 555, "_recordingobserv": 555, "output_tensors_dict": 555, "current_it": 555, "get_tensor_valu": 555, "_observer_forward_hook": 555, "_add_observer_": 555, "named_children": 555, "leaf": 555, "add_modul": 555, "register_forward_hook": 555, "dump_tim": 555, "summarywrit": 555, "_acc": 555, "tune_": 555, "add_graph": 555, "get_observer_dict": 555, "observer_dict": 555, "is_quant": 555, "add_histogram": 555, "bind_al": 555, "logdir_spec": 555, "tune_0_acc0": 555, "tune_1": 555, "tune_1_acc0": 555, "79": [555, 559], "image_recognit": 555, "run_tuning_dump_tensor": 555, "sh": 555, "four": 555, "baseline_acc_0": 555, "776": 555, "tune_1_acc_0": 555, "095": 555, "runs_v3": 555, "inceptionv3": 555, "v0": 555, "cg": 555, "op_wis": [555, 557, 558], "bash": 555, "run_tun": 555, "topologi": 555, "inception_v3": 555, "dataset_loc": 555, "inceptionv3_fp32_pretrained_model": 555, "output_model": 555, "nc_inceptionv3": 555, "inceptionv3_dump_tensor": 555, "poor": 555, "disappear": 555, "randomcrop": 556, "cropres": 556, "decodeimag": 556, "jpeg": 556, "encodejp": 556, "alignimagechannel": 556, "68": [556, 559], "116": 556, "78": [556, 559], "103": 556, "94": [556, 559], "017": 556, "bilinearimagenet": [556, 558], "topilimag": 556, "padding_mod": 556, "border": 556, "colorjitt": 556, "bright": 556, "satur": 556, "hue": 556, "jitter": 556, "tondarrai": 556, "max_trail": 557, "scale_propagation_max_pool": 557, "scale_propagation_concat": 557, "first_conv_or_matmul_quant": 557, "2000": 557, "tf_record": 557, "model_wis": [557, 558], "conv1": [557, 558], "pool1": 557, "conv2": 557, "guarante": 557, "classic": 557, "black": 557, "come": 557, "discret": 557, "compli": 557, "posterior": 557, "focu": 557, "short": 557, "never": 557, "loglevel": 557, "endlessli": 557, "idea": 557, "primari": 557, "optimum": 557, "redund": 557, "protect": 557, "especi": 557, "smbo": 557, "hyperparamet": 557, "appl": 557, "surrog": 557, "quantil": 557, "x1": 557, "x2": 557, "densiti": 557, "parzen": 557, "greatest": 557, "hour": 557, "dai": 557, "perspect": 557, "abctunestrategi": 557, "mobilenet_v1": 558, "onnxrt_integ": 558, "onnxrt_qlinear": 558, "image_tensor": 558, "subsect": 558, "hyper": 558, "06": [558, 559], "beta_1": 558, "beta_2": 558, "999": 558, "epsilon": 558, "sparsecategoricalcrossentropi": 558, "reduct": 558, "sum_over_batch_s": 558, "from_logit": 558, "54": [558, 559], "19": [558, 559], "90": [558, 559], "nesterov": 558, "weight_decai": 558, "overal": 558, "ye": 559, "rnn": 559, "unet": 559, "09": 559, "performancethroughput": 559, "efficientnet": 559, "91": 559, "43": 559, "69": 559, "32x": 559, "cnn": 559, "incept": 559, "37": 559, "65": 559, "38": 559, "77": 559, "53": 559, "57x": 559, "46": 559, "61": 559, "58x": 559, "resnet101": 559, "39": 559, "63": 559, "11x": 559, "51x": 559, "26": 559, "59": 559, "23": 559, "06x": 559, "25x": 559, "70": 559, "44": 559, "00": 559, "163": 559, "133": 559, "22x": 559, "73": 559, "97": 559, "49": 559, "111": 559, "20x": 559, "v3": 559, "43x": 559, "v4": 559, "18": 559, "53x": 559, "36": 559, "33x": 559, "44x": 559, "374": 559, "226": 559, "66x": 559, "92": 559, "41x": 559, "fashion": 559, "359": 559, "244": 559, "47x": 559, "172": 559, "66": 559, "98x": 559, "153": 559, "76x": 559, "151": 559, "112": 559, "35x": 559, "26x": 559, "72": 559, "56x": 559, "82": 559, "93x": 559, "vgg16": 559, "89": 559, "178": 559, "14x": 559, "vgg19": 559, "156": 559, "18x": 559, "albert": 559, "23x": 559, "barthez": 559, "81": 559, "86": 559, "82x": 559, "203": 559, "01x": 559, "216": 559, "102": 559, "10x": 559, "sst2": 559, "218": 559, "stsb": 559, "57": 559, "48": 559, "49x": 559, "93": 559, "70x": 559, "50x": 559, "40x": 559, "3878": 559, "3717": 559, "04x": 559, "camembert": 559, "188": 559, "91x": 559, "ctrl": 559, "deberta": 559, "124": 559, "81x": 559, "347": 559, "73x": 559, "382": 559, "198": 559, "flaubert": 559, "561": 559, "35": 559, "370": 559, "52x": 559, "hubert": 559, "84": 559, "36x": 559, "409": 559, "181": 559, "longform": 559, "28x": 559, "mbart": 559, "16x": 559, "639": 559, "490": 559, "31x": 559, "lvwerra": 559, "pegasu": 559, "samsum": 559, "19x": 559, "peleenet": 559, "419": 559, "316": 559, "resnet18": 559, "686": 559, "332": 559, "07x": 559, "611": 559, "333": 559, "83x": 559, "327": 559, "162": 559, "resnext101_32x8d": 559, "175": 559, "88x": 559, "197": 559, "99x": 559, "se_resnext50_32x4d": 559, "308": 559, "144": 559, "13x": 559, "squeezebert": 559, "186": 559, "155": 559, "78x": 559, "transfo": 559, "xl": 559, "37x": 559, "wave2vec2": 559, "60": 559, "58": 559, "21x": 559, "114": 559, "15x": 559, "yolo": 559, "29x": 559, "690": 559, "330": 559, "09x": 559, "614": 559, "334": 559, "84x": 559, "54x": 559, "410": 559, "168": 559, "finetun": 559, "resnext101_32x16d_wsl": 559, "1189": 559, "680": 559, "75x": 559, "677": 559, "381": 559, "59x": 559, "alexnet": 559, "960": 559, "469": 559, "17": 559, "05x": 559, "962": 559, "466": 559, "arcfac": 559, "235": 559, "130": 559, "294": 559, "34x": 559, "604": 559, "51": 559, "80x": 559, "caffenet": 559, "1501": 559, "536": 559, "1493": 559, "533": 559, "1372": 559, "541": 559, "480": 559, "1250": 559, "753": 559, "1130": 559, "748": 559, "emot": 559, "ferplu": 559, "336": 559, "65x": 559, "fcn": 559, "googlenet": 559, "740": 559, "587": 559, "770": 559, "824": 559, "601": 559, "819": 559, "597": 559, "45x": 559, "613": 559, "506": 559, "2454": 559, "1543": 559, "2164": 559, "1564": 559, "38x": 559, "2147": 559, "1046": 559, "1877": 559, "1054": 559, "mobilenetv2": 559, "2751": 559, "1797": 559, "2656": 559, "1835": 559, "7615": 559, "7646": 559, "764": 559, "901": 559, "434": 559, "141": 559, "7614": 559, "575": 559, "952": 559, "433": 559, "7226": 559, "7229": 559, "761": 559, "432": 559, "615": 559, "722": 559, "032": 559, "894": 559, "885": 559, "454": 559, "95x": 559, "603": 559, "455": 559, "644": 559, "636": 559, "254": 559, "791": 559, "shufflenet": 559, "2298": 559, "55": 559, "1480": 559, "55x": 559, "1951": 559, "1490": 559, "squeezenet": 559, "2588": 559, "1605": 559, "61x": 559, "2566": 559, "1936": 559, "725": 559, "570": 559, "27x": 559, "666": 559, "539": 559, "641": 559, "519": 559, "633": 559, "492": 559, "542": 559, "401": 559, "68x": 559, "tini": 559, "yolov3": 559, "648": 559, "518": 559, "221": 559, "319": 559, "307": 559, "30x": 559, "yolov4": 559, "zfnet": 559, "459": 559, "261": 559, "460": 559, "264": 559, "74x": 559, "441": 559, "337": 559, "272": 559, "211": 559, "152": 559, "423": 559, "180": 559, "311": 559, "69x": 559, "taskdataset": 559, "accuracyspars": 559, "ratiospars": 559, "commentsbalanc": 559, "unbalanc": 559, "classificationimagenet": 559, "76top": 559, "13top": 559, "magnitudepost": 559, "magnitudequant": 559, "answeringsquad": 559, "34f1": 559, "2x1": 559, "lassounbalanc": 559, "classificationmnli": 559, "mm": 559, "lockbalanc": 559, "classificationsst": 559, "32accuraci": 559, "sensitivitybalanc": 559, "classificationqqp": 559, "classificationqnli": 559, "54accuraci": 559, "em": 559, "87f1": 559, "momentumunbalanc": 559, "momentumbalanc": 559, "classificationmrpc": 559, "52f1": 559, "61accuraci": 559, "7965": 559, "wideresnet40": 559, "9522": 559, "8178": 559, "0213": 559, "8235": 559, "027": 559, "5494": 559, "7153": 559, "5540": 559, "0046": 559, "5523": 559, "0029": 559, "vgg": 559, "7022": 559, "7415": 559, "7025": 559, "0003": 559, "6739": 559, "7399": 559, "6845": 559, "0106": 559, "7034": 559, "8382": 559, "bilstm": 559, "sst": 559, "8314": 559, "9403": 559, "9048": 559, "0734": 559, "7323": 559, "8256": 559, "8084": 559, "8814": 559, "7442": 559, "8371": 559, "0119": 559, "0115": 559, "tinybert": 559, "8018": 559, "8044": 559, "8363": 559, "8411": 559, "8025": 559, "8074": 559, "0007": 559, "0030": 559, "8626": 559, "8213": 559, "9091": 559, "8782": 559, "8684": 559, "8259": 559, "0058": 559, "distilroberta": 559, "6057": 559, "6455": 559, "6187": 559, "0130": 559, "c6i": 559, "2xlarg": 559, "c6a": 559, "c6g": 559, "a100cuda": 559}, "objects": {"": [[31, 0, 0, "-", "6ece06672ed3_v1_14"], [32, 0, 0, "-", "6f0d0f71d92e_v1_13"], [33, 0, 0, "-", "9e89549a08c8_v1_11"], [34, 0, 0, "-", "block_mask"], [35, 0, 0, "-", "env"], [291, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[31, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [31, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[35, 1, 1, "", "run_migrations_offline"], [35, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[291, 2, 1, "", "Benchmark"], [291, 2, 1, "", "DistillationConfig"], [291, 2, 1, "", "Pruning"], [37, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [176, 0, 0, "-", "benchmark"], [179, 0, 0, "-", "conf"], [181, 0, 0, "-", "config"], [182, 0, 0, "-", "contrib"], [207, 0, 0, "-", "data"], [255, 0, 0, "-", "experimental"], [298, 0, 0, "-", "metric"], [300, 0, 0, "-", "mix_precision"], [302, 0, 0, "-", "model"], [310, 0, 0, "-", "objective"], [313, 0, 0, "-", "pruners"], [317, 0, 0, "-", "pruning"], [318, 0, 0, "-", "quantization"], [325, 0, 0, "-", "strategy"], [335, 0, 0, "-", "training"], [339, 0, 0, "-", "utils"], [475, 0, 0, "-", "ux"], [520, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[291, 3, 1, "", "on_epoch_begin"], [291, 3, 1, "", "on_epoch_end"], [291, 3, 1, "", "on_step_begin"], [291, 3, 1, "", "on_step_end"]], "neural_compressor.adaptor": [[36, 0, 0, "-", "adaptor"], [38, 0, 0, "-", "keras"], [39, 0, 0, "-", "keras_utils"], [41, 0, 0, "-", "mxnet"], [42, 0, 0, "-", "mxnet_utils"], [44, 0, 0, "-", "onnxrt"], [46, 0, 0, "-", "ox_utils"], [69, 0, 0, "-", "pytorch"], [70, 0, 0, "-", "query"], [71, 0, 0, "-", "tensorflow"], [131, 0, 0, "-", "tf_utils"], [168, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[36, 2, 1, "", "Adaptor"], [36, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[36, 3, 1, "", "convert"], [36, 3, 1, "", "evaluate"], [36, 3, 1, "", "inspect_tensor"], [36, 3, 1, "", "quantize"], [36, 3, 1, "", "quantize_input"], [36, 3, 1, "", "query_fused_patterns"], [36, 3, 1, "", "query_fw_capability"], [36, 3, 1, "", "save"], [36, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[38, 2, 1, "", "KerasAdaptor"], [38, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[38, 3, 1, "", "convert"], [38, 3, 1, "", "evaluate"], [38, 3, 1, "", "get_optype_wise_ability"], [38, 3, 1, "", "inspect_tensor"], [38, 3, 1, "", "quantize"], [38, 3, 1, "", "quantize_input"], [38, 3, 1, "", "query_fw_capability"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[38, 3, 1, "", "get_op_types"], [38, 3, 1, "", "get_op_types_by_precision"], [38, 3, 1, "", "get_precisions"], [38, 3, 1, "", "get_quantization_capability"], [38, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[40, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[41, 2, 1, "", "MXNetQuery"], [41, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[41, 3, 1, "", "get_fuse_patterns"], [41, 3, 1, "", "get_mixed_precision_combination"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_precisions"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[41, 3, 1, "", "evaluate"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover_tuned_model"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[43, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, 2, 1, "", "CalibCollector"], [43, 2, 1, "", "OpType"], [43, 2, 1, "", "TensorCollector"], [43, 1, 1, "", "calib_model"], [43, 1, 1, "", "check_mx_version"], [43, 1, 1, "", "distribute_calib_tensors"], [43, 1, 1, "", "ensure_list"], [43, 1, 1, "", "fuse"], [43, 1, 1, "", "is_model_quantized"], [43, 1, 1, "", "isiterable"], [43, 1, 1, "", "make_module"], [43, 1, 1, "", "make_nc_model"], [43, 1, 1, "", "make_symbol_block"], [43, 1, 1, "", "parse_tune_config"], [43, 1, 1, "", "prepare_model_data"], [43, 1, 1, "", "quantize_sym_model"], [43, 1, 1, "", "query_quantizable_nodes"], [43, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[44, 2, 1, "", "ONNXRTQuery"], [44, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [44, 2, 1, "", "ONNXRT_QDQAdaptor"], [44, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [44, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[44, 3, 1, "", "get_graph_optimization"], [44, 3, 1, "", "get_op_types"], [44, 3, 1, "", "get_op_types_by_precision"], [44, 3, 1, "", "get_precisions"], [44, 3, 1, "", "get_quantization_capability"], [44, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[44, 3, 1, "", "evaluate"], [44, 3, 1, "", "inspect_tensor"], [44, 3, 1, "", "quantize"], [44, 3, 1, "", "query_fw_capability"], [44, 3, 1, "", "recover"], [44, 3, 1, "", "save"], [44, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[45, 0, 0, "-", "calibration"], [58, 0, 0, "-", "operators"], [67, 0, 0, "-", "quantizer"], [68, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[45, 3, 1, "", "augment_graph"], [45, 3, 1, "", "calculate_quantization_params"], [45, 3, 1, "", "calculate_scale_zeropoint"], [45, 3, 1, "", "dump_calibration"], [45, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[47, 0, 0, "-", "activation"], [48, 0, 0, "-", "argmax"], [49, 0, 0, "-", "attention"], [50, 0, 0, "-", "binary_op"], [51, 0, 0, "-", "concat"], [52, 0, 0, "-", "conv"], [53, 0, 0, "-", "direct_q8"], [54, 0, 0, "-", "embed_layernorm"], [55, 0, 0, "-", "gather"], [56, 0, 0, "-", "gavgpool"], [57, 0, 0, "-", "gemm"], [59, 0, 0, "-", "lstm"], [60, 0, 0, "-", "matmul"], [61, 0, 0, "-", "maxpool"], [62, 0, 0, "-", "ops"], [63, 0, 0, "-", "pad"], [64, 0, 0, "-", "pooling"], [65, 0, 0, "-", "resize"], [66, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, 1, 1, "", "op_registry"]], "neural_compressor.adaptor.ox_utils.util": [[68, 2, 1, "", "QuantFormat"], [68, 2, 1, "", "QuantType"], [68, 2, 1, "", "QuantizationMode"], [68, 2, 1, "", "QuantizedInitializer"], [68, 2, 1, "", "QuantizedValue"], [68, 2, 1, "", "QuantizedValueType"], [68, 1, 1, "", "attribute_to_kwarg"], [68, 1, 1, "", "cast_tensor"], [68, 1, 1, "", "find_by_name"], [68, 1, 1, "", "quantize_data"], [68, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[69, 2, 1, "", "PyTorchAdaptor"], [69, 2, 1, "", "PyTorchQuery"], [69, 2, 1, "", "PyTorch_FXAdaptor"], [69, 2, 1, "", "PyTorch_IPEXAdaptor"], [69, 2, 1, "", "TemplateAdaptor"], [69, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[69, 3, 1, "", "evaluate"], [69, 3, 1, "", "get_non_quant_modules"], [69, 3, 1, "", "inspect_tensor"], [69, 3, 1, "", "is_fused_child"], [69, 3, 1, "", "is_fused_op"], [69, 3, 1, "", "is_last_fused_child"], [69, 3, 1, "", "quantize"], [69, 3, 1, "", "query_fw_capability"], [69, 3, 1, "", "save"], [69, 3, 1, "", "set_tensor"], [69, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[69, 3, 1, "", "get_op_types"], [69, 3, 1, "", "get_op_types_by_precision"], [69, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[69, 3, 1, "", "calculate_op_sensitivity"], [69, 3, 1, "", "convert_sub_graph"], [69, 3, 1, "", "evaluate"], [69, 3, 1, "", "fuse_fx_model"], [69, 3, 1, "", "prepare_sub_graph"], [69, 3, 1, "", "quantize"], [69, 3, 1, "", "query_fw_capability"], [69, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[69, 3, 1, "", "evaluate"], [69, 3, 1, "", "inspect_tensor"], [69, 3, 1, "", "quantize"], [69, 3, 1, "", "query_fw_capability"], [69, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[69, 3, 1, "", "calculate_hessian_trace"], [69, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[70, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[70, 3, 1, "", "get_fuse_patterns"], [70, 3, 1, "", "get_mixed_precision_combination"], [70, 3, 1, "", "get_op_types"], [70, 3, 1, "", "get_precisions"], [70, 3, 1, "", "get_quantization_capability"], [70, 3, 1, "", "get_version"], [70, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[71, 2, 1, "", "TensorFlowAdaptor"], [71, 2, 1, "", "TensorflowQuery"], [71, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[71, 3, 1, "", "calculate_op_sensitivity"], [71, 3, 1, "", "convert"], [71, 3, 1, "", "evaluate"], [71, 3, 1, "", "fused_node_mapping"], [71, 3, 1, "", "get_optype_wise_ability"], [71, 3, 1, "", "inspect_activation"], [71, 3, 1, "", "inspect_tensor"], [71, 3, 1, "", "inspect_weight_and_bias"], [71, 3, 1, "", "qat_convert"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "quantize_input"], [71, 3, 1, "", "query_fw_capability"], [71, 3, 1, "", "recover_tuned_model"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set_tensor"], [71, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[71, 3, 1, "", "generate_internal_patterns"], [71, 3, 1, "", "get_eightbit_patterns"], [71, 3, 1, "", "get_fuse_patterns"], [71, 3, 1, "", "get_mixed_precision_combination"], [71, 3, 1, "", "get_op_types"], [71, 3, 1, "", "get_op_types_by_precision"], [71, 3, 1, "", "get_precisions"], [71, 3, 1, "", "get_quantization_capability"], [71, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[71, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[72, 0, 0, "-", "graph_converter"], [73, 0, 0, "-", "graph_converter_without_calib"], [112, 0, 0, "-", "graph_rewriter"], [130, 0, 0, "-", "graph_util"], [132, 0, 0, "-", "quantize_graph"], [159, 0, 0, "-", "quantize_graph_common"], [162, 0, 0, "-", "transform_graph"], [165, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[75, 0, 0, "-", "bf16"], [100, 0, 0, "-", "generic"], [111, 0, 0, "-", "graph_base"], [120, 0, 0, "-", "int8"], [126, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[74, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, 0, 0, "-", "convert_add_to_biasadd"], [77, 0, 0, "-", "convert_layout"], [78, 0, 0, "-", "convert_leakyrelu"], [79, 0, 0, "-", "convert_nan_to_random"], [80, 0, 0, "-", "convert_placeholder_to_const"], [81, 0, 0, "-", "dequantize_cast_optimizer"], [82, 0, 0, "-", "dilated_contraction"], [83, 0, 0, "-", "dummy_biasadd"], [84, 0, 0, "-", "expanddims_optimizer"], [85, 0, 0, "-", "fetch_weight_from_reshape"], [86, 0, 0, "-", "fold_batch_norm"], [87, 0, 0, "-", "fold_constant"], [88, 0, 0, "-", "fuse_biasadd_add"], [89, 0, 0, "-", "fuse_column_wise_mul"], [90, 0, 0, "-", "fuse_conv_with_math"], [91, 0, 0, "-", "fuse_decomposed_bn"], [92, 0, 0, "-", "fuse_decomposed_in"], [93, 0, 0, "-", "fuse_gelu"], [94, 0, 0, "-", "fuse_layer_norm"], [95, 0, 0, "-", "fuse_pad_with_conv"], [96, 0, 0, "-", "fuse_pad_with_fp32_conv"], [97, 0, 0, "-", "fuse_reshape_transpose"], [98, 0, 0, "-", "graph_cse_optimizer"], [99, 0, 0, "-", "grappler_pass"], [101, 0, 0, "-", "insert_print_node"], [102, 0, 0, "-", "move_squeeze_after_relu"], [103, 0, 0, "-", "pre_optimize"], [104, 0, 0, "-", "remove_training_nodes"], [105, 0, 0, "-", "rename_batch_norm"], [106, 0, 0, "-", "split_shared_input"], [107, 0, 0, "-", "strip_equivalent_nodes"], [108, 0, 0, "-", "strip_unused_nodes"], [109, 0, 0, "-", "switch_optimizer"], [110, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[80, 3, 1, "", "do_transformation"], [80, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[86, 3, 1, "", "do_transformation"], [86, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[87, 3, 1, "", "check_all_folded"], [87, 3, 1, "", "check_const_inputs"], [87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, 1, 1, "", "get_const_dim_count"], [91, 1, 1, "", "node_from_map"], [91, 1, 1, "", "node_name_from_input"], [91, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, 1, 1, "", "get_const_dim_count"], [92, 1, 1, "", "node_from_map"], [92, 1, 1, "", "node_name_from_input"], [92, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, 2, 1, "", "FuseLayerNormOptimizer"], [94, 1, 1, "", "node_from_map"], [94, 1, 1, "", "node_name_from_input"], [94, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[113, 0, 0, "-", "freeze_fake_quant"], [114, 0, 0, "-", "freeze_value"], [115, 0, 0, "-", "freeze_value_without_calib"], [116, 0, 0, "-", "fuse_conv_redundant_dequantize"], [117, 0, 0, "-", "fuse_conv_requantize"], [118, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [119, 0, 0, "-", "fuse_matmul_requantize"], [121, 0, 0, "-", "meta_op_optimizer"], [122, 0, 0, "-", "post_hostconst_converter"], [123, 0, 0, "-", "post_quantized_op_cse"], [124, 0, 0, "-", "rnn_convert"], [125, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[114, 3, 1, "", "do_transformation"], [114, 3, 1, "", "generate_output_graph"], [114, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[115, 3, 1, "", "generate_output_graph"], [115, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [119, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [119, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [119, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[127, 0, 0, "-", "insert_qdq_pattern"], [128, 0, 0, "-", "merge_duplicated_qdq"], [129, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, 2, 1, "", "GraphAnalyzer"], [130, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[130, 3, 1, "", "add_node"], [130, 3, 1, "", "dump_graph"], [130, 3, 1, "", "get_graph_input_output"], [130, 4, 1, "", "graph"], [130, 3, 1, "", "has_positive_input"], [130, 3, 1, "", "parse_graph"], [130, 3, 1, "", "query_fusion_pattern_nodes"], [130, 3, 1, "", "remove_node"], [130, 3, 1, "", "remove_node_with_single_input_output"], [130, 3, 1, "", "replace_const_node"], [130, 3, 1, "", "replace_constant_graph_with_constant_node"], [130, 3, 1, "", "replace_node"], [130, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[130, 3, 1, "", "compare_node_attr"], [130, 3, 1, "", "create_constant_node"], [130, 3, 1, "", "create_node"], [130, 3, 1, "", "node_name_from_input"], [130, 3, 1, "", "set_attr_bool"], [130, 3, 1, "", "set_attr_dtype"], [130, 3, 1, "", "set_attr_float"], [130, 3, 1, "", "set_attr_int"], [130, 3, 1, "", "set_attr_int_list"], [130, 3, 1, "", "set_attr_string"], [130, 3, 1, "", "set_attr_string_list"], [130, 3, 1, "", "set_attr_tensor"], [130, 3, 1, "", "set_attr_type_list"], [130, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[134, 0, 0, "-", "qat"], [150, 0, 0, "-", "qdq"], [152, 0, 0, "-", "quantize_graph_base"], [153, 0, 0, "-", "quantize_graph_bn"], [154, 0, 0, "-", "quantize_graph_concatv2"], [155, 0, 0, "-", "quantize_graph_conv"], [156, 0, 0, "-", "quantize_graph_for_intel_cpu"], [157, 0, 0, "-", "quantize_graph_matmul"], [158, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[133, 0, 0, "-", "fake_quantize"], [135, 0, 0, "-", "quantize_config"], [136, 0, 0, "-", "quantize_helper"], [137, 0, 0, "-", "quantize_layers"], [142, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, 2, 1, "", "FakeQuantize"], [133, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[133, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[133, 3, 1, "", "from_config"], [133, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[135, 3, 1, "", "add_quantize_recipe"], [135, 3, 1, "", "clear_quantize_recipe"], [135, 3, 1, "", "get_quantize_recipe"], [135, 3, 1, "", "is_empty"], [135, 3, 1, "", "query_layer"], [135, 3, 1, "", "remove_layer"], [135, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, 1, 1, "", "init_quantize_config"], [136, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[138, 0, 0, "-", "optimize_layer"], [139, 0, 0, "-", "quantize_layer_add"], [140, 0, 0, "-", "quantize_layer_base"], [141, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, 2, 1, "", "QuantizeWrapper"], [142, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[142, 3, 1, "", "build"], [142, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[142, 3, 1, "", "build"], [142, 3, 1, "", "call"], [142, 3, 1, "", "compute_output_shape"], [142, 3, 1, "", "from_config"], [142, 3, 1, "", "get_config"], [142, 4, 1, "", "losses"], [142, 4, 1, "", "non_trainable_weights"], [142, 3, 1, "", "query_input_index"], [142, 4, 1, "", "trainable"], [142, 4, 1, "", "trainable_weights"], [142, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[143, 0, 0, "-", "fuse_qdq_bn"], [144, 0, 0, "-", "fuse_qdq_concatv2"], [145, 0, 0, "-", "fuse_qdq_conv"], [146, 0, 0, "-", "fuse_qdq_deconv"], [147, 0, 0, "-", "fuse_qdq_in"], [148, 0, 0, "-", "fuse_qdq_matmul"], [149, 0, 0, "-", "fuse_qdq_pooling"], [151, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[143, 3, 1, "", "apply_the_transform"], [143, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[144, 3, 1, "", "apply_the_transform"], [144, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[145, 3, 1, "", "apply_the_transform"], [145, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[148, 3, 1, "", "apply_batchmatmulv2_fusion"], [148, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [148, 3, 1, "", "apply_matmul_biasadd_fusion"], [148, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [148, 3, 1, "", "apply_the_transform"], [148, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[151, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, 2, 1, "", "QuantizeGraphBase"], [152, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[152, 3, 1, "", "do_transform"], [152, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[152, 3, 1, "", "add_output_graph_node"], [152, 3, 1, "", "apply_the_transform"], [152, 3, 1, "", "create_nodes_map"], [152, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[153, 3, 1, "", "apply_the_transform"], [153, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[154, 3, 1, "", "apply_the_transform"], [154, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[155, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[156, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[157, 3, 1, "", "apply_the_transform"], [157, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[158, 3, 1, "", "apply_the_transform"], [158, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[159, 3, 1, "", "copy_attr"], [159, 3, 1, "", "create_constant_node"], [159, 3, 1, "", "create_node"], [159, 3, 1, "", "ensure_tensor_name_has_port"], [159, 3, 1, "", "get_sorted_graph"], [159, 3, 1, "", "node_name_from_input"], [159, 3, 1, "", "remove_training_nodes"], [159, 3, 1, "", "set_attr_bool"], [159, 3, 1, "", "set_attr_dtype"], [159, 3, 1, "", "set_attr_float"], [159, 3, 1, "", "set_attr_int"], [159, 3, 1, "", "set_attr_string"], [159, 3, 1, "", "set_attr_string_list"], [159, 3, 1, "", "set_attr_tensor"], [159, 3, 1, "", "set_attr_type_list"], [159, 3, 1, "", "split_shared_inputs"], [159, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[160, 0, 0, "-", "bias_correction"], [161, 0, 0, "-", "graph_transform_base"], [163, 0, 0, "-", "insert_logging"], [164, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[160, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[163, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[164, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[165, 1, 1, "", "disable_random"], [165, 1, 1, "", "get_tensor_by_name"], [165, 1, 1, "", "get_tensor_val_from_graph_node"], [165, 1, 1, "", "is_ckpt_format"], [165, 1, 1, "", "is_saved_model_format"], [165, 1, 1, "", "iterator_sess_run"], [165, 1, 1, "", "read_graph"], [165, 1, 1, "", "strip_equivalent_nodes"], [165, 1, 1, "", "strip_unused_nodes"], [165, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[166, 0, 0, "-", "bf16_convert"], [167, 0, 0, "-", "hawq_metric"], [169, 0, 0, "-", "onnx"], [170, 0, 0, "-", "symbolic_trace"], [171, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, 2, 1, "", "HessianTrace"], [167, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[167, 3, 1, "", "get_act_gap"], [167, 3, 1, "", "get_avg_traces"], [167, 3, 1, "", "is_fused_module"], [167, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[171, 1, 1, "", "append_attr"], [171, 1, 1, "", "get_embedding_contiguous"], [171, 1, 1, "", "get_mse_order_per_fp32"], [171, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[174, 2, 1, "", "Algorithm"], [174, 2, 1, "", "AlgorithmScheduler"], [172, 0, 0, "-", "algorithm"], [174, 1, 1, "", "algorithm_registry"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 2, 1, "", "Algorithm"], [172, 2, 1, "", "AlgorithmScheduler"], [172, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[175, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[176, 2, 1, "", "Benchmark"], [176, 1, 1, "", "fit"]], "neural_compressor.conf": [[177, 0, 0, "-", "config"], [178, 0, 0, "-", "dotdict"], [180, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[177, 2, 1, "", "Benchmark_Conf"], [177, 2, 1, "", "Conf"], [177, 2, 1, "", "DefaultConf"], [177, 2, 1, "", "Distillation_Conf"], [177, 2, 1, "", "Graph_Optimization_Conf"], [177, 2, 1, "", "MixedPrecision_Conf"], [177, 2, 1, "", "NASConfig"], [177, 2, 1, "", "Pruning_Conf"], [177, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[178, 2, 1, "", "DotDict"], [178, 1, 1, "", "deep_get"], [178, 1, 1, "", "deep_set"]], "neural_compressor.config": [[181, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[183, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[184, 0, 0, "-", "sigopt"], [185, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[184, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[184, 3, 1, "", "next_tune_cfg"], [184, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[185, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[185, 3, 1, "", "stop"], [185, 3, 1, "", "traverse"]], "neural_compressor.data": [[207, 2, 1, "", "BaseTransform"], [207, 2, 1, "", "DataLoader"], [207, 2, 1, "", "Dataset"], [207, 2, 1, "", "Datasets"], [207, 2, 1, "", "FILTERS"], [207, 2, 1, "", "Filter"], [207, 2, 1, "", "IterableDataset"], [207, 2, 1, "", "Postprocess"], [207, 2, 1, "", "TRANSFORMS"], [190, 0, 0, "-", "dataloaders"], [207, 1, 1, "", "dataset_registry"], [202, 0, 0, "-", "datasets"], [207, 1, 1, "", "filter_registry"], [206, 0, 0, "-", "filters"], [207, 1, 1, "", "transform_registry"], [210, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[207, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[190, 2, 1, "", "DataLoader"], [186, 0, 0, "-", "base_dataloader"], [187, 0, 0, "-", "dataloader"], [188, 0, 0, "-", "default_dataloader"], [189, 0, 0, "-", "fetcher"], [191, 0, 0, "-", "mxnet_dataloader"], [192, 0, 0, "-", "onnxrt_dataloader"], [193, 0, 0, "-", "pytorch_dataloader"], [194, 0, 0, "-", "sampler"], [195, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[186, 3, 1, "", "batch"], [186, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[187, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, 2, 1, "", "DefaultDataLoader"], [188, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[188, 3, 1, "", "batch"], [188, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[189, 2, 1, "", "Fetcher"], [189, 2, 1, "", "IndexFetcher"], [189, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, 2, 1, "", "ONNXRTBertDataLoader"], [192, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[194, 2, 1, "", "BatchSampler"], [194, 2, 1, "", "IterableSampler"], [194, 2, 1, "", "Sampler"], [194, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, 2, 1, "", "TFDataDataLoader"], [195, 2, 1, "", "TensorflowBertDataLoader"], [195, 2, 1, "", "TensorflowDataLoader"], [195, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[195, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[202, 2, 1, "", "Dataset"], [202, 2, 1, "", "Datasets"], [202, 2, 1, "", "IterableDataset"], [196, 0, 0, "-", "bert_dataset"], [197, 0, 0, "-", "coco_dataset"], [198, 0, 0, "-", "dataset"], [202, 1, 1, "", "dataset_registry"], [199, 0, 0, "-", "dummy_dataset"], [200, 0, 0, "-", "dummy_dataset_v2"], [201, 0, 0, "-", "imagenet_dataset"], [203, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[196, 2, 1, "", "InputFeatures"], [196, 2, 1, "", "ONNXRTBertDataset"], [196, 2, 1, "", "ParseDecodeBert"], [196, 2, 1, "", "PytorchBertDataset"], [196, 2, 1, "", "TensorflowBertDataset"], [196, 2, 1, "", "TensorflowModelZooBertDataset"], [196, 1, 1, "", "convert_examples_to_features"], [196, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[196, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[197, 2, 1, "", "COCONpy"], [197, 2, 1, "", "COCORaw"], [197, 2, 1, "", "COCORecordDataset"], [197, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[198, 2, 1, "", "CIFAR10"], [198, 2, 1, "", "CIFAR100"], [198, 2, 1, "", "Dataset"], [198, 2, 1, "", "Datasets"], [198, 2, 1, "", "FashionMNIST"], [198, 2, 1, "", "ImageFolder"], [198, 2, 1, "", "IterableDataset"], [198, 2, 1, "", "MNIST"], [198, 2, 1, "", "MXNetCIFAR10"], [198, 2, 1, "", "MXNetCIFAR100"], [198, 2, 1, "", "MXNetDatasets"], [198, 2, 1, "", "MXNetFashionMNIST"], [198, 2, 1, "", "MXNetImageFolder"], [198, 2, 1, "", "MXNetMNIST"], [198, 2, 1, "", "ONNXRTITDatasets"], [198, 2, 1, "", "ONNXRTQLDatasets"], [198, 2, 1, "", "PyTorchDatasets"], [198, 2, 1, "", "PytorchCIFAR10"], [198, 2, 1, "", "PytorchCIFAR100"], [198, 2, 1, "", "PytorchFashionMNIST"], [198, 2, 1, "", "PytorchMNIST"], [198, 2, 1, "", "PytorchMxnetWrapDataset"], [198, 2, 1, "", "PytorchMxnetWrapFunction"], [198, 2, 1, "", "TensorflowCIFAR10"], [198, 2, 1, "", "TensorflowCIFAR100"], [198, 2, 1, "", "TensorflowDatasets"], [198, 2, 1, "", "TensorflowFashionMNIST"], [198, 2, 1, "", "TensorflowImageFolder"], [198, 2, 1, "", "TensorflowImageRecord"], [198, 2, 1, "", "TensorflowMNIST"], [198, 2, 1, "", "TensorflowTFRecordDataset"], [198, 2, 1, "", "TensorflowVOCRecord"], [198, 1, 1, "", "calculate_md5"], [198, 1, 1, "", "check_integrity"], [198, 1, 1, "", "dataset_registry"], [198, 1, 1, "", "download_url"], [198, 5, 1, "", "framework_datasets"], [198, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[198, 3, 1, "", "download"], [198, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[198, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[198, 4, 1, "", "class_to_idx"], [198, 3, 1, "", "download"], [198, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[199, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, 2, 1, "", "DummyDataset"], [200, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, 2, 1, "", "ImagenetRaw"], [201, 2, 1, "", "MXNetImagenetRaw"], [201, 2, 1, "", "ONNXRTImagenetDataset"], [201, 2, 1, "", "PytorchImagenetRaw"], [201, 2, 1, "", "TensorflowImagenetDataset"], [201, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[206, 2, 1, "", "FILTERS"], [206, 2, 1, "", "Filter"], [204, 0, 0, "-", "coco_filter"], [205, 0, 0, "-", "filter"], [206, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[204, 2, 1, "", "LabelBalanceCOCORawFilter"], [204, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[205, 2, 1, "", "FILTERS"], [205, 2, 1, "", "Filter"], [205, 2, 1, "", "MXNetFilters"], [205, 2, 1, "", "ONNXRTITFilters"], [205, 2, 1, "", "ONNXRTQLFilters"], [205, 2, 1, "", "PyTorchFilters"], [205, 2, 1, "", "TensorflowFilters"], [205, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[210, 2, 1, "", "BaseTransform"], [210, 2, 1, "", "Postprocess"], [210, 2, 1, "", "TRANSFORMS"], [208, 0, 0, "-", "coco_transform"], [209, 0, 0, "-", "imagenet_transform"], [211, 0, 0, "-", "postprocess"], [212, 0, 0, "-", "tokenization"], [213, 0, 0, "-", "transform"], [210, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[210, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[208, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, 2, 1, "", "BilinearImagenetTransform"], [209, 2, 1, "", "LabelShift"], [209, 2, 1, "", "ONNXResizeCropImagenetTransform"], [209, 2, 1, "", "OnnxBilinearImagenetTransform"], [209, 2, 1, "", "ParseDecodeImagenet"], [209, 2, 1, "", "ParseDecodeImagenetTransform"], [209, 2, 1, "", "QuantizedInput"], [209, 2, 1, "", "ResizeWithAspectRatio"], [209, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[211, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, 2, 1, "", "BasicTokenizer"], [212, 2, 1, "", "FullTokenizer"], [212, 2, 1, "", "WordpieceTokenizer"], [212, 1, 1, "", "convert_by_vocab"], [212, 1, 1, "", "convert_to_unicode"], [212, 1, 1, "", "load_vocab"], [212, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[212, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[212, 3, 1, "", "convert_ids_to_tokens"], [212, 3, 1, "", "convert_tokens_to_ids"], [212, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[212, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[213, 2, 1, "", "AlignImageChannelTransform"], [213, 2, 1, "", "BaseTransform"], [213, 2, 1, "", "CastONNXTransform"], [213, 2, 1, "", "CastPyTorchTransform"], [213, 2, 1, "", "CastTFTransform"], [213, 2, 1, "", "CenterCropTFTransform"], [213, 2, 1, "", "CenterCropTransform"], [213, 2, 1, "", "CollectTransform"], [213, 2, 1, "", "ComposeTransform"], [213, 2, 1, "", "CropResizeTFTransform"], [213, 2, 1, "", "CropResizeTransform"], [213, 2, 1, "", "CropToBoundingBox"], [213, 2, 1, "", "InputFeatures"], [213, 2, 1, "", "MXNetCropResizeTransform"], [213, 2, 1, "", "MXNetCropToBoundingBox"], [213, 2, 1, "", "MXNetNormalizeTransform"], [213, 2, 1, "", "MXNetTransforms"], [213, 2, 1, "", "MXNetTranspose"], [213, 2, 1, "", "NormalizeTFTransform"], [213, 2, 1, "", "NormalizeTransform"], [213, 2, 1, "", "ONNXRTCropToBoundingBox"], [213, 2, 1, "", "ONNXRTITTransforms"], [213, 2, 1, "", "ONNXRTQLTransforms"], [213, 2, 1, "", "PaddedCenterCropTransform"], [213, 2, 1, "", "ParseDecodeVocTransform"], [213, 2, 1, "", "PyTorchAlignImageChannel"], [213, 2, 1, "", "PyTorchCropResizeTransform"], [213, 2, 1, "", "PyTorchNormalizeTransform"], [213, 2, 1, "", "PyTorchTransforms"], [213, 2, 1, "", "PyTorchTranspose"], [213, 2, 1, "", "PytorchMxnetTransform"], [213, 2, 1, "", "PytorchMxnetWrapFunction"], [213, 2, 1, "", "RandomCropTFTransform"], [213, 2, 1, "", "RandomCropTransform"], [213, 2, 1, "", "RandomHorizontalFlip"], [213, 2, 1, "", "RandomResizedCropMXNetTransform"], [213, 2, 1, "", "RandomResizedCropPytorchTransform"], [213, 2, 1, "", "RandomResizedCropTFTransform"], [213, 2, 1, "", "RandomResizedCropTransform"], [213, 2, 1, "", "RandomVerticalFlip"], [213, 2, 1, "", "RescaleKerasPretrainTransform"], [213, 2, 1, "", "RescaleTFTransform"], [213, 2, 1, "", "RescaleTransform"], [213, 2, 1, "", "ResizeMXNetTransform"], [213, 2, 1, "", "ResizePytorchTransform"], [213, 2, 1, "", "ResizeTFTransform"], [213, 2, 1, "", "ResizeTransform"], [213, 2, 1, "", "ResizeWithRatio"], [213, 2, 1, "", "SquadExample"], [213, 2, 1, "", "TFModelZooCollectTransform"], [213, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [213, 2, 1, "", "TFSquadV1PostTransform"], [213, 2, 1, "", "TRANSFORMS"], [213, 2, 1, "", "TensorflowCropToBoundingBox"], [213, 2, 1, "", "TensorflowRandomHorizontalFlip"], [213, 2, 1, "", "TensorflowRandomVerticalFlip"], [213, 2, 1, "", "TensorflowResizeWithRatio"], [213, 2, 1, "", "TensorflowTransform"], [213, 2, 1, "", "TensorflowTransforms"], [213, 2, 1, "", "TensorflowTranspose"], [213, 2, 1, "", "TensorflowWrapFunction"], [213, 2, 1, "", "ToArray"], [213, 2, 1, "", "ToNDArrayTransform"], [213, 2, 1, "", "Transforms"], [213, 2, 1, "", "Transpose"], [213, 1, 1, "", "convert_examples_to_features"], [213, 1, 1, "", "get_final_text"], [213, 1, 1, "", "get_torchvision_map"], [213, 1, 1, "", "read_squad_examples"], [213, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[213, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[213, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[213, 3, 1, "", "get_postprocess_result"], [213, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[213, 3, 1, "", "register"]], "neural_compressor.experimental": [[255, 2, 1, "", "Benchmark"], [255, 2, 1, "", "Component"], [255, 2, 1, "", "Distillation"], [255, 2, 1, "", "Graph_Optimization"], [255, 2, 1, "", "MixedPrecision"], [255, 2, 1, "", "ModelConversion"], [255, 2, 1, "", "NAS"], [255, 2, 1, "", "Pruning"], [255, 2, 1, "", "Quantization"], [214, 0, 0, "-", "benchmark"], [217, 0, 0, "-", "common"], [223, 0, 0, "-", "component"], [245, 0, 0, "-", "data"], [250, 0, 0, "-", "distillation"], [251, 0, 0, "-", "export"], [254, 0, 0, "-", "graph_optimization"], [262, 0, 0, "-", "metric"], [264, 0, 0, "-", "mixed_precision"], [265, 0, 0, "-", "model_conversion"], [273, 0, 0, "-", "nas"], [277, 0, 0, "-", "pruning"], [278, 0, 0, "-", "pruning_recipes"], [282, 0, 0, "-", "pytorch_pruner"], [289, 0, 0, "-", "quantization"], [290, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[255, 4, 1, "", "b_dataloader"], [255, 4, 1, "", "b_func"], [255, 3, 1, "", "config_instance"], [255, 3, 1, "", "generate_prefix"], [255, 4, 1, "", "metric"], [255, 4, 1, "", "model"], [255, 4, 1, "", "postprocess"], [255, 4, 1, "", "results"], [255, 3, 1, "", "run_instance"], [255, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[255, 4, 1, "", "eval_dataloader"], [255, 4, 1, "", "eval_func"], [255, 3, 1, "", "execute"], [255, 4, 1, "", "model"], [255, 3, 1, "", "on_after_compute_loss"], [255, 3, 1, "", "on_batch_begin"], [255, 3, 1, "", "on_batch_end"], [255, 3, 1, "", "on_before_optimizer_step"], [255, 3, 1, "", "on_epoch_begin"], [255, 3, 1, "", "on_epoch_end"], [255, 3, 1, "", "on_post_grad"], [255, 3, 1, "", "on_step_begin"], [255, 3, 1, "", "on_step_end"], [255, 3, 1, "", "on_train_begin"], [255, 3, 1, "", "on_train_end"], [255, 3, 1, "", "post_epoch_end"], [255, 3, 1, "", "post_process"], [255, 3, 1, "", "pre_epoch_begin"], [255, 3, 1, "", "pre_process"], [255, 3, 1, "", "prepare"], [255, 3, 1, "", "prepare_qat"], [255, 3, 1, "", "register_hook"], [255, 4, 1, "", "train_dataloader"], [255, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[255, 6, 1, "", "_epoch_ran"], [255, 6, 1, "", "best_model"], [255, 6, 1, "", "best_score"], [255, 3, 1, "", "create_criterion"], [255, 3, 1, "", "create_optimizer"], [255, 4, 1, "", "criterion"], [255, 6, 1, "", "eval_frequency"], [255, 4, 1, "", "evaluation_distributed"], [255, 3, 1, "", "execute"], [255, 3, 1, "", "generate_hooks"], [255, 3, 1, "", "init_train_cfg"], [255, 3, 1, "", "on_post_forward"], [255, 4, 1, "", "optimizer"], [255, 3, 1, "", "pre_process"], [255, 3, 1, "", "prepare"], [255, 4, 1, "", "student_model"], [255, 4, 1, "", "teacher_model"], [255, 4, 1, "", "train_cfg"], [255, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[255, 3, 1, "", "dataset"], [255, 4, 1, "", "eval_dataloader"], [255, 4, 1, "", "eval_func"], [255, 4, 1, "", "input"], [255, 4, 1, "", "metric"], [255, 4, 1, "", "model"], [255, 4, 1, "", "output"], [255, 4, 1, "", "postprocess"], [255, 4, 1, "", "precisions"], [255, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[255, 4, 1, "", "precisions"], [255, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[255, 3, 1, "", "dataset"], [255, 4, 1, "", "destination"], [255, 4, 1, "", "eval_dataloader"], [255, 4, 1, "", "eval_func"], [255, 4, 1, "", "metric"], [255, 4, 1, "", "model"], [255, 4, 1, "", "postprocess"], [255, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[255, 6, 1, "", "conf"], [255, 4, 1, "", "evaluation_distributed"], [255, 3, 1, "", "execute"], [255, 3, 1, "", "generate_hooks"], [255, 3, 1, "", "generate_pruners"], [255, 3, 1, "", "pre_process"], [255, 3, 1, "", "prepare"], [255, 6, 1, "", "pruners"], [255, 4, 1, "", "pruning_func"], [255, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[255, 4, 1, "", "calib_dataloader"], [255, 3, 1, "", "dataset"], [255, 3, 1, "", "execute"], [255, 4, 1, "", "metric"], [255, 4, 1, "", "model"], [255, 4, 1, "", "objective"], [255, 4, 1, "", "postprocess"], [255, 3, 1, "", "pre_process"], [255, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[214, 2, 1, "", "Benchmark"], [214, 1, 1, "", "get_architecture"], [214, 1, 1, "", "get_bounded_threads"], [214, 1, 1, "", "get_core_ids"], [214, 1, 1, "", "get_physical_ids"], [214, 1, 1, "", "get_threads"], [214, 1, 1, "", "get_threads_per_core"], [214, 1, 1, "", "set_all_env_var"], [214, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[214, 4, 1, "", "b_dataloader"], [214, 4, 1, "", "b_func"], [214, 3, 1, "", "config_instance"], [214, 3, 1, "", "generate_prefix"], [214, 4, 1, "", "metric"], [214, 4, 1, "", "model"], [214, 4, 1, "", "postprocess"], [214, 4, 1, "", "results"], [214, 3, 1, "", "run_instance"], [214, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[217, 2, 1, "", "DataLoader"], [217, 2, 1, "", "Metric"], [217, 2, 1, "", "Model"], [217, 2, 1, "", "Postprocess"], [215, 0, 0, "-", "criterion"], [216, 0, 0, "-", "dataloader"], [218, 0, 0, "-", "metric"], [219, 0, 0, "-", "model"], [220, 0, 0, "-", "optimizer"], [221, 0, 0, "-", "postprocess"], [222, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[215, 2, 1, "", "Criterions"], [215, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [215, 2, 1, "", "KnowledgeDistillationFramework"], [215, 2, 1, "", "KnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchCriterions"], [215, 2, 1, "", "PyTorchCrossEntropyLoss"], [215, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [215, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "SelfKnowledgeDistillationLoss"], [215, 2, 1, "", "TensorFlowCrossEntropyLoss"], [215, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [215, 2, 1, "", "TensorflowCriterions"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [215, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [215, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[215, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[215, 3, 1, "", "clear_features"], [215, 3, 1, "", "init_feature_matcher"], [215, 3, 1, "", "init_loss_funcs"], [215, 3, 1, "", "loss_cal"], [215, 3, 1, "", "loss_cal_sloss"], [215, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[215, 4, 1, "", "student_model"], [215, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[215, 3, 1, "", "loss_cal"], [215, 3, 1, "", "loss_cal_sloss"], [215, 3, 1, "", "student_targets_loss_cal"], [215, 3, 1, "", "teacher_model_forward"], [215, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[215, 3, 1, "", "init_feature_matcher"], [215, 3, 1, "", "init_loss_funcs"], [215, 3, 1, "", "loss_cal"], [215, 3, 1, "", "loss_cal_sloss"], [215, 3, 1, "", "register_hooks_for_models"], [215, 3, 1, "", "remove_all_hooks"], [215, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[215, 3, 1, "", "KullbackLeiblerDivergence"], [215, 3, 1, "", "SoftCrossEntropy"], [215, 3, 1, "", "student_targets_loss_cal"], [215, 3, 1, "", "teacher_model_forward"], [215, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[215, 3, 1, "", "KullbackLeiblerDivergence"], [215, 3, 1, "", "L2Divergence"], [215, 3, 1, "", "SoftCrossEntropy"], [215, 3, 1, "", "init_loss_funcs"], [215, 3, 1, "", "loss_cal"], [215, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[215, 3, 1, "", "init_loss_funcs"], [215, 3, 1, "", "loss_cal"], [215, 3, 1, "", "loss_cal_sloss"], [215, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[215, 3, 1, "", "SoftCrossEntropy"], [215, 3, 1, "", "student_targets_loss_cal"], [215, 3, 1, "", "teacher_model_forward"], [215, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[215, 3, 1, "", "student_targets_loss_cal"], [215, 3, 1, "", "teacher_model_forward"], [215, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[216, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[218, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[219, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[220, 2, 1, "", "Optimizers"], [220, 2, 1, "", "PyTorchOptimizers"], [220, 2, 1, "", "PyTorchSGD"], [220, 2, 1, "", "TensorFlowAdam"], [220, 2, 1, "", "TensorFlowAdamW"], [220, 2, 1, "", "TensorFlowSGD"], [220, 2, 1, "", "TensorflowOptimizers"], [220, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[220, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[221, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, 1, 1, "", "get_activation"], [222, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[223, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[223, 4, 1, "", "eval_dataloader"], [223, 4, 1, "", "eval_func"], [223, 3, 1, "", "execute"], [223, 4, 1, "", "model"], [223, 3, 1, "", "on_after_compute_loss"], [223, 3, 1, "", "on_batch_begin"], [223, 3, 1, "", "on_batch_end"], [223, 3, 1, "", "on_before_optimizer_step"], [223, 3, 1, "", "on_epoch_begin"], [223, 3, 1, "", "on_epoch_end"], [223, 3, 1, "", "on_post_grad"], [223, 3, 1, "", "on_step_begin"], [223, 3, 1, "", "on_step_end"], [223, 3, 1, "", "on_train_begin"], [223, 3, 1, "", "on_train_end"], [223, 3, 1, "", "post_epoch_end"], [223, 3, 1, "", "post_process"], [223, 3, 1, "", "pre_epoch_begin"], [223, 3, 1, "", "pre_process"], [223, 3, 1, "", "prepare"], [223, 3, 1, "", "prepare_qat"], [223, 3, 1, "", "register_hook"], [223, 4, 1, "", "train_dataloader"], [223, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[245, 2, 1, "", "BaseTransform"], [245, 2, 1, "", "Dataset"], [245, 2, 1, "", "Datasets"], [245, 2, 1, "", "FILTERS"], [245, 2, 1, "", "Filter"], [245, 2, 1, "", "IterableDataset"], [245, 2, 1, "", "TRANSFORMS"], [228, 0, 0, "-", "dataloaders"], [245, 1, 1, "", "dataset_registry"], [240, 0, 0, "-", "datasets"], [245, 1, 1, "", "filter_registry"], [244, 0, 0, "-", "filters"], [245, 1, 1, "", "transform_registry"], [247, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[245, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[224, 0, 0, "-", "base_dataloader"], [225, 0, 0, "-", "dataloader"], [226, 0, 0, "-", "default_dataloader"], [227, 0, 0, "-", "fetcher"], [229, 0, 0, "-", "mxnet_dataloader"], [230, 0, 0, "-", "onnxrt_dataloader"], [231, 0, 0, "-", "pytorch_dataloader"], [232, 0, 0, "-", "sampler"], [233, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[224, 3, 1, "", "batch"], [224, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, 2, 1, "", "DefaultDataLoader"], [226, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[226, 3, 1, "", "batch"], [226, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, 2, 1, "", "Fetcher"], [227, 2, 1, "", "IndexFetcher"], [227, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, 2, 1, "", "ONNXRTBertDataLoader"], [230, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, 2, 1, "", "BatchSampler"], [232, 2, 1, "", "IterableSampler"], [232, 2, 1, "", "Sampler"], [232, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, 2, 1, "", "TFDataDataLoader"], [233, 2, 1, "", "TensorflowBertDataLoader"], [233, 2, 1, "", "TensorflowDataLoader"], [233, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[233, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[240, 2, 1, "", "Dataset"], [240, 2, 1, "", "Datasets"], [240, 2, 1, "", "IterableDataset"], [234, 0, 0, "-", "bert_dataset"], [235, 0, 0, "-", "coco_dataset"], [236, 0, 0, "-", "dataset"], [240, 1, 1, "", "dataset_registry"], [237, 0, 0, "-", "dummy_dataset"], [238, 0, 0, "-", "dummy_dataset_v2"], [239, 0, 0, "-", "imagenet_dataset"], [241, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, 2, 1, "", "InputFeatures"], [234, 2, 1, "", "ONNXRTBertDataset"], [234, 2, 1, "", "ParseDecodeBert"], [234, 2, 1, "", "PytorchBertDataset"], [234, 2, 1, "", "TensorflowBertDataset"], [234, 2, 1, "", "TensorflowModelZooBertDataset"], [234, 1, 1, "", "convert_examples_to_features"], [234, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[234, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, 2, 1, "", "COCONpy"], [235, 2, 1, "", "COCORaw"], [235, 2, 1, "", "COCORecordDataset"], [235, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[236, 2, 1, "", "CIFAR10"], [236, 2, 1, "", "CIFAR100"], [236, 2, 1, "", "Dataset"], [236, 2, 1, "", "Datasets"], [236, 2, 1, "", "FashionMNIST"], [236, 2, 1, "", "ImageFolder"], [236, 2, 1, "", "IterableDataset"], [236, 2, 1, "", "MNIST"], [236, 2, 1, "", "MXNetCIFAR10"], [236, 2, 1, "", "MXNetCIFAR100"], [236, 2, 1, "", "MXNetDatasets"], [236, 2, 1, "", "MXNetFashionMNIST"], [236, 2, 1, "", "MXNetImageFolder"], [236, 2, 1, "", "MXNetMNIST"], [236, 2, 1, "", "ONNXRTITDatasets"], [236, 2, 1, "", "ONNXRTQLDatasets"], [236, 2, 1, "", "PyTorchDatasets"], [236, 2, 1, "", "PytorchCIFAR10"], [236, 2, 1, "", "PytorchCIFAR100"], [236, 2, 1, "", "PytorchFashionMNIST"], [236, 2, 1, "", "PytorchMNIST"], [236, 2, 1, "", "PytorchMxnetWrapDataset"], [236, 2, 1, "", "PytorchMxnetWrapFunction"], [236, 2, 1, "", "TensorflowCIFAR10"], [236, 2, 1, "", "TensorflowCIFAR100"], [236, 2, 1, "", "TensorflowDatasets"], [236, 2, 1, "", "TensorflowFashionMNIST"], [236, 2, 1, "", "TensorflowImageFolder"], [236, 2, 1, "", "TensorflowImageRecord"], [236, 2, 1, "", "TensorflowMNIST"], [236, 2, 1, "", "TensorflowTFRecordDataset"], [236, 2, 1, "", "TensorflowVOCRecord"], [236, 1, 1, "", "calculate_md5"], [236, 1, 1, "", "check_integrity"], [236, 1, 1, "", "dataset_registry"], [236, 1, 1, "", "download_url"], [236, 5, 1, "", "framework_datasets"], [236, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[236, 3, 1, "", "download"], [236, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[236, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[236, 4, 1, "", "class_to_idx"], [236, 3, 1, "", "download"], [236, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, 2, 1, "", "DummyDataset"], [238, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, 2, 1, "", "ImagenetRaw"], [239, 2, 1, "", "MXNetImagenetRaw"], [239, 2, 1, "", "ONNXRTImagenetDataset"], [239, 2, 1, "", "PytorchImagenetRaw"], [239, 2, 1, "", "TensorflowImagenetDataset"], [239, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[244, 2, 1, "", "FILTERS"], [244, 2, 1, "", "Filter"], [242, 0, 0, "-", "coco_filter"], [243, 0, 0, "-", "filter"], [244, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, 2, 1, "", "LabelBalanceCOCORawFilter"], [242, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[243, 2, 1, "", "FILTERS"], [243, 2, 1, "", "Filter"], [243, 2, 1, "", "MXNetFilters"], [243, 2, 1, "", "ONNXRTITFilters"], [243, 2, 1, "", "ONNXRTQLFilters"], [243, 2, 1, "", "PyTorchFilters"], [243, 2, 1, "", "TensorflowFilters"], [243, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[247, 2, 1, "", "BaseTransform"], [247, 2, 1, "", "TRANSFORMS"], [246, 0, 0, "-", "imagenet_transform"], [248, 0, 0, "-", "tokenization"], [249, 0, 0, "-", "transform"], [247, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[247, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, 2, 1, "", "BilinearImagenetTransform"], [246, 2, 1, "", "LabelShift"], [246, 2, 1, "", "ONNXResizeCropImagenetTransform"], [246, 2, 1, "", "OnnxBilinearImagenetTransform"], [246, 2, 1, "", "ParseDecodeImagenet"], [246, 2, 1, "", "ParseDecodeImagenetTransform"], [246, 2, 1, "", "QuantizedInput"], [246, 2, 1, "", "ResizeWithAspectRatio"], [246, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, 2, 1, "", "BasicTokenizer"], [248, 2, 1, "", "FullTokenizer"], [248, 2, 1, "", "WordpieceTokenizer"], [248, 1, 1, "", "convert_by_vocab"], [248, 1, 1, "", "convert_to_unicode"], [248, 1, 1, "", "load_vocab"], [248, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[248, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[248, 3, 1, "", "convert_ids_to_tokens"], [248, 3, 1, "", "convert_tokens_to_ids"], [248, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[248, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[249, 2, 1, "", "AlignImageChannelTransform"], [249, 2, 1, "", "BaseTransform"], [249, 2, 1, "", "CastONNXTransform"], [249, 2, 1, "", "CastPyTorchTransform"], [249, 2, 1, "", "CastTFTransform"], [249, 2, 1, "", "CenterCropTFTransform"], [249, 2, 1, "", "CenterCropTransform"], [249, 2, 1, "", "CollectTransform"], [249, 2, 1, "", "ComposeTransform"], [249, 2, 1, "", "CropResizeTFTransform"], [249, 2, 1, "", "CropResizeTransform"], [249, 2, 1, "", "CropToBoundingBox"], [249, 2, 1, "", "InputFeatures"], [249, 2, 1, "", "MXNetCropResizeTransform"], [249, 2, 1, "", "MXNetCropToBoundingBox"], [249, 2, 1, "", "MXNetNormalizeTransform"], [249, 2, 1, "", "MXNetTransforms"], [249, 2, 1, "", "MXNetTranspose"], [249, 2, 1, "", "NormalizeTFTransform"], [249, 2, 1, "", "NormalizeTransform"], [249, 2, 1, "", "ONNXRTCropToBoundingBox"], [249, 2, 1, "", "ONNXRTITTransforms"], [249, 2, 1, "", "ONNXRTQLTransforms"], [249, 2, 1, "", "PaddedCenterCropTransform"], [249, 2, 1, "", "ParseDecodeVocTransform"], [249, 2, 1, "", "PyTorchAlignImageChannel"], [249, 2, 1, "", "PyTorchCropResizeTransform"], [249, 2, 1, "", "PyTorchNormalizeTransform"], [249, 2, 1, "", "PyTorchTransforms"], [249, 2, 1, "", "PyTorchTranspose"], [249, 2, 1, "", "PytorchMxnetTransform"], [249, 2, 1, "", "PytorchMxnetWrapFunction"], [249, 2, 1, "", "RandomCropTFTransform"], [249, 2, 1, "", "RandomCropTransform"], [249, 2, 1, "", "RandomHorizontalFlip"], [249, 2, 1, "", "RandomResizedCropMXNetTransform"], [249, 2, 1, "", "RandomResizedCropPytorchTransform"], [249, 2, 1, "", "RandomResizedCropTFTransform"], [249, 2, 1, "", "RandomResizedCropTransform"], [249, 2, 1, "", "RandomVerticalFlip"], [249, 2, 1, "", "RescaleKerasPretrainTransform"], [249, 2, 1, "", "RescaleTFTransform"], [249, 2, 1, "", "RescaleTransform"], [249, 2, 1, "", "ResizeMXNetTransform"], [249, 2, 1, "", "ResizePytorchTransform"], [249, 2, 1, "", "ResizeTFTransform"], [249, 2, 1, "", "ResizeTransform"], [249, 2, 1, "", "ResizeWithRatio"], [249, 2, 1, "", "SquadExample"], [249, 2, 1, "", "TFModelZooCollectTransform"], [249, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [249, 2, 1, "", "TFSquadV1PostTransform"], [249, 2, 1, "", "TRANSFORMS"], [249, 2, 1, "", "TensorflowCropToBoundingBox"], [249, 2, 1, "", "TensorflowRandomHorizontalFlip"], [249, 2, 1, "", "TensorflowRandomVerticalFlip"], [249, 2, 1, "", "TensorflowResizeWithRatio"], [249, 2, 1, "", "TensorflowTransform"], [249, 2, 1, "", "TensorflowTransforms"], [249, 2, 1, "", "TensorflowTranspose"], [249, 2, 1, "", "TensorflowWrapFunction"], [249, 2, 1, "", "ToArray"], [249, 2, 1, "", "ToNDArrayTransform"], [249, 2, 1, "", "Transforms"], [249, 2, 1, "", "Transpose"], [249, 1, 1, "", "convert_examples_to_features"], [249, 1, 1, "", "get_final_text"], [249, 1, 1, "", "get_torchvision_map"], [249, 1, 1, "", "read_squad_examples"], [249, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[249, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[249, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[249, 3, 1, "", "get_postprocess_result"], [249, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[249, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[250, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[250, 6, 1, "", "_epoch_ran"], [250, 6, 1, "", "best_model"], [250, 6, 1, "", "best_score"], [250, 3, 1, "", "create_criterion"], [250, 3, 1, "", "create_optimizer"], [250, 4, 1, "", "criterion"], [250, 6, 1, "", "eval_frequency"], [250, 4, 1, "", "evaluation_distributed"], [250, 3, 1, "", "execute"], [250, 3, 1, "", "generate_hooks"], [250, 3, 1, "", "init_train_cfg"], [250, 3, 1, "", "on_post_forward"], [250, 4, 1, "", "optimizer"], [250, 3, 1, "", "pre_process"], [250, 3, 1, "", "prepare"], [250, 4, 1, "", "student_model"], [250, 4, 1, "", "teacher_model"], [250, 4, 1, "", "train_cfg"], [250, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[252, 0, 0, "-", "torch2onnx"], [251, 1, 1, "", "torch_to_fp32_onnx"], [251, 1, 1, "", "torch_to_int8_onnx"], [253, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.torch2onnx": [[252, 1, 1, "", "build_scale_mapping"], [252, 1, 1, "", "get_node_mapping"], [252, 1, 1, "", "get_quantizable_onnx_ops"], [252, 1, 1, "", "qdq_fp32_bias"], [252, 1, 1, "", "qdq_fp32_bias_qdq"], [252, 1, 1, "", "qdq_int32_bias"], [252, 1, 1, "", "recalculate_bias"], [252, 1, 1, "", "remove_nodes_by_name"], [252, 1, 1, "", "set_data_type"], [252, 1, 1, "", "set_scale_info"], [252, 1, 1, "", "sub_graph_with_int32_bias"], [252, 1, 1, "", "torch_to_fp32_onnx"], [252, 1, 1, "", "torch_to_int8_onnx"], [252, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[253, 2, 1, "", "DummyDataReader"], [253, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[253, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[254, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[254, 3, 1, "", "dataset"], [254, 4, 1, "", "eval_dataloader"], [254, 4, 1, "", "eval_func"], [254, 4, 1, "", "input"], [254, 4, 1, "", "metric"], [254, 4, 1, "", "model"], [254, 4, 1, "", "output"], [254, 4, 1, "", "postprocess"], [254, 4, 1, "", "precisions"], [254, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[262, 2, 1, "", "BaseMetric"], [262, 2, 1, "", "METRICS"], [256, 0, 0, "-", "bleu"], [257, 0, 0, "-", "bleu_util"], [258, 0, 0, "-", "coco_label_map"], [259, 0, 0, "-", "coco_tools"], [260, 0, 0, "-", "evaluate_squad"], [261, 0, 0, "-", "f1"], [263, 0, 0, "-", "metric"], [262, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[262, 4, 1, "", "hvd"], [262, 4, 1, "", "metric"], [262, 3, 1, "", "reset"], [262, 3, 1, "", "result"], [262, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[262, 6, 1, "", "metrics"], [262, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[256, 2, 1, "", "BLEU"], [256, 2, 1, "", "UnicodeRegex"], [256, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[256, 6, 1, "", "labels"], [256, 6, 1, "", "predictions"], [256, 3, 1, "", "reset"], [256, 3, 1, "", "result"], [256, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[256, 6, 1, "", "nondigit_punct_re"], [256, 3, 1, "", "property_chars"], [256, 6, 1, "", "punct_nondigit_re"], [256, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[257, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[259, 2, 1, "", "COCOEvalWrapper"], [259, 2, 1, "", "COCOWrapper"], [259, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [259, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [259, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[259, 3, 1, "", "ComputeMetrics"], [259, 3, 1, "", "GetAgnosticMode"], [259, 3, 1, "", "GetCategory"], [259, 3, 1, "", "GetCategoryIdList"], [259, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[259, 3, 1, "", "LoadAnnotations"], [259, 6, 1, "", "dataset"], [259, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, 1, 1, "", "evaluate"], [260, 1, 1, "", "exact_match_score"], [260, 1, 1, "", "f1_score"], [260, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[261, 1, 1, "", "evaluate"], [261, 1, 1, "", "f1_score"], [261, 1, 1, "", "metric_max_over_ground_truths"], [261, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[263, 2, 1, "", "Accuracy"], [263, 2, 1, "", "BaseMetric"], [263, 2, 1, "", "COCOmAPv2"], [263, 2, 1, "", "F1"], [263, 2, 1, "", "GeneralTopK"], [263, 2, 1, "", "Loss"], [263, 2, 1, "", "MAE"], [263, 2, 1, "", "METRICS"], [263, 2, 1, "", "MSE"], [263, 2, 1, "", "MXNetMetrics"], [263, 2, 1, "", "ONNXRTGLUE"], [263, 2, 1, "", "ONNXRTITMetrics"], [263, 2, 1, "", "ONNXRTQLMetrics"], [263, 2, 1, "", "PyTorchLoss"], [263, 2, 1, "", "PyTorchMetrics"], [263, 2, 1, "", "RMSE"], [263, 2, 1, "", "ROC"], [263, 2, 1, "", "SquadF1"], [263, 2, 1, "", "TensorflowCOCOMAP"], [263, 2, 1, "", "TensorflowMAP"], [263, 2, 1, "", "TensorflowMetrics"], [263, 2, 1, "", "TensorflowTopK"], [263, 2, 1, "", "TensorflowVOCMAP"], [263, 2, 1, "", "WrapMXNetMetric"], [263, 2, 1, "", "WrapONNXRTMetric"], [263, 2, 1, "", "WrapPyTorchMetric"], [263, 2, 1, "", "mIOU"], [263, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[263, 6, 1, "", "label_list"], [263, 6, 1, "", "pred_list"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 6, 1, "", "sample"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[263, 4, 1, "", "hvd"], [263, 4, 1, "", "metric"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[263, 6, 1, "", "k"], [263, 6, 1, "", "num_correct"], [263, 6, 1, "", "num_sample"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 6, 1, "", "sample"], [263, 6, 1, "", "sum"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[263, 6, 1, "", "compare_label"], [263, 6, 1, "", "label_list"], [263, 6, 1, "", "pred_list"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[263, 6, 1, "", "metrics"], [263, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[263, 6, 1, "", "compare_label"], [263, 6, 1, "", "label_list"], [263, 6, 1, "", "pred_list"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[263, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[263, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[263, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[263, 3, 1, "", "compute"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[263, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[263, 6, 1, "", "mse"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[263, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[263, 6, 1, "", "k"], [263, 6, 1, "", "num_correct"], [263, 6, 1, "", "num_sample"], [263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[263, 3, 1, "", "reset"], [263, 3, 1, "", "result"], [263, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[264, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[264, 4, 1, "", "precisions"], [264, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[265, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[265, 3, 1, "", "dataset"], [265, 4, 1, "", "destination"], [265, 4, 1, "", "eval_dataloader"], [265, 4, 1, "", "eval_func"], [265, 4, 1, "", "metric"], [265, 4, 1, "", "model"], [265, 4, 1, "", "postprocess"], [265, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[273, 2, 1, "", "BasicNAS"], [273, 2, 1, "", "DyNAS"], [273, 2, 1, "", "NAS"], [266, 0, 0, "-", "basic_nas"], [267, 0, 0, "-", "dynas"], [272, 0, 0, "-", "dynast"], [274, 0, 0, "-", "nas"], [275, 0, 0, "-", "nas_utils"], [276, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[273, 3, 1, "", "estimate"], [273, 3, 1, "", "execute"], [273, 3, 1, "", "init_by_cfg"], [273, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[273, 3, 1, "", "create_acc_predictor"], [273, 3, 1, "", "create_latency_predictor"], [273, 3, 1, "", "create_macs_predictor"], [273, 3, 1, "", "estimate"], [273, 3, 1, "", "init_cfg"], [273, 3, 1, "", "init_for_search"], [273, 3, 1, "", "search"], [273, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[266, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[266, 3, 1, "", "estimate"], [266, 3, 1, "", "execute"], [266, 3, 1, "", "init_by_cfg"], [266, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[267, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[267, 3, 1, "", "create_acc_predictor"], [267, 3, 1, "", "create_latency_predictor"], [267, 3, 1, "", "create_macs_predictor"], [267, 3, 1, "", "estimate"], [267, 3, 1, "", "init_cfg"], [267, 3, 1, "", "init_for_search"], [267, 3, 1, "", "search"], [267, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[268, 0, 0, "-", "dynas_manager"], [269, 0, 0, "-", "dynas_predictor"], [270, 0, 0, "-", "dynas_search"], [271, 0, 0, "-", "dynas_utils"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[268, 2, 1, "", "ParameterManager"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[268, 3, 1, "", "create_training_set"], [268, 3, 1, "", "import_csv"], [268, 3, 1, "", "onehot_generic"], [268, 3, 1, "", "process_param_dict"], [268, 3, 1, "", "random_sample"], [268, 3, 1, "", "random_samples"], [268, 3, 1, "", "set_seed"], [268, 3, 1, "", "translate2param"], [268, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[269, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[269, 3, 1, "", "get_metrics"], [269, 3, 1, "", "get_parameters"], [269, 3, 1, "", "load"], [269, 3, 1, "", "predict"], [269, 3, 1, "", "save"], [269, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[270, 2, 1, "", "ProblemMultiObjective"], [270, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[270, 3, 1, "", "configure_age"], [270, 3, 1, "", "configure_nsga2"], [270, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[271, 2, 1, "", "EvaluationInterface"], [271, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [271, 2, 1, "", "EvaluationInterfaceResNet50"], [271, 2, 1, "", "OFARunner"], [271, 2, 1, "", "Runner"], [271, 2, 1, "", "TorchVisionReference"], [271, 1, 1, "", "get_macs"], [271, 1, 1, "", "get_torchvision_model"], [271, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[271, 3, 1, "", "clear_csv"], [271, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[271, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[271, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[271, 3, 1, "", "estimate_accuracy_top1"], [271, 3, 1, "", "estimate_latency"], [271, 3, 1, "", "estimate_macs"], [271, 3, 1, "", "get_subnet"], [271, 3, 1, "", "measure_latency"], [271, 3, 1, "", "validate_macs"], [271, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[271, 3, 1, "", "measure_latency"], [271, 3, 1, "", "validate_macs"], [271, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.nas": [[274, 2, 1, "", "NAS"], [274, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[274, 3, 1, "", "count_model_parameters"], [274, 3, 1, "", "dump_search_results"], [274, 3, 1, "", "estimate"], [274, 3, 1, "", "find_best_model_archs"], [274, 3, 1, "", "init_search_cfg"], [274, 3, 1, "", "load_search_results"], [274, 3, 1, "", "metrics_conversion"], [274, 4, 1, "", "model_builder"], [274, 3, 1, "", "params_vec2params_dict"], [274, 3, 1, "", "search"], [274, 4, 1, "", "search_algorithm"], [274, 4, 1, "", "search_space"], [274, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[275, 1, 1, "", "create_search_space_pool"], [275, 1, 1, "", "find_pareto_front"], [275, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[276, 2, 1, "", "BayesianOptimizationSearcher"], [276, 2, 1, "", "GridSearcher"], [276, 2, 1, "", "RandomSearcher"], [276, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[276, 3, 1, "", "get_feedback"], [276, 3, 1, "", "indices2params_vec"], [276, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[276, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[276, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[276, 3, 1, "", "get_feedback"], [276, 3, 1, "", "params_vec2params_dict"], [276, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[277, 2, 1, "", "Pruning"], [277, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[277, 6, 1, "", "conf"], [277, 4, 1, "", "evaluation_distributed"], [277, 3, 1, "", "execute"], [277, 3, 1, "", "generate_hooks"], [277, 3, 1, "", "generate_pruners"], [277, 3, 1, "", "pre_process"], [277, 3, 1, "", "prepare"], [277, 6, 1, "", "pruners"], [277, 4, 1, "", "pruning_func"], [277, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[277, 3, 1, "", "on_after_compute_loss"], [277, 3, 1, "", "on_batch_begin"], [277, 3, 1, "", "on_batch_end"], [277, 3, 1, "", "on_epoch_begin"], [277, 3, 1, "", "on_epoch_end"], [277, 3, 1, "", "on_step_begin"], [277, 3, 1, "", "on_step_end"], [277, 3, 1, "", "on_train_begin"], [277, 3, 1, "", "on_train_end"], [277, 3, 1, "", "post_epoch_end"], [277, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[278, 2, 1, "", "PATTERNS"], [279, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[278, 6, 1, "", "patterns"], [278, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, 2, 1, "", "PATTERNS"], [280, 0, 0, "-", "pattern"], [281, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[279, 6, 1, "", "patterns"], [279, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, 2, 1, "", "PATTERNS"], [280, 2, 1, "", "PatternBase"], [280, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[280, 6, 1, "", "patterns"], [280, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[280, 3, 1, "", "compute_sparsity"], [280, 3, 1, "", "reduce"], [280, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, 2, 1, "", "TilePatternBase"], [281, 2, 1, "", "TilePattern_1x1"], [281, 2, 1, "", "TilePattern_1x16"], [281, 2, 1, "", "TilePattern_1x2"], [281, 2, 1, "", "TilePattern_2x2"], [281, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[281, 3, 1, "", "compute_sparsity"], [281, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[283, 0, 0, "-", "logger"], [284, 0, 0, "-", "patterns"], [285, 0, 0, "-", "prune_utils"], [286, 0, 0, "-", "pruner"], [287, 0, 0, "-", "pruning"], [288, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, 2, 1, "", "Pattern"], [284, 2, 1, "", "PatternNInM"], [284, 2, 1, "", "PatternNxM"], [284, 1, 1, "", "get_pattern"], [284, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[284, 3, 1, "", "get_block_size_dict"], [284, 3, 1, "", "get_mask_single"], [284, 3, 1, "", "get_masks"], [284, 3, 1, "", "get_masks_global"], [284, 3, 1, "", "get_masks_local"], [284, 3, 1, "", "get_pattern_lock_masks"], [284, 3, 1, "", "get_sparsity_ratio"], [284, 6, 1, "", "is_global"], [284, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[284, 6, 1, "", "M"], [284, 6, 1, "", "N"], [284, 3, 1, "", "get_masks_global"], [284, 3, 1, "", "get_pattern_lock_masks"], [284, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[284, 6, 1, "", "block_size"], [284, 3, 1, "", "get_block_size_dict"], [284, 3, 1, "", "get_masks_global"], [284, 3, 1, "", "get_pattern_lock_masks"], [284, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, 1, 1, "", "check_config"], [285, 1, 1, "", "parse_not_to_prune"], [285, 1, 1, "", "parse_to_prune"], [285, 1, 1, "", "process_and_check_config"], [285, 1, 1, "", "process_config"], [285, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, 2, 1, "", "MagnitudePruner"], [286, 2, 1, "", "PatternLockPruner"], [286, 2, 1, "", "Pruner"], [286, 2, 1, "", "SnipMomentumPruner"], [286, 2, 1, "", "SnipPruner"], [286, 1, 1, "", "get_pruner"], [286, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[286, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[286, 3, 1, "", "on_after_optimizer_step"], [286, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[286, 3, 1, "", "check_is_pruned_step"], [286, 6, 1, "", "config"], [286, 6, 1, "", "current_sparsity_ratio"], [286, 6, 1, "", "end_step"], [286, 6, 1, "", "global_step"], [286, 3, 1, "", "mask_weights"], [286, 6, 1, "", "masks"], [286, 6, 1, "", "max_sparsity_ratio_per_layer"], [286, 6, 1, "", "modules"], [286, 3, 1, "", "on_after_eval"], [286, 3, 1, "", "on_after_optimizer_step"], [286, 3, 1, "", "on_before_eval"], [286, 3, 1, "", "on_before_optimizer_step"], [286, 3, 1, "", "on_epoch_begin"], [286, 3, 1, "", "on_epoch_end"], [286, 3, 1, "", "on_step_begin"], [286, 3, 1, "", "on_step_end"], [286, 3, 1, "", "on_train_begin"], [286, 3, 1, "", "on_train_end"], [286, 6, 1, "", "pattern"], [286, 6, 1, "", "scheduler"], [286, 6, 1, "", "scores"], [286, 6, 1, "", "start_step"], [286, 6, 1, "", "target_sparsity_ratio"], [286, 6, 1, "", "update_frequency_on_step"], [286, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[286, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[286, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[287, 6, 1, "", "config_file_path"], [287, 3, 1, "", "get_sparsity_ratio"], [287, 6, 1, "", "model"], [287, 3, 1, "", "on_after_eval"], [287, 3, 1, "", "on_after_optimizer_step"], [287, 3, 1, "", "on_before_eval"], [287, 3, 1, "", "on_before_optimizer_step"], [287, 3, 1, "", "on_epoch_begin"], [287, 3, 1, "", "on_epoch_end"], [287, 3, 1, "", "on_step_begin"], [287, 3, 1, "", "on_step_end"], [287, 3, 1, "", "on_train_begin"], [287, 3, 1, "", "on_train_end"], [287, 6, 1, "", "pruner_info"], [287, 6, 1, "", "pruners"], [287, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, 2, 1, "", "IterativeScheduler"], [288, 2, 1, "", "OneshotScheduler"], [288, 2, 1, "", "Scheduler"], [288, 1, 1, "", "get_scheduler"], [288, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[288, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[288, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[288, 6, 1, "", "config"], [288, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[289, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[289, 4, 1, "", "calib_dataloader"], [289, 3, 1, "", "dataset"], [289, 3, 1, "", "execute"], [289, 4, 1, "", "metric"], [289, 4, 1, "", "model"], [289, 4, 1, "", "objective"], [289, 4, 1, "", "postprocess"], [289, 3, 1, "", "pre_process"], [289, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[290, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[290, 3, 1, "", "append"], [290, 3, 1, "", "combine"], [290, 4, 1, "", "eval_func"], [290, 4, 1, "", "model"], [290, 4, 1, "", "train_func"]], "neural_compressor.metric": [[298, 2, 1, "", "BaseMetric"], [298, 2, 1, "", "METRICS"], [298, 2, 1, "", "Metric"], [292, 0, 0, "-", "bleu"], [293, 0, 0, "-", "bleu_util"], [294, 0, 0, "-", "coco_label_map"], [295, 0, 0, "-", "coco_tools"], [296, 0, 0, "-", "evaluate_squad"], [297, 0, 0, "-", "f1"], [299, 0, 0, "-", "metric"], [298, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[298, 4, 1, "", "hvd"], [298, 4, 1, "", "metric"], [298, 3, 1, "", "reset"], [298, 3, 1, "", "result"], [298, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[298, 6, 1, "", "metrics"], [298, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[292, 2, 1, "", "BLEU"], [292, 2, 1, "", "UnicodeRegex"], [292, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[292, 6, 1, "", "labels"], [292, 6, 1, "", "predictions"], [292, 3, 1, "", "reset"], [292, 3, 1, "", "result"], [292, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[292, 6, 1, "", "nondigit_punct_re"], [292, 3, 1, "", "property_chars"], [292, 6, 1, "", "punct_nondigit_re"], [292, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[293, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[295, 2, 1, "", "COCOEvalWrapper"], [295, 2, 1, "", "COCOWrapper"], [295, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [295, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [295, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[295, 3, 1, "", "ComputeMetrics"], [295, 3, 1, "", "GetAgnosticMode"], [295, 3, 1, "", "GetCategory"], [295, 3, 1, "", "GetCategoryIdList"], [295, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[295, 3, 1, "", "LoadAnnotations"], [295, 6, 1, "", "dataset"], [295, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[296, 1, 1, "", "evaluate"], [296, 1, 1, "", "exact_match_score"], [296, 1, 1, "", "f1_score"], [296, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[297, 1, 1, "", "evaluate"], [297, 1, 1, "", "f1_score"], [297, 1, 1, "", "metric_max_over_ground_truths"], [297, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[299, 2, 1, "", "Accuracy"], [299, 2, 1, "", "BaseMetric"], [299, 2, 1, "", "COCOmAPv2"], [299, 2, 1, "", "F1"], [299, 2, 1, "", "GeneralTopK"], [299, 2, 1, "", "Loss"], [299, 2, 1, "", "MAE"], [299, 2, 1, "", "METRICS"], [299, 2, 1, "", "MSE"], [299, 2, 1, "", "MXNetMetrics"], [299, 2, 1, "", "Metric"], [299, 2, 1, "", "ONNXRTGLUE"], [299, 2, 1, "", "ONNXRTITMetrics"], [299, 2, 1, "", "ONNXRTQLMetrics"], [299, 2, 1, "", "PyTorchLoss"], [299, 2, 1, "", "PyTorchMetrics"], [299, 2, 1, "", "RMSE"], [299, 2, 1, "", "ROC"], [299, 2, 1, "", "SquadF1"], [299, 2, 1, "", "TensorflowCOCOMAP"], [299, 2, 1, "", "TensorflowMAP"], [299, 2, 1, "", "TensorflowMetrics"], [299, 2, 1, "", "TensorflowTopK"], [299, 2, 1, "", "TensorflowVOCMAP"], [299, 2, 1, "", "WrapMXNetMetric"], [299, 2, 1, "", "WrapONNXRTMetric"], [299, 2, 1, "", "WrapPyTorchMetric"], [299, 2, 1, "", "mIOU"], [299, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[299, 6, 1, "", "label_list"], [299, 6, 1, "", "pred_list"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 6, 1, "", "sample"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[299, 4, 1, "", "hvd"], [299, 4, 1, "", "metric"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[299, 6, 1, "", "k"], [299, 6, 1, "", "num_correct"], [299, 6, 1, "", "num_sample"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 6, 1, "", "sample"], [299, 6, 1, "", "sum"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[299, 6, 1, "", "compare_label"], [299, 6, 1, "", "label_list"], [299, 6, 1, "", "pred_list"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[299, 6, 1, "", "metrics"], [299, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[299, 6, 1, "", "compare_label"], [299, 6, 1, "", "label_list"], [299, 6, 1, "", "pred_list"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[299, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[299, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[299, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[299, 3, 1, "", "compute"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[299, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[299, 6, 1, "", "mse"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[299, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[299, 6, 1, "", "k"], [299, 6, 1, "", "num_correct"], [299, 6, 1, "", "num_sample"], [299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[299, 3, 1, "", "reset"], [299, 3, 1, "", "result"], [299, 3, 1, "", "update"]], "neural_compressor.model": [[302, 2, 1, "", "BaseModel"], [302, 2, 1, "", "Model"], [301, 0, 0, "-", "base_model"], [303, 0, 0, "-", "keras_model"], [304, 0, 0, "-", "model"], [305, 0, 0, "-", "mxnet_model"], [306, 0, 0, "-", "nets_factory"], [307, 0, 0, "-", "onnx_model"], [308, 0, 0, "-", "tensorflow_model"], [309, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[302, 3, 1, "", "export"], [302, 3, 1, "", "framework"], [302, 4, 1, "", "graph_info"], [302, 4, 1, "", "model"], [302, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[301, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[301, 3, 1, "", "export"], [301, 3, 1, "", "framework"], [301, 4, 1, "", "graph_info"], [301, 4, 1, "", "model"], [301, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[303, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[303, 3, 1, "", "export"], [303, 3, 1, "", "framework"], [303, 4, 1, "", "graph_info"], [303, 4, 1, "", "model"], [303, 3, 1, "", "save"]], "neural_compressor.model.model": [[304, 2, 1, "", "Model"], [304, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[305, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[305, 3, 1, "", "framework"], [305, 4, 1, "", "model"], [305, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[307, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[307, 3, 1, "", "find_node_by_name"], [307, 3, 1, "", "find_nodes_by_initializer"], [307, 3, 1, "", "framework"], [307, 3, 1, "", "get_scale_zero"], [307, 4, 1, "", "graph_info"], [307, 4, 1, "", "model"], [307, 3, 1, "", "save"], [307, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.tensorflow_model": [[308, 2, 1, "", "TensorflowBaseModel"], [308, 2, 1, "", "TensorflowCheckpointModel"], [308, 2, 1, "", "TensorflowQATModel"], [308, 2, 1, "", "TensorflowSavedModelModel"], [308, 1, 1, "", "checkpoint_session"], [308, 1, 1, "", "estimator_session"], [308, 1, 1, "", "frozen_pb_session"], [308, 1, 1, "", "get_model_type"], [308, 1, 1, "", "graph_def_session"], [308, 1, 1, "", "graph_session"], [308, 1, 1, "", "keras_session"], [308, 1, 1, "", "load_saved_model"], [308, 1, 1, "", "saved_model_session"], [308, 1, 1, "", "slim_session"], [308, 1, 1, "", "validate_and_inference_input_output"], [308, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[308, 3, 1, "", "framework"], [308, 4, 1, "", "graph_info"], [308, 4, 1, "", "model"], [308, 3, 1, "", "save"], [308, 4, 1, "", "weights"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[308, 4, 1, "", "model"], [308, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[308, 4, 1, "", "model"], [308, 3, 1, "", "report_sparsity"], [308, 3, 1, "", "save"]], "neural_compressor.model.torch_model": [[309, 2, 1, "", "IPEXModel"], [309, 2, 1, "", "PyTorchBaseModel"], [309, 2, 1, "", "PyTorchFXModel"], [309, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[309, 4, 1, "", "graph_info"], [309, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[309, 3, 1, "", "framework"], [309, 3, 1, "", "get_all_weight_names"], [309, 3, 1, "", "get_gradient"], [309, 3, 1, "", "get_inputs"], [309, 3, 1, "", "get_weight"], [309, 4, 1, "", "model"], [309, 3, 1, "", "prune_weights_"], [309, 3, 1, "", "report_sparsity"], [309, 3, 1, "", "update_gradient"], [309, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[309, 3, 1, "", "export"], [309, 4, 1, "", "graph_info"], [309, 3, 1, "", "save"]], "neural_compressor.objective": [[310, 2, 1, "", "Accuracy"], [310, 2, 1, "", "Footprint"], [310, 2, 1, "", "ModelSize"], [310, 2, 1, "", "Objective"], [310, 2, 1, "", "Performance"], [310, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[310, 3, 1, "", "end"], [310, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[310, 3, 1, "", "end"], [310, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[310, 3, 1, "", "end"], [310, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[310, 3, 1, "", "end"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "result_list"], [310, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[310, 3, 1, "", "end"], [310, 3, 1, "", "start"]], "neural_compressor.pruners": [[311, 0, 0, "-", "gradient_sensitivity"], [312, 0, 0, "-", "group_lasso"], [314, 0, 0, "-", "magnitude"], [315, 0, 0, "-", "pattern_lock"], [316, 0, 0, "-", "pruner"]], "neural_compressor.pruners.pruner": [[316, 1, 1, "", "pruner_registry"]], "neural_compressor.pruning": [[317, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[317, 3, 1, "", "on_epoch_begin"], [317, 3, 1, "", "on_epoch_end"], [317, 3, 1, "", "on_step_begin"], [317, 3, 1, "", "on_step_end"]], "neural_compressor.quantization": [[318, 1, 1, "", "fit"]], "neural_compressor.strategy": [[319, 0, 0, "-", "auto_mixed_precision"], [320, 0, 0, "-", "basic"], [321, 0, 0, "-", "bayesian"], [322, 0, 0, "-", "conservative"], [323, 0, 0, "-", "exhaustive"], [324, 0, 0, "-", "hawq_v2"], [326, 0, 0, "-", "mse"], [327, 0, 0, "-", "mse_v2"], [328, 0, 0, "-", "random"], [329, 0, 0, "-", "strategy"], [331, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[319, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[319, 3, 1, "", "next_tune_cfg"], [319, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[320, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[320, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[321, 2, 1, "", "BayesianTuneStrategy"], [321, 2, 1, "", "TargetSpace"], [321, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[321, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[321, 3, 1, "", "get_target"], [321, 3, 1, "", "max"], [321, 3, 1, "", "random_sample"], [321, 3, 1, "", "register"], [321, 3, 1, "", "res"]], "neural_compressor.strategy.conservative": [[322, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[322, 3, 1, "", "next_tune_cfg"], [322, 3, 1, "", "stop"], [322, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[323, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[323, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[324, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[324, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[326, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[326, 3, 1, "", "mse_impact_lst"], [326, 3, 1, "", "mse_metric_gap"], [326, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[327, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[327, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[328, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[328, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[329, 2, 1, "", "TuneStrategy"], [329, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[329, 3, 1, "", "next_tune_cfg"], [329, 3, 1, "", "stop"], [329, 3, 1, "", "traverse"]], "neural_compressor.strategy.utils": [[330, 0, 0, "-", "helper"], [332, 0, 0, "-", "tuning_sampler"], [333, 0, 0, "-", "tuning_space"], [334, 0, 0, "-", "tuning_structs"]], "neural_compressor.training": [[335, 2, 1, "", "CompressionManager"], [335, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[335, 3, 1, "", "export"], [335, 3, 1, "", "save"]], "neural_compressor.utils": [[339, 2, 1, "", "KL_Divergence"], [339, 2, 1, "", "LayerHistogramCollector"], [336, 0, 0, "-", "collect_layer_histogram"], [337, 0, 0, "-", "constant"], [338, 0, 0, "-", "create_obj_from_config"], [340, 0, 0, "-", "kl_divergence"], [341, 0, 0, "-", "load_huggingface"], [342, 0, 0, "-", "logger"], [343, 0, 0, "-", "options"], [344, 0, 0, "-", "pytorch"], [345, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[339, 3, 1, "", "expand_quantized_bins"], [339, 3, 1, "", "get_threshold"], [339, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[339, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[336, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[336, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[338, 1, 1, "", "create_eval_func"], [338, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[340, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[340, 3, 1, "", "expand_quantized_bins"], [340, 3, 1, "", "get_threshold"], [340, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[344, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[345, 2, 1, "", "LazyImport"], [345, 2, 1, "", "MODE"], [345, 1, 1, "", "combine_histogram"], [345, 1, 1, "", "dump_data_to_local"], [345, 1, 1, "", "dump_elapsed_time"], [345, 1, 1, "", "equal_dicts"], [345, 1, 1, "", "get_size"], [345, 1, 1, "", "get_tuning_history"], [345, 1, 1, "", "load_data_from_pkl"], [345, 1, 1, "", "recover"]], "neural_compressor.ux": [[418, 0, 0, "-", "components"], [474, 0, 0, "-", "inc_bench"], [483, 0, 0, "-", "utils"], [508, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[349, 0, 0, "-", "benchmark"], [353, 0, 0, "-", "config_generator"], [360, 0, 0, "-", "configuration_wizard"], [394, 0, 0, "-", "db_manager"], [399, 0, 0, "-", "diagnosis"], [407, 0, 0, "-", "file_browser"], [413, 0, 0, "-", "graph"], [419, 0, 0, "-", "jobs_management"], [423, 0, 0, "-", "manage_workspace"], [425, 0, 0, "-", "model"], [444, 0, 0, "-", "model_zoo"], [446, 0, 0, "-", "names_mapper"], [453, 0, 0, "-", "optimization"], [466, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[349, 2, 1, "", "Benchmarks"], [346, 0, 0, "-", "benchmark"], [347, 0, 0, "-", "benchmark_model"], [348, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, 2, 1, "", "Benchmark"], [346, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[346, 4, 1, "", "config_filename"], [346, 4, 1, "", "configuration_data"], [346, 3, 1, "", "execute"], [346, 3, 1, "", "generate_config"], [346, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, 1, 1, "", "benchmark_model"], [347, 1, 1, "", "parse_args"], [347, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, 1, 1, "", "benchmark_result_update"], [348, 1, 1, "", "benchmark_result_update_pytorch_script"], [348, 1, 1, "", "execute_benchmark"], [348, 1, 1, "", "execute_real_benchmark"], [348, 1, 1, "", "pytorch_script_bench_optimizations"], [348, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[350, 0, 0, "-", "benchmark_config_generator"], [351, 0, 0, "-", "config_generator"], [352, 0, 0, "-", "graph_optimization_config_generator"], [354, 0, 0, "-", "mixed_precision_config_generator"], [355, 0, 0, "-", "profiling_config_generator"], [356, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[350, 3, 1, "", "generate"], [350, 3, 1, "", "generate_accuracy_config"], [350, 3, 1, "", "generate_evaluation_config"], [350, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[351, 3, 1, "", "generate"], [351, 3, 1, "", "generate_dataloader_config"], [351, 3, 1, "", "generate_model_config"], [351, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[352, 3, 1, "", "generate"], [352, 3, 1, "", "generate_evaluation_config"], [352, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[354, 3, 1, "", "generate"], [354, 3, 1, "", "generate_evaluation_config"], [354, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[355, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[356, 3, 1, "", "generate"], [356, 3, 1, "", "generate_evaluation_config"], [356, 3, 1, "", "generate_quantization_config"], [356, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[357, 0, 0, "-", "configuration_parser"], [358, 0, 0, "-", "get_boundary_nodes"], [359, 0, 0, "-", "get_configuration"], [361, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, 2, 1, "", "ConfigurationParser"], [357, 1, 1, "", "normalize_string_list"], [357, 1, 1, "", "parse_list_value"], [357, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[357, 3, 1, "", "get_param_type"], [357, 3, 1, "", "parse"], [357, 3, 1, "", "parse_dataloader"], [357, 3, 1, "", "parse_evaluation_data"], [357, 3, 1, "", "parse_metric"], [357, 3, 1, "", "parse_transforms"], [357, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, 1, 1, "", "get_predefined_configuration"], [359, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, 2, 1, "", "Feeder"], [361, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[361, 3, 1, "", "feed"], [361, 3, 1, "", "get_dataloaders"], [361, 3, 1, "", "get_domains"], [361, 3, 1, "", "get_frameworks"], [361, 3, 1, "", "get_metrics"], [361, 3, 1, "", "get_models"], [361, 3, 1, "", "get_objectives"], [361, 3, 1, "", "get_precisions"], [361, 3, 1, "", "get_quantization_approaches"], [361, 3, 1, "", "get_strategies"], [361, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[394, 2, 1, "", "DBManager"], [362, 0, 0, "-", "db_manager"], [371, 0, 0, "-", "db_models"], [389, 0, 0, "-", "db_operations"], [395, 0, 0, "-", "params_interfaces"], [396, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[394, 3, 1, "", "create_all"], [394, 3, 1, "", "create_sqlalchemy_engine"], [394, 4, 1, "", "engine"], [394, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[362, 3, 1, "", "create_all"], [362, 3, 1, "", "create_sqlalchemy_engine"], [362, 4, 1, "", "engine"], [362, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[363, 0, 0, "-", "benchmark"], [364, 0, 0, "-", "benchmark_result"], [365, 0, 0, "-", "dataloader"], [366, 0, 0, "-", "dataset"], [367, 0, 0, "-", "domain"], [368, 0, 0, "-", "domain_flavour"], [369, 0, 0, "-", "example"], [370, 0, 0, "-", "framework"], [372, 0, 0, "-", "metric"], [373, 0, 0, "-", "model"], [374, 0, 0, "-", "optimization"], [375, 0, 0, "-", "optimization_type"], [376, 0, 0, "-", "precision"], [377, 0, 0, "-", "profiling"], [378, 0, 0, "-", "profiling_result"], [379, 0, 0, "-", "project"], [380, 0, 0, "-", "transform"], [381, 0, 0, "-", "tuning_details"], [382, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[363, 3, 1, "", "add"], [363, 3, 1, "", "build_info"], [363, 3, 1, "", "clean_status"], [363, 3, 1, "", "delete_benchmark"], [363, 3, 1, "", "details"], [363, 3, 1, "", "list"], [363, 3, 1, "", "update_batch_size"], [363, 3, 1, "", "update_config_path"], [363, 3, 1, "", "update_cores_per_instance"], [363, 3, 1, "", "update_dataset"], [363, 3, 1, "", "update_duration"], [363, 3, 1, "", "update_execution_command"], [363, 3, 1, "", "update_log_path"], [363, 3, 1, "", "update_mode"], [363, 3, 1, "", "update_number_of_instance"], [363, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[364, 3, 1, "", "add"], [364, 3, 1, "", "build_info"], [364, 3, 1, "", "update_accuracy"], [364, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, 2, 1, "", "Dataloader"], [365, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[365, 3, 1, "", "list"], [365, 3, 1, "", "list_by_framework"], [365, 3, 1, "", "query_to_list"], [365, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[366, 3, 1, "", "add"], [366, 3, 1, "", "build_info"], [366, 3, 1, "", "delete_dataset"], [366, 3, 1, "", "details"], [366, 3, 1, "", "list"], [366, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, 2, 1, "", "Domain"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[367, 3, 1, "", "get_domain_id"], [367, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, 2, 1, "", "DomainFlavour"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[368, 3, 1, "", "get_domain_flavour_id"], [368, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, 2, 1, "", "Framework"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[370, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, 2, 1, "", "Metric"], [372, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[372, 3, 1, "", "list"], [372, 3, 1, "", "list_by_framework"], [372, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[373, 3, 1, "", "add"], [373, 3, 1, "", "build_info"], [373, 3, 1, "", "delete_model"], [373, 3, 1, "", "details"], [373, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[374, 3, 1, "", "add"], [374, 3, 1, "", "build_info"], [374, 3, 1, "", "clean_status"], [374, 3, 1, "", "delete_optimization"], [374, 3, 1, "", "details"], [374, 3, 1, "", "get_optimization_by_project_and_model"], [374, 3, 1, "", "get_pinned_benchmarks"], [374, 3, 1, "", "list"], [374, 3, 1, "", "pin_accuracy_benchmark"], [374, 3, 1, "", "pin_performance_benchmark"], [374, 3, 1, "", "unpin_benchmark"], [374, 3, 1, "", "update_batch_size"], [374, 3, 1, "", "update_config_path"], [374, 3, 1, "", "update_dataset"], [374, 3, 1, "", "update_duration"], [374, 3, 1, "", "update_execution_command"], [374, 3, 1, "", "update_log_path"], [374, 3, 1, "", "update_optimized_model"], [374, 3, 1, "", "update_precision"], [374, 3, 1, "", "update_sampling_size"], [374, 3, 1, "", "update_status"], [374, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, 2, 1, "", "OptimizationType"], [375, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[375, 3, 1, "", "add"], [375, 3, 1, "", "get_optimization_type_by_id"], [375, 3, 1, "", "get_optimization_type_by_name"], [375, 3, 1, "", "get_optimization_type_for_precision"], [375, 3, 1, "", "get_optimization_type_id"], [375, 3, 1, "", "list"], [375, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, 2, 1, "", "Precision"], [376, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[376, 3, 1, "", "add"], [376, 3, 1, "", "get_precision_by_id"], [376, 3, 1, "", "get_precision_by_name"], [376, 3, 1, "", "get_precision_id"], [376, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[377, 3, 1, "", "add"], [377, 3, 1, "", "build_info"], [377, 3, 1, "", "clean_status"], [377, 3, 1, "", "delete_profiling"], [377, 3, 1, "", "details"], [377, 3, 1, "", "list"], [377, 3, 1, "", "update_dataset"], [377, 3, 1, "", "update_duration"], [377, 3, 1, "", "update_execution_command"], [377, 3, 1, "", "update_log_path"], [377, 3, 1, "", "update_num_threads"], [377, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[378, 3, 1, "", "add"], [378, 3, 1, "", "build_info"], [378, 3, 1, "", "bulk_add"], [378, 3, 1, "", "delete_results"], [378, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[379, 3, 1, "", "create_project"], [379, 3, 1, "", "delete_project"], [379, 3, 1, "", "get_model_by_name"], [379, 3, 1, "", "list_projects"], [379, 3, 1, "", "project_details"], [379, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, 2, 1, "", "Transform"], [380, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[380, 3, 1, "", "list"], [380, 3, 1, "", "list_by_domain"], [380, 3, 1, "", "list_by_framework"], [380, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[381, 3, 1, "", "add"], [381, 3, 1, "", "delete_tuning_details"], [381, 3, 1, "", "update"], [381, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[382, 3, 1, "", "add"], [382, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[389, 2, 1, "", "BenchmarkAPIInterface"], [389, 2, 1, "", "DatasetAPIInterface"], [389, 2, 1, "", "DiagnosisAPIInterface"], [389, 2, 1, "", "DictionariesAPIInterface"], [389, 2, 1, "", "ExamplesAPIInterface"], [389, 2, 1, "", "ModelAPIInterface"], [389, 2, 1, "", "OptimizationAPIInterface"], [389, 2, 1, "", "ProfilingAPIInterface"], [389, 2, 1, "", "ProjectAPIInterface"], [383, 0, 0, "-", "benchmark_api_interface"], [384, 0, 0, "-", "dataset_api_interface"], [385, 0, 0, "-", "db_operations"], [386, 0, 0, "-", "diagnosis_api_interface"], [387, 0, 0, "-", "dictionaries_api_interface"], [388, 0, 0, "-", "examples_api_interface"], [390, 0, 0, "-", "model_api_interface"], [391, 0, 0, "-", "optimization_api_interface"], [392, 0, 0, "-", "profiling_api_interface"], [393, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[389, 3, 1, "", "add_benchmark"], [389, 3, 1, "", "add_result"], [389, 3, 1, "", "clean_status"], [389, 3, 1, "", "delete_benchmark"], [389, 3, 1, "", "edit_benchmark"], [389, 3, 1, "", "get_benchmark_details"], [389, 3, 1, "", "list_benchmarks"], [389, 3, 1, "", "parse_benchmark_data"], [389, 3, 1, "", "parse_benchmark_edit_data"], [389, 3, 1, "", "update_benchmark_accuracy"], [389, 3, 1, "", "update_benchmark_duration"], [389, 3, 1, "", "update_benchmark_performance"], [389, 3, 1, "", "update_benchmark_status"], [389, 3, 1, "", "update_execution_command"], [389, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[389, 3, 1, "", "add_dataset"], [389, 3, 1, "", "check_if_custom_metric_or_dataloader"], [389, 3, 1, "", "dataloader_path"], [389, 3, 1, "", "delete_dataset"], [389, 3, 1, "", "generate_custom_template"], [389, 3, 1, "", "generate_template"], [389, 3, 1, "", "get_dataset_details"], [389, 3, 1, "", "get_predefined_dataset"], [389, 3, 1, "", "list_datasets"], [389, 3, 1, "", "parse_dataset_data"], [389, 3, 1, "", "prepare_predefined_dataloader"], [389, 3, 1, "", "prepare_predefined_transform"], [389, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[389, 3, 1, "", "generate_optimization"], [389, 3, 1, "", "get_op_details"], [389, 3, 1, "", "get_op_list"], [389, 3, 1, "", "histogram"], [389, 3, 1, "", "model_wise_params"], [389, 3, 1, "", "parse_model_wise_config"], [389, 3, 1, "", "parse_op_wise_config"], [389, 3, 1, "", "parse_optimization_data"], [389, 3, 1, "", "parse_wise_parameters"], [389, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[389, 3, 1, "", "list_dataloaders"], [389, 3, 1, "", "list_dataloaders_by_framework"], [389, 3, 1, "", "list_domain_flavours"], [389, 3, 1, "", "list_domains"], [389, 3, 1, "", "list_metrics"], [389, 3, 1, "", "list_metrics_by_framework"], [389, 3, 1, "", "list_optimization_types"], [389, 3, 1, "", "list_optimization_types_for_precision"], [389, 3, 1, "", "list_precisions"], [389, 3, 1, "", "list_transforms"], [389, 3, 1, "", "list_transforms_by_domain"], [389, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[389, 3, 1, "", "create_project"], [389, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[389, 3, 1, "", "add_model"], [389, 3, 1, "", "delete_model"], [389, 3, 1, "", "get_model_details"], [389, 3, 1, "", "list_models"], [389, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[389, 3, 1, "", "add_optimization"], [389, 3, 1, "", "add_quantization_optimization"], [389, 3, 1, "", "add_standard_optimization"], [389, 3, 1, "", "add_tuning_history"], [389, 3, 1, "", "clean_status"], [389, 3, 1, "", "delete_optimization"], [389, 3, 1, "", "edit_optimization"], [389, 3, 1, "", "get_optimization_details"], [389, 3, 1, "", "list_optimizations"], [389, 3, 1, "", "parse_optimization_data"], [389, 3, 1, "", "parse_optimization_edit_data"], [389, 3, 1, "", "parse_tuning_history"], [389, 3, 1, "", "pin_accuracy_benchmark"], [389, 3, 1, "", "pin_performance_benchmark"], [389, 3, 1, "", "update_execution_command"], [389, 3, 1, "", "update_optimization_duration"], [389, 3, 1, "", "update_optimization_status"], [389, 3, 1, "", "update_optimized_model"], [389, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[389, 3, 1, "", "add_profiling"], [389, 3, 1, "", "add_result"], [389, 3, 1, "", "bulk_add_results"], [389, 3, 1, "", "clean_status"], [389, 3, 1, "", "delete_profiling"], [389, 3, 1, "", "edit_profiling"], [389, 3, 1, "", "get_profiling_details"], [389, 3, 1, "", "list_profilings"], [389, 3, 1, "", "parse_profiling_data"], [389, 3, 1, "", "parse_profiling_edit_data"], [389, 3, 1, "", "parse_profiling_result_data"], [389, 3, 1, "", "update_execution_command"], [389, 3, 1, "", "update_log_path"], [389, 3, 1, "", "update_profiling_duration"], [389, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[389, 3, 1, "", "add_dummy_dataset"], [389, 3, 1, "", "add_model"], [389, 3, 1, "", "create_project"], [389, 3, 1, "", "delete_project"], [389, 3, 1, "", "get_project_details"], [389, 3, 1, "", "list_projects"], [389, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, 2, 1, "", "BenchmarkAPIInterface"], [383, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[383, 3, 1, "", "add_benchmark"], [383, 3, 1, "", "add_result"], [383, 3, 1, "", "clean_status"], [383, 3, 1, "", "delete_benchmark"], [383, 3, 1, "", "edit_benchmark"], [383, 3, 1, "", "get_benchmark_details"], [383, 3, 1, "", "list_benchmarks"], [383, 3, 1, "", "parse_benchmark_data"], [383, 3, 1, "", "parse_benchmark_edit_data"], [383, 3, 1, "", "update_benchmark_accuracy"], [383, 3, 1, "", "update_benchmark_duration"], [383, 3, 1, "", "update_benchmark_performance"], [383, 3, 1, "", "update_benchmark_status"], [383, 3, 1, "", "update_execution_command"], [383, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, 2, 1, "", "DatasetAPIInterface"], [384, 1, 1, "", "initialize_associations"], [384, 1, 1, "", "initialize_precision_optimization_types_association"], [384, 1, 1, "", "search_in_list_of_dict"], [384, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [384, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[384, 3, 1, "", "add_dataset"], [384, 3, 1, "", "check_if_custom_metric_or_dataloader"], [384, 3, 1, "", "dataloader_path"], [384, 3, 1, "", "delete_dataset"], [384, 3, 1, "", "generate_custom_template"], [384, 3, 1, "", "generate_template"], [384, 3, 1, "", "get_dataset_details"], [384, 3, 1, "", "get_predefined_dataset"], [384, 3, 1, "", "list_datasets"], [384, 3, 1, "", "parse_dataset_data"], [384, 3, 1, "", "prepare_predefined_dataloader"], [384, 3, 1, "", "prepare_predefined_transform"], [384, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, 1, 1, "", "initialize_associations"], [385, 1, 1, "", "initialize_precision_optimization_types_association"], [385, 1, 1, "", "search_in_list_of_dict"], [385, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [385, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[386, 3, 1, "", "generate_optimization"], [386, 3, 1, "", "get_op_details"], [386, 3, 1, "", "get_op_list"], [386, 3, 1, "", "histogram"], [386, 3, 1, "", "model_wise_params"], [386, 3, 1, "", "parse_model_wise_config"], [386, 3, 1, "", "parse_op_wise_config"], [386, 3, 1, "", "parse_optimization_data"], [386, 3, 1, "", "parse_wise_parameters"], [386, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[387, 3, 1, "", "list_dataloaders"], [387, 3, 1, "", "list_dataloaders_by_framework"], [387, 3, 1, "", "list_domain_flavours"], [387, 3, 1, "", "list_domains"], [387, 3, 1, "", "list_metrics"], [387, 3, 1, "", "list_metrics_by_framework"], [387, 3, 1, "", "list_optimization_types"], [387, 3, 1, "", "list_optimization_types_for_precision"], [387, 3, 1, "", "list_precisions"], [387, 3, 1, "", "list_transforms"], [387, 3, 1, "", "list_transforms_by_domain"], [387, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[388, 3, 1, "", "create_project"], [388, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[390, 3, 1, "", "add_model"], [390, 3, 1, "", "delete_model"], [390, 3, 1, "", "get_model_details"], [390, 3, 1, "", "list_models"], [390, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[391, 3, 1, "", "add_optimization"], [391, 3, 1, "", "add_quantization_optimization"], [391, 3, 1, "", "add_standard_optimization"], [391, 3, 1, "", "add_tuning_history"], [391, 3, 1, "", "clean_status"], [391, 3, 1, "", "delete_optimization"], [391, 3, 1, "", "edit_optimization"], [391, 3, 1, "", "get_optimization_details"], [391, 3, 1, "", "list_optimizations"], [391, 3, 1, "", "parse_optimization_data"], [391, 3, 1, "", "parse_optimization_edit_data"], [391, 3, 1, "", "parse_tuning_history"], [391, 3, 1, "", "pin_accuracy_benchmark"], [391, 3, 1, "", "pin_performance_benchmark"], [391, 3, 1, "", "update_execution_command"], [391, 3, 1, "", "update_optimization_duration"], [391, 3, 1, "", "update_optimization_status"], [391, 3, 1, "", "update_optimized_model"], [391, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[392, 3, 1, "", "add_profiling"], [392, 3, 1, "", "add_result"], [392, 3, 1, "", "bulk_add_results"], [392, 3, 1, "", "clean_status"], [392, 3, 1, "", "delete_profiling"], [392, 3, 1, "", "edit_profiling"], [392, 3, 1, "", "get_profiling_details"], [392, 3, 1, "", "list_profilings"], [392, 3, 1, "", "parse_profiling_data"], [392, 3, 1, "", "parse_profiling_edit_data"], [392, 3, 1, "", "parse_profiling_result_data"], [392, 3, 1, "", "update_execution_command"], [392, 3, 1, "", "update_log_path"], [392, 3, 1, "", "update_profiling_duration"], [392, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[393, 3, 1, "", "add_dummy_dataset"], [393, 3, 1, "", "add_model"], [393, 3, 1, "", "create_project"], [393, 3, 1, "", "delete_project"], [393, 3, 1, "", "get_project_details"], [393, 3, 1, "", "list_projects"], [393, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, 2, 1, "", "BenchmarkAddParamsInterface"], [395, 2, 1, "", "BenchmarkEditParamsInterface"], [395, 2, 1, "", "DatasetAddParamsInterface"], [395, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [395, 2, 1, "", "ModelAddParamsInterface"], [395, 2, 1, "", "OptimizationAddParamsInterface"], [395, 2, 1, "", "OptimizationEditParamsInterface"], [395, 2, 1, "", "ProfilingAddParamsInterface"], [395, 2, 1, "", "ProfilingEditParamsInterface"], [395, 2, 1, "", "ProfilingResultAddParamsInterface"], [395, 2, 1, "", "TuningHistoryInterface"], [395, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[395, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[395, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[395, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[396, 1, 1, "", "get_framework_dataloaders_config"], [396, 1, 1, "", "get_framework_transforms_config"], [396, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[397, 0, 0, "-", "diagnosis"], [398, 0, 0, "-", "factory"], [400, 0, 0, "-", "onnx_diagnosis"], [402, 0, 0, "-", "op_details"], [403, 0, 0, "-", "op_entry"], [404, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[397, 3, 1, "", "calculate_mse"], [397, 3, 1, "", "get_histogram_data"], [397, 3, 1, "", "get_op_details"], [397, 3, 1, "", "get_op_list"], [397, 3, 1, "", "get_tensors_info"], [397, 3, 1, "", "load_quantization_config"], [397, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[398, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[398, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[401, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[401, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, 2, 1, "", "OpActivation"], [402, 2, 1, "", "OpDetails"], [402, 2, 1, "", "OpPattern"], [402, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[402, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[403, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[405, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[405, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[406, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, 1, 1, "", "create_dir_entry"], [406, 1, 1, "", "create_entry"], [406, 1, 1, "", "create_file_entry"], [406, 1, 1, "", "filter_requested_entries"], [406, 1, 1, "", "get_directory_entries"], [406, 1, 1, "", "get_filter_value"], [406, 1, 1, "", "get_non_hidden_directory_entries"], [406, 1, 1, "", "get_requested_path"], [406, 1, 1, "", "get_setting_value"], [406, 1, 1, "", "is_dataset_or_directory_entry"], [406, 1, 1, "", "is_directory_entry"], [406, 1, 1, "", "is_model_or_directory_entry"], [406, 1, 1, "", "should_show_files"], [406, 1, 1, "", "should_show_only_model_files"], [406, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[408, 0, 0, "-", "attribute"], [409, 0, 0, "-", "collapser"], [410, 0, 0, "-", "edge"], [411, 0, 0, "-", "graph"], [412, 0, 0, "-", "graph_reader"], [414, 0, 0, "-", "node"], [415, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[408, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[409, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[409, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[410, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[410, 4, 1, "", "source"], [410, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[411, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[411, 3, 1, "", "add_edge"], [411, 3, 1, "", "add_node"], [411, 4, 1, "", "edges"], [411, 3, 1, "", "get_node"], [411, 3, 1, "", "get_target_nodes"], [411, 3, 1, "", "highlight_pattern"], [411, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[412, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[412, 3, 1, "", "find_pattern_in_graph"], [412, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[414, 2, 1, "", "GroupNode"], [414, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[416, 0, 0, "-", "onnxrt_reader"], [417, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[416, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[417, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[420, 0, 0, "-", "jobs_control_queue"], [421, 0, 0, "-", "jobs_manager"], [422, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[423, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[424, 0, 0, "-", "domain"], [426, 0, 0, "-", "model"], [427, 0, 0, "-", "model_type_getter"], [428, 0, 0, "-", "onnxrt"], [430, 0, 0, "-", "pytorch"], [432, 0, 0, "-", "repository"], [433, 0, 0, "-", "shape"], [435, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[424, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[426, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[426, 4, 1, "", "domain"], [426, 3, 1, "", "ensure_supported_path"], [426, 3, 1, "", "get_framework_name"], [426, 3, 1, "", "get_input_nodes"], [426, 3, 1, "", "get_model_graph"], [426, 3, 1, "", "get_output_nodes"], [426, 3, 1, "", "get_tensors_info"], [426, 3, 1, "", "guard_requirements_installed"], [426, 4, 1, "", "input_shape"], [426, 4, 1, "", "shape_elements_order"], [426, 4, 1, "", "supports_graph"], [426, 3, 1, "", "supports_path"], [426, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[427, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[429, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, 2, 1, "", "OnnxrtModel"], [429, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[429, 4, 1, "", "domain"], [429, 4, 1, "", "filtered_input_nodes"], [429, 3, 1, "", "get_framework_name"], [429, 3, 1, "", "get_model_graph"], [429, 3, 1, "", "guard_requirements_installed"], [429, 4, 1, "", "input_shape"], [429, 4, 1, "", "nc_model_instance"], [429, 4, 1, "", "shape_elements_order"], [429, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[431, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[431, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[431, 3, 1, "", "get_framework_name"], [431, 3, 1, "", "guard_requirements_installed"], [431, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[432, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[432, 3, 1, "", "get_framework_from_path"], [432, 3, 1, "", "get_frameworks"], [432, 3, 1, "", "get_model"], [432, 3, 1, "", "get_supported_frameworks"], [432, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[433, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[433, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[434, 0, 0, "-", "frozen_pb"], [436, 0, 0, "-", "keras"], [437, 0, 0, "-", "meta_graph"], [438, 0, 0, "-", "model"], [439, 0, 0, "-", "saved_model"], [440, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[434, 3, 1, "", "supports_path"], [434, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[436, 3, 1, "", "get_input_nodes"], [436, 3, 1, "", "get_output_nodes"], [436, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[437, 3, 1, "", "get_input_nodes"], [437, 3, 1, "", "get_model_graph"], [437, 3, 1, "", "get_output_nodes"], [437, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[438, 3, 1, "", "get_framework_name"], [438, 3, 1, "", "get_input_nodes"], [438, 3, 1, "", "get_model_graph"], [438, 3, 1, "", "get_output_nodes"], [438, 3, 1, "", "guard_requirements_installed"], [438, 4, 1, "", "input_shape"], [438, 4, 1, "", "nc_model_instance"], [438, 4, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[439, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[441, 0, 0, "-", "download_config"], [442, 0, 0, "-", "download_model"], [443, 0, 0, "-", "downloader"], [445, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[443, 3, 1, "", "download"], [443, 3, 1, "", "download_config"], [443, 3, 1, "", "download_file"], [443, 3, 1, "", "download_model"], [443, 3, 1, "", "download_yaml_config"], [443, 3, 1, "", "get_yaml_url"], [443, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, 1, 1, "", "check_version"], [445, 1, 1, "", "get_available_models"], [445, 1, 1, "", "get_framework_module_name"], [445, 1, 1, "", "get_installed_frameworks"], [445, 1, 1, "", "list_models"], [445, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[447, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, 2, 1, "", "MappingDirection"], [447, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[447, 4, 1, "", "domain_flavour_mappings"], [447, 4, 1, "", "domain_mappings"], [447, 4, 1, "", "framework_mappings"], [447, 3, 1, "", "map_name"], [447, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[453, 2, 1, "", "Optimizations"], [448, 0, 0, "-", "execute_optimization"], [449, 0, 0, "-", "factory"], [451, 0, 0, "-", "graph_optimizer"], [454, 0, 0, "-", "mixed_precision"], [457, 0, 0, "-", "neural_coder_optimization"], [459, 0, 0, "-", "optimization"], [460, 0, 0, "-", "tune"], [463, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, 1, 1, "", "check_if_collect_tuning_history"], [448, 1, 1, "", "execute_optimization"], [448, 1, 1, "", "execute_optimization_pytorch_script"], [448, 1, 1, "", "execute_optimization_regular"], [448, 1, 1, "", "parse_logs"], [448, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[449, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[449, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[450, 0, 0, "-", "graph_optimization"], [452, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[450, 4, 1, "", "configuration_data"], [450, 3, 1, "", "execute"], [450, 3, 1, "", "generate_config"], [450, 4, 1, "", "optimization_script"], [450, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, 1, 1, "", "optimize_graph"], [452, 1, 1, "", "optimize_graph_config"], [452, 1, 1, "", "parse_args"], [452, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[455, 0, 0, "-", "mixed_precision"], [456, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[455, 4, 1, "", "configuration_data"], [455, 3, 1, "", "execute"], [455, 3, 1, "", "generate_config"], [455, 4, 1, "", "optimization_script"], [455, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, 1, 1, "", "optimize_graph"], [456, 1, 1, "", "optimize_graph_config"], [456, 1, 1, "", "parse_args"], [456, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[458, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[459, 2, 1, "", "DataloaderInterface"], [459, 2, 1, "", "Optimization"], [459, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[459, 4, 1, "", "command"], [459, 4, 1, "", "config_filename"], [459, 4, 1, "", "configuration_data"], [459, 3, 1, "", "execute"], [459, 3, 1, "", "generate_config"], [459, 4, 1, "", "optimization_script"], [459, 4, 1, "", "output_model_dir"], [459, 4, 1, "", "output_model_name"], [459, 4, 1, "", "parameters"], [459, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[461, 0, 0, "-", "tune_model"], [462, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, 1, 1, "", "parse_args"], [461, 1, 1, "", "set_eager_execution"], [461, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, 2, 1, "", "AccuracyCriterion"], [462, 2, 1, "", "Tuning"], [462, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[462, 4, 1, "", "configuration_data"], [462, 3, 1, "", "execute"], [462, 3, 1, "", "generate_config"], [462, 4, 1, "", "optimization_script"], [462, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, 2, 1, "", "TuningHistory"], [463, 2, 1, "", "Watcher"], [463, 1, 1, "", "tuning_history"], [463, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[463, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[463, 3, 1, "", "history_file_modification_time"], [463, 3, 1, "", "stop"], [463, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[464, 0, 0, "-", "execute_profiling"], [465, 0, 0, "-", "factory"], [467, 0, 0, "-", "profile_model"], [468, 0, 0, "-", "profiler"], [469, 0, 0, "-", "profiling"], [471, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, 1, 1, "", "execute_profiling"], [464, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[465, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[467, 1, 1, "", "load_profiling_details"], [467, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[468, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[468, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[469, 2, 1, "", "DataloaderInterface"], [469, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[469, 4, 1, "", "config_filename"], [469, 4, 1, "", "config_path"], [469, 3, 1, "", "execute"], [469, 3, 1, "", "generate_config"], [469, 4, 1, "", "profiling_data"], [469, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[470, 0, 0, "-", "factory"], [472, 0, 0, "-", "profiler"], [473, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[470, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[472, 3, 1, "", "build_dataloader"], [472, 3, 1, "", "convert_nodes_to_list"], [472, 3, 1, "", "create_tf_config"], [472, 3, 1, "", "get_node_by_name"], [472, 3, 1, "", "initialize_graph"], [472, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[474, 1, 1, "", "main"], [474, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[476, 0, 0, "-", "consts"], [477, 0, 0, "-", "environment"], [478, 0, 0, "-", "exceptions"], [479, 0, 0, "-", "executor"], [480, 0, 0, "-", "expiring_dict"], [481, 0, 0, "-", "github_info"], [482, 0, 0, "-", "hw_info"], [484, 0, 0, "-", "json_serializer"], [485, 0, 0, "-", "logger"], [486, 0, 0, "-", "parser"], [487, 0, 0, "-", "proc"], [488, 0, 0, "-", "processes"], [489, 0, 0, "-", "singleton"], [490, 0, 0, "-", "templates"], [493, 0, 0, "-", "utils"], [498, 0, 0, "-", "workload"], [504, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[476, 2, 1, "", "DomainFlavours"], [476, 2, 1, "", "Domains"], [476, 2, 1, "", "ExecutionStatus"], [476, 2, 1, "", "Frameworks"], [476, 2, 1, "", "OptimizationTypes"], [476, 2, 1, "", "Precisions"], [476, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[477, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[477, 3, 1, "", "clean_workloads_wip_status"], [477, 3, 1, "", "ensure_workdir_exists_and_writeable"], [477, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[478, 7, 1, "", "AccessDeniedException"], [478, 7, 1, "", "ClientErrorException"], [478, 7, 1, "", "InternalException"], [478, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[479, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[479, 4, 1, "", "additional_log_names"], [479, 3, 1, "", "call"], [479, 3, 1, "", "call_one"], [479, 3, 1, "", "is_multi_commands"], [479, 4, 1, "", "log_name"], [479, 4, 1, "", "process_duration"], [479, 3, 1, "", "refresh_workdir"], [479, 4, 1, "", "request_id"], [479, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[480, 2, 1, "", "ExpiringDict"], [480, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[480, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[481, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[481, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[482, 2, 1, "", "HWInfo"], [482, 1, 1, "", "get_bios_version"], [482, 1, 1, "", "get_distribution"], [482, 1, 1, "", "get_framework_dependency_info"], [482, 1, 1, "", "get_framework_info"], [482, 1, 1, "", "get_kernel_version"], [482, 1, 1, "", "get_number_of_sockets"], [482, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[482, 3, 1, "", "initialize"], [482, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[484, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[484, 3, 1, "", "serialize"], [484, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[485, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[486, 2, 1, "", "AccuracyParser"], [486, 2, 1, "", "BenchmarkParserFactory"], [486, 2, 1, "", "OptimizationParser"], [486, 2, 1, "", "Parser"], [486, 2, 1, "", "PerformanceParser"], [486, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[486, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"], [486, 3, 1, "", "summarize_partial"], [486, 3, 1, "", "summarize_value"], [486, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"], [486, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[487, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[487, 4, 1, "", "info"], [487, 4, 1, "", "info_path"], [487, 4, 1, "", "is_ok"], [487, 4, 1, "", "output"], [487, 4, 1, "", "output_path"], [487, 3, 1, "", "remove_logs"], [487, 3, 1, "", "run"], [487, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[488, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[488, 4, 1, "", "is_ok"], [488, 3, 1, "", "remove_successful_logs"], [488, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[489, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[491, 0, 0, "-", "metric"], [492, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[491, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[491, 4, 1, "", "acc_input_model"], [491, 4, 1, "", "acc_optimized_model"], [491, 4, 1, "", "accuracy"], [491, 3, 1, "", "calculate_throughput"], [491, 3, 1, "", "insert_data"], [491, 4, 1, "", "latency"], [491, 4, 1, "", "optimization_time"], [491, 4, 1, "", "path_optimized_model"], [491, 4, 1, "", "profiling_data"], [491, 4, 1, "", "size_input_model"], [491, 4, 1, "", "size_optimized_model"], [491, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[492, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[492, 3, 1, "", "clean_logs"], [492, 3, 1, "", "clean_status"], [492, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[493, 1, 1, "", "check_module"], [493, 1, 1, "", "deprecated"], [493, 1, 1, "", "determine_ip"], [493, 1, 1, "", "export_to_csv"], [493, 1, 1, "", "filter_transforms"], [493, 1, 1, "", "get_dataset_path"], [493, 1, 1, "", "get_file_extension"], [493, 1, 1, "", "get_framework_from_path"], [493, 1, 1, "", "get_height_width_from_size"], [493, 1, 1, "", "get_metrics_dict"], [493, 1, 1, "", "get_model_zoo_config_path"], [493, 1, 1, "", "get_model_zoo_model_path"], [493, 1, 1, "", "get_module_version"], [493, 1, 1, "", "get_predefined_config_path"], [493, 1, 1, "", "get_shape_from_transforms"], [493, 1, 1, "", "get_size"], [493, 1, 1, "", "is_dataset_file"], [493, 1, 1, "", "is_development_env"], [493, 1, 1, "", "is_hidden"], [493, 1, 1, "", "load_dataloader_config"], [493, 1, 1, "", "load_help_nc_params"], [493, 1, 1, "", "load_metrics_config"], [493, 1, 1, "", "load_model_config"], [493, 1, 1, "", "load_model_wise_params"], [493, 1, 1, "", "load_precisions_config"], [493, 1, 1, "", "load_transforms_config"], [493, 1, 1, "", "load_transforms_filter_config"], [493, 1, 1, "", "normalize_domain"], [493, 1, 1, "", "normalize_framework"], [493, 1, 1, "", "normalize_string"], [493, 1, 1, "", "parse_bool_value"], [493, 1, 1, "", "parse_to_float_list"], [493, 1, 1, "", "parse_to_string_list"], [493, 1, 1, "", "parse_version"], [493, 1, 1, "", "release_tag"], [493, 1, 1, "", "replace_with_values"], [493, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[494, 0, 0, "-", "config"], [495, 0, 0, "-", "dataloader"], [496, 0, 0, "-", "evaluation"], [497, 0, 0, "-", "graph_optimization"], [499, 0, 0, "-", "mixed_precision"], [500, 0, 0, "-", "model"], [501, 0, 0, "-", "pruning"], [502, 0, 0, "-", "quantization"], [503, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[494, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[494, 3, 1, "", "dump"], [494, 3, 1, "", "get_performance_configs"], [494, 3, 1, "", "get_performance_cores_per_instance"], [494, 3, 1, "", "get_performance_num_of_instance"], [494, 3, 1, "", "initialize"], [494, 3, 1, "", "load"], [494, 3, 1, "", "process_transform"], [494, 3, 1, "", "remove_accuracy_metric"], [494, 3, 1, "", "remove_dataloader"], [494, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [494, 3, 1, "", "set_accuracy_goal"], [494, 3, 1, "", "set_accuracy_metric"], [494, 3, 1, "", "set_evaluation_dataloader"], [494, 3, 1, "", "set_evaluation_dataset_path"], [494, 3, 1, "", "set_inputs"], [494, 3, 1, "", "set_optimization_precision"], [494, 3, 1, "", "set_outputs"], [494, 3, 1, "", "set_performance_cores_per_instance"], [494, 3, 1, "", "set_performance_iterations"], [494, 3, 1, "", "set_performance_num_of_instance"], [494, 3, 1, "", "set_performance_warmup"], [494, 3, 1, "", "set_quantization_approach"], [494, 3, 1, "", "set_quantization_batch_size"], [494, 3, 1, "", "set_quantization_dataloader"], [494, 3, 1, "", "set_quantization_dataset_path"], [494, 3, 1, "", "set_quantization_sampling_size"], [494, 3, 1, "", "set_transform"], [494, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[495, 2, 1, "", "Dataloader"], [495, 2, 1, "", "Dataset"], [495, 2, 1, "", "Filter"], [495, 2, 1, "", "LabelBalance"], [495, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[495, 3, 1, "", "serialize"], [495, 3, 1, "", "set_dataset"], [495, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[495, 3, 1, "", "is_dummy"], [495, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[495, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[496, 2, 1, "", "Accuracy"], [496, 2, 1, "", "Configs"], [496, 2, 1, "", "Evaluation"], [496, 2, 1, "", "Metric"], [496, 2, 1, "", "Performance"], [496, 2, 1, "", "Postprocess"], [496, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[496, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[496, 4, 1, "", "name"], [496, 4, 1, "", "param"], [496, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[497, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[497, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[499, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[499, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[500, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[500, 4, 1, "", "inputs"], [500, 4, 1, "", "outputs"], [500, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[501, 2, 1, "", "AdamOptimizer"], [501, 2, 1, "", "AdamWOptimizer"], [501, 2, 1, "", "Approach"], [501, 2, 1, "", "Criterion"], [501, 2, 1, "", "CrossEntropyLossCriterion"], [501, 2, 1, "", "KnowledgeDistillationLossCriterion"], [501, 2, 1, "", "Optimizer"], [501, 2, 1, "", "Pruning"], [501, 2, 1, "", "SGDOptimizer"], [501, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [501, 2, 1, "", "Train"], [501, 2, 1, "", "WeightCompressionApproach"], [501, 1, 1, "", "parse_dict_value_to_float"], [501, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[501, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[502, 2, 1, "", "Advance"], [502, 2, 1, "", "Calibration"], [502, 2, 1, "", "Quantization"], [502, 2, 1, "", "WiseConfig"], [502, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[503, 2, 1, "", "AccCriterion"], [503, 2, 1, "", "Diagnosis"], [503, 2, 1, "", "ExitPolicy"], [503, 2, 1, "", "MultiObjectives"], [503, 2, 1, "", "Strategy"], [503, 2, 1, "", "Tuning"], [503, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[503, 4, 1, "", "objective"], [503, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[503, 3, 1, "", "set_max_trials"], [503, 3, 1, "", "set_performance_only"], [503, 3, 1, "", "set_random_seed"], [503, 3, 1, "", "set_timeout"], [503, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[504, 1, 1, "", "float_representer"], [504, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[505, 0, 0, "-", "communication"], [506, 0, 0, "-", "configuration"], [507, 0, 0, "-", "exceptions"], [509, 0, 0, "-", "router"], [510, 0, 0, "-", "server"], [513, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[505, 2, 1, "", "Message"], [505, 2, 1, "", "MessageQueue"], [505, 2, 1, "", "Request"], [505, 2, 1, "", "Response"], [505, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[505, 4, 1, "", "data"], [505, 4, 1, "", "status"], [505, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[505, 3, 1, "", "get"], [505, 3, 1, "", "post_error"], [505, 3, 1, "", "post_failure"], [505, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[506, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[506, 3, 1, "", "determine_gui_port"], [506, 3, 1, "", "determine_log_level"], [506, 3, 1, "", "determine_server_port"], [506, 3, 1, "", "determine_url_prefix"], [506, 3, 1, "", "determine_values_from_environment"], [506, 3, 1, "", "dump_token_to_file"], [506, 3, 1, "", "get_command_line_args"], [506, 3, 1, "", "get_url"], [506, 4, 1, "", "global_config_directory"], [506, 3, 1, "", "is_port_taken"], [506, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[507, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[509, 2, 1, "", "DeferredRoutingDefinition"], [509, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [509, 2, 1, "", "RealtimeRoutingDefinition"], [509, 2, 1, "", "Router"], [509, 2, 1, "", "RoutingDefinition"], [509, 1, 1, "", "find_pattern_in_graph"], [509, 1, 1, "", "get_model_graph"], [509, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[509, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[510, 1, 1, "", "allow_api_call"], [510, 1, 1, "", "block_iframe"], [510, 1, 1, "", "block_sniffing"], [510, 1, 1, "", "build_parameters"], [510, 1, 1, "", "disable_cache"], [510, 1, 1, "", "get_tls_args"], [510, 1, 1, "", "handle_api_call"], [510, 1, 1, "", "page_not_found"], [510, 1, 1, "", "require_api_token"], [510, 1, 1, "", "root"], [510, 1, 1, "", "run_server"], [510, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[511, 0, 0, "-", "benchmark"], [512, 0, 0, "-", "history_snapshot_parser"], [514, 0, 0, "-", "model"], [515, 0, 0, "-", "optimization"], [516, 0, 0, "-", "profiling"], [517, 0, 0, "-", "request_data_processor"], [518, 0, 0, "-", "response_generator"], [519, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[511, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[512, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[512, 3, 1, "", "extract_accuracy"], [512, 3, 1, "", "extract_performance"], [512, 3, 1, "", "parse_history_item"], [512, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[514, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[514, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[515, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[516, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[516, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[517, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[517, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[518, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[518, 3, 1, "", "add_refresh"], [518, 3, 1, "", "from_exception"], [518, 3, 1, "", "get_status_code_for_exception"], [518, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[519, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[519, 3, 1, "", "get_code_template"], [519, 3, 1, "", "get_config"], [519, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 524], "coven": [0, 524], "code": [0, 2, 524], "conduct": [0, 524], "our": [0, 524], "pledg": [0, 524], "standard": [0, 524], "respons": [0, 524], "scope": [0, 524], "enforc": [0, 524], "attribut": [0, 190, 198, 207, 236, 245, 255, 278, 302, 408, 524], "fx": 1, "overview": 1, "usag": [1, 2, 3, 4, 555, 557], "note": 1, "detail": [1, 522], "common": [1, 10, 215, 216, 217, 218, 219, 220, 221, 222, 533], "problem": 1, "dynam": [1, 2, 531, 551], "quantiz": [1, 4, 6, 27, 40, 67, 289, 318, 502, 521, 529, 531, 550, 551, 552, 559], "static": [1, 551], "awar": [1, 4, 551], "train": [1, 4, 335, 530, 551], "neural": [2, 6, 25, 522, 537, 538, 548, 554], "architectur": [2, 3, 6, 25, 527, 538], "search": [2, 25], "introduct": [2, 7, 522, 528, 529, 530, 534, 535, 538, 541, 542, 543, 544, 545, 546, 548, 550, 551, 554, 555, 557, 558], "na": [2, 25, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 550], "api": [2, 6, 7, 9, 21, 528, 536, 541, 542, 545, 546, 548, 550], "basic": [2, 320, 557], "1": [2, 522, 530, 533, 536, 539, 559], "python": [2, 6, 29, 541, 550], "yaml": [2, 523, 525, 529, 530, 534, 558], "2": [2, 21, 522, 533, 536, 539, 559], "onli": 2, "advanc": 2, "custom": [2, 522, 541, 545, 557], "exampl": [2, 3, 4, 7, 369, 523, 528, 529, 530, 532, 535, 542, 543, 545, 546, 548, 551, 555, 559], "ptq": [3, 559], "design": [3, 4, 527, 555, 557], "pytorch": [3, 69, 344, 430, 431, 521, 526, 541, 552, 555, 556, 559], "mobilenetv2": 3, "model": [3, 6, 19, 219, 301, 302, 303, 304, 305, 306, 307, 308, 309, 373, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 500, 514, 522, 543, 544, 557, 559], "helper": [3, 330], "function": [3, 31, 35, 36, 43, 62, 68, 69, 91, 92, 94, 136, 165, 167, 171, 172, 174, 176, 178, 188, 196, 198, 202, 205, 206, 207, 210, 212, 213, 214, 215, 217, 220, 222, 226, 234, 236, 240, 243, 244, 245, 247, 248, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 271, 275, 280, 284, 285, 286, 288, 292, 293, 295, 296, 297, 298, 299, 304, 308, 310, 316, 318, 321, 329, 335, 338, 344, 345, 347, 348, 357, 358, 359, 361, 365, 367, 368, 370, 372, 375, 376, 380, 383, 384, 385, 396, 406, 423, 427, 429, 440, 441, 442, 445, 448, 452, 456, 458, 461, 463, 464, 467, 473, 474, 482, 485, 493, 501, 504, 505, 509, 510, 530], "secur": [5, 522, 530], "polici": 5, "report": 5, "vulner": 5, "intel": [6, 522, 537, 538, 559], "compressor": [6, 522, 537, 538, 554], "instal": [6, 522, 530, 539], "prerequisit": [6, 539], "linux": [6, 539], "get": [6, 7, 321, 528, 534, 541, 542, 545, 546, 548, 550, 551, 558], "start": [6, 7, 522, 528, 534, 541, 542, 545, 546, 548, 550, 551, 558], "jupyterlab": 6, "extens": [6, 559], "gui": 6, "system": [6, 522, 547], "requir": 6, "valid": [6, 559], "hardwar": [6, 559], "environ": [6, 477], "support": [6, 7, 521, 524, 526, 528, 530, 534, 538, 541, 542, 543, 545, 546, 548, 550, 551, 556, 558], "cpu": [6, 559], "base": 6, "64": 6, "compat": 6, "processor": 6, "gpu": 6, "built": [6, 526, 536, 541], "": 6, "xe": 6, "onnx": [6, 169, 521, 559], "multipl": [6, 545, 559], "vendor": 6, "through": [6, 559], "runtim": [6, 521, 559], "softwar": 6, "document": [6, 537], "select": 6, "public": [6, 549], "event": [6, 549], "addit": 6, "content": [6, 12, 25, 31, 35, 36, 37, 38, 41, 43, 44, 45, 58, 62, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 335, 336, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 522], "hire": 6, "adaptor": [7, 8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "matrix": [7, 521, 528, 534, 538, 541, 542, 543, 545, 546, 548, 550, 551, 558], "work": [7, 551], "flow": [7, 551], "queri": [7, 70], "background": 7, "ad": 7, "new": [7, 522, 557], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 12, 25, 36, 38, 41, 43, 44, 45, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 167, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 284, 286, 287, 288, 289, 290, 291, 292, 295, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 339, 340, 345, 346, 349, 350, 351, 352, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 401, 402, 403, 405, 408, 409, 410, 411, 412, 414, 416, 417, 424, 426, 429, 431, 432, 433, 434, 436, 437, 438, 439, 443, 447, 449, 450, 453, 455, 459, 462, 463, 465, 468, 469, 470, 472, 476, 477, 479, 480, 481, 482, 484, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 509, 511, 512, 514, 515, 516, 517, 518, 519], "benchmark": [11, 176, 214, 346, 347, 348, 349, 363, 511, 522, 523, 550], "bleu": [12, 256, 292], "modul": [12, 31, 35, 36, 38, 41, 43, 44, 45, 62, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 171, 172, 173, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 299, 301, 303, 304, 305, 307, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 338, 340, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519], "criterion": [13, 215], "data": [14, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "dataload": [15, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 216, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 365, 495, 523, 525], "basedataload": 15, "dataset": [16, 196, 197, 198, 199, 200, 201, 202, 203, 234, 235, 236, 237, 238, 239, 240, 241, 366, 522, 526, 536], "transform": [17, 208, 209, 210, 211, 212, 213, 246, 247, 248, 249, 380, 536, 556], "metric": [18, 218, 256, 257, 258, 259, 260, 261, 262, 263, 292, 293, 294, 295, 296, 297, 298, 299, 372, 491, 536, 541], "optim": [20, 220, 374, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 515, 522, 535, 546], "compon": [21, 223, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "experiement": 21, "deprec": 21, "0": [21, 559], "distil": [22, 250, 528, 529, 550, 559], "mixedprecis": 23, "modelconvers": 24, "packag": [25, 37, 58, 174, 190, 202, 206, 207, 210, 217, 228, 240, 244, 245, 247, 251, 255, 262, 273, 278, 279, 291, 298, 302, 313, 325, 339, 349, 389, 394, 453], "prune": [26, 277, 287, 317, 501, 548, 550, 559], "schedul": [28, 288, 290, 548], "strategi": [30, 183, 184, 185, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 554, 557], "6ece06672ed3_v1_14": 31, "6f0d0f71d92e_v1_13": 32, "9e89549a08c8_v1_11": 33, "block_mask": 34, "env": 35, "neural_compressor": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "kera": [38, 436], "keras_util": [39, 40], "mxnet": [41, 521, 526, 541, 556, 559], "mxnet_util": [42, 43], "util": [43, 68, 165, 171, 253, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 396, 440, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504], "onnxrt": [44, 428, 429, 526, 541, 556], "ox_util": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "calibr": 45, "oper": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "activ": 47, "argmax": 48, "attent": 49, "binary_op": 50, "concat": 51, "conv": 52, "direct_q8": 53, "embed_layernorm": 54, "gather": 55, "gavgpool": 56, "gemm": 57, "lstm": 59, "matmul": 60, "maxpool": 61, "op": 62, "pad": 63, "pool": 64, "resiz": 65, "split": 66, "tensorflow": [71, 434, 435, 436, 437, 438, 439, 440, 521, 526, 541, 552, 555, 556, 559], "tf_util": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], "graph_convert": 72, "graph_converter_without_calib": 73, "graph_rewrit": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "bf16": [74, 75], "bf16_convert": [74, 166], "gener": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "convert_add_to_biasadd": 76, "convert_layout": 77, "convert_leakyrelu": 78, "convert_nan_to_random": 79, "convert_placeholder_to_const": 80, "dequantize_cast_optim": 81, "dilated_contract": 82, "dummy_biasadd": 83, "expanddims_optim": 84, "fetch_weight_from_reshap": 85, "fold_batch_norm": 86, "fold_const": 87, "fuse_biasadd_add": 88, "fuse_column_wise_mul": 89, "fuse_conv_with_math": 90, "fuse_decomposed_bn": 91, "fuse_decomposed_in": 92, "fuse_gelu": 93, "fuse_layer_norm": 94, "fuse_pad_with_conv": 95, "fuse_pad_with_fp32_conv": 96, "fuse_reshape_transpos": 97, "graph_cse_optim": 98, "grappler_pass": 99, "insert_print_nod": 101, "move_squeeze_after_relu": 102, "pre_optim": 103, "remove_training_nod": 104, "rename_batch_norm": 105, "split_shared_input": 106, "strip_equivalent_nod": 107, "strip_unused_nod": 108, "switch_optim": 109, "update_ent": 110, "graph_bas": 111, "int8": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 559], "freeze_fake_qu": 113, "freeze_valu": 114, "freeze_value_without_calib": 115, "fuse_conv_redundant_dequant": 116, "fuse_conv_requant": 117, "fuse_matmul_redundant_dequant": 118, "fuse_matmul_requant": 119, "meta_op_optim": 121, "post_hostconst_convert": 122, "post_quantized_op_cs": 123, "rnn_convert": 124, "scale_propag": 125, "qdq": [126, 127, 128, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 559], "insert_qdq_pattern": 127, "merge_duplicated_qdq": 128, "share_qdq_y_pattern": 129, "graph_util": 130, "quantize_graph": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "qat": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 559], "fake_quant": 133, "quantize_config": 135, "quantize_help": 136, "quantize_lay": [137, 138, 139, 140, 141], "optimize_lay": 138, "quantize_layer_add": 139, "quantize_layer_bas": 140, "quantize_layer_bn": 141, "quantize_wrapp": 142, "fuse_qdq_bn": 143, "fuse_qdq_concatv2": 144, "fuse_qdq_conv": 145, "fuse_qdq_deconv": 146, "fuse_qdq_in": 147, "fuse_qdq_matmul": 148, "fuse_qdq_pool": 149, "optimize_qdq": 151, "quantize_graph_bas": 152, "quantize_graph_bn": 153, "quantize_graph_concatv2": 154, "quantize_graph_conv": 155, "quantize_graph_for_intel_cpu": 156, "quantize_graph_matmul": 157, "quantize_graph_pool": 158, "quantize_graph_common": 159, "transform_graph": [160, 161, 162, 163, 164], "bias_correct": 160, "graph_transform_bas": 161, "insert_log": 163, "rerange_quantized_concat": 164, "torch_util": [166, 167, 168, 169, 170, 171, 222], "hawq_metr": 167, "symbolic_trac": 170, "algorithm": [172, 173, 174, 175], "fast_bias_correct": 173, "weight_correct": 175, "conf": [177, 178, 179, 180], "config": [177, 181, 494, 523, 525, 545], "dotdict": 178, "pythonic_config": 180, "contrib": [182, 183, 184, 185], "sigopt": [184, 554, 557], "tpe": [185, 557], "base_dataload": [186, 224], "default_dataload": [188, 226], "fetcher": [189, 227], "submodul": [190, 202, 206, 210, 217, 228, 240, 244, 247, 251, 255, 262, 272, 273, 279, 282, 298, 339, 349, 353, 360, 371, 389, 394, 399, 400, 404, 407, 413, 415, 418, 419, 425, 428, 430, 435, 444, 446, 451, 453, 454, 457, 460, 466, 471, 475, 483, 490, 498, 508, 513], "mxnet_dataload": [191, 229], "onnxrt_dataload": [192, 230], "pytorch_dataload": [193, 231], "sampler": [194, 232], "tensorflow_dataload": [195, 233], "bert_dataset": [196, 234], "coco_dataset": [197, 235], "dummy_dataset": [199, 237], "dummy_dataset_v2": [200, 238], "imagenet_dataset": [201, 239], "style_transfer_dataset": [203, 241], "filter": [204, 205, 206, 242, 243, 244], "coco_filt": [204, 242], "subpackag": [207, 245, 255, 273, 278, 291, 394, 399, 413, 418, 425, 453, 466, 475, 483, 508], "coco_transform": 208, "imagenet_transform": [209, 246], "postprocess": [211, 221], "token": [212, 248], "experiment": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "export": [251, 252, 253], "torch2onnx": 252, "graph_optim": [254, 450, 451, 452, 497], "bleu_util": [257, 293], "coco_label_map": [258, 294], "coco_tool": [259, 295], "evaluate_squad": [260, 296], "f1": [261, 297], "mixed_precis": [264, 454, 455, 456, 499], "model_convers": 265, "basic_na": 266, "dyna": 267, "dynast": [268, 269, 270, 271, 272], "dynas_manag": 268, "dynas_predictor": 269, "dynas_search": 270, "dynas_util": 271, "nas_util": 275, "search_algorithm": 276, "pruning_recip": [278, 279, 280, 281], "pattern": [279, 280, 281, 284, 548], "tile_pattern": 281, "pytorch_prun": [282, 283, 284, 285, 286, 287, 288], "logger": [283, 342, 485], "prune_util": 285, "pruner": [286, 311, 312, 313, 314, 315, 316], "mix_precis": 300, "base_model": 301, "keras_model": 303, "mxnet_model": 305, "nets_factori": 306, "onnx_model": 307, "tensorflow_model": 308, "torch_model": 309, "object": [310, 545], "gradient_sensit": 311, "group_lasso": 312, "magnitud": 314, "pattern_lock": 315, "auto_mixed_precis": 319, "bayesian": [321, 557], "target": 321, "valu": 321, "param": 321, "conserv": 322, "exhaust": [323, 557], "hawq_v2": 324, "mse": [326, 557], "mse_v2": [327, 557], "random": [328, 557], "tuning_sampl": 332, "tuning_spac": 333, "tuning_struct": 334, "collect_layer_histogram": 336, "constant": 337, "create_obj_from_config": 338, "kl_diverg": 340, "load_huggingfac": 341, "option": [343, 522, 530, 539], "ux": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519], "benchmark_model": 347, "execute_benchmark": 348, "config_gener": [350, 351, 352, 353, 354, 355, 356], "benchmark_config_gener": 350, "graph_optimization_config_gener": 352, "mixed_precision_config_gener": 354, "profiling_config_gener": 355, "quantization_config_gener": 356, "configuration_wizard": [357, 358, 359, 360, 361], "configuration_pars": 357, "get_boundary_nod": 358, "get_configur": 359, "params_feed": 361, "db_manag": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "db_model": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "benchmark_result": 364, "domain": [367, 424], "domain_flavour": 368, "framework": [370, 534, 543, 550], "optimization_typ": 375, "precis": [376, 535, 542, 552], "profil": [377, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 516, 522], "profiling_result": 378, "project": [379, 522], "tuning_detail": 381, "tuning_histori": [382, 463], "db_oper": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "benchmark_api_interfac": 383, "dataset_api_interfac": 384, "diagnosis_api_interfac": 386, "dictionaries_api_interfac": 387, "examples_api_interfac": 388, "model_api_interfac": 390, "optimization_api_interfac": 391, "profiling_api_interfac": 392, "project_api_interfac": 393, "params_interfac": 395, "diagnosi": [397, 398, 399, 400, 401, 402, 403, 404, 405, 522], "factori": [398, 449, 465, 470], "onnx_diagnosi": [400, 401], "onnxrt_diagnosi": 401, "op_detail": 402, "op_entri": 403, "tensorflow_diagnosi": [404, 405], "file_brows": [406, 407], "graph": [408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 522, 535], "collaps": 409, "edg": 410, "graph_read": 412, "node": 414, "reader": [415, 416, 417], "onnxrt_read": 416, "tensorflow_read": 417, "jobs_manag": [419, 420, 421, 422], "jobs_control_queu": 420, "request": [422, 524], "manage_workspac": 423, "model_type_gett": 427, "repositori": 432, "shape": 433, "frozen_pb": 434, "meta_graph": 437, "saved_model": 439, "model_zoo": [441, 442, 443, 444, 445], "download_config": 441, "download_model": 442, "download": 443, "list_model": 445, "names_mapp": [446, 447], "execute_optim": 448, "optimize_model": [452, 456, 458], "neural_coder_optim": [457, 458], "tune": [460, 461, 462, 503, 535, 551, 557], "tune_model": 461, "execute_profil": 464, "profile_model": 467, "tensorflow_profil": [470, 471, 472, 473], "inc_bench": 474, "const": 476, "except": [478, 507], "executor": 479, "expiring_dict": 480, "github_info": 481, "hw_info": 482, "json_seri": 484, "parser": 486, "proc": 487, "process": 488, "singleton": 489, "templat": [490, 491, 492, 524], "workdir": 492, "workload": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 519], "evalu": [496, 523, 530], "yaml_util": 504, "web": [505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519], "commun": 505, "configur": [506, 530, 534, 547, 550, 554, 557, 558], "router": 509, "server": 510, "servic": [511, 512, 513, 514, 515, 516, 517, 518, 519], "history_snapshot_pars": 512, "request_data_processor": 517, "response_gener": 518, "version": 520, "ipex": 521, "refer": 521, "bench": 522, "tabl": 522, "from": [522, 539], "binari": [522, 539], "sourc": [522, 539], "home": 522, "screen": 522, "creat": [522, 525], "predefin": 522, "displai": 522, "list": [522, 526, 556], "remov": 522, "develop": 522, "tab": 522, "wizard": 522, "edit": 522, "entri": 522, "inform": [522, 540], "file": [523, 525, 534, 558], "us": [523, 525, 535, 544], "user": [523, 525, 526, 529, 530, 536, 550, 558], "specif": [523, 525, 526, 557], "run": 523, "contribut": 524, "guidelin": 524, "pull": 524, "checklist": 524, "how": [525, 535, 544], "workflow": 527, "knowledg": [528, 559], "intermedi": 528, "layer": 528, "self": 528, "defin": [529, 530], "distribut": 530, "infer": 530, "horovod": 530, "pure": 530, "option2": 530, "horovodrun": 530, "follow": 530, "ar": 530, "frequent": 533, "ask": 533, "question": 533, "build": [533, 541], "issu": [533, 553], "3": [533, 539], "featur": [534, 538, 550, 551, 558], "fp32": 535, "auto": [535, 552], "mix": [535, 542, 552], "default": 535, "incompat": [536, 553], "chang": [536, 553], "between": 536, "v1": 536, "face": 536, "section": 537, "infrastructur": 538, "ai": 539, "kit": 539, "window": 539, "legal": 540, "licens": 540, "citat": 540, "trademark": 540, "singl": [541, 545], "multi": [541, 546], "convers": 544, "orchestr": 546, "One": 546, "shot": 546, "network": 548, "criteria": 548, "full": 549, "49": 549, "2022": 549, "31": 549, "2021": 549, "14": 549, "2018": 549, "2020": 549, "4": 549, "style": 550, "access": 550, "fundament": 551, "approach": 551, "post": 551, "accuraci": 551, "turn": 552, "ON": 552, "dure": 552, "releas": 553, "known": 553, "prepar": 554, "perform": 554, "benefit": 554, "comparison": 554, "differ": 554, "tensorboard": 555, "part": 557, "relat": 557, "mlperf": 559, "10": 559, "torch": 559, "12": 559, "mode": 559, "11": 559, "7": 559}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [524, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [524, "our-pledge"]], "Our Standards": [[0, "our-standards"], [524, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [524, "our-responsibilities"]], "Scope": [[0, "scope"], [524, "scope"]], "Enforcement": [[0, "enforcement"], [524, "enforcement"]], "Attribution": [[0, "attribution"], [524, "attribution"]], "FX": [[1, "fx"]], "Overview": [[1, "overview"]], "Usage": [[1, "usage"], [4, "usage"], [555, "usage"], [555, "id2"], [557, "usage"], [557, "id2"], [557, "id4"], [557, "id6"], [557, "id8"], [557, "id10"], [557, "id12"], [557, "id14"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [531, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Introduction": [[2, "introduction"], [7, "introduction"], [522, "introduction"], [528, "introduction"], [529, "introduction"], [530, "introduction"], [534, "introduction"], [535, "introduction"], [538, "introduction"], [541, "introduction"], [542, "introduction"], [543, "introduction"], [544, "introduction"], [545, "introduction"], [546, "introduction"], [548, "introduction"], [550, "introduction"], [555, "introduction"], [557, "introduction"], [558, "introduction"]], "NAS API": [[2, "nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "Examples": [[2, "examples"], [4, "examples"], [523, "examples"], [528, "examples"], [529, "examples"], [532, "examples"], [535, "examples"], [542, "examples"], [543, "examples"], [546, "examples"], [548, "examples"], [551, "examples"], [555, "examples"], [555, "id3"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [527, "design"], [555, "design"], [555, "id1"], [557, "design"], [557, "id1"], [557, "id3"], [557, "id5"], [557, "id7"], [557, "id9"], [557, "id11"], [557, "id13"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [545, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Security Policy": [[5, "security-policy"]], "Report a Vulnerability": [[5, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[6, "intel-neural-compressor"]], "Installation": [[6, "installation"], [539, "installation"]], "Prerequisites": [[6, "prerequisites"], [539, "prerequisites"], [539, "id1"]], "Install on Linux": [[6, "install-on-linux"]], "Getting Started": [[6, "getting-started"]], "Quantization with Python API": [[6, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[6, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[6, "quantization-with-gui"]], "System Requirements": [[6, "system-requirements"]], "Validated Hardware Environment": [[6, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[6, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[6, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[6, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[6, "validated-software-environment"]], "Validated Models": [[6, "validated-models"], [559, "validated-models"]], "Documentation": [[6, "documentation"]], "Selected Publications/Events": [[6, "selected-publications-events"]], "Additional Content": [[6, "additional-content"]], "Hiring": [[6, "hiring"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [551, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "APIs": [[9, "apis"]], "Common": [[10, "common"]], "Benchmark": [[11, "benchmark"], [550, "benchmark"]], "BLEU": [[12, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[12, "module-contents"], [31, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [41, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [62, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [133, "module-contents"], [135, "module-contents"], [136, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [280, "module-contents"], [281, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [340, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [452, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"]], "Classes": [[12, "classes"], [25, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [133, "classes"], [135, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [259, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [274, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [295, "classes"], [298, "classes"], [299, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [317, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [335, "classes"], [336, "classes"], [339, "classes"], [340, "classes"], [345, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [397, "classes"], [398, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [424, "classes"], [426, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [443, "classes"], [447, "classes"], [449, "classes"], [450, "classes"], [453, "classes"], [455, "classes"], [459, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [476, "classes"], [477, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [484, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [509, "classes"], [511, "classes"], [512, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"]], "Criterion": [[13, "criterion"]], "Data": [[14, "data"]], "Dataloader": [[15, "dataloader"]], "BaseDataLoader": [[15, "basedataloader"]], "dataloaders": [[15, "dataloaders"]], "Datasets": [[16, "datasets"]], "Transforms": [[17, "transforms"]], "Metric": [[18, "metric"]], "Model": [[19, "model"], [543, "model"]], "Optimizer": [[20, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[21, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[22, "distillation"], [528, "distillation"], [550, "distillation"]], "MixedPrecision": [[23, "mixedprecision"]], "ModelConversion": [[24, "modelconversion"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [37, "package-contents"], [58, "package-contents"], [174, "package-contents"], [190, "package-contents"], [202, "package-contents"], [206, "package-contents"], [207, "package-contents"], [210, "package-contents"], [217, "package-contents"], [228, "package-contents"], [240, "package-contents"], [244, "package-contents"], [245, "package-contents"], [247, "package-contents"], [251, "package-contents"], [255, "package-contents"], [262, "package-contents"], [273, "package-contents"], [278, "package-contents"], [279, "package-contents"], [291, "package-contents"], [298, "package-contents"], [302, "package-contents"], [313, "package-contents"], [325, "package-contents"], [339, "package-contents"], [349, "package-contents"], [389, "package-contents"], [394, "package-contents"], [453, "package-contents"]], "Pruning": [[26, "pruning"], [548, "pruning"], [550, "pruning"]], "Quantization": [[27, "quantization"], [550, "quantization"], [551, "quantization"]], "Scheduler": [[28, "scheduler"]], "Pythonic": [[29, "pythonic"]], "Strategy": [[30, "strategy"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "Functions": [[31, "functions"], [35, "functions"], [36, "functions"], [43, "functions"], [62, "functions"], [68, "functions"], [69, "functions"], [91, "functions"], [92, "functions"], [94, "functions"], [136, "functions"], [165, "functions"], [167, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [178, "functions"], [188, "functions"], [196, "functions"], [198, "functions"], [202, "functions"], [205, "functions"], [206, "functions"], [207, "functions"], [210, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [220, "functions"], [222, "functions"], [226, "functions"], [234, "functions"], [236, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [256, "functions"], [257, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [271, "functions"], [275, "functions"], [280, "functions"], [284, "functions"], [285, "functions"], [286, "functions"], [288, "functions"], [292, "functions"], [293, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [304, "functions"], [308, "functions"], [310, "functions"], [316, "functions"], [318, "functions"], [321, "functions"], [329, "functions"], [335, "functions"], [338, "functions"], [344, "functions"], [345, "functions"], [347, "functions"], [348, "functions"], [357, "functions"], [358, "functions"], [359, "functions"], [361, "functions"], [365, "functions"], [367, "functions"], [368, "functions"], [370, "functions"], [372, "functions"], [375, "functions"], [376, "functions"], [380, "functions"], [383, "functions"], [384, "functions"], [385, "functions"], [396, "functions"], [406, "functions"], [423, "functions"], [427, "functions"], [429, "functions"], [440, "functions"], [441, "functions"], [442, "functions"], [445, "functions"], [448, "functions"], [452, "functions"], [456, "functions"], [458, "functions"], [461, "functions"], [463, "functions"], [464, "functions"], [467, "functions"], [473, "functions"], [474, "functions"], [482, "functions"], [485, "functions"], [493, "functions"], [501, "functions"], [504, "functions"], [505, "functions"], [509, "functions"], [510, "functions"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.keras": [[38, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[39, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[40, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[41, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[42, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[44, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[46, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[47, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[49, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[51, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[52, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[58, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[65, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[66, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[67, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[68, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[69, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[70, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[71, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[131, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[165, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[168, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[169, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[175, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[176, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "Submodules": [[190, "submodules"], [202, "submodules"], [206, "submodules"], [210, "submodules"], [217, "submodules"], [228, "submodules"], [240, "submodules"], [244, "submodules"], [247, "submodules"], [251, "submodules"], [255, "submodules"], [262, "submodules"], [272, "submodules"], [273, "submodules"], [279, "submodules"], [282, "submodules"], [298, "submodules"], [339, "submodules"], [349, "submodules"], [353, "submodules"], [360, "submodules"], [371, "submodules"], [389, "submodules"], [394, "submodules"], [399, "submodules"], [400, "submodules"], [404, "submodules"], [407, "submodules"], [413, "submodules"], [415, "submodules"], [418, "submodules"], [419, "submodules"], [425, "submodules"], [428, "submodules"], [430, "submodules"], [435, "submodules"], [444, "submodules"], [446, "submodules"], [451, "submodules"], [453, "submodules"], [454, "submodules"], [457, "submodules"], [460, "submodules"], [466, "submodules"], [471, "submodules"], [475, "submodules"], [483, "submodules"], [490, "submodules"], [498, "submodules"], [508, "submodules"], [513, "submodules"]], "Attributes": [[190, "attributes"], [198, "attributes"], [207, "attributes"], [236, "attributes"], [245, "attributes"], [255, "attributes"], [278, "attributes"], [302, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "Subpackages": [[207, "subpackages"], [245, "subpackages"], [255, "subpackages"], [273, "subpackages"], [278, "subpackages"], [291, "subpackages"], [394, "subpackages"], [399, "subpackages"], [413, "subpackages"], [418, "subpackages"], [425, "subpackages"], [453, "subpackages"], [466, "subpackages"], [475, "subpackages"], [483, "subpackages"], [508, "subpackages"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.torch2onnx": [[252, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[253, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[254, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[255, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[256, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[257, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[258, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[259, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[261, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[262, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[263, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[264, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[265, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[266, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[267, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[268, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[269, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[272, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas": [[273, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[274, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[275, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[276, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[277, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[278, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[282, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[283, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[289, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[290, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[291, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[292, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[293, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[294, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[295, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[296, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[297, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[298, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[299, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[300, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[301, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[302, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[303, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[304, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[305, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[306, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[307, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[308, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[309, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[310, "module-neural_compressor.objective"]], "neural_compressor.pruners.gradient_sensitivity": [[311, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[312, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[313, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[314, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[315, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[316, "module-neural_compressor.pruners.pruner"]], "neural_compressor.pruning": [[317, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[318, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[319, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[320, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[321, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[321, "get-the-target-value-of-params"]], "neural_compressor.strategy.conservative": [[322, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[323, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[324, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[325, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[326, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[327, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[328, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[329, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.helper": [[330, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[331, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[332, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[333, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[334, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[335, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[336, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[337, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[338, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[339, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[340, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[341, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[342, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[343, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[344, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[345, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[349, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[353, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[371, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[389, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[394, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[396, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[398, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[407, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[408, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[409, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[410, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[411, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[412, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[413, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[414, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[415, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[418, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[419, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[422, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[423, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[424, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[425, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[426, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[427, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[428, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[430, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[431, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[432, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[433, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[435, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[444, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[449, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[453, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[459, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[490, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[491, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[492, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[493, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[494, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[495, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[496, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[497, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[498, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[499, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[500, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[501, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[502, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[503, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[504, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[505, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[506, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[507, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[508, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[509, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[510, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[511, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[512, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[513, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[514, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[515, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[516, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[517, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[518, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[519, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[520, "module-neural_compressor.version"]], "Quantization Support Matrix": [[521, "quantization-support-matrix"]], "TensorFlow": [[521, "tensorflow"], [526, "tensorflow"], [541, "tensorflow"], [556, "tensorflow"]], "PyTorch": [[521, "pytorch"], [526, "pytorch"], [541, "pytorch"], [552, "pytorch"]], "PyTorch IPEX": [[521, "pytorch-ipex"]], "MXNet": [[521, "mxnet"], [526, "mxnet"], [541, "mxnet"], [556, "mxnet"]], "ONNX Runtime": [[521, "onnx-runtime"]], "Reference": [[521, "reference"]], "Intel\u00ae Neural Compressor Bench": [[522, "intel-neural-compressor-bench"]], "Table of Contents": [[522, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[522, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[522, "option-1-install-from-binary"], [539, "option-1-install-from-binary"], [539, "id2"]], "Option 2 Install from source": [[522, "option-2-install-from-source"], [539, "option-2-install-from-source"], [539, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[522, "start-the-intel-neural-compressor-bench"]], "Home screen": [[522, "home-screen"]], "Create new project": [[522, "create-new-project"]], "Predefined model": [[522, "predefined-model"]], "Custom model": [[522, "custom-model"]], "Display model graph": [[522, "display-model-graph"]], "Project list": [[522, "project-list"]], "Remove project": [[522, "remove-project"]], "Develop the project": [[522, "develop-the-project"]], "Optimization tab": [[522, "optimization-tab"]], "Optimization table": [[522, "optimization-table"]], "Optimization wizard": [[522, "optimization-wizard"]], "Editing optimization entries": [[522, "editing-optimization-entries"]], "Optimization details": [[522, "optimization-details"]], "Benchmark tab": [[522, "benchmark-tab"]], "Benchmark table": [[522, "benchmark-table"]], "Benchmark wizard": [[522, "benchmark-wizard"]], "Editing benchmark entries": [[522, "editing-benchmark-entries"]], "Benchmark details": [[522, "benchmark-details"]], "Profiling tab": [[522, "profiling-tab"]], "Profiling table": [[522, "profiling-table"]], "Profiling wizard": [[522, "profiling-wizard"]], "Editing profiling entries": [[522, "editing-profiling-entries"]], "Profiling details": [[522, "profiling-details"]], "Diagnosis tab": [[522, "diagnosis-tab"]], "Dataset tab": [[522, "dataset-tab"]], "Dataset list": [[522, "dataset-list"]], "Dataset wizard": [[522, "dataset-wizard"]], "Dataset details": [[522, "dataset-details"]], "Custom dataset": [[522, "custom-dataset"]], "Project information": [[522, "project-information"]], "System information": [[522, "system-information"]], "Security": [[522, "security"]], "Benchmarking": [[523, "benchmarking"]], "Config evaluation filed in a yaml file": [[523, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[523, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[524, "contribution-guidelines"]], "Pull Request Checklist": [[524, "pull-request-checklist"]], "Pull Request Template": [[524, "pull-request-template"]], "Support": [[524, "support"]], "DataLoader": [[525, "dataloader"]], "How to use it": [[525, "how-to-use-it"], [535, "how-to-use-it"], [544, "how-to-use-it"]], "Config dataloader in a yaml file": [[525, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[525, "create-a-user-specific-dataloader"]], "Dataset": [[526, "dataset"]], "Built-in dataset support list": [[526, "built-in-dataset-support-list"]], "ONNXRT": [[526, "onnxrt"], [541, "onnxrt"], [556, "onnxrt"]], "User-specific dataset": [[526, "user-specific-dataset"]], "Architecture": [[527, "architecture"], [538, "architecture"]], "Workflow": [[527, "workflow"]], "Knowledge Distillation": [[528, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[528, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[528, "self-distillation"]], "Distillation Support Matrix": [[528, "distillation-support-matrix"]], "Get Started with Distillation API": [[528, "get-started-with-distillation-api"]], "Distillation for Quantization": [[529, "distillation-for-quantization"]], "User-defined yaml": [[529, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[530, "distributed-training-and-inference-evaluation"]], "horovod installation": [[530, "horovod-installation"]], "Distributed training and inference (evaluation)": [[530, "id1"]], "Option 1: pure yaml configuration": [[530, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[530, "option2-user-defined-training-function"]], "horovodrun": [[530, "horovodrun"]], "security": [[530, "security"]], "Following examples are supported": [[530, "following-examples-are-supported"]], "Frequently Asked Questions": [[533, "frequently-asked-questions"]], "Common Build Issues": [[533, "common-build-issues"]], "Issue 1:": [[533, "issue-1"]], "Issue 2:": [[533, "issue-2"]], "Issue 3:": [[533, "issue-3"]], "Framework YAML Configuration Files": [[534, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[534, "supported-feature-matrix"], [538, "supported-feature-matrix"], [550, "supported-feature-matrix"], [551, "supported-feature-matrix"], [558, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[534, "get-started-with-framework-yaml-files"]], "Graph Optimization": [[535, "graph-optimization"]], "FP32 Optimization": [[535, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[535, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[535, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[535, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[535, "id1"]], "Incompatible changes between v1.2 and v1.1": [[536, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[536, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[536, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[537, "intel-neural-compressor-documentation"]], "Sections": [[537, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[538, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[539, "linux-installation"]], "Option 3 Install from AI Kit": [[539, "option-3-install-from-ai-kit"]], "Windows Installation": [[539, "windows-installation"]], "Legal Information": [[540, "legal-information"]], "License": [[540, "license"]], "Citation": [[540, "citation"]], "Trademarks": [[540, "trademarks"]], "Metrics": [[541, "metrics"]], "Supported Built-in Metric Matrix": [[541, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[541, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[541, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[541, "build-custom-metric-with-python-api"]], "Mixed Precision": [[542, "mixed-precision"]], "Mixed Precision Support Matrix": [[542, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[542, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[543, "supported-framework-model-matrix"]], "Model Conversion": [[544, "model-conversion"]], "Objective": [[545, "objective"]], "Single Objective": [[545, "single-objective"]], "Multiple Objectives": [[545, "multiple-objectives"]], "Objective Support Matrix": [[545, "objective-support-matrix"]], "Get Start with Objective API": [[545, "get-start-with-objective-api"]], "Config Single Objective": [[545, "config-single-objective"]], "Config Multiple Objectives": [[545, "config-multiple-objectives"]], "Config Custom Objective": [[545, "config-custom-objective"]], "Optimization Orchestration": [[546, "optimization-orchestration"]], "One-shot": [[546, "one-shot"]], "Multi-shot": [[546, "multi-shot"]], "Orchestration Support Matrix": [[546, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[546, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[547, "system-configuration"]], "Neural Network Pruning": [[548, "neural-network-pruning"]], "Pruning Patterns": [[548, "pruning-patterns"]], "Pruning Criteria": [[548, "pruning-criteria"]], "Pruning Schedule": [[548, "pruning-schedule"]], "Pruning Support Matrix": [[548, "pruning-support-matrix"]], "Get Started with Pruning API": [[548, "get-started-with-pruning-api"]], "Full Publications/Events (49)": [[549, "full-publications-events-49"]], "2022 (31)": [[549, "id1"]], "2021 (14)": [[549, "id2"]], "2018 - 2020 (4)": [[549, "id3"]], "Pythonic Style Access for Configurations": [[550, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[550, "pythonic-api-for-user-configurations"], [550, "id1"]], "Pythonic API for Framework Configurations": [[550, "pythonic-api-for-framework-configurations"], [550, "id2"]], "Get Started with Pythonic API for Configurations": [[550, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[550, "nas"]], "Quantization Introduction": [[551, "quantization-introduction"]], "Quantization Fundamentals": [[551, "quantization-fundamentals"]], "Quantization Approaches": [[551, "quantization-approaches"]], "Post Training Dynamic Quantization": [[551, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[551, "post-training-static-quantization"]], "Quantization Aware Training": [[551, "quantization-aware-training"]], "Accuracy Aware Tuning": [[551, "accuracy-aware-tuning"]], "Get Started": [[551, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[552, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[552, "tensorflow"]], "Release": [[553, "release"]], "Known Issues": [[553, "known-issues"]], "Incompatible Changes": [[553, "incompatible-changes"]], "SigOpt Strategy": [[554, "sigopt-strategy"]], "Preparation": [[554, "preparation"]], "SigOpt introduction": [[554, "sigopt-introduction"]], "Neural Compressor configuration": [[554, "neural-compressor-configuration"]], "Performance": [[554, "performance"]], "Benefit for Sigopt strategy": [[554, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[554, "performance-comparison-of-different-strategies"]], "TensorBoard": [[555, "tensorboard"]], "PyTorch TensorBoard": [[555, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[555, "tensorflow-tensorboard"]], "Transform": [[556, "transform"]], "Transform support list": [[556, "transform-support-list"]], "Pytorch": [[556, "pytorch"]], "Tuning Strategies": [[557, "tuning-strategies"]], "Strategy Design": [[557, "strategy-design"]], "Configurations": [[557, "configurations"]], "Model-specific configurations": [[557, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[557, "strategy-tuning-part-related-configurations"]], "Basic": [[557, "basic"]], "Bayesian": [[557, "bayesian"]], "MSE": [[557, "mse"]], "MSE_v2": [[557, "mse-v2"]], "TPE": [[557, "tpe"]], "Exhaustive": [[557, "exhaustive"]], "Random": [[557, "random"]], "SigOpt": [[557, "sigopt"]], "Customize a New Tuning Strategy": [[557, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[558, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[558, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[559, "validated-mlperf-models"]], "Validated Quantization Examples": [[559, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[559, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[559, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[559, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[559, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[559, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[559, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[559, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[559, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[559, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[12, "neural_compressor.experimental.metric.bleu.BLEU"], [256, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [256, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[12, "module-neural_compressor.experimental.metric.bleu"], [31, "module-6ece06672ed3_v1_14"], [32, "module-6f0d0f71d92e_v1_13"], [33, "module-9e89549a08c8_v1_11"], [34, "module-block_mask"], [35, "module-env"], [36, "module-neural_compressor.adaptor.adaptor"], [37, "module-neural_compressor.adaptor"], [38, "module-neural_compressor.adaptor.keras"], [39, "module-neural_compressor.adaptor.keras_utils"], [40, "module-neural_compressor.adaptor.keras_utils.quantizer"], [41, "module-neural_compressor.adaptor.mxnet"], [42, "module-neural_compressor.adaptor.mxnet_utils"], [43, "module-neural_compressor.adaptor.mxnet_utils.util"], [44, "module-neural_compressor.adaptor.onnxrt"], [45, "module-neural_compressor.adaptor.ox_utils.calibration"], [46, "module-neural_compressor.adaptor.ox_utils"], [47, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [49, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [51, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [52, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [55, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [58, "module-neural_compressor.adaptor.ox_utils.operators"], [59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [62, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [63, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [65, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [66, "module-neural_compressor.adaptor.ox_utils.operators.split"], [67, "module-neural_compressor.adaptor.ox_utils.quantizer"], [68, "module-neural_compressor.adaptor.ox_utils.util"], [69, "module-neural_compressor.adaptor.pytorch"], [70, "module-neural_compressor.adaptor.query"], [71, "module-neural_compressor.adaptor.tensorflow"], [72, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [130, "module-neural_compressor.adaptor.tf_utils.graph_util"], [131, "module-neural_compressor.adaptor.tf_utils"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [162, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [165, "module-neural_compressor.adaptor.tf_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [168, "module-neural_compressor.adaptor.torch_utils"], [169, "module-neural_compressor.adaptor.torch_utils.onnx"], [170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [171, "module-neural_compressor.adaptor.torch_utils.util"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.weight_correction"], [176, "module-neural_compressor.benchmark"], [177, "module-neural_compressor.conf.config"], [178, "module-neural_compressor.conf.dotdict"], [179, "module-neural_compressor.conf"], [180, "module-neural_compressor.conf.pythonic_config"], [181, "module-neural_compressor.config"], [182, "module-neural_compressor.contrib"], [183, "module-neural_compressor.contrib.strategy"], [184, "module-neural_compressor.contrib.strategy.sigopt"], [185, "module-neural_compressor.contrib.strategy.tpe"], [186, "module-neural_compressor.data.dataloaders.base_dataloader"], [187, "module-neural_compressor.data.dataloaders.dataloader"], [188, "module-neural_compressor.data.dataloaders.default_dataloader"], [189, "module-neural_compressor.data.dataloaders.fetcher"], [190, "module-neural_compressor.data.dataloaders"], [191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [194, "module-neural_compressor.data.dataloaders.sampler"], [195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [196, "module-neural_compressor.data.datasets.bert_dataset"], [197, "module-neural_compressor.data.datasets.coco_dataset"], [198, "module-neural_compressor.data.datasets.dataset"], [199, "module-neural_compressor.data.datasets.dummy_dataset"], [200, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [201, "module-neural_compressor.data.datasets.imagenet_dataset"], [202, "module-neural_compressor.data.datasets"], [203, "module-neural_compressor.data.datasets.style_transfer_dataset"], [204, "module-neural_compressor.data.filters.coco_filter"], [205, "module-neural_compressor.data.filters.filter"], [206, "module-neural_compressor.data.filters"], [207, "module-neural_compressor.data"], [208, "module-neural_compressor.data.transforms.coco_transform"], [209, "module-neural_compressor.data.transforms.imagenet_transform"], [210, "module-neural_compressor.data.transforms"], [211, "module-neural_compressor.data.transforms.postprocess"], [212, "module-neural_compressor.data.transforms.tokenization"], [213, "module-neural_compressor.data.transforms.transform"], [214, "module-neural_compressor.experimental.benchmark"], [215, "module-neural_compressor.experimental.common.criterion"], [216, "module-neural_compressor.experimental.common.dataloader"], [217, "module-neural_compressor.experimental.common"], [218, "module-neural_compressor.experimental.common.metric"], [219, "module-neural_compressor.experimental.common.model"], [220, "module-neural_compressor.experimental.common.optimizer"], [221, "module-neural_compressor.experimental.common.postprocess"], [222, "module-neural_compressor.experimental.common.torch_utils"], [223, "module-neural_compressor.experimental.component"], [224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [228, "module-neural_compressor.experimental.data.dataloaders"], [229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.sampler"], [233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [234, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [235, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [236, "module-neural_compressor.experimental.data.datasets.dataset"], [237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [240, "module-neural_compressor.experimental.data.datasets"], [241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [242, "module-neural_compressor.experimental.data.filters.coco_filter"], [243, "module-neural_compressor.experimental.data.filters.filter"], [244, "module-neural_compressor.experimental.data.filters"], [245, "module-neural_compressor.experimental.data"], [246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [247, "module-neural_compressor.experimental.data.transforms"], [248, "module-neural_compressor.experimental.data.transforms.tokenization"], [249, "module-neural_compressor.experimental.data.transforms.transform"], [250, "module-neural_compressor.experimental.distillation"], [251, "module-neural_compressor.experimental.export"], [252, "module-neural_compressor.experimental.export.torch2onnx"], [253, "module-neural_compressor.experimental.export.utils"], [254, "module-neural_compressor.experimental.graph_optimization"], [255, "module-neural_compressor.experimental"], [256, "module-neural_compressor.experimental.metric.bleu"], [257, "module-neural_compressor.experimental.metric.bleu_util"], [258, "module-neural_compressor.experimental.metric.coco_label_map"], [259, "module-neural_compressor.experimental.metric.coco_tools"], [260, "module-neural_compressor.experimental.metric.evaluate_squad"], [261, "module-neural_compressor.experimental.metric.f1"], [262, "module-neural_compressor.experimental.metric"], [263, "module-neural_compressor.experimental.metric.metric"], [264, "module-neural_compressor.experimental.mixed_precision"], [265, "module-neural_compressor.experimental.model_conversion"], [266, "module-neural_compressor.experimental.nas.basic_nas"], [267, "module-neural_compressor.experimental.nas.dynas"], [268, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [269, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [270, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [271, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [272, "module-neural_compressor.experimental.nas.dynast"], [273, "module-neural_compressor.experimental.nas"], [274, "module-neural_compressor.experimental.nas.nas"], [275, "module-neural_compressor.experimental.nas.nas_utils"], [276, "module-neural_compressor.experimental.nas.search_algorithms"], [277, "module-neural_compressor.experimental.pruning"], [278, "module-neural_compressor.experimental.pruning_recipes"], [279, "module-neural_compressor.experimental.pruning_recipes.patterns"], [280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [282, "module-neural_compressor.experimental.pytorch_pruner"], [283, "module-neural_compressor.experimental.pytorch_pruner.logger"], [284, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [286, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [287, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [289, "module-neural_compressor.experimental.quantization"], [290, "module-neural_compressor.experimental.scheduler"], [291, "module-neural_compressor"], [292, "module-neural_compressor.metric.bleu"], [293, "module-neural_compressor.metric.bleu_util"], [294, "module-neural_compressor.metric.coco_label_map"], [295, "module-neural_compressor.metric.coco_tools"], [296, "module-neural_compressor.metric.evaluate_squad"], [297, "module-neural_compressor.metric.f1"], [298, "module-neural_compressor.metric"], [299, "module-neural_compressor.metric.metric"], [300, "module-neural_compressor.mix_precision"], [301, "module-neural_compressor.model.base_model"], [302, "module-neural_compressor.model"], [303, "module-neural_compressor.model.keras_model"], [304, "module-neural_compressor.model.model"], [305, "module-neural_compressor.model.mxnet_model"], [306, "module-neural_compressor.model.nets_factory"], [307, "module-neural_compressor.model.onnx_model"], [308, "module-neural_compressor.model.tensorflow_model"], [309, "module-neural_compressor.model.torch_model"], [310, "module-neural_compressor.objective"], [311, "module-neural_compressor.pruners.gradient_sensitivity"], [312, "module-neural_compressor.pruners.group_lasso"], [313, "module-neural_compressor.pruners"], [314, "module-neural_compressor.pruners.magnitude"], [315, "module-neural_compressor.pruners.pattern_lock"], [316, "module-neural_compressor.pruners.pruner"], [317, "module-neural_compressor.pruning"], [318, "module-neural_compressor.quantization"], [319, "module-neural_compressor.strategy.auto_mixed_precision"], [320, "module-neural_compressor.strategy.basic"], [321, "module-neural_compressor.strategy.bayesian"], [322, "module-neural_compressor.strategy.conservative"], [323, "module-neural_compressor.strategy.exhaustive"], [324, "module-neural_compressor.strategy.hawq_v2"], [325, "module-neural_compressor.strategy"], [326, "module-neural_compressor.strategy.mse"], [327, "module-neural_compressor.strategy.mse_v2"], [328, "module-neural_compressor.strategy.random"], [329, "module-neural_compressor.strategy.strategy"], [330, "module-neural_compressor.strategy.utils.helper"], [331, "module-neural_compressor.strategy.utils"], [332, "module-neural_compressor.strategy.utils.tuning_sampler"], [333, "module-neural_compressor.strategy.utils.tuning_space"], [334, "module-neural_compressor.strategy.utils.tuning_structs"], [335, "module-neural_compressor.training"], [336, "module-neural_compressor.utils.collect_layer_histogram"], [337, "module-neural_compressor.utils.constant"], [338, "module-neural_compressor.utils.create_obj_from_config"], [339, "module-neural_compressor.utils"], [340, "module-neural_compressor.utils.kl_divergence"], [341, "module-neural_compressor.utils.load_huggingface"], [342, "module-neural_compressor.utils.logger"], [343, "module-neural_compressor.utils.options"], [344, "module-neural_compressor.utils.pytorch"], [345, "module-neural_compressor.utils.utility"], [346, "module-neural_compressor.ux.components.benchmark.benchmark"], [347, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [349, "module-neural_compressor.ux.components.benchmark"], [350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [351, "module-neural_compressor.ux.components.config_generator.config_generator"], [352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [353, "module-neural_compressor.ux.components.config_generator"], [354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [360, "module-neural_compressor.ux.components.configuration_wizard"], [361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [362, "module-neural_compressor.ux.components.db_manager.db_manager"], [363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [367, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [369, "module-neural_compressor.ux.components.db_manager.db_models.example"], [370, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [371, "module-neural_compressor.ux.components.db_manager.db_models"], [372, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [373, "module-neural_compressor.ux.components.db_manager.db_models.model"], [374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [376, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [379, "module-neural_compressor.ux.components.db_manager.db_models.project"], [380, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [394, "module-neural_compressor.ux.components.db_manager"], [395, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [396, "module-neural_compressor.ux.components.db_manager.utils"], [397, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [398, "module-neural_compressor.ux.components.diagnosis.factory"], [399, "module-neural_compressor.ux.components.diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.op_details"], [403, "module-neural_compressor.ux.components.diagnosis.op_entry"], [404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [406, "module-neural_compressor.ux.components.file_browser.file_browser"], [407, "module-neural_compressor.ux.components.file_browser"], [408, "module-neural_compressor.ux.components.graph.attribute"], [409, "module-neural_compressor.ux.components.graph.collapser"], [410, "module-neural_compressor.ux.components.graph.edge"], [411, "module-neural_compressor.ux.components.graph.graph"], [412, "module-neural_compressor.ux.components.graph.graph_reader"], [413, "module-neural_compressor.ux.components.graph"], [414, "module-neural_compressor.ux.components.graph.node"], [415, "module-neural_compressor.ux.components.graph.reader"], [416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [418, "module-neural_compressor.ux.components"], [419, "module-neural_compressor.ux.components.jobs_management"], [420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [422, "module-neural_compressor.ux.components.jobs_management.request"], [423, "module-neural_compressor.ux.components.manage_workspace"], [424, "module-neural_compressor.ux.components.model.domain"], [425, "module-neural_compressor.ux.components.model"], [426, "module-neural_compressor.ux.components.model.model"], [427, "module-neural_compressor.ux.components.model.model_type_getter"], [428, "module-neural_compressor.ux.components.model.onnxrt"], [429, "module-neural_compressor.ux.components.model.onnxrt.model"], [430, "module-neural_compressor.ux.components.model.pytorch"], [431, "module-neural_compressor.ux.components.model.pytorch.model"], [432, "module-neural_compressor.ux.components.model.repository"], [433, "module-neural_compressor.ux.components.model.shape"], [434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [435, "module-neural_compressor.ux.components.model.tensorflow"], [436, "module-neural_compressor.ux.components.model.tensorflow.keras"], [437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [438, "module-neural_compressor.ux.components.model.tensorflow.model"], [439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [440, "module-neural_compressor.ux.components.model.tensorflow.utils"], [441, "module-neural_compressor.ux.components.model_zoo.download_config"], [442, "module-neural_compressor.ux.components.model_zoo.download_model"], [443, "module-neural_compressor.ux.components.model_zoo.downloader"], [444, "module-neural_compressor.ux.components.model_zoo"], [445, "module-neural_compressor.ux.components.model_zoo.list_models"], [446, "module-neural_compressor.ux.components.names_mapper"], [447, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [448, "module-neural_compressor.ux.components.optimization.execute_optimization"], [449, "module-neural_compressor.ux.components.optimization.factory"], [450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [451, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [453, "module-neural_compressor.ux.components.optimization"], [454, "module-neural_compressor.ux.components.optimization.mixed_precision"], [455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.optimization"], [460, "module-neural_compressor.ux.components.optimization.tune"], [461, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [462, "module-neural_compressor.ux.components.optimization.tune.tuning"], [463, "module-neural_compressor.ux.components.optimization.tuning_history"], [464, "module-neural_compressor.ux.components.profiling.execute_profiling"], [465, "module-neural_compressor.ux.components.profiling.factory"], [466, "module-neural_compressor.ux.components.profiling"], [467, "module-neural_compressor.ux.components.profiling.profile_model"], [468, "module-neural_compressor.ux.components.profiling.profiler"], [469, "module-neural_compressor.ux.components.profiling.profiling"], [470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [474, "module-neural_compressor.ux.inc_bench"], [475, "module-neural_compressor.ux"], [476, "module-neural_compressor.ux.utils.consts"], [477, "module-neural_compressor.ux.utils.environment"], [478, "module-neural_compressor.ux.utils.exceptions"], [479, "module-neural_compressor.ux.utils.executor"], [480, "module-neural_compressor.ux.utils.expiring_dict"], [481, "module-neural_compressor.ux.utils.github_info"], [482, "module-neural_compressor.ux.utils.hw_info"], [483, "module-neural_compressor.ux.utils"], [484, "module-neural_compressor.ux.utils.json_serializer"], [485, "module-neural_compressor.ux.utils.logger"], [486, "module-neural_compressor.ux.utils.parser"], [487, "module-neural_compressor.ux.utils.proc"], [488, "module-neural_compressor.ux.utils.processes"], [489, "module-neural_compressor.ux.utils.singleton"], [490, "module-neural_compressor.ux.utils.templates"], [491, "module-neural_compressor.ux.utils.templates.metric"], [492, "module-neural_compressor.ux.utils.templates.workdir"], [493, "module-neural_compressor.ux.utils.utils"], [494, "module-neural_compressor.ux.utils.workload.config"], [495, "module-neural_compressor.ux.utils.workload.dataloader"], [496, "module-neural_compressor.ux.utils.workload.evaluation"], [497, "module-neural_compressor.ux.utils.workload.graph_optimization"], [498, "module-neural_compressor.ux.utils.workload"], [499, "module-neural_compressor.ux.utils.workload.mixed_precision"], [500, "module-neural_compressor.ux.utils.workload.model"], [501, "module-neural_compressor.ux.utils.workload.pruning"], [502, "module-neural_compressor.ux.utils.workload.quantization"], [503, "module-neural_compressor.ux.utils.workload.tuning"], [504, "module-neural_compressor.ux.utils.yaml_utils"], [505, "module-neural_compressor.ux.web.communication"], [506, "module-neural_compressor.ux.web.configuration"], [507, "module-neural_compressor.ux.web.exceptions"], [508, "module-neural_compressor.ux.web"], [509, "module-neural_compressor.ux.web.router"], [510, "module-neural_compressor.ux.web.server"], [511, "module-neural_compressor.ux.web.service.benchmark"], [512, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [513, "module-neural_compressor.ux.web.service"], [514, "module-neural_compressor.ux.web.service.model"], [515, "module-neural_compressor.ux.web.service.optimization"], [516, "module-neural_compressor.ux.web.service.profiling"], [517, "module-neural_compressor.ux.web.service.request_data_processor"], [518, "module-neural_compressor.ux.web.service.response_generator"], [519, "module-neural_compressor.ux.web.service.workload"], [520, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[12, "module-neural_compressor.experimental.metric.bleu"], [256, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [256, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [256, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.result"], [256, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.update"], [256, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "run_migrations_offline() (in module env)": [[35, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[35, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[38, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[38, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[38, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[38, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[39, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[40, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[41, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[41, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[41, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[42, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[43, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[43, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[44, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[44, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[45, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[45, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[46, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[47, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[48, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[49, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[50, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[51, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[52, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[53, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[58, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[60, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[61, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[62, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[62, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[65, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[66, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[67, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[68, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[68, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[69, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[69, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[69, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[69, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[70, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[70, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[71, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[71, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[71, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[71, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[130, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[130, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[131, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[165, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[165, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[166, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[167, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[167, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[168, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[169, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[170, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[174, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[175, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[175, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[176, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[176, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[176, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[187, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[190, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[191, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[193, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[196, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[198, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[198, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[198, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[198, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[199, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[202, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[203, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[206, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[207, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[207, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[207, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[207, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[207, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[207, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[207, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[207, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[207, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[207, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[207, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[208, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[210, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[210, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[211, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[212, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TRANSFORMS"], [213, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[213, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[214, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[214, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[215, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[216, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[217, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[218, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[219, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[220, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[221, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[223, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[223, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[223, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[240, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[241, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[244, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[245, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[245, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[247, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[247, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [249, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[250, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[250, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[250, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[251, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[251, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[252, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[253, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[253, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[253, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[253, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[254, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[255, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[255, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[255, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[255, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[255, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[255, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[255, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[255, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[255, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[255, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[255, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[255, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[255, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[255, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[255, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[255, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[255, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[255, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[255, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[255, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[255, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[255, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[255, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[255, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[255, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[255, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[255, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[255, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[255, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[255, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[255, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[255, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[255, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[255, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[255, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[255, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[255, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[255, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[255, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[255, "neural_compressor.experimental.Component.train_func"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[256, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[257, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[257, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[258, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[259, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[261, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[262, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[262, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[262, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[262, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[262, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[262, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[262, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[262, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[262, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[262, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[262, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[263, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[263, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[263, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[263, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[263, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[263, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[263, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[263, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[263, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[263, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[263, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[263, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[263, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[263, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[263, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[263, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[263, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[263, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[263, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[263, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[263, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[263, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[263, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[263, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[263, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[263, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[263, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[263, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[263, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[263, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[263, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[263, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[263, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[263, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[263, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[263, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[263, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[264, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[264, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[264, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[264, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[265, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[266, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[267, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[268, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[268, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[269, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[269, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[270, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[270, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[272, "module-neural_compressor.experimental.nas.dynast"]], "basicnas (class in neural_compressor.experimental.nas)": [[273, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[273, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[273, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[273, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[273, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[273, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[273, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[273, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[273, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[274, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[274, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[274, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[274, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[274, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[274, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[274, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[275, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[276, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[276, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[277, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[277, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[277, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[277, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[277, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[277, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[277, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[277, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[277, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[277, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[277, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[277, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[278, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[278, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[278, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[278, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[282, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[283, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[289, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[289, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[289, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[289, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[289, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[289, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[290, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[290, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[290, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[290, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[290, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[290, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[290, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[291, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[291, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[291, "neural_compressor.Pruning"]], "neural_compressor": [[291, "module-neural_compressor"]], "on_epoch_begin() (neural_compressor.pruning method)": [[291, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[291, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[291, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[291, "neural_compressor.Pruning.on_step_end"]], "bleu (class in neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[292, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[292, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[292, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[292, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[292, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[292, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[293, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[293, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[294, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[295, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[296, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[297, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[298, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[298, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[298, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[298, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[298, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[298, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[298, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[298, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[298, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[298, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[298, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[298, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[299, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[299, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[299, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[299, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[299, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[299, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[299, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[299, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[299, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[299, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[299, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[299, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[299, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[299, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[299, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[299, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[299, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[299, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[299, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[299, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[299, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[299, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[299, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[299, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[299, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[299, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[299, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[299, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[299, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[299, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[299, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[299, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[299, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[299, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[299, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[299, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[299, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[299, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[299, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[299, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[299, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[299, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[299, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[299, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[299, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[299, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[299, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[299, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[299, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[299, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[299, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[299, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[299, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[299, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[299, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[299, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[299, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[299, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[299, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[299, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[299, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[299, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[299, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[299, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[299, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[299, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[299, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[299, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[299, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[299, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[300, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[301, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[301, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[301, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[301, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[301, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[301, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[301, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[302, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[302, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[302, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[302, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[302, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[302, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[302, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[302, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[303, "neural_compressor.model.keras_model.KerasModel"]], "export() (neural_compressor.model.keras_model.kerasmodel method)": [[303, "neural_compressor.model.keras_model.KerasModel.export"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[303, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[303, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[303, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[303, "module-neural_compressor.model.keras_model"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[303, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[304, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[304, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[304, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[305, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[305, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[305, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[305, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[305, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "neural_compressor.model.nets_factory": [[306, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[307, "neural_compressor.model.onnx_model.ONNXModel"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[307, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[307, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[307, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[307, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[308, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[308, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "neural_compressor.model.tensorflow_model": [[308, "module-neural_compressor.model.tensorflow_model"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[308, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[308, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[308, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[309, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.ipexmodel property)": [[309, "neural_compressor.model.torch_model.IPEXModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[309, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[309, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[309, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[309, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[310, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[310, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[310, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[310, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[310, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[310, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[310, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[310, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[310, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[310, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[310, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[310, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[310, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[310, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[310, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[310, "neural_compressor.objective.Performance.start"]], "neural_compressor.pruners.gradient_sensitivity": [[311, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[312, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[313, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[314, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[315, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[316, "module-neural_compressor.pruners.pruner"]], "pruner_registry() (in module neural_compressor.pruners.pruner)": [[316, "neural_compressor.pruners.pruner.pruner_registry"]], "pruning (class in neural_compressor.pruning)": [[317, "neural_compressor.pruning.Pruning"]], "neural_compressor.pruning": [[317, "module-neural_compressor.pruning"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[317, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[317, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[317, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[317, "neural_compressor.pruning.Pruning.on_step_end"]], "fit() (in module neural_compressor.quantization)": [[318, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[318, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[319, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[319, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[319, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[319, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[320, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[320, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[320, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[321, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[321, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[321, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[321, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[321, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[321, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[321, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[321, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[321, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[321, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[322, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[322, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[322, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[322, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[322, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[323, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[323, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[323, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[324, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[324, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[324, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[325, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[326, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[326, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[326, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[326, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[326, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[327, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[327, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[327, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[328, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[328, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[328, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[329, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[329, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[329, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[329, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[329, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[329, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "neural_compressor.strategy.utils.helper": [[330, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[331, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[332, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[333, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[334, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[335, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[335, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[335, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[335, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[335, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[336, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[336, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[336, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[337, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[338, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[339, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[339, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[339, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[339, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[339, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[339, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[339, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[340, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[340, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[340, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[340, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[340, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[341, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[342, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[343, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[344, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[344, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[345, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[346, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[349, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[349, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[352, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[353, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[354, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[354, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[354, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[354, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[355, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[355, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[358, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[369, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[370, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[370, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[371, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[382, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[389, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[394, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[394, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[394, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[394, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[394, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[394, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[396, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[398, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[398, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[398, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[401, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[401, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[403, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[403, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[405, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[405, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[407, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[408, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[408, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[409, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[409, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[409, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[410, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[410, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[410, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[410, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[411, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[411, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[411, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[411, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[411, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[411, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[411, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[411, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[411, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[412, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[412, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[412, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[412, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[413, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[414, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[414, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[414, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[415, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[416, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[416, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[417, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[417, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[418, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[419, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[422, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[423, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[423, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[424, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[424, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[425, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[426, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[426, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[426, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[426, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[426, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[426, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[426, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[426, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[426, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[426, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[427, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[427, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[428, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[429, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[430, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[431, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[431, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[431, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[431, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[431, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[432, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[433, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[433, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[433, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[434, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[434, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[434, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[435, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[436, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[436, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[436, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[436, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[439, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[439, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[440, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[441, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[442, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[444, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[449, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[449, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[449, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[453, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[453, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[458, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[459, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[465, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[465, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[468, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[473, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[477, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[478, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[478, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[478, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[478, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[479, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[479, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[481, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[481, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[485, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[486, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[486, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[486, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[487, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[487, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[487, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[488, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[489, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[490, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[491, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[491, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[491, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[492, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[492, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[492, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[492, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[492, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[493, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[493, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[494, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[494, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[494, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[494, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[495, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[495, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[495, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[495, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[495, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[496, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[496, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[496, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[496, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[496, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[496, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[497, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[497, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[497, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[498, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[499, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[499, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[499, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[500, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[500, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[500, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[500, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[500, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[501, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[501, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[501, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[502, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[502, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[502, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[502, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[502, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[502, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[503, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[503, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[503, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[503, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[503, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[504, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[504, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[504, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[505, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[505, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[505, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[505, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[505, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[505, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[505, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[505, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[505, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[505, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[505, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[505, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[505, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[506, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[506, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[506, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[506, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[506, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[507, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[507, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[508, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[509, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[509, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[509, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[510, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[510, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[511, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[511, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[512, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[512, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[512, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[512, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[512, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[512, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[513, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[514, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[514, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[514, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[515, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[515, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[516, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[516, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[516, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[517, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[517, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[517, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[518, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[518, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[518, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[518, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[518, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[518, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[519, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[519, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[519, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[519, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[519, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[520, "module-neural_compressor.version"]]}})