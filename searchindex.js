Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruners/gradient_sensitivity/index", "autoapi/neural_compressor/pruners/group_lasso/index", "autoapi/neural_compressor/pruners/index", "autoapi/neural_compressor/pruners/magnitude/index", "autoapi/neural_compressor/pruners/pattern_lock/index", "autoapi/neural_compressor/pruners/pruner/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/st_utils/index", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "faq", "framework_yaml", "graph_optimization", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "model_conversion", "objective", "orchestration", "platform_configuration", "pruning", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruners/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruners/group_lasso/index.rst", "autoapi/neural_compressor/pruners/index.rst", "autoapi/neural_compressor/pruners/magnitude/index.rst", "autoapi/neural_compressor/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/pruners/pruner/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/st_utils/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "faq.md", "framework_yaml.md", "graph_optimization.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "model_conversion.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (47)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 1, 2, 3, 7, 35, 77, 189, 199, 221, 225, 250, 252, 474, 475, 476, 477, 478, 480, 482, 487, 493, 496, 497, 498, 500, 503, 504, 506, 507, 508, 509], "interest": [0, 6, 476, 507], "foster": [0, 476], "an": [0, 2, 3, 4, 6, 7, 12, 35, 40, 83, 88, 89, 91, 146, 147, 161, 176, 183, 188, 189, 193, 198, 202, 206, 211, 215, 221, 222, 225, 226, 227, 234, 239, 240, 241, 256, 264, 358, 363, 436, 475, 476, 477, 479, 483, 487, 493, 494, 497, 501, 506, 507, 508, 509], "open": [0, 6, 183, 221, 439, 474, 476, 485, 501], "welcom": [0, 476, 489], "environ": [0, 180, 257, 397, 426, 427, 435, 458, 474, 476, 509], "we": [0, 1, 3, 4, 6, 7, 12, 35, 65, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 91, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 127, 146, 147, 161, 180, 182, 183, 199, 222, 225, 232, 239, 476, 477, 482, 486, 487, 493, 496, 497, 498, 500, 502, 503, 506, 507, 509], "maintain": [0, 6, 229, 476, 495, 500, 505], "make": [0, 1, 3, 7, 146, 147, 161, 198, 250, 252, 254, 314, 346, 378, 474, 476, 477, 486, 493, 503, 504, 509], "particip": [0, 476], "project": [0, 215, 315, 318, 323, 325, 326, 329, 335, 336, 340, 341, 342, 343, 344, 345, 346, 370, 476, 489, 501, 506, 509], "commun": [0, 257, 427, 460, 461, 462, 474, 476], "harass": [0, 476], "free": [0, 170, 171, 274, 276, 277, 278, 280, 281, 286, 476, 493, 497, 506], "experi": [0, 476, 506, 509], "everyon": [0, 476], "regardless": [0, 225, 476], "ag": [0, 236, 476], "bodi": [0, 476], "size": [0, 3, 120, 176, 178, 190, 192, 193, 199, 202, 206, 208, 211, 215, 225, 234, 237, 250, 264, 297, 315, 325, 326, 443, 445, 446, 474, 475, 476, 477, 478, 482, 485, 487, 497, 500, 508, 509, 510, 511], "disabl": [0, 152, 434, 462, 476], "ethnic": [0, 476], "sex": [0, 164, 476], "characterist": [0, 476], "gender": [0, 476], "ident": [0, 3, 95, 101, 127, 146, 250, 476, 480, 487], "express": [0, 68, 222, 476], "level": [0, 3, 38, 41, 437, 458, 476, 509], "educ": [0, 476], "socio": [0, 476], "econom": [0, 476], "statu": [0, 127, 315, 326, 329, 333, 335, 341, 343, 344, 429, 457, 470, 476, 497], "nation": [0, 202, 476], "person": [0, 6, 164, 476, 501], "appear": [0, 474, 476], "race": [0, 476], "religion": [0, 476], "sexual": [0, 476], "orient": [0, 476], "exampl": [0, 1, 6, 42, 200, 201, 202, 212, 214, 215, 225, 226, 227, 229, 235, 253, 287, 323, 340, 346, 370, 394, 395, 396, 397, 439, 445, 474, 476, 478, 483, 488, 489, 490, 496, 504, 505, 508, 509], "behavior": [0, 7, 225, 476, 480, 486, 495, 507, 509, 510], "contribut": [0, 6, 489], "creat": [0, 2, 7, 31, 32, 33, 35, 68, 127, 146, 182, 183, 190, 200, 202, 216, 221, 225, 233, 234, 239, 240, 241, 256, 264, 277, 290, 314, 331, 340, 341, 345, 346, 424, 444, 457, 470, 476, 478, 483, 487, 495, 496, 503, 506, 507, 509], "posit": [0, 127, 215, 474, 476, 493], "includ": [0, 6, 7, 38, 176, 181, 200, 202, 206, 209, 210, 211, 213, 215, 220, 221, 225, 230, 250, 254, 255, 257, 274, 291, 292, 474, 476, 478, 491, 492, 493, 500, 503, 504, 507, 509], "us": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 40, 41, 59, 65, 66, 68, 91, 158, 160, 162, 163, 164, 170, 171, 176, 180, 181, 186, 198, 199, 200, 201, 202, 203, 204, 207, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 229, 230, 231, 232, 235, 237, 239, 241, 243, 246, 250, 252, 253, 254, 255, 256, 257, 266, 272, 273, 274, 276, 277, 278, 280, 281, 286, 288, 291, 292, 297, 341, 346, 351, 352, 356, 358, 370, 377, 379, 404, 408, 429, 445, 447, 457, 458, 474, 476, 478, 480, 481, 482, 483, 486, 488, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511], "inclus": [0, 476], "languag": [0, 12, 222, 476, 501], "Being": [0, 476], "respect": [0, 476, 481, 486, 500, 510], "differ": [0, 1, 2, 3, 6, 12, 147, 158, 160, 161, 181, 193, 202, 215, 220, 221, 222, 228, 229, 236, 239, 240, 242, 245, 250, 255, 256, 257, 258, 274, 474, 476, 477, 478, 480, 482, 484, 487, 488, 490, 493, 495, 496, 497, 500, 503, 507, 508, 509], "viewpoint": [0, 476], "gracefulli": [0, 476], "accept": [0, 35, 474, 476, 494], "construct": [0, 182, 183, 184, 185, 187, 200, 203, 204, 207, 290, 475, 476, 478, 482, 509], "critic": [0, 6, 476], "focus": [0, 7, 476, 487], "what": [0, 162, 198, 257, 287, 474, 476], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 21, 29, 30, 35, 36, 38, 40, 41, 42, 66, 68, 74, 75, 81, 83, 85, 91, 102, 106, 107, 113, 114, 115, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 157, 161, 170, 171, 172, 173, 176, 178, 180, 182, 183, 186, 188, 189, 190, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 215, 221, 222, 225, 227, 228, 229, 231, 234, 237, 241, 243, 251, 252, 253, 256, 257, 258, 264, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 296, 314, 346, 358, 378, 381, 383, 384, 386, 388, 389, 391, 397, 432, 434, 436, 438, 439, 443, 445, 447, 453, 458, 460, 474, 475, 476, 477, 478, 480, 482, 483, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510], "best": [0, 2, 4, 6, 66, 215, 216, 220, 221, 232, 233, 239, 240, 255, 257, 274, 476, 491, 497, 503, 508, 509], "show": [0, 3, 474, 475, 476, 480, 482, 500, 509], "empathi": [0, 476], "toward": [0, 4, 476, 480], "other": [0, 1, 66, 88, 89, 91, 146, 199, 227, 256, 262, 436, 440, 462, 474, 476, 483, 486, 487, 490, 492, 495, 497, 499, 500, 503, 508, 509, 511], "member": [0, 7, 221, 230, 476], "unaccept": [0, 476], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 21, 29, 30, 36, 38, 41, 42, 59, 66, 68, 74, 91, 95, 113, 114, 115, 127, 152, 157, 158, 159, 160, 162, 163, 164, 170, 171, 176, 177, 178, 181, 183, 184, 186, 189, 190, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 215, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 266, 272, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 290, 291, 292, 296, 297, 315, 316, 318, 321, 325, 326, 329, 330, 333, 334, 341, 346, 349, 351, 352, 353, 354, 355, 356, 357, 370, 377, 378, 427, 474, 475, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 493, 494, 495, 497, 498, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511], "imageri": [0, 476], "unwelcom": [0, 476], "attent": [0, 200, 476, 480], "advanc": [0, 6, 454, 476, 477, 503, 509, 510], "troll": [0, 476], "insult": [0, 476], "derogatori": [0, 476], "comment": [0, 476, 478, 493, 508], "polit": [0, 476], "attack": [0, 476], "public": [0, 127, 476], "privat": [0, 221, 230, 476], "publish": [0, 476, 492, 494], "inform": [0, 5, 6, 7, 8, 9, 10, 14, 21, 29, 30, 40, 68, 170, 171, 182, 183, 184, 185, 225, 250, 252, 253, 254, 256, 275, 276, 277, 278, 280, 281, 286, 313, 349, 378, 433, 434, 439, 440, 476, 480, 483, 486, 489, 495, 500, 504, 505, 507, 510, 511], "physic": [0, 180, 476], "electron": [0, 476], "address": [0, 202, 462, 474, 476, 494, 501], "without": [0, 1, 127, 152, 215, 225, 252, 445, 474, 476, 477, 480, 482, 487, 493, 500, 501, 502, 503, 509], "explicit": [0, 146, 476], "permiss": [0, 476], "which": [0, 2, 4, 6, 7, 12, 40, 41, 66, 68, 76, 127, 146, 170, 178, 180, 200, 201, 202, 221, 222, 225, 227, 235, 237, 240, 241, 244, 245, 246, 250, 251, 252, 253, 254, 262, 264, 275, 276, 286, 443, 474, 475, 476, 477, 478, 480, 482, 483, 486, 487, 490, 493, 494, 495, 496, 498, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511], "could": [0, 68, 170, 171, 202, 256, 274, 275, 276, 277, 278, 280, 281, 286, 476, 481, 487, 496, 498, 500, 503, 509], "reason": [0, 102, 182, 183, 476, 477, 507, 509], "consid": [0, 1, 152, 229, 476, 477, 480, 509], "inappropri": [0, 476], "profession": [0, 476], "set": [0, 2, 3, 4, 6, 36, 38, 40, 41, 42, 66, 67, 68, 118, 127, 146, 152, 162, 164, 170, 171, 180, 186, 190, 192, 200, 202, 205, 215, 216, 218, 220, 221, 225, 230, 231, 232, 234, 239, 243, 251, 256, 257, 262, 264, 266, 274, 275, 276, 277, 278, 280, 281, 286, 299, 336, 337, 338, 341, 358, 404, 408, 413, 434, 438, 443, 444, 446, 447, 448, 457, 458, 462, 474, 475, 476, 477, 478, 482, 486, 487, 488, 490, 493, 494, 502, 503, 506, 509, 510], "ar": [0, 2, 3, 4, 6, 7, 12, 36, 42, 66, 83, 95, 139, 167, 189, 200, 215, 221, 222, 225, 229, 235, 237, 241, 250, 251, 252, 253, 256, 257, 277, 290, 296, 297, 378, 381, 383, 390, 431, 440, 474, 475, 476, 477, 478, 480, 481, 483, 484, 486, 488, 490, 492, 493, 494, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511], "clarifi": [0, 476], "expect": [0, 202, 300, 416, 439, 476, 485, 503, 509], "take": [0, 2, 36, 68, 170, 171, 183, 184, 193, 215, 250, 274, 275, 276, 277, 278, 280, 281, 286, 476, 477, 480, 486, 500, 503, 504, 508, 509, 510], "appropri": [0, 476], "fair": [0, 476], "correct": [0, 3, 147, 161, 225, 226, 227, 229, 251, 399, 474, 476], "action": [0, 476, 487], "ani": [0, 1, 91, 146, 216, 221, 225, 227, 299, 300, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 318, 325, 326, 327, 328, 329, 330, 334, 336, 337, 347, 349, 354, 355, 358, 360, 366, 375, 378, 381, 385, 388, 389, 390, 392, 395, 397, 400, 404, 408, 410, 413, 416, 419, 424, 425, 431, 432, 434, 436, 438, 439, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 461, 462, 469, 470, 474, 476, 477, 482], "instanc": [0, 1, 2, 7, 170, 171, 180, 200, 221, 226, 227, 229, 232, 239, 240, 274, 275, 276, 277, 278, 280, 281, 286, 287, 315, 353, 357, 381, 390, 474, 476, 509, 510, 511], "have": [0, 3, 12, 95, 127, 152, 182, 183, 198, 214, 222, 225, 229, 236, 250, 252, 474, 476, 477, 482, 486, 492, 493, 494, 497, 500, 503], "right": [0, 1, 178, 225, 443, 474, 476, 477, 508], "remov": [0, 3, 68, 83, 95, 106, 118, 120, 127, 139, 146, 181, 218, 227, 315, 318, 325, 326, 329, 331, 333, 335, 381, 439, 440, 446, 475, 476, 487, 500, 507], "edit": [0, 1, 335, 341, 343, 344, 347, 476], "reject": [0, 476], "commit": [0, 476], "wiki": [0, 476], "issu": [0, 5, 474, 476, 491, 503, 507], "align": [0, 215, 476, 508], "thi": [0, 2, 3, 4, 6, 7, 12, 35, 40, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 107, 108, 111, 112, 121, 122, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 157, 161, 170, 171, 182, 183, 188, 189, 199, 200, 201, 202, 203, 204, 205, 207, 214, 215, 221, 222, 225, 226, 227, 229, 234, 242, 243, 250, 252, 253, 254, 255, 256, 257, 266, 273, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 473, 474, 475, 476, 477, 478, 480, 482, 483, 486, 487, 490, 492, 493, 494, 495, 496, 500, 503, 504, 505, 506, 507, 508, 509], "ban": [0, 476], "temporarili": [0, 476], "perman": [0, 476], "thei": [0, 162, 180, 221, 257, 475, 476, 480, 486, 493, 497, 500], "deem": [0, 476], "threaten": [0, 476], "offens": [0, 476], "harm": [0, 476], "appli": [0, 4, 135, 189, 221, 223, 250, 252, 474, 476, 498, 500, 503, 504, 506, 509, 510], "both": [0, 2, 4, 7, 152, 240, 242, 476, 477, 481, 502, 503], "within": [0, 1, 220, 221, 225, 255, 257, 262, 274, 277, 476, 494, 501], "space": [0, 2, 7, 162, 170, 171, 220, 221, 227, 232, 234, 236, 239, 240, 241, 242, 255, 257, 274, 277, 278, 280, 281, 286, 445, 476, 477, 500, 503, 509, 510], "when": [0, 2, 4, 12, 65, 74, 85, 91, 152, 176, 200, 201, 209, 210, 211, 215, 222, 223, 235, 250, 251, 252, 443, 445, 458, 462, 474, 476, 477, 478, 483, 487, 500, 503, 508, 509], "individu": [0, 2, 91, 233, 234, 239, 250, 476], "repres": [0, 65, 202, 207, 225, 227, 229, 317, 319, 320, 322, 324, 327, 328, 331, 332, 443, 476, 478, 503, 509], "its": [0, 2, 68, 118, 127, 196, 202, 214, 215, 223, 224, 228, 229, 252, 256, 258, 277, 474, 476, 477, 480, 492, 493, 494, 499, 500, 506, 508, 509], "offici": [0, 152, 222, 226, 227, 474, 476, 493], "e": [0, 38, 41, 67, 91, 234, 236, 256, 436, 438, 462, 476, 480, 482, 487, 509], "mail": [0, 476], "post": [0, 3, 4, 7, 36, 38, 41, 170, 171, 189, 215, 218, 221, 256, 274, 276, 277, 278, 280, 281, 286, 457, 476, 481, 482, 490, 491, 498, 507, 509], "via": [0, 220, 221, 243, 255, 257, 273, 274, 462, 476, 482, 487, 490, 506], "social": [0, 476], "media": [0, 476], "account": [0, 234, 476, 506, 509], "act": [0, 198, 476], "appoint": [0, 476], "onlin": [0, 6, 35, 476, 506], "offlin": [0, 35, 297, 476, 503], "event": [0, 476, 507], "represent": [0, 77, 234, 315, 316, 318, 321, 325, 326, 329, 330, 333, 334, 456, 476, 481, 497, 503], "mai": [0, 127, 146, 152, 266, 476, 477, 485, 492, 494, 499, 501, 503], "further": [0, 91, 476, 494, 495], "defin": [0, 2, 3, 4, 7, 38, 40, 41, 65, 66, 67, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 114, 121, 122, 125, 126, 127, 146, 170, 171, 181, 232, 233, 236, 239, 240, 241, 242, 243, 250, 251, 252, 253, 254, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 372, 373, 374, 457, 474, 476, 478, 480, 486, 490, 493, 497, 498, 500, 503, 506, 507, 509, 510], "abus": [0, 476], "otherwis": [0, 171, 202, 215, 286, 476, 478, 502, 508], "report": [0, 474, 476, 506], "contact": [0, 476, 505, 506], "mlp": [0, 476], "mlpc": [0, 476], "dl": [0, 220, 221, 230, 243, 255, 257, 273, 274, 476, 488, 501], "intel": [0, 2, 5, 7, 66, 183, 186, 217, 221, 228, 229, 250, 253, 258, 426, 439, 476, 479, 480, 481, 484, 486, 487, 491, 492, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 507, 509, 510], "com": [0, 3, 6, 200, 222, 223, 226, 227, 250, 253, 439, 474, 476, 478, 487, 491, 492, 505, 506, 511], "all": [0, 1, 3, 4, 6, 7, 36, 41, 42, 59, 66, 68, 81, 84, 106, 107, 119, 158, 160, 172, 173, 176, 180, 181, 186, 189, 190, 198, 202, 206, 209, 210, 211, 213, 215, 218, 221, 222, 225, 227, 228, 229, 241, 244, 245, 246, 247, 250, 253, 256, 258, 260, 261, 264, 265, 266, 272, 275, 276, 277, 280, 286, 291, 292, 301, 312, 314, 323, 339, 341, 346, 351, 352, 365, 367, 370, 371, 377, 378, 381, 383, 390, 396, 403, 405, 409, 410, 412, 418, 423, 427, 436, 440, 462, 474, 476, 477, 478, 482, 486, 487, 491, 498, 499, 500, 501, 503, 504, 508, 509], "complaint": [0, 476], "review": [0, 476], "investig": [0, 476], "result": [0, 2, 3, 12, 36, 38, 41, 66, 68, 152, 170, 178, 180, 181, 215, 221, 222, 225, 226, 227, 228, 229, 234, 236, 240, 258, 266, 275, 276, 277, 278, 280, 281, 286, 298, 300, 315, 316, 329, 330, 335, 341, 344, 347, 421, 461, 464, 474, 475, 476, 477, 480, 482, 483, 487, 490, 492, 493, 497, 500, 501, 503, 506, 507, 508, 509, 511], "necessari": [0, 2, 65, 216, 221, 476, 495, 506, 509], "circumst": [0, 476, 502], "team": [0, 227, 476, 504], "oblig": [0, 476], "confidenti": [0, 474, 476], "regard": [0, 476, 504], "incid": [0, 476], "detail": [0, 6, 68, 215, 315, 318, 325, 326, 329, 331, 333, 335, 336, 338, 341, 342, 343, 344, 345, 349, 354, 414, 419, 433, 476, 486, 488, 493, 494, 500, 505, 506, 507, 509, 511], "specif": [0, 2, 3, 7, 38, 41, 66, 67, 68, 172, 173, 176, 180, 186, 200, 201, 202, 203, 207, 209, 210, 211, 221, 222, 225, 231, 232, 239, 240, 265, 326, 336, 337, 338, 341, 349, 364, 474, 476, 480, 483, 486, 488, 493, 494, 495, 497, 502, 510], "polici": [0, 6, 280, 476, 487, 499, 510], "separ": [0, 214, 461, 474, 476, 488, 492, 498, 502], "who": [0, 476], "do": [0, 12, 36, 38, 41, 66, 199, 200, 216, 217, 218, 221, 222, 225, 253, 256, 296, 474, 476, 478, 482, 486, 487, 490, 493, 497, 504, 505, 509], "follow": [0, 2, 3, 4, 7, 9, 42, 91, 107, 110, 113, 114, 115, 116, 127, 202, 221, 222, 225, 243, 473, 474, 475, 476, 478, 480, 483, 486, 487, 491, 492, 493, 495, 496, 498, 500, 502, 503, 507, 509], "good": [0, 476, 483, 503, 509], "faith": [0, 476], "face": [0, 6, 476, 501, 505], "temporari": [0, 476], "repercuss": [0, 476], "determin": [0, 3, 458, 476, 483], "": [0, 2, 3, 38, 65, 67, 77, 83, 91, 127, 146, 147, 161, 164, 180, 182, 183, 184, 190, 199, 202, 214, 215, 221, 227, 235, 237, 250, 252, 262, 274, 275, 276, 278, 280, 286, 291, 292, 347, 378, 431, 432, 475, 476, 480, 482, 483, 486, 487, 490, 491, 494, 498, 499, 500, 501, 502, 503, 505, 506, 510], "leadership": [0, 476], "adapt": [0, 38, 41, 66, 67, 68, 476], "from": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 40, 65, 66, 68, 82, 88, 89, 91, 127, 139, 146, 152, 170, 171, 181, 182, 183, 189, 190, 193, 197, 200, 201, 202, 203, 204, 205, 207, 216, 218, 219, 221, 222, 225, 226, 227, 231, 234, 235, 236, 237, 241, 243, 250, 251, 252, 253, 254, 256, 262, 266, 275, 276, 277, 278, 280, 281, 286, 290, 296, 297, 315, 318, 319, 320, 322, 325, 326, 327, 328, 329, 331, 333, 335, 336, 338, 341, 342, 343, 344, 345, 347, 358, 363, 381, 384, 393, 394, 395, 397, 419, 424, 438, 439, 443, 445, 446, 447, 462, 464, 469, 470, 475, 476, 477, 478, 480, 481, 482, 484, 485, 487, 490, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509], "version": [0, 1, 6, 7, 38, 40, 41, 67, 68, 74, 170, 217, 218, 397, 429, 434, 445, 474, 476, 486, 491, 492, 499, 501, 509], "1": [0, 1, 3, 4, 6, 7, 36, 38, 41, 42, 65, 66, 68, 75, 95, 111, 150, 152, 159, 161, 178, 180, 181, 182, 183, 190, 192, 195, 196, 197, 199, 200, 201, 203, 204, 207, 208, 215, 220, 221, 225, 226, 227, 229, 234, 237, 243, 250, 252, 255, 256, 257, 273, 274, 290, 300, 416, 424, 473, 475, 476, 477, 478, 480, 483, 486, 487, 493, 494, 497, 498, 499, 500, 502, 503, 505, 507, 508, 509, 510], "4": [0, 3, 6, 7, 12, 68, 74, 176, 209, 210, 211, 213, 215, 222, 223, 225, 436, 475, 476, 477, 485, 486, 490, 491, 493, 499, 500, 508, 509, 511], "avail": [0, 6, 8, 9, 10, 14, 21, 29, 30, 35, 262, 313, 317, 319, 320, 324, 327, 328, 332, 397, 474, 490, 499, 506, 509], "http": [0, 3, 6, 200, 202, 222, 223, 225, 226, 227, 250, 252, 253, 470, 474, 478, 487, 491, 492, 505], "www": [0, 202, 478, 511], "org": [0, 6, 225, 252, 474, 491], "html": 0, "For": [0, 1, 3, 4, 5, 7, 189, 202, 214, 215, 221, 225, 226, 227, 229, 234, 250, 253, 274, 436, 474, 476, 481, 482, 486, 487, 490, 500, 504, 507, 509, 510, 511], "answer": [0, 215, 226, 227, 476, 508, 511], "common": [0, 4, 6, 9, 221, 231, 237, 240, 241, 242, 250, 256, 257, 290, 439, 440, 445, 475, 476, 477, 478, 480, 482, 487, 488, 491, 495, 496, 500, 503], "question": [0, 7, 215, 226, 227, 476, 491, 508, 511], "about": [0, 349, 378, 431, 433, 434, 439, 440, 474, 476, 477, 483, 504, 511], "see": [0, 1, 3, 5, 215, 222, 225, 474, 476, 487, 492, 496, 500, 507, 511], "faq": [0, 6, 476], "pytorch": [1, 6, 7, 176, 181, 186, 188, 199, 200, 202, 205, 206, 209, 210, 211, 213, 215, 217, 218, 219, 220, 221, 228, 229, 230, 248, 250, 253, 255, 257, 258, 265, 274, 300, 370, 377, 400, 410, 427, 480, 482, 483, 484, 486, 490, 491, 494, 495, 500, 501, 502, 503, 505, 509, 510], "toolkit": [1, 6, 491, 501], "develop": [1, 6, 445, 476, 491, 494, 501, 503, 504, 506], "transform": [1, 6, 14, 31, 41, 65, 71, 83, 111, 112, 114, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 147, 150, 151, 174, 176, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 221, 257, 309, 313, 318, 323, 336, 339, 341, 346, 348, 370, 445, 446, 447, 448, 475, 477, 478, 480, 481, 482, 500, 501, 504, 507, 509, 510], "nn": [1, 3, 4, 157, 181, 217, 218, 237, 274, 495, 500, 507], "modul": [1, 3, 4, 217, 238, 239, 248, 249, 435, 442, 450, 474, 475, 480, 490, 493, 495, 502, 504, 507], "With": [1, 4, 7, 118, 477, 497, 500, 501, 503, 511], "convert": [1, 3, 4, 36, 40, 65, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 124, 125, 126, 200, 212, 214, 215, 221, 225, 229, 231, 240, 242, 251, 260, 261, 265, 287, 317, 324, 332, 424, 436, 487, 494, 496, 503, 504, 508], "torch": [1, 3, 4, 66, 157, 181, 217, 218, 229, 237, 265, 274, 482, 494, 495, 500, 503, 507], "graphmodul": [1, 66, 157, 504], "can": [1, 2, 3, 4, 6, 7, 77, 147, 161, 162, 170, 171, 180, 182, 183, 199, 202, 215, 221, 225, 227, 229, 250, 252, 253, 254, 257, 266, 274, 275, 276, 277, 278, 280, 281, 286, 400, 429, 436, 445, 474, 475, 477, 478, 480, 482, 483, 486, 487, 490, 491, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510], "automat": [1, 6, 202, 205, 220, 221, 230, 237, 255, 257, 274, 474, 478, 490, 494, 498, 508, 509], "insert": [1, 3, 124, 127, 139, 150, 217, 218, 490, 503, 504, 507], "quant": [1, 3, 503], "dequant": [1, 3, 110, 113, 115, 116, 118, 135, 280, 349, 507], "oper": [1, 3, 65, 127, 152, 178, 250, 457, 461, 474, 497, 503, 508, 509], "symbolic_trac": 1, "fake": [1, 4, 503], "valu": [1, 3, 4, 36, 38, 41, 42, 65, 66, 68, 76, 77, 83, 88, 89, 91, 111, 112, 127, 146, 147, 152, 161, 163, 164, 170, 171, 178, 180, 181, 200, 203, 204, 215, 225, 229, 235, 236, 250, 251, 253, 265, 266, 274, 275, 276, 278, 280, 281, 286, 288, 290, 291, 297, 309, 311, 313, 317, 319, 320, 322, 324, 327, 328, 332, 336, 337, 358, 360, 399, 428, 431, 432, 436, 438, 443, 445, 453, 455, 456, 458, 469, 474, 477, 478, 483, 486, 493, 497, 500, 502, 503, 508, 509, 510], "call": [1, 2, 7, 35, 40, 189, 221, 225, 236, 237, 243, 250, 252, 253, 257, 273, 314, 346, 431, 439, 440, 474, 477, 488, 500, 503, 507, 508, 509], "proxi": 1, "fed": 1, "model": [1, 2, 4, 7, 10, 36, 38, 40, 41, 42, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 146, 152, 157, 162, 167, 170, 171, 180, 181, 183, 184, 189, 196, 199, 200, 202, 215, 216, 217, 218, 219, 220, 221, 229, 230, 231, 232, 233, 235, 237, 239, 240, 242, 243, 250, 251, 252, 253, 254, 255, 256, 257, 274, 275, 276, 277, 278, 280, 281, 286, 287, 290, 296, 297, 299, 300, 301, 303, 313, 315, 323, 326, 329, 331, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 353, 357, 358, 363, 364, 365, 368, 369, 370, 394, 395, 397, 400, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 418, 420, 423, 424, 427, 428, 435, 443, 445, 450, 460, 461, 465, 475, 477, 478, 480, 481, 482, 483, 487, 488, 490, 492, 493, 494, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 510], "record": [1, 3, 181, 188, 200, 201, 202, 208, 478, 506, 507, 509], "Then": [1, 225, 474, 487], "get": [1, 38, 41, 66, 67, 68, 88, 89, 91, 127, 146, 152, 157, 162, 164, 176, 180, 186, 188, 189, 190, 193, 211, 213, 215, 218, 219, 220, 221, 230, 237, 242, 243, 250, 252, 254, 255, 256, 257, 262, 264, 265, 266, 280, 291, 292, 297, 298, 303, 309, 310, 311, 313, 315, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 335, 336, 338, 340, 341, 342, 343, 344, 345, 348, 349, 350, 353, 357, 358, 363, 375, 378, 379, 381, 383, 384, 388, 389, 390, 392, 395, 397, 399, 400, 401, 402, 407, 411, 414, 415, 417, 421, 422, 424, 426, 433, 434, 438, 443, 445, 446, 448, 452, 455, 457, 458, 461, 462, 466, 468, 469, 470, 471, 474, 475, 477, 478, 490, 491, 507, 509], "sure": [1, 3, 146, 250, 252, 254, 378, 474], "replac": [1, 3, 41, 106, 107, 127, 227, 445, 482, 487, 505], "backend": [1, 38, 41, 66, 67, 68, 186, 191, 192, 194, 196, 200, 201, 203, 204, 205, 206, 207, 211, 213, 215, 230, 473, 482, 483, 488, 490, 502, 503, 508, 510], "pytorch_fx": [1, 176, 202, 206, 209, 210, 211, 502], "conf": [1, 2, 4, 158, 160, 170, 171, 180, 221, 230, 231, 243, 256, 260, 261, 265, 274, 275, 276, 277, 278, 280, 281, 286, 287, 456, 475, 477, 480, 487, 488, 509], "yaml": [1, 4, 7, 66, 67, 68, 162, 163, 164, 170, 171, 180, 189, 200, 202, 216, 220, 221, 231, 232, 233, 239, 240, 243, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 298, 302, 303, 304, 305, 306, 308, 310, 311, 393, 395, 402, 407, 411, 414, 456, 478, 480, 483, 487, 488, 493, 496, 497, 500, 502, 507, 508, 509], "you": [1, 4, 6, 198, 200, 225, 252, 474, 475, 476, 477, 478, 482, 491, 492, 493, 505, 506, 507, 509], "usual": [1, 4, 36, 38, 41, 66, 68, 200, 221, 243, 477, 480, 498, 503], "neural": [1, 7, 21, 40, 66, 180, 183, 186, 189, 212, 213, 215, 217, 221, 228, 229, 231, 243, 250, 253, 255, 256, 258, 262, 353, 357, 381, 390, 426, 433, 445, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 497, 498, 501, 503, 505, 507, 508, 509, 510], "_": [1, 3, 4, 7, 170, 171, 274, 276, 277, 278, 280, 281, 286, 473, 480, 482, 483, 486, 487, 493, 494, 495, 497, 500, 503, 504, 505, 506, 507, 509, 510], "compressor": [1, 2, 7, 40, 66, 180, 183, 186, 189, 212, 213, 215, 217, 221, 228, 229, 231, 250, 253, 255, 256, 258, 262, 353, 357, 381, 390, 426, 433, 445, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 497, 498, 500, 501, 503, 505, 507, 508, 509, 510], "sourc": [1, 6, 36, 42, 68, 183, 221, 223, 231, 362, 492, 496, 501], "code": [1, 6, 7, 170, 171, 180, 221, 231, 253, 256, 274, 275, 276, 277, 278, 280, 281, 286, 336, 341, 359, 377, 439, 440, 470, 471, 477, 478, 480, 482, 488, 490, 492, 493, 497, 498, 500, 501, 502, 503, 506, 507, 508, 509], "shown": [1, 2, 358, 474, 480, 487, 493, 497, 498, 509], "below": [1, 2, 4, 7, 75, 87, 95, 256, 275, 276, 473, 476, 480, 482, 487, 488, 493, 497, 498, 500, 502, 503, 507, 509], "arg": [1, 2, 3, 40, 66, 74, 124, 200, 201, 202, 220, 221, 231, 250, 255, 256, 260, 261, 262, 265, 266, 277, 287, 302, 304, 306, 307, 308, 317, 319, 320, 322, 324, 327, 328, 332, 431, 439, 458, 477, 478, 480, 482, 495, 500, 503, 507, 508], "tune": [1, 4, 6, 7, 36, 38, 40, 41, 66, 68, 162, 170, 171, 200, 202, 220, 221, 255, 257, 274, 275, 276, 277, 278, 280, 281, 286, 297, 308, 326, 333, 334, 341, 343, 347, 370, 400, 405, 415, 427, 435, 446, 450, 474, 477, 478, 482, 483, 490, 492, 494, 497, 500, 501, 504, 505, 506, 507, 510], "neural_compressor": [1, 2, 4, 6, 12, 475, 477, 478, 480, 482, 487, 488, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 508, 509, 510], "experiment": [1, 2, 4, 6, 12, 174, 177, 178, 257, 424, 475, 478, 480, 482, 487, 494, 495, 496, 497, 498, 500, 502, 504, 505, 508], "import": [1, 2, 3, 4, 6, 152, 221, 231, 234, 287, 297, 475, 477, 478, 480, 482, 487, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 507, 508], "eval": [1, 3, 4, 41, 189, 221, 225, 231, 507], "q_model": [1, 4, 221, 231, 477, 478, 482, 488, 493, 495, 496, 497, 503], "fit": [1, 4, 6, 274, 277, 477, 478, 480, 482, 488, 493, 495, 497, 498, 500, 503], "save": [1, 2, 3, 7, 36, 38, 41, 66, 68, 127, 176, 202, 206, 211, 217, 218, 235, 240, 256, 260, 261, 262, 264, 265, 287, 288, 291, 297, 487, 488, 494, 495, 496, 500, 503], "tuned_checkpoint": 1, "return": [1, 2, 3, 4, 12, 36, 38, 40, 41, 42, 65, 66, 68, 71, 74, 77, 78, 81, 82, 83, 84, 88, 89, 91, 95, 102, 106, 107, 111, 112, 113, 114, 115, 116, 124, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 152, 157, 158, 160, 164, 170, 171, 176, 178, 180, 181, 186, 190, 192, 199, 202, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 246, 250, 251, 252, 253, 254, 256, 258, 260, 261, 262, 264, 265, 266, 272, 274, 275, 276, 277, 278, 280, 281, 286, 287, 290, 291, 292, 296, 297, 315, 316, 318, 325, 326, 327, 328, 329, 331, 333, 334, 358, 361, 362, 363, 364, 395, 431, 434, 436, 438, 439, 440, 445, 448, 457, 458, 461, 478, 482, 493, 494, 495, 497, 503, 507, 509], "now": [1, 2, 215, 443, 478, 482, 487, 496, 502, 508, 509], "support": [1, 2, 3, 38, 41, 65, 66, 67, 68, 95, 102, 119, 170, 171, 176, 180, 181, 182, 183, 186, 189, 190, 199, 200, 202, 206, 209, 210, 211, 212, 213, 215, 221, 228, 229, 231, 236, 237, 241, 243, 244, 245, 246, 250, 252, 256, 258, 262, 266, 274, 275, 276, 277, 278, 280, 281, 286, 290, 291, 292, 313, 378, 381, 383, 384, 386, 388, 389, 391, 397, 428, 436, 445, 474, 475, 483, 487, 496, 501, 504, 506, 509, 511], "auto": [1, 275, 297], "method": [1, 2, 3, 4, 6, 66, 127, 146, 147, 157, 176, 182, 183, 193, 198, 199, 200, 202, 206, 209, 210, 211, 213, 215, 228, 229, 234, 237, 240, 241, 242, 246, 258, 260, 261, 262, 264, 265, 431, 436, 440, 457, 475, 477, 480, 481, 483, 493, 498, 500, 503, 504, 508, 509], "avoid": [1, 200, 507], "user": [1, 2, 3, 6, 7, 38, 67, 127, 162, 170, 171, 172, 173, 176, 180, 186, 189, 202, 205, 209, 210, 211, 215, 220, 221, 234, 236, 243, 253, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 297, 430, 480, 483, 486, 487, 490, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 507, 508, 509], "log": [1, 150, 243, 300, 315, 326, 329, 335, 341, 343, 344, 400, 431, 437, 438, 439, 440, 444, 458, 474, 506, 507, 509], "output": [1, 3, 4, 7, 12, 35, 42, 66, 68, 74, 80, 81, 91, 95, 106, 107, 113, 115, 120, 127, 146, 152, 164, 170, 171, 181, 183, 184, 188, 214, 216, 217, 218, 220, 221, 222, 225, 229, 234, 235, 250, 262, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 291, 315, 326, 329, 335, 341, 343, 344, 378, 388, 389, 390, 404, 408, 411, 431, 439, 446, 452, 474, 477, 480, 482, 486, 487, 488, 493, 495, 500, 502, 503, 507, 508, 509, 510], "fail": [1, 127, 440], "symbol": [1, 40, 157, 222, 274, 495], "trace": [1, 157, 217, 218, 274], "info": [1, 36, 38, 41, 66, 127, 182, 183, 187, 218, 250, 256, 262, 315, 316, 318, 325, 326, 329, 330, 334, 431, 434, 439, 445, 461, 474, 476, 487, 495], "entir": [1, 3, 4, 274, 500], "conduct": 1, "combin": [1, 7, 38, 67, 170, 171, 178, 189, 221, 256, 274, 275, 276, 277, 278, 280, 281, 286, 297, 483, 490, 498, 501, 504, 508, 509], "imper": 1, "control": [1, 36, 38, 68, 107, 158, 160, 237, 341, 346, 474, 499, 509], "flow": [1, 2, 221, 226, 227, 243], "therefor": [1, 4, 503, 505], "int8": [1, 4, 7, 36, 38, 41, 65, 66, 67, 68, 147, 161, 212, 217, 218, 280, 291, 292, 349, 473, 474, 478, 481, 486, 502, 503, 504, 505, 506, 507, 508, 509, 510], "consist": [1, 76, 84, 474, 476, 509], "lot": [1, 483], "9": [1, 3, 4, 6, 236, 491, 500, 502, 510, 511], "higher": [1, 4, 170, 171, 241, 274, 275, 276, 277, 278, 280, 281, 286, 480, 493, 494, 500, 503, 506], "between": [1, 3, 7, 68, 147, 161, 181, 215, 226, 228, 229, 234, 236, 237, 258, 280, 349, 457, 461, 475, 480, 487, 490, 493, 503, 505, 506, 508, 509], "don": [1, 35, 147, 161, 436, 474, 509], "t": [1, 3, 7, 35, 88, 89, 91, 127, 146, 147, 161, 182, 183, 215, 227, 236, 237, 256, 436, 444, 474, 475, 477, 480, 482, 494, 500, 509, 510, 511], "need": [1, 4, 7, 35, 36, 38, 40, 41, 66, 68, 73, 74, 75, 76, 79, 80, 83, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 138, 139, 143, 146, 170, 171, 176, 182, 183, 184, 185, 190, 198, 199, 202, 209, 210, 211, 215, 216, 221, 228, 229, 234, 243, 256, 258, 264, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 464, 474, 475, 477, 478, 480, 482, 490, 494, 497, 500, 502, 503, 504, 505, 508, 509, 510], "becaus": [1, 215, 225, 250, 500, 503, 508, 509], "modifi": [1, 77, 83, 91, 102, 202, 253, 425, 474, 475, 482, 486, 510], "8": [1, 3, 4, 6, 214, 436, 486, 491, 497, 501, 511], "As": [1, 102, 225, 474, 477, 480, 483, 500, 509], "cannot": [1, 225, 434, 485, 507], "handl": [1, 5, 81, 83, 152, 234, 235, 236, 436, 461, 462, 477], "tensor": [1, 3, 36, 38, 40, 41, 42, 65, 66, 68, 91, 127, 146, 152, 181, 215, 217, 218, 246, 247, 250, 252, 254, 262, 264, 265, 280, 291, 292, 338, 341, 349, 378, 478, 500, 503, 505, 507, 508, 509, 511], "iter": [1, 2, 4, 7, 36, 38, 40, 41, 42, 66, 68, 152, 170, 171, 176, 182, 183, 193, 198, 202, 203, 206, 211, 240, 252, 254, 274, 275, 276, 277, 278, 280, 281, 286, 290, 291, 292, 315, 439, 446, 477, 480, 500, 502, 507, 509, 510], "so": [1, 7, 215, 252, 287, 483, 485, 490, 493, 503, 504, 507, 508, 509], "might": [1, 474, 476, 509], "meet": [1, 6, 256, 487, 497, 501, 502, 503, 507, 509], "failur": [1, 457], "sometim": [1, 127, 146, 500, 503], "order": [1, 12, 222, 223, 256, 275, 276, 280, 378, 381, 390, 447, 493, 500, 502, 507, 509], "successfulli": [1, 6, 482, 501], "suggest": [1, 242, 506], "two": [1, 2, 114, 127, 176, 180, 202, 206, 207, 211, 225, 250, 254, 256, 297, 474, 475, 478, 480, 482, 486, 487, 493, 494, 498, 500, 503, 504, 506, 509, 510], "approach": [1, 2, 6, 66, 163, 221, 232, 233, 234, 239, 240, 313, 446, 453, 480, 483, 490, 501, 502, 509, 510], "preprocess": [1, 176, 200, 211, 213, 215, 216, 221, 477, 482, 508], "here": [1, 3, 4, 6, 35, 91, 225, 232, 239, 474, 478, 482, 486, 493, 497, 500, 503, 505, 506, 509], "non": [1, 3, 186, 251, 499, 500, 509], "traceabl": [1, 66], "class": [1, 2, 3, 59, 241, 272, 372, 373, 475, 477, 478, 480, 483, 487, 493, 497, 498, 507, 509, 510], "name": [1, 3, 6, 36, 41, 42, 65, 66, 68, 74, 83, 84, 88, 89, 91, 127, 139, 146, 152, 158, 160, 164, 176, 180, 181, 183, 184, 186, 187, 188, 200, 201, 202, 205, 206, 209, 210, 211, 213, 215, 217, 218, 224, 225, 228, 229, 234, 235, 237, 243, 246, 250, 252, 254, 256, 258, 262, 265, 288, 291, 297, 315, 319, 320, 322, 325, 326, 327, 328, 329, 331, 349, 358, 360, 378, 381, 383, 384, 390, 397, 398, 399, 400, 411, 424, 431, 434, 445, 447, 448, 469, 474, 475, 478, 482, 483, 486, 487, 492, 493, 495, 499, 505, 506, 507, 509, 510, 511], "select": [1, 2, 200, 233, 237, 239, 474, 490, 491, 503, 507, 509], "object": [1, 2, 3, 6, 12, 36, 38, 40, 41, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 121, 122, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 157, 158, 160, 162, 163, 164, 170, 171, 172, 173, 176, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 198, 200, 201, 202, 206, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222, 225, 228, 229, 230, 233, 234, 236, 239, 240, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 265, 273, 274, 275, 276, 277, 278, 280, 281, 286, 288, 290, 291, 292, 296, 297, 313, 327, 328, 331, 333, 374, 436, 439, 445, 455, 457, 458, 462, 474, 475, 477, 478, 485, 493, 494, 495, 498, 502, 503, 508, 509], "pass": [1, 3, 4, 7, 98, 102, 152, 214, 253, 256, 297, 392, 444, 457, 458, 475, 477, 478, 480, 482, 488, 493, 497, 500, 502, 503, 504, 509, 510], "them": [1, 83, 127, 200, 477, 486, 488, 498, 500, 509], "dict": [1, 36, 38, 40, 41, 66, 68, 152, 163, 164, 170, 171, 180, 181, 186, 199, 202, 217, 218, 221, 224, 225, 226, 227, 229, 232, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 262, 274, 275, 276, 277, 278, 280, 281, 286, 288, 290, 291, 296, 297, 298, 300, 303, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 354, 355, 358, 366, 375, 378, 385, 393, 394, 395, 397, 399, 400, 401, 402, 407, 411, 414, 415, 416, 417, 419, 421, 422, 424, 431, 432, 434, 436, 438, 439, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 461, 462, 464, 466, 468, 469, 471, 493, 502, 507, 509], "These": [1, 3, 490], "function": [1, 2, 4, 7, 38, 41, 68, 83, 127, 146, 170, 171, 189, 201, 220, 221, 232, 239, 240, 243, 253, 256, 264, 275, 276, 278, 280, 281, 288, 291, 474, 475, 477, 480, 488, 490, 491, 493, 494, 500, 503, 506, 507, 509], "If": [1, 83, 88, 89, 91, 95, 102, 127, 170, 171, 202, 215, 225, 237, 250, 251, 252, 274, 275, 276, 277, 278, 280, 281, 286, 474, 476, 478, 482, 487, 491, 492, 493, 494, 497, 498, 503, 506, 507, 508, 509], "conv2d": [1, 3, 38, 67, 81, 82, 86, 87, 92, 93, 147, 260, 261, 262, 264, 265, 486, 507], "won": 1, "detect": [1, 66, 157, 225, 229, 262, 378, 381, 390, 445, 474], "maskrcnn": 1, "tool": [1, 6, 7, 152, 297, 477, 487, 492, 501, 503], "test": [1, 6, 42, 215, 234, 474, 476, 491, 511], "net": [1, 3], "py": [1, 2, 3, 7, 127, 152, 223, 225, 226, 227, 252, 461, 474, 482, 491, 496, 503, 505, 507], "prepare_custom_config_dict": 1, "non_traceable_module_class": 1, "anchorgener": 1, "rpnpostprocessor": 1, "pooler": 1, "postprocessor": 1, "maskrcnnfpnfeatureextractor": 1, "maskpostprocessor": 1, "fpn": 1, "rpnhead": 1, "decor": [1, 2, 7, 36, 59, 88, 89, 91, 152, 158, 160, 176, 186, 211, 213, 215, 228, 229, 241, 246, 250, 252, 254, 258, 266, 272, 286, 297, 441, 509], "wrap": [1, 68, 181, 225, 309, 482], "untrac": 1, "part": [1, 42, 216, 221, 225, 250, 252, 477, 480, 487, 491, 494, 500], "like": [1, 2, 7, 36, 38, 41, 66, 68, 95, 118, 120, 127, 146, 152, 170, 171, 176, 190, 202, 206, 211, 220, 221, 229, 235, 252, 255, 256, 257, 260, 261, 262, 264, 265, 274, 275, 276, 277, 278, 280, 281, 286, 287, 474, 476, 480, 483, 487, 490, 496, 498, 500, 503, 509], "global": [1, 250, 458, 502, 509], "want": [1, 7, 88, 89, 91, 127, 198, 200, 252, 287, 474, 475, 478, 482, 493, 497, 498, 506, 507, 509], "move": [1, 68, 502, 505], "out": [1, 6, 146, 200, 201, 202, 220, 221, 250, 255, 257, 264, 274, 476, 478, 502, 503], "keep": [1, 7, 250, 251, 505], "should": [1, 2, 3, 7, 38, 41, 42, 66, 67, 68, 75, 95, 147, 151, 170, 171, 176, 183, 184, 198, 200, 202, 206, 211, 214, 215, 218, 223, 228, 229, 252, 256, 258, 274, 275, 276, 277, 278, 280, 281, 286, 297, 358, 436, 474, 478, 482, 493, 497, 503, 508, 509, 510], "try": [1, 198, 378, 381, 390, 458, 503], "must": [1, 215, 225, 229, 487, 491, 508, 509], "ssd": [1, 511], "resnet34": [1, 511], "ptq": [1, 482, 490, 503, 507], "python": [1, 9, 96, 152, 183, 202, 221, 225, 297, 397, 474, 476, 478, 482, 491, 501, 504, 508], "r34": 1, "def": [1, 2, 3, 4, 7, 88, 89, 91, 139, 170, 171, 274, 275, 276, 277, 278, 280, 281, 286, 478, 480, 482, 493, 497, 500, 503, 507, 509], "bboxes_labels_scor": 1, "bbox": [1, 225, 493], "prob": 1, "criteria": [1, 220, 221, 243, 250, 252, 255, 257, 273, 274, 509], "0": [1, 3, 4, 6, 9, 36, 38, 42, 65, 66, 67, 74, 112, 146, 152, 159, 167, 178, 181, 182, 183, 190, 192, 195, 196, 197, 199, 200, 203, 204, 207, 212, 215, 217, 218, 220, 221, 229, 234, 236, 237, 241, 243, 250, 255, 257, 273, 274, 431, 439, 474, 475, 477, 478, 480, 482, 483, 486, 492, 493, 494, 497, 499, 500, 502, 503, 506, 507, 508, 509, 510], "45": [1, 236, 511], "max_output": 1, "200": [1, 214, 509, 511], "box": [1, 215, 225, 229, 474, 493, 507, 508, 509], "label": [1, 12, 36, 68, 170, 171, 178, 181, 183, 184, 200, 202, 203, 204, 205, 208, 212, 215, 222, 224, 228, 229, 234, 235, 258, 274, 275, 276, 277, 278, 280, 281, 286, 366, 478, 493, 500, 508], "score": [1, 12, 222, 223, 225, 226, 227, 229, 250, 252, 493, 497, 500, 506, 509], "zip": 1, "split": [1, 146, 214, 215, 234, 508], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 157, 256, 277, 497, 498], "process": [2, 4, 7, 36, 38, 41, 66, 68, 170, 171, 176, 178, 180, 189, 200, 201, 202, 211, 212, 213, 215, 216, 217, 218, 221, 232, 233, 236, 239, 240, 243, 250, 252, 253, 254, 256, 257, 274, 275, 276, 277, 278, 280, 281, 286, 296, 312, 393, 394, 397, 427, 431, 435, 438, 439, 446, 474, 475, 477, 478, 480, 481, 482, 487, 498, 500, 503, 507, 508, 509, 510], "autom": 2, "design": [2, 183, 184, 189, 199, 221, 236, 255, 500, 503], "artifici": 2, "network": [2, 3, 6, 234, 237, 252, 474, 480, 481, 501, 503], "ann": 2, "ha": [2, 7, 12, 36, 38, 41, 66, 68, 83, 84, 88, 89, 91, 95, 114, 127, 146, 180, 221, 222, 236, 250, 252, 275, 276, 474, 477, 487, 490, 494, 502, 503, 504, 506], "been": [2, 12, 84, 214, 222, 236, 250, 252, 474, 480, 487, 494], "par": 2, "outperform": 2, "hand": [2, 225, 474], "simplest": [2, 480], "launcher": [2, 480, 500], "configur": [2, 3, 7, 35, 36, 38, 40, 41, 66, 67, 68, 127, 162, 163, 167, 170, 171, 172, 173, 174, 176, 180, 202, 205, 216, 217, 218, 220, 221, 225, 231, 232, 233, 234, 236, 239, 240, 243, 251, 253, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 296, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 326, 336, 338, 341, 400, 402, 407, 411, 414, 427, 429, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 460, 462, 474, 475, 478, 481, 493, 497, 505, 508, 511], "agent": 2, "path": [2, 3, 7, 36, 38, 41, 66, 68, 146, 152, 162, 163, 200, 201, 202, 215, 216, 217, 218, 220, 221, 231, 232, 233, 234, 237, 239, 240, 243, 251, 253, 255, 256, 257, 262, 265, 273, 274, 287, 297, 298, 303, 315, 318, 325, 326, 329, 335, 336, 341, 343, 344, 358, 364, 375, 378, 381, 383, 384, 386, 388, 389, 390, 391, 395, 402, 407, 411, 414, 415, 421, 431, 439, 443, 445, 446, 455, 470, 474, 475, 477, 478, 480, 482, 487, 488, 493, 495, 496, 500, 508, 509, 510], "syntax": [2, 486], "note": [2, 3, 6, 36, 38, 41, 66, 68, 75, 225, 253, 277, 331, 341, 345, 474, 475, 482, 483, 486, 487, 500, 503, 507, 509, 510, 511], "dyna": [2, 221, 234, 235, 236, 237, 238, 239, 257, 490, 502], "section": [2, 474, 480, 500, 502, 510], "option": [2, 36, 38, 41, 66, 68, 127, 146, 167, 170, 171, 181, 190, 200, 215, 217, 218, 221, 225, 231, 236, 237, 250, 256, 257, 274, 275, 276, 277, 278, 280, 281, 286, 287, 297, 303, 314, 315, 316, 318, 325, 326, 329, 331, 333, 334, 336, 341, 346, 349, 378, 385, 388, 389, 390, 395, 404, 408, 414, 415, 417, 422, 431, 432, 436, 439, 443, 445, 446, 448, 451, 453, 455, 464, 470, 475, 477, 478, 483, 486, 487, 494, 508, 509, 510], "requir": [2, 3, 4, 7, 189, 221, 225, 237, 256, 262, 299, 301, 309, 312, 365, 371, 378, 381, 383, 390, 396, 403, 404, 405, 406, 408, 409, 410, 412, 413, 418, 423, 427, 474, 475, 477, 481, 482, 486, 487, 491, 494, 495, 499, 503, 505, 507, 509, 510], "search_algorithm": [2, 163, 221, 239, 240, 257], "nsga2": [2, 236], "seed": [2, 152, 234, 236, 242, 455, 477, 483, 509, 510], "42": [2, 242, 499, 511], "supernet": [2, 236, 237], "ofa_mbv3_d234_e346_k357_w1": 2, "metric": [2, 6, 7, 10, 12, 36, 38, 41, 66, 68, 170, 171, 180, 183, 216, 220, 221, 231, 232, 233, 235, 237, 239, 240, 241, 242, 243, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 290, 309, 313, 318, 323, 336, 339, 341, 346, 370, 427, 435, 438, 442, 445, 446, 448, 464, 474, 475, 477, 482, 487, 494, 506, 507, 509, 510, 511], "acc": [2, 3, 38, 41, 229, 237, 266, 507, 511], "mac": [2, 233, 235, 237, 239], "popul": [2, 236], "50": [2, 225, 227, 236, 487, 511], "num_ev": [2, 236], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 234, 237, 445, 474], "batch_siz": [2, 3, 182, 183, 190, 192, 195, 196, 197, 198, 199, 200, 201, 217, 218, 237, 303, 315, 326, 424, 446, 475, 477, 478, 482, 487, 488, 503], "64": [2, 3, 215, 508, 511], "dataset_path": [2, 237, 446], "dataset": [2, 4, 6, 7, 14, 36, 38, 41, 66, 68, 170, 171, 176, 182, 183, 190, 192, 193, 195, 196, 197, 198, 199, 211, 220, 221, 225, 226, 227, 229, 231, 237, 255, 256, 257, 274, 275, 276, 277, 278, 280, 281, 286, 315, 323, 326, 329, 336, 341, 345, 346, 347, 358, 370, 443, 445, 446, 447, 475, 477, 482, 483, 487, 493, 503, 509, 510, 511], "imagenet": [2, 4, 174, 178, 202, 205, 212, 237, 507, 508, 510, 511], "ilsvrc2012": [2, 237], "also": [2, 3, 6, 7, 12, 176, 199, 202, 206, 211, 215, 222, 274, 474, 475, 476, 477, 480, 487, 490, 493, 497, 498, 500, 503, 504, 509], "nasconfig": [2, 163, 221, 233, 239, 240], "argument": [2, 253, 256, 299, 404, 408, 413, 419, 431, 439, 458, 475, 480, 487], "config": [2, 38, 40, 41, 66, 67, 170, 171, 180, 189, 200, 220, 221, 234, 240, 243, 250, 251, 252, 253, 254, 257, 275, 276, 277, 278, 280, 281, 286, 287, 290, 296, 297, 298, 299, 302, 303, 304, 306, 308, 311, 335, 341, 343, 344, 348, 349, 393, 395, 402, 404, 407, 408, 411, 413, 414, 421, 424, 427, 435, 445, 448, 449, 450, 451, 455, 456, 458, 466, 468, 471, 474, 478, 480, 482, 487, 490, 495, 500, 502, 504, 507, 509], "under": [2, 3, 127, 202, 296, 474, 478, 487, 492, 493, 498, 500, 503, 507, 509], "file": [2, 7, 66, 146, 152, 162, 163, 170, 171, 188, 200, 201, 202, 205, 214, 215, 216, 218, 220, 221, 225, 231, 232, 233, 234, 235, 237, 239, 240, 243, 251, 253, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 302, 303, 304, 305, 306, 307, 308, 358, 395, 404, 408, 415, 431, 438, 439, 444, 445, 446, 458, 462, 466, 468, 470, 471, 474, 478, 482, 485, 487, 488, 492, 493, 495, 497, 500, 502, 507, 508, 509], "input": [2, 7, 36, 40, 42, 65, 66, 68, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 108, 111, 112, 121, 122, 124, 125, 126, 127, 146, 152, 157, 170, 171, 181, 183, 184, 189, 200, 201, 202, 204, 212, 214, 215, 216, 217, 218, 220, 221, 225, 230, 237, 243, 256, 262, 264, 265, 274, 275, 276, 277, 278, 280, 281, 286, 287, 297, 299, 309, 331, 335, 336, 338, 341, 342, 343, 344, 345, 378, 381, 388, 389, 390, 392, 404, 408, 413, 419, 443, 446, 452, 474, 477, 478, 480, 482, 486, 487, 488, 493, 494, 495, 500, 502, 503, 507, 508, 510], "aim": [2, 477, 509], "accord": [2, 7, 40, 170, 176, 200, 201, 202, 211, 213, 215, 221, 254, 255, 265, 275, 276, 277, 278, 280, 281, 286, 444, 478, 482, 500, 504, 508, 509], "pleas": [2, 4, 5, 6, 7, 127, 200, 201, 202, 205, 250, 252, 253, 474, 478, 481, 482, 491, 493, 494, 497, 500, 504, 505, 506], "regist": [2, 7, 36, 59, 158, 160, 176, 181, 186, 189, 202, 206, 209, 210, 211, 213, 215, 216, 221, 228, 229, 241, 242, 243, 244, 245, 246, 250, 252, 254, 258, 266, 272, 277, 286, 475, 478, 482, 493, 497, 509], "__new__": 2, "self": [2, 3, 7, 84, 114, 221, 225, 243, 252, 277, 458, 474, 478, 490, 493, 497, 506, 507, 509], "conf_fname_or_obj": [2, 162, 180, 189, 216, 220, 221, 230, 231, 232, 233, 239, 240, 243, 255, 256, 257, 273, 274], "kwarg": [2, 65, 66, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 183, 184, 187, 202, 215, 220, 221, 231, 253, 255, 256, 260, 261, 262, 264, 265, 274, 287, 296, 297, 302, 304, 306, 307, 308, 317, 319, 320, 322, 324, 327, 328, 332], "current": [2, 3, 7, 38, 41, 67, 68, 83, 91, 95, 127, 221, 231, 237, 250, 252, 253, 254, 277, 474, 482, 483, 486, 493, 497, 500, 503, 509], "built": [2, 7, 96, 183, 184, 186, 191, 194, 196, 200, 201, 206, 208, 210, 211, 212, 213, 215, 256, 475, 482, 497, 508, 509, 510], "inherit": [2, 7, 38, 41, 66, 67, 68, 181, 189, 197, 215, 221, 252, 254, 477], "base": [2, 7, 12, 36, 38, 40, 41, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 150, 151, 158, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 225, 228, 229, 230, 232, 233, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 273, 274, 275, 276, 277, 278, 280, 281, 286, 288, 291, 292, 297, 302, 303, 304, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 353, 354, 355, 357, 360, 362, 363, 366, 376, 378, 381, 383, 385, 386, 388, 389, 390, 391, 399, 402, 407, 411, 414, 424, 428, 430, 432, 434, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 458, 459, 461, 463, 467, 468, 478, 481, 482, 483, 486, 499, 506, 507, 509, 511], "nasbas": [2, 232, 233, 239, 240], "interfac": [2, 6, 38, 41, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 108, 110, 111, 112, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 172, 173, 176, 220, 221, 236, 237, 243, 255, 256, 257, 266, 273, 274, 290, 291, 292, 298, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 411, 414, 421, 433, 490, 503, 505], "own": [2, 38, 41, 66, 67, 68, 95, 198, 215, 474, 477, 478, 490, 493, 497, 506, 509], "just": [2, 3, 4, 35, 182, 183, 184, 185, 187, 190, 215, 487, 498, 503, 508, 509], "nas_registri": [2, 241], "well": [2, 3, 35, 170, 171, 274, 275, 276, 277, 278, 280, 281, 286, 478, 503, 505, 510], "wai": [2, 201, 202, 205, 474, 477, 478, 493, 498, 500, 503, 509, 510], "__init__": [2, 3, 7, 478, 493, 497, 509], "search_spac": [2, 163, 232, 239, 240, 241, 242], "none": [2, 3, 7, 12, 36, 38, 40, 41, 42, 65, 66, 68, 84, 111, 127, 146, 152, 157, 163, 164, 167, 170, 171, 174, 180, 181, 182, 183, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 212, 215, 216, 217, 218, 220, 221, 222, 225, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 243, 247, 251, 255, 256, 257, 258, 262, 265, 266, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 290, 291, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 320, 322, 324, 326, 327, 328, 330, 332, 335, 336, 337, 340, 341, 344, 346, 347, 348, 363, 378, 381, 383, 390, 395, 397, 402, 404, 407, 408, 411, 413, 414, 415, 416, 420, 421, 424, 426, 429, 431, 432, 434, 437, 439, 440, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 457, 458, 462, 470, 478, 493, 503, 507, 508, 509], "model_build": [2, 232, 239, 240], "initi": [2, 3, 65, 152, 170, 171, 181, 189, 197, 200, 216, 221, 232, 233, 239, 240, 251, 252, 256, 264, 275, 276, 277, 278, 280, 281, 286, 314, 336, 337, 346, 395, 424, 426, 434, 446, 477, 478, 487, 493, 494, 500, 509], "select_model_arch": [2, 233, 239, 240], "propos": [2, 7, 240, 480, 494, 500], "algorithm": [2, 6, 7, 12, 40, 163, 214, 222, 229, 232, 236, 239, 240, 242, 280, 291, 292, 480, 486, 490, 500, 503, 507, 509, 510], "next": [2, 170, 193, 219, 240, 254, 275, 276, 277, 278, 280, 281, 286, 474, 494, 502, 509], "res_save_path": [2, 240], "estim": [2, 3, 4, 229, 232, 233, 237, 239, 240, 262, 509], "pragma": 2, "cover": [2, 6, 476, 488, 501], "perform": [2, 4, 6, 7, 83, 118, 162, 180, 200, 214, 220, 221, 232, 233, 235, 237, 239, 240, 243, 255, 257, 266, 273, 274, 302, 316, 326, 335, 341, 343, 429, 438, 446, 448, 455, 464, 474, 475, 477, 479, 481, 487, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511], "depend": [2, 36, 40, 68, 83, 170, 171, 180, 221, 232, 239, 240, 274, 275, 276, 277, 278, 280, 281, 286, 476, 485, 486, 487, 502, 509], "load_search_result": [2, 240], "load": [2, 3, 36, 200, 202, 214, 215, 225, 235, 240, 262, 274, 296, 297, 419, 445, 446, 477, 502, 503], "exist": [2, 31, 74, 146, 164, 180, 181, 225, 240, 262, 264, 316, 335, 341, 343, 344, 381, 429, 444, 445, 487, 493, 500, 509], "dump_search_result": [2, 240], "find_best_model_arch": [2, 240], "find": [2, 6, 7, 65, 88, 89, 91, 152, 229, 240, 241, 264, 277, 297, 395, 461, 474, 500, 506, 507, 509], "pareto": [2, 240, 241], "front": [2, 240, 241], "setter": [2, 182, 183], "A": [2, 3, 6, 41, 66, 68, 75, 77, 91, 95, 96, 127, 146, 152, 176, 182, 183, 184, 185, 202, 206, 211, 214, 215, 216, 221, 222, 225, 226, 227, 229, 232, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 277, 477, 484, 486, 493, 495, 500, 501, 508, 509, 510], "callabl": [2, 167, 227, 257, 287, 445, 461, 462], "our": [2, 3, 6, 147], "leverag": [2, 96, 480, 487, 498, 503], "grid": [2, 242], "random": [2, 76, 146, 152, 178, 215, 234, 242, 277, 455, 483, 502, 508, 510], "bayesian": [2, 242, 492, 502], "optim": [2, 3, 4, 6, 10, 41, 66, 74, 78, 81, 82, 84, 95, 96, 106, 107, 113, 114, 115, 116, 146, 167, 183, 189, 216, 220, 221, 235, 242, 252, 253, 255, 257, 274, 287, 288, 291, 298, 300, 304, 306, 323, 327, 328, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 349, 350, 351, 352, 353, 356, 357, 370, 421, 427, 428, 438, 443, 446, 449, 453, 460, 465, 480, 482, 486, 490, 491, 492, 495, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510], "given": [2, 35, 40, 41, 42, 68, 88, 89, 91, 152, 214, 215, 225, 264, 274, 358, 364, 378, 381, 383, 384, 386, 388, 389, 391, 432, 445, 458, 477, 500, 508], "train": [2, 3, 6, 7, 36, 38, 41, 66, 68, 83, 170, 171, 189, 200, 202, 215, 216, 221, 231, 232, 234, 235, 239, 243, 252, 253, 256, 274, 276, 277, 278, 280, 281, 286, 290, 453, 473, 478, 480, 481, 487, 490, 494, 496, 498, 500, 501, 509, 510, 511], "evalu": [2, 3, 4, 7, 12, 36, 38, 41, 66, 68, 162, 170, 171, 180, 200, 216, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 236, 237, 239, 240, 243, 252, 253, 256, 257, 258, 274, 275, 276, 277, 278, 280, 281, 286, 290, 302, 304, 306, 308, 309, 427, 435, 446, 450, 477, 478, 480, 487, 488, 490, 493, 494, 496, 497, 500, 503, 506, 507, 509, 510], "potenti": 2, "after": [2, 3, 4, 40, 42, 66, 178, 182, 183, 189, 200, 215, 216, 217, 218, 221, 234, 250, 252, 253, 254, 280, 432, 474, 475, 477, 478, 480, 490, 493, 496, 497, 498, 500, 503, 504, 506, 507, 508, 509], "sever": [2, 3, 146, 215, 254, 474, 480, 490, 494, 500, 502, 508, 510], "procedur": [2, 163], "lie": [2, 240], "through": [2, 3, 170, 171, 214, 274, 275, 276, 277, 278, 280, 281, 286, 486, 488, 490, 491, 493, 497, 498, 502, 506], "basic_na": [2, 221, 239, 257], "basicna": [2, 232, 239], "compon": [2, 6, 9, 216, 221, 232, 239, 243, 255, 256, 257, 287, 427, 461, 464, 476, 477, 482, 492, 498, 499], "super": [2, 3, 4, 227, 234, 237, 497], "predictor": [2, 233, 234, 235, 237, 239], "predict": [2, 3, 12, 152, 183, 184, 215, 222, 226, 227, 228, 229, 235, 237, 258, 480, 493, 507, 508], "4x": [2, 3, 503], "more": [2, 3, 4, 5, 6, 83, 146, 152, 170, 215, 225, 250, 275, 286, 474, 478, 480, 482, 487, 490, 491, 493, 494, 497, 498, 500, 504, 509, 511], "sampl": [2, 6, 98, 124, 176, 190, 193, 198, 200, 201, 202, 206, 211, 215, 228, 229, 241, 258, 277, 326, 381, 446, 477, 478, 490, 503, 508, 509, 510, 511], "effici": [2, 477, 480, 498, 501], "than": [2, 3, 4, 75, 83, 200, 215, 225, 478, 488, 493, 497, 498, 500, 503, 506, 508], "typic": [2, 83, 221, 231, 256, 481, 500], "one": [2, 6, 7, 12, 127, 139, 172, 173, 176, 189, 215, 221, 222, 225, 228, 229, 231, 234, 250, 253, 254, 258, 287, 440, 474, 477, 480, 481, 482, 486, 487, 490, 491, 493, 494, 497, 498, 500, 502, 503, 505, 508, 509], "shot": [2, 6, 189, 221, 252, 254, 490, 500, 501], "figur": [2, 500], "first": [2, 3, 4, 7, 42, 68, 114, 147, 161, 164, 200, 214, 216, 221, 225, 358, 474, 478, 487, 491, 494, 502, 503, 504, 506, 507, 509, 510], "phase": [2, 158, 160, 256, 500, 503, 504, 509], "small": [2, 4, 225, 474, 509], "sub": [2, 66, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 180, 218, 221, 237, 475], "randomli": [2, 215, 242, 277, 508, 509], "valid": [2, 7, 36, 38, 66, 67, 68, 75, 127, 146, 202, 225, 237, 251, 252, 262, 397, 462, 478, 480, 486, 490, 492, 500, 503, 505], "measur": [2, 7, 36, 38, 41, 66, 68, 152, 180, 236, 237, 266, 464, 475, 480, 487, 493, 496, 507, 509], "provid": [2, 7, 127, 170, 171, 176, 189, 211, 213, 215, 220, 221, 225, 234, 243, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 358, 378, 384, 431, 440, 464, 473, 474, 475, 476, 477, 481, 482, 483, 484, 490, 491, 494, 495, 502, 503, 507, 510, 511], "inner": 2, "loop": [2, 4, 266, 287, 486, 506, 509], "multi": [2, 95, 180, 221, 225, 236, 309, 477, 478, 490, 497, 500], "evolutionari": 2, "extens": [2, 7, 66, 256, 384, 445, 486, 490, 494, 495, 501, 509, 510], "cycl": [2, 477], "continu": [2, 225, 250, 500], "until": [2, 487, 509], "conclud": 2, "count": [2, 3, 40, 240, 478], "met": [2, 171, 286, 486, 494, 503, 507, 509], "create_acc_predictor": [2, 233, 239], "accuraci": [2, 3, 4, 6, 66, 162, 170, 171, 180, 216, 220, 221, 229, 233, 234, 235, 237, 239, 243, 255, 257, 266, 273, 274, 275, 276, 277, 278, 280, 281, 286, 302, 316, 326, 335, 341, 343, 414, 438, 443, 446, 448, 464, 474, 475, 477, 481, 482, 483, 487, 493, 494, 496, 497, 498, 500, 501, 502, 505, 506, 507, 509, 510, 511], "create_macs_predictor": [2, 233, 239], "create_latency_predictor": [2, 233, 239], "latenc": [2, 233, 234, 235, 237, 239, 443, 487, 506, 509], "mobilenetv3": [2, 236, 237], "static": [3, 4, 7, 66, 127, 146, 219, 234, 256, 274, 309, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 378, 381, 383, 384, 386, 388, 389, 390, 391, 401, 415, 417, 422, 424, 429, 431, 436, 438, 443, 444, 446, 458, 462, 469, 470, 490, 509, 511], "quantiz": [3, 7, 21, 36, 38, 40, 41, 42, 65, 66, 67, 68, 110, 114, 116, 118, 124, 139, 162, 170, 171, 182, 183, 189, 212, 217, 218, 219, 220, 221, 231, 256, 257, 264, 276, 277, 278, 280, 281, 286, 287, 288, 291, 292, 296, 297, 308, 313, 341, 343, 349, 427, 435, 446, 450, 474, 475, 477, 478, 482, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 501, 505, 507, 508, 509, 510], "involv": 3, "weight": [3, 4, 6, 7, 36, 65, 66, 68, 81, 82, 83, 146, 147, 161, 217, 218, 228, 229, 247, 250, 252, 254, 258, 262, 265, 354, 455, 473, 474, 481, 486, 488, 493, 497, 500, 502, 503, 507, 509, 510, 511], "float": [3, 4, 12, 36, 38, 41, 65, 66, 68, 127, 146, 178, 200, 212, 222, 223, 225, 226, 227, 234, 236, 237, 250, 252, 253, 254, 262, 265, 277, 300, 316, 325, 333, 334, 349, 355, 410, 415, 431, 432, 436, 438, 443, 445, 446, 453, 455, 456, 464, 473, 478, 483, 493, 502, 503, 508], "int": [3, 36, 38, 40, 41, 66, 68, 127, 146, 152, 178, 190, 199, 200, 201, 212, 215, 217, 218, 223, 225, 229, 234, 236, 237, 241, 266, 287, 303, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 344, 345, 346, 348, 392, 424, 431, 432, 434, 436, 437, 438, 439, 440, 445, 446, 448, 453, 455, 458, 470, 478, 493, 500, 502, 508], "feed": [3, 36, 66, 152, 199, 313, 480], "batch": [3, 4, 36, 38, 40, 68, 83, 182, 183, 189, 190, 192, 193, 198, 199, 221, 237, 243, 257, 273, 287, 315, 326, 443, 474, 477, 480, 487, 500, 508, 511], "data": [3, 6, 7, 10, 36, 38, 40, 41, 42, 65, 68, 76, 124, 127, 146, 152, 162, 170, 171, 180, 181, 182, 183, 217, 218, 219, 221, 237, 250, 256, 257, 264, 274, 275, 276, 277, 278, 280, 281, 286, 297, 298, 300, 303, 309, 310, 311, 313, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 358, 374, 375, 378, 381, 385, 390, 393, 394, 395, 397, 400, 402, 407, 411, 414, 416, 421, 424, 431, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 461, 466, 468, 469, 471, 474, 477, 478, 482, 483, 486, 487, 491, 493, 494, 503, 504, 506, 507, 508, 509], "comput": [3, 4, 12, 65, 83, 189, 216, 221, 222, 223, 225, 226, 227, 229, 235, 481, 493, 494, 500, 503, 509], "distribut": [3, 6, 40, 147, 161, 182, 183, 190, 192, 193, 195, 196, 197, 198, 199, 216, 221, 243, 434, 480, 491, 503, 505, 509], "activ": [3, 4, 6, 7, 36, 38, 41, 42, 66, 68, 135, 188, 217, 218, 280, 354, 473, 474, 481, 483, 486, 499, 502, 503, 507, 509, 510], "done": [3, 4, 480, 496, 500, 503], "observ": [3, 483, 506, 507, 509], "point": [3, 4, 42, 65, 212, 226, 227, 241, 266, 277, 473, 483, 493, 503, 508, 509], "how": [3, 5, 7, 215, 216, 221, 236, 237, 250, 474, 475, 476, 478, 480, 482, 488, 500, 503, 508, 509, 510], "infer": [3, 4, 6, 7, 40, 42, 139, 146, 220, 221, 255, 257, 262, 274, 473, 477, 480, 487, 494, 497, 500, 501, 503, 507, 509], "time": [3, 4, 152, 215, 229, 266, 277, 297, 432, 438, 439, 443, 458, 482, 485, 497, 500, 501, 503, 506, 507, 508, 509], "simpl": [3, 6, 215, 474, 491, 506, 509], "techniqu": [3, 4, 6, 221, 490, 498, 500, 502, 503, 510], "would": [3, 127, 476, 487, 494, 503], "simpli": [3, 252, 482, 495], "divid": [3, 509], "rang": [3, 4, 7, 203, 204, 215, 225, 234, 287, 478, 480, 482, 483, 500, 503, 508], "256": [3, 178, 207, 475, 477, 478, 482, 508, 509, 511], "sophist": 3, "addit": [3, 83, 91, 157, 170, 287, 431, 474, 480, 487, 505], "step": [3, 4, 36, 38, 68, 114, 189, 221, 250, 252, 253, 254, 266, 287, 474, 476, 480, 481, 482, 494, 500, 502, 504, 506, 507, 509], "allow": [3, 4, 186, 277, 462, 474, 475, 480, 482, 483, 487, 493, 494, 502, 509, 510], "u": [3, 91, 147, 161], "instead": [3, 163, 164, 199, 297], "back": [3, 36, 38, 41, 66, 68, 215, 234], "everi": [3, 7, 38, 67, 88, 89, 91, 250, 252, 253, 500, 509], "signific": [3, 6, 501, 503], "speed": [3, 6, 487, 501, 503], "up": [3, 6, 40, 91, 122, 215, 221, 237, 243, 251, 266, 335, 474, 482, 486, 487, 490, 501, 502, 503, 506, 508, 510], "pre": [3, 170, 171, 200, 274, 275, 276, 277, 278, 280, 281, 286, 478, 480, 487, 494, 500, 501, 503, 507, 509, 511], "notabl": 3, "modif": [3, 7, 415, 477, 486], "enabl": [3, 6, 68, 252, 434, 474, 482, 487, 494, 499, 500, 501, 504], "floatfunct": 3, "quantstub": 3, "dequantstub": 3, "begin": [3, 189, 221, 243, 252, 253, 257, 273, 480, 500, 509], "end": [3, 4, 7, 127, 152, 189, 200, 214, 215, 221, 234, 252, 253, 257, 266, 273, 480, 486, 487, 491, 497, 500, 507, 508, 509], "relu6": [3, 95, 486], "relu": [3, 36, 95, 142, 486, 507], "_make_divis": 3, "v": [3, 91, 487, 510], "divisor": 3, "min_valu": 3, "taken": [3, 170, 171, 274, 275, 276, 277, 278, 280, 281, 286], "origin": [3, 65, 157, 180, 200, 215, 221, 234, 250, 251, 252, 253, 300, 478, 487, 500, 503, 508, 510], "tf": [3, 6, 68, 152, 199, 200, 201, 202, 215, 262, 300, 474, 482, 495, 501, 504, 508], "repo": [3, 200, 478, 484], "It": [3, 6, 7, 66, 74, 83, 170, 171, 188, 221, 227, 229, 234, 235, 241, 250, 255, 256, 274, 275, 276, 277, 278, 280, 281, 286, 474, 475, 480, 487, 500, 503, 506, 509, 510], "ensur": [3, 40, 42, 215, 253, 277, 314, 346, 378, 381, 383, 390, 429, 474, 482, 483, 503, 508], "layer": [3, 7, 36, 38, 41, 66, 67, 68, 91, 181, 188, 250, 251, 253, 288, 290, 291, 297, 457, 477, 481, 490, 500, 505, 509], "channel": [3, 7, 147, 161, 178, 215, 237, 250, 378, 381, 390, 490, 491, 500, 508, 511], "number": [3, 4, 66, 88, 89, 190, 198, 201, 212, 215, 226, 227, 229, 236, 240, 250, 277, 291, 292, 381, 434, 443, 446, 474, 478, 482, 483, 493, 500, 503, 506, 508, 509], "divis": 3, "seen": [3, 7, 297], "github": [3, 6, 200, 222, 223, 226, 227, 250, 253, 393, 395, 433, 474, 476, 478, 484, 491, 492, 505], "tensorflow": [3, 6, 7, 74, 96, 98, 102, 127, 152, 176, 181, 186, 199, 200, 201, 202, 205, 206, 207, 209, 210, 211, 213, 215, 218, 219, 220, 221, 223, 225, 228, 229, 230, 231, 255, 257, 258, 262, 274, 356, 357, 369, 370, 377, 423, 424, 425, 427, 474, 480, 482, 484, 486, 487, 490, 491, 492, 494, 495, 496, 500, 501, 502, 503, 506, 509, 510], "blob": [3, 222, 223, 226, 227, 250], "master": [3, 222, 223, 226, 227, 250, 253], "research": [3, 492], "slim": [3, 225, 262, 495], "mobilenet": [3, 506, 511], "param": [3, 7, 42, 65, 66, 67, 68, 82, 88, 89, 91, 111, 112, 127, 146, 152, 180, 186, 190, 225, 228, 229, 258, 297, 317, 348, 445, 448, 495, 509], "new_v": 3, "max": [3, 41, 42, 65, 68, 147, 161, 215, 226, 227, 277, 455, 473, 474, 503, 508, 509], "2": [3, 4, 6, 7, 9, 65, 67, 68, 74, 95, 159, 180, 201, 225, 227, 229, 237, 246, 247, 252, 275, 276, 473, 478, 480, 482, 486, 487, 490, 492, 493, 494, 497, 498, 499, 500, 503, 505, 508, 509], "round": [3, 4, 147, 161, 473, 483, 503], "down": [3, 83], "doe": [3, 4, 12, 222, 225, 234, 478, 483, 493, 505, 508, 509], "go": [3, 486, 502, 508], "10": [3, 6, 202, 225, 277, 424, 474, 478, 491, 502, 508], "convbnrelu": 3, "sequenti": [3, 198, 256, 498, 509], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "3": [3, 4, 6, 42, 67, 68, 91, 152, 176, 202, 206, 211, 213, 215, 225, 237, 436, 478, 480, 482, 486, 487, 493, 494, 497, 500, 502, 503, 508, 509, 511], "stride": [3, 215, 508], "group": [3, 366, 490, 500, 507, 508, 509, 511], "pad": [3, 92, 93, 200, 215, 478, 508], "bia": [3, 68, 146, 147, 217, 218, 507], "fals": [3, 4, 7, 36, 38, 40, 41, 42, 66, 68, 84, 92, 93, 111, 114, 121, 127, 131, 138, 143, 147, 150, 151, 152, 171, 178, 180, 181, 182, 183, 188, 190, 192, 195, 196, 197, 199, 200, 202, 215, 225, 228, 229, 234, 235, 236, 237, 250, 258, 264, 286, 290, 366, 385, 431, 434, 439, 440, 445, 464, 470, 477, 478, 486, 493, 497, 502, 503, 507, 508, 509, 510], "batchnorm2d": 3, "momentum": [3, 252, 490, 500, 510], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 497], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 83], "dw": 3, "linear": [3, 65, 217, 218, 250, 480], "conv": [3, 36, 42, 114, 142, 502], "add": [3, 12, 42, 65, 73, 85, 127, 135, 152, 186, 200, 202, 222, 229, 251, 253, 256, 309, 315, 316, 318, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 347, 363, 445, 470, 474, 476, 478, 482, 486, 487, 493, 496, 497, 506, 507, 509], "skip_add": 3, "forward": [3, 4, 40, 181, 502, 503, 507], "x": [3, 40, 199, 215, 237, 277, 480, 482, 495, 500, 503, 507, 508], "els": [3, 40, 83, 84, 152, 198, 431, 445, 507], "num_class": [3, 229], "1000": [3, 236, 443, 487, 509, 510], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 6, 482, 511], "main": [3, 6, 170, 186, 253, 275, 286, 426, 462, 482, 503], "width": [3, 178, 215, 237, 250, 482, 503, 508, 510], "multipli": [3, 483], "adjust": [3, 4, 237, 503], "each": [3, 4, 7, 38, 41, 42, 66, 67, 68, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 147, 151, 178, 198, 202, 205, 212, 215, 223, 225, 226, 227, 236, 237, 252, 262, 265, 266, 280, 291, 292, 474, 477, 478, 480, 483, 486, 497, 498, 500, 506, 507, 508, 509], "amount": 3, "structur": [3, 127, 252, 374, 490, 500, 503, 507, 511], "multipl": [3, 83, 186, 191, 192, 194, 200, 201, 203, 204, 205, 206, 207, 211, 213, 215, 230, 252, 275, 276, 431, 478, 498, 506, 509], "turn": [3, 493], "off": [3, 88, 89, 91, 504], "block": [3, 234, 250, 253, 462, 490, 497, 500], "input_channel": 3, "32": [3, 225, 482, 488, 500, 511], "last_channel": 3, "1280": 3, "c": [3, 91, 95, 202, 474, 478, 485, 491], "n": [3, 91, 201, 215, 223, 250, 434, 478, 480, 500, 508], "16": [3, 31, 487, 500, 511], "6": [3, 6, 38, 474, 486, 503, 511], "24": [3, 31, 509, 511], "96": [3, 225, 511], "160": 3, "320": 3, "onli": [3, 7, 38, 41, 42, 66, 68, 74, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 147, 161, 180, 182, 183, 186, 200, 221, 231, 250, 252, 445, 455, 457, 458, 475, 477, 482, 486, 487, 491, 494, 502, 507, 509, 510], "check": [3, 4, 6, 40, 66, 83, 84, 127, 152, 171, 202, 221, 231, 251, 256, 286, 297, 336, 341, 378, 381, 383, 384, 386, 388, 389, 391, 397, 400, 415, 431, 432, 434, 439, 445, 447, 474, 476, 482, 487, 491], "element": [3, 42, 198, 225, 250, 253, 478, 490, 493, 500], "assum": [3, 7, 214, 225, 241, 486], "know": [3, 127, 182, 183, 216, 221, 243, 432, 482, 505], "len": [3, 215, 277, 478, 482, 500, 508], "rais": [3, 12, 83, 88, 89, 91, 102, 127, 181, 222, 225, 228, 229, 250, 251, 252, 258, 277, 445, 458, 500], "valueerror": [3, 12, 83, 88, 89, 91, 102, 127, 222, 225, 229, 485], "empti": [3, 225], "list": [3, 6, 7, 12, 36, 38, 40, 41, 42, 65, 66, 68, 74, 77, 127, 146, 152, 170, 171, 178, 180, 181, 193, 200, 214, 215, 217, 218, 221, 222, 223, 225, 226, 227, 229, 234, 236, 237, 241, 243, 250, 253, 262, 265, 266, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 291, 292, 309, 311, 313, 315, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 358, 361, 363, 364, 366, 378, 381, 384, 385, 388, 389, 390, 392, 397, 400, 402, 404, 407, 408, 411, 414, 424, 431, 436, 438, 439, 440, 443, 445, 446, 447, 448, 449, 451, 452, 453, 455, 457, 464, 473, 486, 497, 502, 504, 507, 509], "got": [3, 152, 275, 276, 485, 487, 507], "format": [3, 36, 38, 41, 42, 65, 66, 68, 74, 152, 176, 200, 201, 202, 206, 211, 217, 218, 221, 225, 231, 234, 240, 400, 436, 478, 480, 482, 493, 494, 495, 496, 503], "build": [3, 6, 7, 40, 139, 218, 219, 232, 234, 239, 240, 262, 265, 315, 316, 318, 329, 330, 334, 358, 415, 424, 445, 462, 474, 491, 495, 501, 509], "featur": [3, 127, 167, 181, 200, 201, 212, 215, 257, 475, 476, 477, 479, 480, 487, 494, 495, 501, 505, 508], "invert": 3, "residu": 3, "output_channel": 3, "last": [3, 66, 68, 114, 170, 190, 250, 275, 276, 277, 278, 280, 281, 286, 415, 474, 494, 503, 509], "classifi": [3, 200, 229, 478, 480], "dropout": 3, "m": [3, 65, 91, 250, 480, 487, 511], "isinst": 3, "init": [3, 181, 478, 493, 497], "kaiming_normal_": 3, "mode": [3, 7, 35, 36, 38, 41, 65, 66, 68, 127, 180, 209, 221, 225, 262, 297, 315, 438, 474, 475, 487, 490, 503, 504], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 483, 502, 506, 509, 510, 511], "mean": [3, 4, 83, 91, 178, 190, 215, 225, 227, 229, 235, 237, 250, 266, 475, 477, 482, 483, 486, 493, 500, 503, 508, 509, 510], "fuse": [3, 4, 36, 40, 66, 68, 85, 86, 90, 91, 92, 93, 113, 114, 115, 116, 118, 142, 157, 507], "bn": [3, 36, 83, 102, 511], "prior": [3, 40, 110, 509], "chang": [3, 102, 118, 147, 161, 252, 254, 297, 311, 316, 415, 437, 443, 476, 477, 482, 485, 493, 507, 508, 509], "numer": [3, 4, 229, 473, 494, 501], "fuse_model": [3, 4], "type": [3, 7, 12, 36, 38, 40, 41, 42, 65, 66, 67, 68, 78, 81, 82, 83, 84, 91, 95, 106, 107, 113, 114, 115, 118, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 152, 157, 158, 160, 164, 171, 176, 181, 186, 190, 198, 200, 202, 206, 209, 210, 211, 213, 215, 217, 218, 219, 221, 222, 223, 225, 228, 229, 231, 234, 236, 241, 244, 245, 246, 250, 252, 254, 256, 258, 260, 261, 262, 264, 265, 266, 272, 277, 286, 287, 290, 296, 309, 327, 328, 336, 337, 339, 341, 379, 431, 434, 436, 438, 441, 474, 478, 486, 490, 494, 500, 503, 508, 510], "fuse_modul": 3, "true": [3, 4, 40, 83, 84, 106, 127, 150, 152, 171, 180, 190, 198, 200, 202, 203, 214, 215, 217, 218, 223, 225, 229, 234, 246, 250, 286, 395, 431, 434, 439, 440, 445, 478, 482, 486, 493, 497, 502, 503, 504, 507, 508, 509, 510], "idx": [3, 241, 478], "str": [3, 12, 36, 40, 41, 66, 127, 146, 158, 160, 176, 181, 186, 190, 200, 201, 202, 206, 209, 210, 211, 212, 213, 215, 217, 218, 219, 222, 223, 225, 227, 228, 229, 234, 236, 237, 241, 246, 258, 260, 261, 265, 287, 290, 298, 299, 300, 303, 309, 310, 311, 313, 314, 315, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 340, 341, 346, 347, 348, 349, 354, 355, 358, 360, 361, 362, 363, 364, 366, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 393, 394, 395, 397, 399, 400, 402, 404, 407, 408, 411, 413, 414, 415, 416, 419, 420, 421, 424, 431, 433, 434, 436, 438, 439, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 461, 462, 469, 470, 478, 493, 502, 507, 508], "help": [3, 6, 77, 188, 231, 264, 313, 445, 477, 495, 509], "averagemet": 3, "store": [3, 42, 202, 225, 244, 245, 246, 250, 252, 488], "averag": [3, 225, 226, 227, 229, 480, 493, 497, 500, 509], "fmt": 3, "f": [3, 91, 480, 482, 503], "reset": [3, 12, 222, 228, 229, 258, 266, 458, 493], "val": [3, 68, 152, 174, 202, 251, 497], "avg": [3, 4, 503], "sum": [3, 229, 480], "updat": [3, 12, 31, 83, 95, 127, 218, 222, 228, 229, 237, 250, 252, 258, 265, 300, 315, 316, 317, 318, 326, 329, 331, 333, 335, 341, 343, 344, 345, 348, 415, 438, 446, 449, 451, 455, 474, 477, 493, 499, 500, 509], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 40, 65, 111, 112, 127, 146, 181, 234, 251, 254, 362, 363, 477, 478, 480, 482, 494, 500, 507, 508, 510], "topk": [3, 475, 477, 482, 493], "over": [3, 4, 6, 176, 202, 206, 211, 225, 229, 490, 493, 502, 509], "k": [3, 229, 493, 500], "top": [3, 127, 215, 220, 221, 229, 243, 255, 257, 273, 274, 275, 276, 493, 508, 511], "specifi": [3, 38, 41, 42, 66, 67, 68, 127, 146, 170, 171, 180, 215, 220, 221, 225, 228, 229, 232, 235, 237, 239, 240, 243, 255, 256, 257, 258, 273, 274, 275, 276, 277, 278, 280, 281, 286, 296, 297, 313, 315, 318, 325, 326, 327, 329, 330, 331, 335, 336, 338, 339, 341, 343, 344, 348, 349, 350, 363, 395, 399, 400, 401, 417, 422, 438, 445, 458, 462, 474, 481, 482, 483, 486, 493, 497, 502, 503, 508, 509, 510], "no_grad": 3, "maxk": 3, "pred": [3, 152, 228, 229, 258, 493], "eq": 3, "view": [3, 6, 474, 476, 484, 505], "expand_a": 3, "re": [3, 277, 487, 509], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 202, 225, 234, 477, 478, 482, 487, 488, 502, 503, 508, 509, 510, 511], "criterion": [3, 4, 10, 66, 167, 183, 186, 216, 221, 257, 414, 453, 480, 487, 500, 503, 509, 510], "data_load": [3, 4, 7, 41, 68], "neval_batch": [3, 4], "top1": [3, 4, 237, 503], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 42, 178, 181, 204, 225, 229, 478, 486, 493, 499, 502, 508, 510, 511], "cnt": [3, 4, 480], "imag": [3, 4, 178, 201, 202, 205, 207, 212, 215, 225, 237, 443, 474, 478, 482, 487, 502, 507, 508, 511], "loss": [3, 4, 6, 167, 181, 189, 220, 221, 229, 243, 255, 257, 273, 274, 287, 480, 481, 482, 483, 493, 494, 500, 503, 509, 510], "acc1": 3, "acc5": 3, "print": [3, 4, 229, 474, 480, 482, 493, 509], "load_model": 3, "model_fil": 3, "state_dict": [3, 482, 507], "load_state_dict": 3, "cpu": [3, 4, 113, 114, 115, 116, 124, 127, 146, 237, 476, 490, 494, 499, 501, 502, 504, 507], "print_size_of_model": 3, "temp": 3, "p": [3, 225, 474], "mb": [3, 445], "o": [3, 6, 91, 358, 476, 499], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 262], "float_model_fil": 3, "start": [3, 68, 215, 222, 225, 236, 266, 439, 458, 491, 507, 508], "min": [3, 42, 68, 147, 161, 473, 474, 503, 508], "per": [3, 7, 38, 41, 66, 67, 68, 180, 190, 199, 225, 237, 291, 292, 315, 474, 487, 499, 504, 511], "qconfig": [3, 4, 40, 507], "default_qconfig": 3, "prepar": [3, 4, 6, 40, 66, 189, 216, 221, 243, 255, 336, 341, 426, 478, 482, 503], "calibr": [3, 7, 36, 38, 40, 41, 66, 162, 170, 171, 220, 221, 255, 256, 257, 274, 276, 277, 278, 280, 281, 286, 291, 292, 454, 477, 488, 490, 503, 509, 510], "fusion": [3, 7, 38, 67, 91, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 486], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 91, 95, 234, 480, 488], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 438, 503], "minmaxobserv": 3, "reduce_rang": [3, 502], "dtype": [3, 65, 127, 146, 203, 204, 212, 215, 217, 218, 219, 477, 478, 486, 502, 507, 508, 509, 510], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 507], "min_val": [3, 291, 292], "max_val": [3, 291, 292], "quantizedconvrelu2d": 3, "scale": [3, 4, 36, 42, 65, 68, 83, 147, 161, 178, 212, 215, 218, 264, 473, 483, 503, 508], "15583468973636627": 3, "zero_point": [3, 42, 65, 218, 264], "quantizedconv2d": [3, 68], "19358506798744202": 3, "74": [3, 511], "631847": 3, "300": [3, 477], "67": [3, 511], "significantli": [3, 494, 500], "lower": [3, 214, 215, 227, 445, 473, 481, 500, 501, 503, 508], "62": [3, 511], "same": [3, 7, 68, 77, 152, 200, 215, 225, 243, 297, 475, 477, 478, 480, 482, 486, 499, 502, 503, 507, 508, 509], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 83, 246, 477, 481, 494, 501, 503, 504, 509, 510], "almost": 3, "decreas": [3, 120], "improv": [3, 476, 487, 500, 503, 504, 509, 511], "repeat": [3, 247, 509], "exercis": 3, "recommend": [3, 7, 183, 184, 477, 486, 500, 502, 509], "x86": [3, 494], "basi": 3, "histogram": [3, 288, 291, 297, 338, 341, 349, 507], "collect": [3, 40, 68, 176, 182, 183, 184, 185, 187, 211, 213, 215, 222, 227, 228, 229, 258, 288, 291, 297, 298, 400, 421, 432, 434, 445, 446, 503, 507, 509], "pick": 3, "paramet": [3, 4, 12, 36, 38, 40, 41, 42, 59, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 121, 122, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 152, 157, 158, 160, 162, 163, 164, 167, 170, 171, 176, 178, 180, 181, 186, 190, 199, 200, 202, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 265, 266, 272, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 290, 291, 292, 296, 297, 309, 313, 317, 318, 336, 337, 338, 341, 347, 349, 358, 384, 402, 407, 411, 414, 426, 431, 436, 438, 439, 444, 445, 447, 457, 458, 474, 477, 478, 482, 483, 490, 493, 500, 503, 506, 508, 509, 510], "manner": [3, 480, 495], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 473], "jit": [3, 507], "script": [3, 35, 222, 223, 226, 227, 299, 300, 383, 400, 402, 404, 407, 408, 410, 411, 413, 414, 419, 482, 490, 501], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 511], "increas": [3, 479, 490], "resnet50": [3, 6, 237, 482, 487, 503, 506, 511], "qat": [4, 66, 218, 221, 231, 481, 482, 490, 496, 503], "simul": 4, "low": [4, 6, 7, 38, 67, 68, 170, 171, 203, 204, 220, 221, 230, 255, 257, 274, 275, 276, 277, 278, 280, 281, 286, 475, 478, 482, 494, 501, 503, 509], "precis": [4, 6, 7, 36, 38, 41, 66, 67, 68, 170, 171, 220, 221, 225, 227, 229, 230, 255, 257, 266, 274, 275, 276, 277, 278, 280, 281, 286, 313, 323, 326, 327, 336, 337, 338, 339, 340, 341, 346, 370, 399, 404, 406, 407, 408, 428, 446, 449, 451, 473, 474, 475, 481, 482, 486, 490, 501, 502, 503, 509], "dure": [4, 40, 68, 83, 234, 237, 250, 254, 256, 264, 440, 494, 495, 497, 498, 500, 503, 507, 510], "backward": [4, 225, 287, 480, 482, 500, 503, 505], "mimic": [4, 503], "still": [4, 253, 503, 504], "thu": [4, 225, 503], "made": [4, 7, 91, 235, 237, 503, 505], "while": [4, 6, 7, 68, 252, 277, 474, 477, 487, 490, 494, 502, 503], "fact": [4, 503], "ultim": [4, 503], "yield": [4, 170, 171, 182, 183, 198, 274, 275, 276, 277, 278, 280, 281, 286, 503, 509], "either": [4, 171, 225, 286, 494, 498, 502, 503], "dynam": [4, 7, 83, 190, 217, 218, 256, 305, 477, 480, 490, 501, 511], "training_func_for_nc": 4, "epoch": [4, 189, 216, 221, 243, 252, 253, 257, 273, 287, 480, 482, 500, 510], "30": [4, 6, 215, 475, 477, 490, 508, 511], "sgd": [4, 167, 186, 257, 502, 510], "lr": [4, 482], "0001": [4, 167, 257, 502], "nepoch": [4, 480], "train_load": [4, 482], "zero_grad": [4, 480, 482, 500], "break": [4, 480, 482], "freez": [4, 110, 500], "disable_observ": 4, "norm": 4, "varianc": [4, 147, 161], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 83, 252, 280, 438, 497, 500, 503, 505, 509], "alreadi": [4, 7, 180, 202, 214, 432, 458, 474, 478, 490], "implement": [4, 6, 12, 38, 41, 66, 67, 68, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 170, 171, 176, 195, 198, 199, 200, 202, 206, 211, 222, 228, 229, 246, 250, 254, 258, 274, 275, 276, 277, 278, 280, 281, 286, 475, 477, 478, 505, 507, 509, 510], "hook": [4, 66, 170, 181, 188, 189, 216, 221, 243, 275, 286, 290, 480, 500, 507], "prepare_qat": [4, 189, 221], "high": [4, 203, 204, 478, 491, 501, 509], "accur": 4, "inc": [4, 6, 215, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 501, 502, 505], "switch": [4, 106, 507], "run": [4, 6, 7, 35, 36, 38, 40, 42, 66, 127, 152, 170, 171, 180, 199, 214, 221, 234, 237, 251, 252, 274, 275, 276, 277, 278, 280, 281, 286, 396, 439, 460, 461, 462, 474, 476, 482, 485, 486, 487, 494, 500, 501, 503, 505, 506, 507, 509, 510], "better": [4, 68, 118, 170, 171, 241, 274, 275, 276, 277, 278, 280, 281, 286, 481, 493, 494, 500, 501, 503, 506, 509], "match": [4, 127, 214, 225, 226, 480, 483], "zero": [4, 42, 65, 215, 229, 250, 252, 253, 473, 500, 508, 509], "fine": [4, 6, 200, 478, 500, 501, 503], "num_train_batch": 4, "20": [4, 6, 215, 236, 499, 508, 510, 511], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 111, 112, 113, 114, 115, 116, 119, 124, 127, 138, 143, 146, 151, 181, 237, 480, 500, 502], "quantized_model": 4, "api": [4, 8, 10, 14, 29, 30, 41, 66, 91, 96, 127, 220, 221, 225, 255, 257, 274, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 461, 462, 477, 487, 489, 490, 496, 505, 506, 509], "q_func": [4, 7, 36, 38, 41, 66, 68, 170, 171, 221, 255, 256, 275, 276, 277, 278, 280, 281, 286, 509], "eval_dataload": [4, 170, 171, 189, 220, 221, 231, 256, 274, 275, 276, 277, 278, 280, 281, 286, 477, 488, 509], "val_load": [4, 503], "timeout": [4, 171, 286, 455, 483, 502, 506, 509, 510], "constrain": 4, "71": [4, 511], "close": [4, 147, 161], "debug": [4, 351, 352, 356, 474, 509], "analyz": [4, 127, 146, 262, 500, 506, 507], "limit": [4, 277, 476, 480, 500, 507], "sinc": [4, 12, 220, 221, 222, 243, 255, 257, 273, 274, 415, 480, 483, 493, 498], "actual": [4, 68, 229, 482], "arithmet": [4, 486], "easili": [4, 7, 497, 500], "relat": [4, 216, 221, 225, 243, 250, 257, 273, 290, 377, 380, 382, 387, 463, 466, 467, 468, 471, 510], "refer": [4, 6, 7, 12, 200, 222, 223, 228, 229, 250, 252, 253, 258, 475, 478, 481, 482, 488, 492, 493, 494, 497, 500, 502, 503, 505, 508, 509], "center": [5, 6, 215, 508, 509], "work": [5, 220, 221, 243, 255, 257, 274, 477, 480, 500, 504, 505, 507], "resolv": 5, "guidelin": [5, 6, 489], "librari": [6, 183, 221, 473, 491, 501], "popular": [6, 7, 221, 478, 480, 500, 503, 509], "compress": [6, 189, 221, 243, 287, 480, 490, 497, 498, 500, 501, 503], "mainstream": 6, "deep": [6, 7, 164, 473, 477, 490, 491, 494, 501, 503, 509], "learn": [6, 7, 473, 477, 478, 488, 490, 491, 494, 500, 501, 503, 507, 509], "framework": [6, 7, 36, 38, 41, 66, 68, 172, 173, 176, 181, 182, 183, 186, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 220, 221, 228, 229, 230, 237, 255, 256, 257, 258, 260, 261, 262, 264, 265, 274, 290, 299, 313, 323, 339, 341, 346, 348, 350, 370, 378, 381, 383, 384, 390, 397, 399, 404, 408, 413, 417, 428, 434, 445, 446, 473, 474, 477, 478, 482, 483, 484, 487, 488, 490, 491, 493, 494, 500, 501, 503, 508, 509, 510, 511], "mxnet": [6, 7, 40, 176, 195, 199, 202, 205, 206, 209, 210, 211, 213, 215, 220, 221, 228, 229, 255, 257, 258, 262, 274, 484, 486, 490, 494, 495, 502, 509, 510], "formerli": 6, "known": [6, 182, 183, 277, 500, 507, 509], "deliv": [6, 501], "unifi": [6, 7, 172, 173, 176, 220, 221, 255, 257, 274, 438, 477, 488, 490, 495], "across": [6, 42, 220, 221, 230, 255, 257, 274, 479, 500], "technologi": [6, 202, 499], "prune": [6, 21, 146, 189, 221, 244, 245, 246, 248, 250, 251, 252, 254, 256, 257, 265, 287, 427, 435, 450, 482, 486, 490, 498, 501, 503, 510], "knowledg": [6, 181, 216, 221, 481, 490, 495, 510], "distil": [6, 21, 167, 181, 188, 189, 221, 257, 287, 490, 498, 510], "driven": [6, 494, 497, 507], "strategi": [6, 7, 9, 36, 38, 40, 41, 66, 68, 202, 221, 255, 313, 333, 428, 445, 455, 482, 490, 501, 502, 503, 504, 505, 510], "quickli": [6, 509], "gener": [6, 7, 36, 40, 65, 68, 111, 112, 170, 171, 176, 180, 190, 199, 202, 203, 204, 205, 211, 213, 215, 218, 219, 221, 222, 230, 234, 243, 250, 253, 256, 274, 275, 276, 277, 278, 280, 281, 286, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 336, 341, 347, 402, 407, 411, 413, 414, 419, 420, 421, 430, 439, 470, 474, 477, 480, 487, 493, 494, 497, 499, 500, 501, 503, 504, 507, 508, 509], "predefin": [6, 303, 336, 340, 341, 445], "sparsiti": [6, 247, 250, 252, 253, 254, 262, 265, 478, 490, 500, 511], "goal": [6, 162, 171, 216, 220, 221, 243, 255, 257, 273, 274, 286, 446, 498, 503, 509], "teacher": [6, 167, 181, 216, 221, 257, 480, 481, 511], "student": [6, 181, 188, 200, 216, 221, 478, 480, 481, 511], "ai": [6, 501, 504], "oneapi": [6, 491, 501], "analyt": [6, 491, 501], "visit": [6, 511], "websit": [6, 491], "io": [6, 477], "7": [6, 475, 477, 485, 486, 487, 491, 503, 505, 509], "releas": [6, 433, 445, 489, 491], "binari": [6, 152, 229, 485, 493], "stabl": [6, 474, 491, 501], "basic": [6, 214, 232, 239, 250, 490, 491, 502, 506], "pip": [6, 474, 482, 485, 491, 505], "Or": [6, 252], "full": [6, 65, 180, 200, 201, 202, 221, 474, 478, 485, 491, 492], "nightli": [6, 474, 491], "git": [6, 474, 491], "clone": [6, 474, 491], "cd": [6, 474, 482, 491], "r": [6, 65, 91, 147, 161, 237, 474, 491, 499, 503, 511], "txt": [6, 205, 439, 474, 478, 491], "pypi": [6, 474, 491], "found": [6, 216, 221, 232, 233, 239, 240, 264, 277, 430, 445, 462, 494, 509], "guid": [6, 200, 478, 480, 491], "fp32": [6, 7, 36, 38, 66, 67, 68, 113, 115, 147, 161, 170, 171, 217, 218, 229, 275, 276, 277, 278, 280, 281, 286, 296, 349, 486, 493, 494, 502, 503, 504, 505, 506, 507, 509, 510, 511], "wget": [6, 487], "storag": [6, 225, 487, 493], "googleapi": [6, 487], "v1_6": [6, 487], "mobilenet_v1_1": 6, "0_224_frozen": 6, "pb": [6, 68, 262, 274, 386, 389, 400, 482, 487, 495, 507, 511], "dummi": [6, 203, 204, 219, 229, 341, 345, 447, 474, 478, 487, 493], "shape": [6, 127, 146, 178, 203, 204, 215, 225, 250, 370, 377, 378, 381, 390, 392, 427, 474, 478, 486, 487, 508], "224": [6, 178, 237, 475, 477, 478, 482, 487, 508, 509, 510], "calib_dataload": [6, 182, 183, 221, 255, 256, 274, 477, 478, 488, 493, 503], "dataload": [6, 7, 14, 31, 36, 38, 40, 41, 42, 66, 68, 170, 171, 176, 180, 183, 189, 200, 211, 216, 221, 231, 243, 255, 256, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 290, 298, 303, 309, 313, 323, 336, 339, 341, 346, 348, 370, 411, 421, 424, 427, 435, 445, 446, 450, 474, 478, 482, 487, 488, 493, 494, 496, 503, 507, 508, 509, 510], "search": [6, 12, 21, 91, 163, 170, 171, 220, 221, 222, 232, 233, 234, 236, 237, 239, 240, 241, 242, 255, 257, 274, 277, 278, 281, 336, 337, 364, 490, 493, 501, 507, 509], "jupyt": 6, "lab": 6, "manag": [6, 234, 235, 236, 237, 314, 346, 348, 371, 429, 444], "click": [6, 474, 490, 501, 507], "12": [6, 474], "onnxruntim": [6, 7, 41, 196, 221, 230, 353, 357, 483, 490, 502], "raw": [6, 201, 205, 208, 493, 509], "vision": 6, "classif": [6, 200, 215, 229, 253, 480, 493, 501], "resnet": [6, 482, 487, 511], "v1": [6, 31, 32, 33, 68, 152, 226, 227, 229, 262, 482, 493, 495, 505, 506, 511], "inc_bench": [6, 257, 427, 474], "xeon": [6, 487, 492, 494, 499, 501, 503, 504, 511], "scalabl": [6, 487, 494, 499, 501, 503, 504, 511], "skylak": 6, "cascad": [6, 487], "lake": [6, 487, 494, 501], "cooper": [6, 494, 501], "icelak": 6, "futur": [6, 83, 170, 171, 182, 183, 276, 277, 278, 280, 281, 286, 490, 494, 496], "sapphir": 6, "rapid": 6, "flex": 6, "seri": [6, 178, 508], "amd": [6, 490, 511], "arm": [6, 490, 511], "nvidia": [6, 490, 500, 503, 511], "cento": [6, 439], "ubuntu": [6, 499], "04": [6, 436, 499, 511], "11": [6, 33, 436, 474, 487, 493, 494], "variabl": [6, 180, 202, 221, 230, 236, 277, 434, 458, 474], "tf_enable_onednn_opt": [6, 474], "onednn": [6, 473], "default": [6, 7, 12, 36, 66, 68, 119, 127, 146, 152, 164, 167, 170, 171, 178, 181, 189, 190, 192, 200, 201, 202, 212, 215, 217, 218, 221, 222, 225, 228, 229, 231, 251, 257, 258, 262, 275, 276, 277, 278, 280, 281, 286, 297, 317, 319, 320, 322, 324, 327, 328, 332, 354, 355, 358, 375, 385, 434, 436, 447, 448, 452, 453, 474, 475, 477, 478, 483, 486, 490, 493, 496, 497, 502, 504, 506, 508, 509, 510], "420": [6, 490], "speedup": [6, 490, 503], "geomean": [6, 490], "2x": [6, 490, 499], "vnni": [6, 490, 502, 503], "minim": [6, 147, 161, 277, 480, 493, 500, 503, 509], "overview": 6, "dive": [6, 486], "mix": [6, 7, 68, 275, 406, 407, 408, 451, 490], "orchestr": [6, 287, 490], "benchmark": [6, 10, 36, 38, 68, 182, 183, 221, 256, 257, 266, 316, 323, 326, 335, 341, 343, 346, 347, 370, 427, 428, 438, 443, 460, 465, 477, 487, 495, 496, 509, 510, 511], "convers": [6, 7, 75, 102, 221, 231, 494, 503, 504], "tensorboard": [6, 7, 36, 38, 41, 66, 68, 287, 290, 509], "coder": [6, 490, 501], "topic": 6, "adaptor": [6, 9, 189, 221, 290, 490, 504, 505, 507, 509], "togeth": [6, 215, 250, 256, 477, 480, 491, 501, 507, 508], "tencent": [6, 501], "deepen": [6, 501], "cloud": [6, 501], "foundat": [6, 501], "digit": [6, 222, 501], "intellig": [6, 501], "industri": [6, 478, 493, 501], "dec": [6, 501], "2022": [6, 31, 32, 33, 511], "virtual": [6, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 501], "applianc": [6, 501], "packag": [6, 7, 305, 312, 317, 319, 320, 322, 323, 324, 327, 328, 331, 332, 351, 352, 356, 359, 365, 367, 370, 371, 377, 396, 398, 403, 406, 409, 410, 412, 418, 423, 427, 460, 474, 485, 491, 501, 505, 509], "bitnami": [6, 501], "nov": [6, 501], "fast": [6, 501], "achiev": [6, 220, 221, 255, 257, 274, 493, 498, 500, 501, 503, 507, 509], "sota": [6, 501], "diffus": [6, 501], "few": [6, 474, 501, 509], "innov": [6, 501], "oct": [6, 501], "acceler": [6, 480, 500, 501, 504, 509], "new": [6, 40, 65, 77, 127, 139, 152, 176, 180, 190, 202, 211, 213, 215, 250, 251, 254, 256, 264, 297, 340, 341, 345, 457, 475, 476, 482, 494, 501, 503, 505, 506, 508, 510], "plug": [6, 501], "wa": [6, 7, 146, 415, 474, 501, 509], "twitter": [6, 501], "linkedin": [6, 501], "zone": [6, 501], "hug": [6, 501], "land": [6, 501], "gcp": [6, 501], "aw": [6, 501, 511], "azur": [6, 501], "marketplac": [6, 501], "legal": [6, 489], "secur": [6, 499, 501], "send": [6, 415, 457, 462, 476], "your": [6, 198, 200, 225, 474, 475, 476, 478, 482, 492, 506, 507, 509], "resum": [6, 170, 171, 275, 276, 277, 278, 280, 281, 286, 287], "solut": [7, 147, 161, 234, 485, 501, 509], "onnx": [7, 41, 42, 65, 196, 217, 218, 219, 260, 261, 265, 287, 300, 400, 484, 486, 490, 494, 495, 501, 502, 503], "runtim": [7, 439, 483, 484, 486, 490, 502, 503], "bridg": [7, 490], "vanilla": [7, 490], "10004": [7, 480, 486, 490, 494, 498, 502, 510], "complet": [7, 84, 474, 509, 510, 511], "subclass": [7, 36, 59, 158, 160, 176, 186, 195, 199, 202, 206, 209, 210, 211, 213, 215, 228, 229, 241, 244, 245, 246, 250, 252, 254, 258, 266, 272, 286, 509], "adaptor_registri": [7, 36], "abc": [7, 227, 378, 438, 507, 509], "abcadaptor": 7, "framework_specific_info": [7, 36, 38, 41, 66, 68], "tune_cfg": [7, 36, 38, 40, 41, 66, 68], "postprocess": [7, 36, 38, 41, 66, 68, 176, 180, 183, 211, 213, 215, 220, 221, 231, 255, 256, 257, 448, 475, 477, 507, 508], "query_fw_cap": [7, 36, 38, 41, 66, 68, 509], "query_fused_pattern": [7, 36], "awar": [7, 36, 38, 41, 66, 68, 172, 173, 176, 189, 221, 231, 250, 256, 481, 482, 490, 494, 496, 498, 511], "he": 7, "intersect": [7, 229, 493], "graph": [7, 41, 42, 66, 68, 71, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 121, 122, 125, 126, 127, 139, 146, 147, 150, 151, 152, 199, 218, 220, 257, 260, 261, 262, 264, 265, 304, 306, 370, 378, 381, 389, 390, 392, 402, 403, 404, 409, 410, 424, 425, 427, 446, 449, 461, 478, 480, 482, 488, 493, 495, 503, 504, 507], "decid": [7, 223, 252, 275, 276, 280, 358, 483, 505, 509], "besid": [7, 476, 480, 498], "introduc": [7, 95, 486, 500, 503, 505], "describ": [7, 41, 66, 68, 237, 474, 486, 507], "op": [7, 36, 38, 41, 42, 66, 67, 68, 77, 81, 83, 86, 87, 90, 91, 92, 93, 95, 102, 106, 107, 110, 113, 114, 115, 116, 118, 124, 127, 146, 147, 150, 152, 217, 218, 275, 276, 280, 291, 292, 338, 341, 349, 354, 355, 363, 461, 474, 486, 487, 494, 503, 504, 505, 507, 509, 510], "sequenc": [7, 12, 68, 84, 200, 214, 215, 222, 223, 227, 250, 478, 486, 508], "past": 7, "abov": [7, 74, 225, 475, 487, 500], "hidden": [7, 250, 445, 500], "corner": [7, 215, 508], "effect": [7, 500], "mainten": 7, "difficult": 7, "correspond": [7, 12, 68, 200, 222, 225, 229, 250, 252, 256, 277, 486, 500, 502, 503, 506, 509], "abil": [7, 477, 486], "clear": [7, 12, 198, 222, 228, 229, 237, 258, 486, 493], "fragment": 7, "field": [7, 127, 146, 202, 225, 256, 474, 475, 482, 483, 487, 509, 510], "enumer": [7, 40, 65, 241, 287, 297, 301, 399, 405, 428, 482, 500, 507], "scenario": [7, 35, 313, 474, 475, 480, 487, 500], "hardwar": [7, 38, 67, 434, 480, 487, 490, 494, 499, 500, 501, 502], "doesn": [7, 127, 215, 256, 444, 475, 477, 482, 510], "bf16": [7, 38, 67, 102, 113, 115, 486, 487, 494, 504, 509], "granular": [7, 38, 67, 486, 490, 500, 509, 510], "scheme": [7, 38, 65, 67, 462, 477, 486, 509, 510], "semant": [7, 486], "pattern": [7, 36, 38, 67, 68, 82, 83, 91, 114, 118, 124, 127, 142, 202, 221, 244, 248, 252, 257, 338, 341, 354, 363, 364, 438, 461, 478, 486, 490, 498, 502, 511], "abstract": [7, 36, 38, 67, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 181, 215, 216, 220, 221, 228, 229, 240, 242, 246, 250, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 274, 286, 303, 378, 389, 390, 411, 420, 438, 461, 488], "querybackendcap": [7, 38, 41, 66, 67, 68], "tensorflowqueri": [7, 68], "look": [7, 486, 493, 497, 510], "microsoft": 7, "mla": [7, 473], "kernel": [7, 434, 499, 500, 509], "becom": [7, 83], "integr": [7, 152, 181, 474], "explor": 7, "attribut": [7, 65, 83, 127, 146, 157, 163, 164, 189, 255, 365, 366, 370, 427, 443, 486, 488, 494, 502, 510], "whether": [7, 40, 41, 42, 66, 152, 178, 190, 198, 200, 215, 216, 221, 223, 225, 229, 243, 250, 252, 297, 400, 478, 493, 508], "qlinear": [7, 202, 209, 229, 511], "qdq": [7, 217, 218, 287, 490, 503], "integ": [7, 216, 221, 225, 229, 241, 250, 252, 254, 291, 292, 503, 509], "qtype": [7, 65], "choic": [7, 200, 474, 478, 493], "float32": [7, 42, 203, 204, 215, 225, 443, 475, 478, 503, 508], "uint8": [7, 65, 212, 225, 291, 292, 473, 478, 486, 502, 503, 508, 509, 510], "node": [7, 40, 42, 65, 68, 71, 74, 75, 76, 77, 83, 84, 85, 88, 89, 91, 95, 107, 120, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 152, 218, 260, 261, 262, 264, 265, 347, 360, 361, 362, 363, 364, 365, 370, 378, 381, 388, 389, 390, 424, 425, 427, 474, 482, 507], "exclud": [7, 107], "three": [7, 95, 200, 253, 474, 477, 487, 491, 494, 498, 503, 504, 506, 507, 509], "onnxrt": [7, 176, 200, 202, 209, 210, 211, 213, 215, 228, 229, 258, 352, 353, 368, 370, 377, 427], "onnxrt_qlinearopsadaptor": [7, 41], "dump_elapsed_tim": [7, 297], "recov": [7, 38, 41, 68, 297, 481], "q_config": [7, 38, 41, 67, 68, 217, 218], "inspect_tensor": [7, 36, 38, 41, 66, 68], "op_list": [7, 36, 38, 41, 66, 68, 280, 507], "iteration_list": [7, 36, 38, 41, 66, 68], "inspect_typ": [7, 36, 38, 41, 66, 68, 349], "save_to_disk": [7, 36, 38, 41, 66, 68], "save_path": [7, 38, 41, 68, 217, 218, 260, 261, 265, 287, 495], "quantization_cfg": [7, 38, 41, 68], "set_tensor": [7, 36, 38, 41, 66, 68], "tensor_dict": [7, 36, 38, 41, 66, 68], "input_graph": [7, 41, 138, 139, 143, 146, 147, 299, 404, 408, 413, 420], "fp32_baselin": [7, 38, 41, 66, 68, 290], "diagnosis_help": 7, "fp32_model": [7, 217, 218, 280, 297, 477], "int8_model": [7, 217, 218], "experiement": 9, "deprec": [9, 216, 221, 445, 508], "bilingu": [12, 222], "understudi": [12, 222], "qualiti": [12, 222], "text": [12, 214, 215, 222, 227, 253, 492, 501, 508, 511], "machin": [12, 222, 311, 474, 491, 501, 507], "translat": [12, 68, 222, 223, 234, 237], "natur": [12, 222], "anoth": [12, 36, 68, 127, 215, 221, 222, 231, 287, 477, 480, 496, 508, 509], "approxim": [12, 222, 223, 493], "glue": [12, 222, 229, 478, 493], "word": [12, 214, 222, 487, 493, 511], "piec": [12, 214, 222, 493], "decod": [12, 222, 493, 508], "id": [12, 31, 32, 33, 180, 214, 222, 224, 225, 226, 227, 315, 316, 318, 319, 320, 322, 325, 326, 327, 328, 329, 331, 333, 334, 362, 363, 366, 431, 493, 506, 509], "token": [12, 200, 211, 213, 215, 221, 222, 223, 458, 462, 474, 478, 493, 506, 508, 509], "By": [12, 35, 222, 493, 495], "ngram": [12, 222, 493], "breviti": [12, 222, 223, 493], "penalti": [12, 222, 223, 493], "beam": [12, 222, 493], "cach": [12, 200, 222, 379, 462, 485, 503], "error": [12, 222, 229, 235, 256, 430, 457, 493, 509], "occur": [12, 222], "length": [12, 200, 215, 222, 225, 478, 493, 503, 508], "bleu_scor": [12, 222, 223], "schedul": [21, 221, 248, 252, 257, 287, 498], "mixedprecis": [21, 221, 230, 306, 407, 451, 494], "modelconvers": [21, 221, 231, 496], "architectur": [21, 180, 232, 233, 239, 240, 242, 480, 491, 500, 501], "na": [21, 163, 221, 257, 262, 490], "14": [31, 32, 217, 218, 287, 511], "revis": [31, 32, 33], "6ece06672ed3": 31, "6f0d0f71d92e": [31, 32], "date": [31, 32, 33, 415], "08": [31, 215, 508, 511], "31": [31, 511], "07": [31, 32, 510, 511], "229939": 31, "update_dataload": 31, "db_session": [31, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 343, 345, 348], "sqlalchemi": [31, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 343, 345, 346, 348, 485, 491], "orm": [31, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 343, 345, 348], "session": [31, 152, 199, 262, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 343, 345, 346, 348, 507], "databas": [31, 202, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 343, 344, 345, 346, 415, 429, 444], "update_transform": 31, "13": [32, 33, 274, 474, 511], "9e89549a08c8": [32, 33], "29": [32, 511], "41": [32, 487, 511], "291905": 32, "03": [33, 436, 511], "22": [33, 436, 439, 511], "34": [33, 511], "52": [33, 511], "916541": 33, "run_migrations_offlin": 35, "migrat": [35, 429], "context": [35, 502], "url": [35, 202, 395, 458, 492], "engin": [35, 236, 314, 326, 346], "though": 35, "skip": [35, 266, 507, 509], "creation": [35, 312], "even": [35, 83, 474, 500], "dbapi": 35, "execut": [35, 38, 41, 66, 68, 71, 74, 150, 189, 216, 221, 232, 233, 239, 243, 252, 255, 256, 274, 290, 296, 298, 299, 300, 315, 326, 329, 335, 341, 343, 344, 400, 402, 404, 407, 408, 411, 413, 414, 416, 421, 424, 428, 431, 439, 440, 461, 474, 480, 482, 487, 494, 498, 500, 503, 511], "emit": 35, "string": [35, 36, 38, 41, 66, 67, 68, 77, 84, 127, 146, 152, 162, 163, 181, 186, 200, 202, 216, 218, 220, 221, 222, 225, 231, 232, 233, 236, 239, 240, 241, 243, 250, 251, 252, 253, 254, 255, 256, 257, 262, 265, 273, 274, 290, 291, 292, 297, 309, 424, 445, 469, 493, 508], "run_migrations_onlin": 35, "associ": [35, 225, 336, 337], "connect": [35, 252, 326, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 474, 500, 506], "cl": [36, 59, 66, 158, 160, 176, 181, 186, 202, 206, 209, 210, 211, 213, 215, 241, 246, 250, 252, 254, 266, 272, 286], "quanit": [36, 38, 41], "chosen": [36, 474], "categori": [36, 68, 202, 224, 225, 478], "mini": [36, 38, 68, 511], "boolean": [36, 38, 40, 68, 77, 236, 445], "inspect": [36, 38, 41, 66, 68, 474, 505, 507], "capabl": [36, 38, 41, 66, 67, 68, 486, 494, 502, 503, 509, 510], "queri": [36, 38, 40, 41, 66, 68, 127, 152, 317, 324, 332, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 503], "dump": [36, 38, 41, 42, 66, 68, 127, 217, 218, 297, 307, 415, 436, 446, 458, 503, 507, 509], "contain": [36, 38, 41, 42, 66, 68, 77, 88, 89, 91, 95, 127, 146, 152, 162, 170, 171, 200, 201, 202, 216, 217, 218, 220, 221, 225, 226, 227, 231, 234, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 257, 273, 274, 275, 276, 277, 278, 280, 281, 286, 296, 301, 305, 312, 317, 319, 320, 322, 323, 324, 327, 328, 331, 332, 336, 341, 346, 351, 352, 356, 359, 365, 370, 371, 377, 396, 403, 405, 406, 409, 410, 412, 418, 423, 427, 431, 439, 477, 478, 480, 490, 493, 500, 507, 509], "bool": [36, 40, 41, 42, 66, 83, 84, 127, 146, 152, 157, 171, 178, 200, 202, 215, 217, 218, 223, 225, 229, 234, 236, 237, 250, 286, 325, 358, 363, 366, 378, 381, 383, 384, 385, 386, 388, 389, 391, 395, 397, 400, 415, 431, 432, 434, 439, 440, 445, 447, 448, 458, 464, 470, 478, 493, 502, 508], "disk": [36, 66, 68], "memori": [36, 66, 95, 220, 221, 243, 255, 257, 273, 274, 477, 481, 494, 497, 500, 503, 509], "numpi": [36, 38, 41, 66, 68, 88, 89, 91, 127, 152, 215, 219, 225, 229, 234, 236, 241, 291, 292, 485, 508], "arrai": [36, 38, 41, 66, 68, 127, 146, 152, 215, 225, 229, 234, 236, 241, 265, 277, 291, 292, 508], "node0_nam": [36, 66, 68], "weight0_nam": [36, 38, 41, 66, 68], "bias0_nam": [36, 38, 41, 66, 68], "node1_nam": [36, 66, 68], "weight1_nam": [36, 66, 68], "bias1_nam": [36, 66, 68], "output0_nam": [36, 66, 68], "output1_nam": [36, 66, 68], "respons": [36, 38, 41, 66, 68, 434, 438, 444, 457, 461, 462, 466, 468, 470, 471, 503], "int32": [36, 38, 41, 66, 68, 217, 218, 478], "someth": [36, 38, 41, 66, 68, 170, 171, 202, 274, 275, 276, 277, 278, 280, 281, 286], "quantize_input": [36, 68], "abl": [36, 68, 102, 170, 171, 214, 274, 275, 276, 277, 278, 280, 281, 286, 500, 503], "where": [36, 38, 42, 65, 66, 68, 225, 229, 240, 242, 250, 480, 483, 500, 507, 509], "destinatin": 36, "destin": [36, 42, 68, 221, 231, 496], "mxnetadaptor": 38, "nc_model": [38, 40, 243], "unimpl": [38, 41], "yet": [38, 41, 68, 474], "mxnetmodel": [38, 262], "data_x": [38, 40], "loader": [38, 40, 170, 171, 256, 274, 275, 276, 277, 278, 280, 281, 286], "compare_label": [38, 41, 66, 68, 229, 493], "pipelin": [38, 41, 66, 68, 216, 221, 232, 233, 239, 256, 481, 498], "modelwis": [38, 275, 276], "opwis": [38, 280], "recover_tuned_model": [38, 68], "mxnetqueri": 38, "local_config_fil": [38, 41, 66, 68], "get_vers": [38, 41, 67, 68], "get_precis": [38, 41, 67, 68, 313], "g": [38, 41, 67, 234, 236, 256, 438, 480, 487, 500, 505, 509], "get_op_typ": [38, 41, 66, 67, 68], "fully_connect": 38, "get_fuse_pattern": [38, 67, 68], "get_quantization_cap": [38, 41, 66, 67, 68], "etc": [38, 67, 162, 189, 214, 216, 220, 221, 227, 235, 236, 243, 255, 257, 273, 274, 296, 480, 490, 506], "get_mixed_precision_combin": [38, 67, 68], "optyp": 40, "enum": [40, 65, 297, 399, 428], "deriv": [40, 65, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 189, 216, 221, 250, 252, 254, 297], "isiter": 40, "obj": [40, 162, 199, 216, 220, 221, 231, 232, 233, 239, 240, 243, 251, 255, 256, 257, 273, 274, 290, 297], "ensure_list": 40, "check_mx_vers": 40, "mx": [40, 477], "__version__": 40, "make_nc_model": 40, "sym_model": 40, "ctx": [40, 477], "input_desc": 40, "tupl": [40, 66, 127, 170, 171, 178, 181, 212, 215, 217, 218, 225, 234, 237, 274, 275, 276, 277, 278, 280, 281, 286, 364, 395, 445, 464, 478, 493, 500, 508], "symnet": 40, "aux": 40, "descript": [40, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 218, 219, 225, 240], "ncmodel": 40, "suppli": 40, "prepare_model_data": 40, "dataloaderwrap": 40, "is_model_quant": 40, "query_quantizable_nod": 40, "map": [40, 42, 68, 139, 215, 218, 220, 221, 224, 225, 226, 227, 229, 234, 243, 250, 252, 255, 257, 273, 274, 399, 475, 478, 482, 493, 500, 503], "quantize_sym_model": 40, "run_forward": 40, "b_filter": 40, "collector": 40, "pre_batch": 40, "post_batch": 40, "propag": 40, "filter": [40, 174, 176, 200, 201, 202, 203, 204, 205, 207, 211, 221, 257, 318, 358, 381, 447, 478, 490, 500, 507, 509], "make_symbol_block": 40, "gluon": [40, 274, 495], "symbolblock": 40, "make_modul": 40, "parse_tune_config": 40, "quantizable_nod": 40, "distribute_calib_tensor": 40, "calib_tensor": 40, "calib_cfg": 40, "tensor_to_nod": 40, "kl": [40, 288, 291, 292, 486, 509, 510], "minmax": [40, 486, 509, 510], "calib_model": 40, "qsym_model": 40, "calib_data": [40, 477], "gather": [40, 42, 250, 434], "calibdata": 40, "threshold": [40, 42, 159, 225, 250, 288, 291, 292, 493], "calibcollector": 40, "include_tensors_kl": 40, "include_tensors_minmax": 40, "num_bin": [40, 288, 291, 292], "8001": [40, 288, 291], "collectorbas": 40, "tensorcollector": 40, "include_nod": 40, "qtensor_to_tensor": 40, "onnxrtadaptor": 41, "rt": 41, "todo": [41, 200, 203, 225, 291, 292, 443], "func": [41, 181, 256, 445, 462, 510], "onnxdataload": 41, "evalut": 41, "onnxtransform": 41, "onnxmetr": 41, "evaluaton": 41, "visualizaton": 41, "boolen": [41, 66, 68], "f1": [41, 221, 226, 228, 229, 257, 475, 482, 493, 506, 511], "modelproto": [41, 218, 495], "onnxrt_qoperatoradaptor": 41, "onnxrt_integeropsadaptor": 41, "onnxrt_qdqadaptor": 41, "onnxrtqueri": 41, "infom": [41, 68, 182, 183, 218], "compos": [41, 66, 68, 146, 215, 477, 508], "dictionari": [41, 42, 66, 68, 88, 89, 91, 163, 164, 167, 214, 225, 232, 234, 237, 239, 240, 242, 257, 317, 319, 320, 322, 324, 327, 328, 332, 336, 337, 339], "kei": [41, 66, 68, 127, 146, 152, 164, 225, 241, 251, 253, 262, 288, 290, 291, 297, 438, 453, 474, 507], "get_op_types_by_precis": [41, 66, 68], "get_graph_optim": 41, "onnxrtaug": 42, "model_wrapp": 42, "dump_op_typ": 42, "black_nod": 42, "white_nod": 42, "augment": 42, "augment_graph": 42, "activation_onli": 42, "weight_onli": 42, "quantization_candid": 42, "get_intermediate_output": 42, "calib_mod": 42, "intermedi": [42, 65, 181, 490, 500, 503], "dump_calibr": 42, "naiv": 42, "give": [42, 477, 509], "pair": [42, 124, 494], "minimum": [42, 65, 509], "second": [42, 85, 200, 358, 438, 474, 483, 497, 509, 510], "maximum": [42, 65, 75, 200, 215, 223, 250, 252, 277, 478, 503, 508], "ad": [42, 200, 222, 277, 315, 316, 318, 325, 326, 327, 328, 329, 333, 334, 474, 487, 494, 507], "reducemin": 42, "reducemax": 42, "calculate_quantization_param": 42, "quantization_threshold": 42, "calcul": [42, 68, 181, 203, 204, 226, 227, 237, 247, 250, 252, 253, 266, 280, 288, 291, 349, 438, 443, 478, 493, 497, 500, 503, 506, 509, 510], "matmul": [42, 67, 73, 86, 106, 107, 116, 135, 218, 250, 486], "param_nam": [42, 309], "conv_3": 42, "np": [42, 127, 146, 215, 277, 482, 508], "conv_4": 42, "calculate_scale_zeropoint": 42, "last_nod": 42, "next_nod": 42, "rmin": [42, 65, 473], "rmax": [42, 65, 473], "op_registri": 59, "op_typ": [59, 280], "quanttyp": 65, "cast_tensor": 65, "tensorproto": 65, "tensor_target_dtyp": 65, "quantize_data_with_scale_zero": 65, "sym": [65, 486, 509, 510], "asym": [65, 486, 509, 510], "To": [65, 225, 246, 250, 254, 436, 474, 476, 482, 494, 502, 504, 505, 510], "pack": [65, 82], "b": [65, 91, 95, 200, 218, 478, 493], "ab": [65, 252, 473, 503], "quantize_data": 65, "quantize_rang": 65, "trasnform": 65, "equat": [65, 227, 229, 503], "q": [65, 124], "z": [65, 480], "real": [65, 182, 183, 203, 482, 501, 503], "quantizedvalu": 65, "new_quantized_nam": 65, "scale_nam": 65, "zero_point_nam": 65, "quantized_value_typ": 65, "axi": 65, "quint8": 65, "linearli": 65, "inputoutputinti": 65, "quantizediniti": 65, "quantized_data": 65, "quantizationmod": 65, "quantizedvaluetyp": 65, "quantformat": [65, 218], "attribute_to_kwarg": 65, "helper": [65, 66, 157, 200, 201, 202, 214, 218, 440], "make_nod": 65, "find_by_nam": 65, "item_list": 65, "item": [65, 164, 214, 251, 347, 432, 464, 482, 506], "get_ops_recurs": 66, "prefix": [66, 152, 180, 221, 222, 458, 487, 507], "graph_info": [66, 68, 260, 261, 262, 264, 265], "templateadaptor": 66, "tampl": 66, "is_fused_modul": [66, 157], "_propagate_qconfig_help": [66, 157], "pytorchadaptor": 66, "objext": 66, "summari": [66, 119, 120, 180, 221, 474, 476, 499, 507], "optimizer_tupl": 66, "criterion_tupl": 66, "is_fused_child": 66, "op_nam": [66, 280, 349, 354, 355, 363, 364, 507], "_post_eval_hook": [66, 507], "is_fused_op": 66, "is_last_fused_child": 66, "q_capabl": 66, "get_non_quant_modul": 66, "model_kwarg": 66, "non_quant_modul": 66, "custom": [66, 234, 256, 296, 336, 341, 480, 500, 506], "keyword": 66, "custom_non_quant_dict": 66, "pytorch_ipexadaptor": 66, "ipex": [66, 490, 503, 511], "unspport": 66, "No": [66, 485, 499, 501], "pytorch_fxadaptor": 66, "fx": [66, 157, 274, 490, 501, 503, 504, 511], "prepare_sub_graph": 66, "sub_module_list": 66, "fx_op_cfg": 66, "is_qat": 66, "example_input": [66, 217, 218], "recurs": [66, 297], "qconfigmap": 66, "prepare_fx": 66, "dir": [66, 157, 200, 296, 478, 485, 488], "convert_sub_graph": 66, "fuse_fx_model": 66, "fused_model": 66, "pytorchqueri": 66, "set_quantization_config": 67, "organ": [67, 474, 510], "unsupported_precis": 67, "tensorflowadaptor": 68, "graphdef": [68, 77, 78, 81, 82, 84, 91, 95, 106, 107, 113, 114, 115, 116, 127, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 152, 262, 424, 495], "graph_def": [68, 74, 152, 262, 274, 392, 424, 425], "frozen": [68, 77, 262, 274, 386, 389, 474, 495], "ckpt": [68, 152, 262, 274, 511], "savedmodel": [68, 262, 274, 511], "folder": [68, 152, 202, 207, 274, 296, 478, 507], "larger": 68, "tuning_cfg_to_fw": 68, "tuning_cfg": 68, "pars": [68, 146, 200, 201, 212, 215, 299, 309, 335, 336, 338, 341, 342, 343, 344, 347, 400, 404, 408, 413, 419, 438, 445, 453, 464, 508], "compat": [68, 102, 152, 225, 234, 262, 482, 495, 505], "wise": [68, 147, 161, 250, 277, 338, 341, 445, 474, 477, 490, 500, 507, 509, 510], "definit": [68, 127, 193, 198, 363, 376, 385, 431, 461], "inspect_weight_and_bia": 68, "node_list": 68, "graph_node_name_map": [68, 152], "fused_node_map": 68, "pattern_map": 68, "seq": 68, "fused_mapping_revers": 68, "fused_map": 68, "inspect_activ": 68, "local": [68, 250, 297, 311, 341, 346, 359, 379, 474, 506], "tensorflowbasemodel": [68, 262, 390], "quantizedv2": 68, "get_optype_wise_": 68, "union": [68, 223, 225, 229, 287, 309, 311, 326, 347, 385, 431, 434, 436, 438, 439, 445, 448, 449, 451, 453, 457, 493], "tensorflow_itexadaptor": 68, "performance_onli": [68, 124, 138, 143, 151, 455, 509], "get_eightbit_pattern": 68, "qdq_enabl": 68, "eightbit": [68, 507], "generate_internal_pattern": 68, "intern": [68, 127, 430, 477], "bf16convert": [71, 504], "fp32_op": [71, 124], "bf16_op": [71, 124, 504], "graph_bas": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126], "graphrewriterbas": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126], "do_transform": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 131, 138, 139, 143, 147, 150, 151], "convertaddtobiasaddoptim": 73, "addv2": [73, 90, 91, 486], "biasadd": [73, 85, 87, 135, 142, 486], "convertlayoutoptim": 74, "layout": 74, "nchw": 74, "nhwc": 74, "convertleakyreluoptim": 75, "subgraph": [75, 83, 87, 91], "leakyrelu": 75, "mul": [75, 86, 87, 90, 91, 135], "coeffici": [75, 235], "less": [75, 480, 500], "convertnantorandom": 76, "const": [76, 84, 85, 88, 89, 91, 106, 107, 120, 127, 257, 315, 326, 329, 335, 341, 343, 344, 348, 427, 435, 444], "nan": 76, "convertplaceholdertoconst": 77, "rewrit": [77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126], "renam": [77, 102, 505], "placeholderwithdefault": 77, "constant": [77, 83, 127, 146, 217, 218, 277, 428, 477, 486, 508], "simplifi": 77, "input_graph_def": [77, 78, 81, 82, 84, 91, 95, 106, 107, 127, 146], "nodes_to_convert": 77, "placehold": [77, 198], "strtobool": 77, "val_str": 77, "equival": [77, 234], "dequantizecastoptim": 78, "dilatedcontract": 79, "injectdummybiasaddoptim": 80, "expanddimsoptim": 81, "expanddim": 81, "whose": [81, 106, 107, 251, 488, 500, 509], "fetchweightfromreshapeoptim": 82, "fetch": [82, 193, 225, 477], "reshap": [82, 91, 246], "foldbatchnormnodesoptim": 83, "scale_after_norm": 83, "batchnormwithglobalnorm": 83, "nodedef": [83, 88, 89, 91, 127, 146, 424], "normal": [83, 91, 215, 227, 445, 475, 477, 497, 508], "fold": [83, 84, 217, 218, 486], "convolut": [83, 480, 500, 501], "onc": [83, 127, 152, 186, 254, 474, 477, 501], "That": [83, 474, 477], "opportun": 83, "rather": [83, 488], "expens": [83, 480, 509], "bake": 83, "identifi": [83, 88, 89, 91, 225, 262], "simpler": 83, "form": [83, 91, 102, 225, 227, 439, 474, 480], "spot": 83, "fusedbatchnorm": [83, 102], "fusedbatchnormv3": 83, "_fusedbatchnormex": 83, "newer": 83, "style": [83, 193, 207, 476, 478, 488], "badli": [83, 91, 102], "duplic": [83, 91, 120, 277], "graphfoldconstantoptim": 84, "check_all_fold": 84, "check_const_input": 84, "node_nam": [84, 88, 89, 91, 127, 146, 152, 218, 262, 264, 330, 424], "supported_op_typ": 84, "fusebiasaddandaddoptim": 85, "fusecolumnwisemuloptim": 86, "depthwiseconv2dn": [86, 486], "fuseconvwithmathoptim": 87, "elimin": [87, 487], "math": [87, 503], "realdiv": [87, 90], "node_name_from_input": [88, 89, 91, 127, 146], "strip": [88, 89, 91, 152, 507], "port": [88, 89, 91, 146, 458, 462, 474], "underli": [88, 89, 91, 235], "node_from_map": [88, 89, 91], "node_map": [88, 89, 91], "pull": [88, 89, 91, 439], "entri": [88, 89, 91, 186, 220, 256, 355, 358, 438, 445, 492], "index": [88, 89, 91, 176, 180, 193, 198, 202, 206, 211, 221, 241, 266, 297, 462, 477, 493], "isn": [88, 89, 91, 127], "present": [88, 89, 91, 474, 501], "values_from_const": [88, 89, 91, 127], "node_def": [88, 89, 91, 127], "extract": [88, 89, 91, 127, 202, 464, 478], "ndarrai": [88, 89, 91, 127, 215, 234, 236, 265, 277, 288, 291, 485, 508], "access": [88, 89, 91, 127, 163, 164, 430, 445, 458, 462, 474], "get_const_dim_count": [88, 89], "dimens": [88, 89, 192, 215, 237, 247, 277, 478, 480, 500, 508], "fusegeluoptim": 90, "sqrt": 90, "erf": 90, "gelu": 90, "fuselayernormoptim": 91, "remap": 91, "smaller": [91, 215, 480, 500, 508], "layernorm": 91, "case": [91, 95, 180, 199, 214, 215, 220, 221, 229, 243, 255, 256, 257, 273, 274, 436, 440, 445, 474, 475, 477, 480, 482, 486, 488, 493, 497, 500, 501, 503, 508, 510], "fusedbatcnormv3": 91, "And": [91, 189, 221], "restrict": [91, 500, 506], "2d": 91, "3d": [91, 501, 511], "kera": [91, 186, 262, 370, 377, 387, 482, 495], "contraint": 91, "fusedop": 91, "fill": [91, 317, 319, 320, 322, 324, 327, 328, 332, 474, 506, 508], "gamma": 91, "beta": 91, "h": [91, 215, 482, 508], "_mkllayernorm": 91, "fusepadwithconv2doptim": 92, "excluded_op_nam": [92, 93], "cfg": [92, 93, 163], "new_api": [92, 93, 98, 114, 121, 138, 143, 147], "itex_qdq_mod": [92, 93], "fusepadwithfp32conv2doptim": 93, "fusetransposereshapeoptim": 94, "graphcseoptim": 95, "cse": 95, "those": [95, 280, 297, 480, 487, 488, 498, 500, 503, 509], "child": [95, 507], "b1": 95, "c1c2": 95, "d1": [95, 297], "c1": 95, "c2": 95, "bound": [95, 180, 215, 221, 225, 234, 277, 493, 508], "elim": 95, "grappleroptim": 96, "input_output_nam": 96, "opt_cfg": 96, "wrapper": [96, 176, 181, 182, 183, 184, 185, 199, 211, 213, 215, 225, 229, 462, 470, 504], "grappler": [96, 486], "insertprintminmaxnod": 98, "pre_node_nam": 98, "post_node_nam": 98, "movesqueezeafterreluoptim": 99, "removetrainingnodesoptim": 101, "protected_nod": [101, 146], "types_to_splic": [101, 146], "checknumer": [101, 146], "stopgradi": 101, "renamebatchnormoptim": 102, "fusedbatchnormv2": 102, "due": [102, 500, 503, 507], "histor": 102, "latter": 102, "former": 102, "platform": [102, 434, 487, 490, 501, 503, 506, 511], "vnni_bf16": 102, "amx": 102, "instruct": [102, 474, 480, 491, 494, 501, 502, 503], "splitsharedinputoptim": 103, "stripequivalentnodesoptim": 104, "output_node_nam": [104, 105, 138, 139, 143, 146, 152], "stripunusednodesoptim": 105, "input_node_nam": [105, 138, 143, 146, 152], "switchoptim": 106, "condit": [106, 200, 201, 202, 215, 478, 492, 508, 509], "enter": [106, 107], "updateenteroptim": 107, "workaround": 107, "freezefakequantopoptim": 110, "fake_qu": [110, 124, 138, 143], "freezevaluetransform": 111, "max_min_data": [111, 112], "postfix": [111, 112], "tensor_data": 111, "th": [111, 112], "gpu": [111, 112, 124, 127, 146, 490, 500, 502, 503], "itex_mod": [111, 124, 138, 143], "generate_output_graph": [111, 112], "max_name_valu": [111, 112], "freeze_max": [111, 112], "freeze_min": [111, 112], "generate_output_graph_rang": [111, 112], "freezevaluewithoutcalibtransform": 112, "95": [112, 225, 229, 493, 511], "fuseconvredundantdequantizetransform": 113, "_quantizedconv": 113, "_quantizeddeconv": 113, "successor": [113, 114, 115, 116], "fuseconvrequantizetransform": 114, "requant": [114, 116, 507], "stage": [114, 439, 480, 507], "fuse_pattern": 114, "sum_pattern": 114, "fusematmulredundantdequantizetransform": 115, "_quantizedmatmul": [115, 116], "fusematmulrequantizedequantizetransform": 116, "quantizedmatmul": 116, "quantizedmatmulwithbiasanddequant": 116, "fusematmulrequantizetransform": 116, "rtype": [116, 277, 440], "fusematmulrequantizedequantizenewapitransform": 116, "fusematmulrequantizenewapitransform": 116, "newapi": 116, "metainfochangingmemopoptim": 118, "metaop": 118, "posthostconstconvert": 119, "hostconst": 119, "postcseoptim": 120, "share": [120, 146, 485, 486, 509], "quantizev2": [120, 135], "quantizedrnnconvert": 121, "calibration_data": [121, 124], "rnn_detail": 121, "scalepropagationtransform": 122, "direct": [122, 250, 399], "generategraphwithqdqpattern": 124, "op_wise_config": [124, 138, 143], "quantized_nod": 124, "dq": 124, "befor": [124, 189, 200, 216, 217, 218, 221, 243, 250, 252, 253, 254, 280, 335, 474, 476, 477, 478, 480, 482, 485, 486, 487, 497, 500, 503, 506, 507, 509], "mergeduplicatedqdqoptim": 125, "shareqdqforitexypatternoptim": 126, "graphanalyz": 127, "extend_engin": 127, "singleton": [127, 257, 427, 435], "properti": [127, 180, 181, 189, 190, 192, 200, 202, 216, 220, 221, 228, 229, 230, 231, 240, 243, 255, 256, 258, 260, 261, 262, 264, 265, 298, 314, 346, 353, 357, 362, 363, 366, 378, 381, 386, 390, 399, 402, 407, 411, 414, 421, 431, 438, 439, 440, 443, 448, 452, 455, 457, 458, 492, 499], "getter": [127, 189, 216, 221, 240, 243, 256, 262, 265, 379], "_graph": 127, "has_positive_input": 127, "retrun": 127, "neg": 127, "get_graph_input_output": 127, "clearli": 127, "similar": [127, 487, 502, 509, 510], "summarize_graph": 127, "writtern": 127, "googl": [127, 494, 501], "query_fusion_pattern_nod": 127, "aggreg": [127, 440], "_search_pattern": 127, "remove_node_with_single_input_output": 127, "rebuild": 127, "except": [127, 257, 297, 427, 435, 436, 445, 460, 470, 511], "remove_nod": 127, "replace_const_nod": 127, "new_const_nod": 127, "target_nod": 127, "old_constant_node_nam": 127, "replace_al": 127, "outdat": 127, "replace_constant_graph_with_constant_nod": 127, "new_nod": 127, "old_end_node_nam": 127, "replace_single_nod": 127, "old_output_node_nam": 127, "old_output_nam": 127, "old_input_node_nam": 127, "old_input_nam": 127, "bottom": [127, 275, 276, 474], "replace_nod": 127, "old_node_nam": 127, "output_nodes_nam": 127, "node_name_detail": 127, "parent": [127, 247, 252, 254, 507], "add_nod": [127, 363], "start_node_nam": 127, "end_node_nam": 127, "dump_graph": 127, "parse_graph": 127, "graphrewriterhelp": 127, "encapsul": [127, 170, 171, 274, 275, 276, 277, 278, 280, 281, 286, 495], "compare_node_attr": 127, "node_a": 127, "node_b": 127, "compar": [127, 229, 280, 474, 477, 481, 487, 493, 503, 506, 507, 509], "create_nod": [127, 146], "create_constant_nod": [127, 146], "datatyp": [127, 146, 504, 509], "set_attr_dtyp": [127, 146], "set_attr_tensor": [127, 146], "set_attr_type_list": [127, 146], "attr": [127, 146, 152], "set_attr_string_list": [127, 146], "set_attr_str": [127, 146], "set_attr_int_list": 127, "set_attr_int": [127, 146], "set_attr_float": [127, 146], "set_attr_bool": [127, 146], "fusenodestartwithfusedbatchnormv3": [130, 140], "quantize_graph_bas": [130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145], "quantizenodebas": [130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145], "get_longest_fus": [130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145], "apply_the_transform": [130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145], "fusenodestartwithconcatv2": [131, 141], "fusenodestartwithconv2d": [132, 142], "fusenodestartwithdeconv2d": 133, "fusenodestartwithfusedinstancenorm": 134, "fusenodestartwithmatmul": [135, 144], "apply_matmul_biasadd_relu_fus": 135, "match_node_nam": [135, 142], "apply_matmul_biasadd_fus": 135, "apply_batchmatmulv2_fus": 135, "batchmatmul": 135, "batchmatmulv2": 135, "apply_batchmatmulv2_mul_add_fus": 135, "fusenodestartwithpool": [136, 145], "optimizeqdqgraph": 138, "op_wise_sequ": [138, 143], "quantizegraphbas": [138, 139, 143], "remove_dead_nod": 139, "output_nam": [139, 217, 218], "longer": [139, 200, 215, 478, 508], "add_output_graph_nod": 139, "output_nod": [139, 325], "create_nodes_map": 139, "apply_conv_biasadd_relu_fus": 142, "quantizegraphforintel": 143, "quantizegraphhelp": 146, "staticmethod": 146, "get_sorted_graph": 146, "sort": [146, 358, 509], "reorder": 146, "easier": [146, 474, 501], "split_shared_input": 146, "in_graph": [146, 152], "ouput": 146, "remove_training_nod": 146, "aren": 146, "uncondition": 146, "copy_attr": 146, "attr_valu": 146, "copi": [146, 251], "unique_node_name_from_input": 146, "ensure_tensor_name_has_port": 146, "biascorrect": 147, "fp32_graph": 147, "weight_empir": 147, "graph_transform_bas": [147, 150, 151], "graphtransformbas": [147, 150, 151], "Will": [147, 172, 173, 176, 458, 480, 490], "task": [147, 200, 207, 229, 478, 480, 490, 493], "w_int8": [147, 161], "w_fp32": [147, 161], "ratio": [147, 161, 212, 215, 250, 252, 253, 254, 478, 500, 508, 511], "equal": [147, 161, 493], "scale_c": [147, 161], "shift": [147, 161, 212, 508], "notic": [147, 161, 180, 221, 492], "empir": [147, 161], "insertlog": 150, "input_pb": [150, 151], "node_name_list": 150, "show_nam": 150, "show_op": 150, "first_n": 150, "summar": [150, 480], "1024": [150, 202], "messag": [150, 445, 457, 462, 509], "dump_fp32": 150, "rerangequantizedconcat": 151, "rerange_quant": 151, "concat": [151, 431], "disable_random": 152, "read_graph": 152, "in_graph_is_binari": 152, "read": [152, 202, 205, 215, 251, 253, 364, 368, 369, 478, 504, 506], "write_graph": 152, "out_graph_def": 152, "out_graph_fil": 152, "write": [152, 176, 209, 210, 211, 225, 297, 482, 488, 506, 507], "is_ckpt_format": 152, "model_path": [152, 364, 379, 384, 445], "is_saved_model_format": 152, "saved_model": [152, 221, 231, 370, 377, 387, 496], "get_tensor_by_nam": 152, "try_cnt": 152, "scope": [152, 189, 221], "tensor_nam": [152, 265], "suffix": 152, "iterator_sess_run": 152, "sess": 152, "iter_op": 152, "feed_dict": [152, 199], "output_tensor": [152, 262], "makeiter": 152, "strip_unused_nod": 152, "strip_unused_lib": 152, "r1": 152, "15": [152, 236, 486, 487, 511], "branch": 152, "strip_equivalent_nod": 152, "get_tensor_val_from_graph_nod": 152, "tensor_v": 152, "get_embedding_contigu": 157, "embed": 157, "contigu": [157, 500], "append_attr": 157, "fx_model": 157, "algorithm_registri": [158, 160], "algorithm_typ": [158, 160], "registr": [158, 160, 176, 186, 202, 206, 209, 210, 211, 213, 215, 246], "algorithmschedul": [158, 160], "fastbiascorrect": 159, "channel_axi": [159, 161], "weightcorrect": 161, "ep": 161, "1e": [161, 510], "05": [161, 225, 229, 439, 487, 493, 511], "benchmark_conf": [162, 163, 257], "prefer": [162, 220, 221, 255, 257, 274], "cfg_fname": 163, "parser": [163, 257, 309, 427, 431, 435, 464], "quantization_conf": [163, 257, 274], "dotdict": 163, "pruning_conf": [163, 257, 273], "graph_optimization_conf": [163, 220, 221, 487], "mixedprecision_conf": 163, "distillation_conf": [163, 216, 221], "defaultconf": 163, "notat": [163, 164], "deep_get": 164, "dot": [164, 445, 494, 503], "nest": 164, "eg": [164, 176, 202, 206, 211, 478, 502], "john": 164, "deep_set": 164, "male": 164, "distillationconfig": [167, 257], "teacher_model": [167, 181, 216, 221, 257, 480], "learning_r": [167, 257, 502, 510], "altern": [167, 257], "sigopttunestrategi": 170, "q_dataload": [170, 171, 275, 276, 277, 278, 280, 281, 286, 488, 509], "eval_func": [170, 171, 189, 220, 221, 231, 256, 274, 275, 276, 277, 278, 280, 281, 286, 475, 477, 478, 482, 494, 503, 509, 510], "q_hook": [170, 171, 275, 276, 277, 278, 280, 281, 286], "tunestrategi": [170, 171, 275, 276, 277, 278, 280, 281, 286, 509], "hpo": 170, "mandatori": [170, 171, 274, 276, 277, 278, 280, 281, 286, 483, 510], "reserv": [170, 171, 189, 221, 256, 276, 277, 278, 280, 281, 286], "tuner": [170, 171, 220, 221, 255, 257, 274, 275, 276, 277, 278, 280, 281, 286], "scalar": [170, 171, 274, 275, 276, 277, 278, 280, 281, 286, 291, 292, 493, 494, 503], "pseudo": [170, 171, 274, 275, 276, 277, 278, 280, 281, 286, 507], "next_tune_cfg": [170, 275, 276, 277, 278, 280, 281, 286, 509], "travers": [170, 171, 275, 276, 277, 278, 280, 281, 286, 509], "concret": [170, 275, 276, 277, 278, 280, 281, 286], "logic": [170, 171, 275, 286, 457, 509, 510], "overrid": [170, 189, 221, 275, 286, 297, 436], "some": [170, 189, 200, 221, 251, 275, 286, 445, 474, 483, 491, 493, 497, 500, 503, 504, 507, 509], "constraint": [170, 220, 221, 255, 257, 274, 477, 506, 509, 510], "tpetunestrategi": 171, "stop": [171, 286, 415, 439, 483, 509, 510], "trials_count": [171, 286], "reach": [171, 250, 254, 286, 476, 500, 509], "entranc": [172, 173, 176], "dispatch": [172, 173, 176, 490], "tensorflowimagenetdataset": 174, "iterabledataset": [174, 176, 198, 201, 202, 204, 206, 211], "onnxrtimagenetdataset": 174, "root": [174, 200, 201, 202, 229, 235, 260, 261, 262, 264, 265, 287, 462, 475, 477, 478, 482, 493, 509, 510], "subset": [174, 202, 478], "num_cor": [174, 200, 201, 478], "28": [174, 200, 201, 478, 487, 511], "tensorflow_itex": [176, 202, 205, 206, 207, 209, 210, 211, 502], "onnxrt_qdq": [176, 202, 206, 209, 210, 211, 502], "onnxrt_qlinearop": [176, 202, 206, 209, 210, 211, 215, 502], "onnxrt_integerop": [176, 202, 206, 209, 210, 211, 215, 483, 502], "pytorch_ipex": [176, 202, 206, 209, 210, 211, 502, 510], "onnxrt_qoper": [176, 202, 206, 209, 210, 211, 502], "overwrit": [176, 202, 206, 211], "__getitem__": [176, 198, 202, 206, 211, 213, 215, 475, 477, 478], "__len__": [176, 198, 202, 206, 211, 477, 478], "__iter__": [176, 198, 202, 206, 211, 475, 477], "inter": [176, 198, 202, 206, 211], "dataset_registri": [176, 202, 206, 211], "dataset_typ": [176, 202, 206, 211, 220, 221, 231, 255, 318], "dataset_format": [176, 202, 206, 211], "data_format": [176, 178, 202, 206, 211], "raw_imag": [176, 202, 206, 211], "tfrecord": [176, 200, 201, 202, 206, 211, 478], "transform_cl": [176, 211, 213, 215], "basetransform": [176, 177, 178, 211, 212, 213, 215], "transform_registri": [176, 211, 213, 215], "transform_typ": [176, 211, 213, 215], "__call__": [176, 209, 210, 211, 477], "filter_registri": [176, 209, 210, 211], "filter_typ": [176, 209, 210, 211], "parsedecodecocotransform": 177, "parsedecodeimagenettransform": 178, "tensorflowresizecropimagenettransform": 178, "height": [178, 215, 237, 250, 482, 500, 508, 510], "random_crop": [178, 508], "resize_sid": [178, 508], "resize_method": 178, "bilinear": [178, 215, 508], "random_flip_left_right": [178, 508], "mean_valu": [178, 508], "channels_last": 178, "subpixel": 178, "rgb": 178, "applic": [178, 430, 458, 460, 462, 474, 501, 507, 508], "crop": [178, 215, 478, 508], "desir": [178, 212, 215, 508], "resiz": [178, 200, 201, 215, 475, 477, 478, 508, 509], "flip": [178, 215, 508], "left": [178, 215, 474, 508], "std": [178, 215, 237, 475, 477, 508], "bilinearimagenettransform": 178, "central_fract": [178, 508], "875": [178, 508], "fraction": [178, 508], "onnxbilinearimagenettransform": 178, "onnxresizecropimagenettransform": 178, "std_valu": 178, "229": [178, 475, 477], "225": [178, 475, 477], "resizewithaspectratio": 178, "87": [178, 511], "inter_pol": 178, "cv2": 178, "inter_area": 178, "set_env_var": 180, "env_var": 180, "overwrite_exist": 180, "env": [180, 431, 439], "set_all_env_var": 180, "core": [180, 221, 236, 315, 474, 492, 499, 511], "get_architectur": 180, "system": [180, 297, 434, 460, 461, 500], "get_threads_per_cor": 180, "thread": [180, 461, 474, 477, 499], "get_thread": 180, "get_physical_id": 180, "socket": [180, 434, 462, 499, 511], "get_core_id": 180, "get_bounded_thread": 180, "core_id": 180, "bind": 180, "command": [180, 221, 315, 326, 329, 335, 341, 343, 344, 411, 431, 439, 458, 474, 482, 487], "possibl": [180, 221, 234, 313, 378, 474, 483, 487, 498, 504, 509], "unnecessari": [180, 221], "b_dataload": [180, 221, 475, 496], "b_func": [180, 221], "Not": [180, 189, 221, 243, 430], "summary_benchmark": [180, 221], "config_inst": [180, 221], "trigger": [180, 221, 252, 487], "generate_prefix": [180, 221], "core_list": [180, 221], "numactl": [180, 221], "run_inst": [180, 221], "critet": 181, "tensorflowcrossentropyloss": 181, "pytorchcrossentropyloss": 181, "tensorflowknowledgedistillationloss": 181, "pytorchknowledgedistillationloss": [181, 480], "pytorchintermediatelayersknowledgedistillationloss": 181, "tensorflowcriterion": 181, "pytorchcriterion": 181, "criterion_cl": 181, "criterion_registri": 181, "criterion_typ": 181, "registry_criterion": 181, "param_dict": [181, 186, 234], "crossentropyloss": 181, "tensorflowsparsecategoricalcrossentropi": 181, "sparsecategoricalcrossentropyloss": 181, "knowledgedistillationframework": 181, "student_model": [181, 216, 221, 480], "knowledgedistillationloss": [181, 510], "temperatur": [181, 510], "loss_typ": [181, 510], "ce": [181, 510], "loss_weight": [181, 510], "teacher_model_forward": 181, "notimplementederror": [181, 228, 229, 258], "teacher_student_loss_c": 181, "student_output": [181, 189, 221, 480], "teacher_output": [181, 189, 216, 221], "student_targets_loss_c": 181, "groud": 181, "truth": [181, 226, 227], "loss_cal": 181, "loss_cal_sloss": 181, "student_loss": [181, 189, 221, 480], "softcrossentropi": 181, "logit": [181, 480], "ground": [181, 226, 227], "kullbackleiblerdiverg": 181, "pytorchknowledgedistillationlosswrapp": 181, "tensorflowknowledgedistillationlosswrapp": 181, "tensorflowknowledgedistillationlossextern": 181, "intermediatelayersknowledgedistillationloss": 181, "layer_map": 181, "add_origin_loss": 181, "init_loss_func": 181, "init_feature_match": 181, "student_featur": 181, "teacher_featur": 181, "matcher": 181, "clear_featur": 181, "clean": [181, 214, 315, 326, 329, 335, 336, 341, 343, 344, 345, 429, 444, 476], "register_hooks_for_model": 181, "attributeerror": 181, "remove_all_hook": 181, "pytorch_linear_feature_match": 181, "pytorchintermediatelayersknowledgedistillationlosswrapp": 181, "selfknowledgedistillationloss": 181, "selfknowledg": 181, "pytorchselfknowledgedistillationloss": 181, "l2diverg": 181, "feature1": 181, "feature2": 181, "pytorchselfknowledgedistillationlosswrapp": 181, "collate_fn": [182, 183, 190, 192, 193, 195, 196, 197, 199, 478], "last_batch": [182, 183, 190, 192, 195, 196, 197, 199], "rollov": [182, 183, 190, 192, 195, 196, 197, 199], "sampler": [182, 183, 190, 192, 194, 195, 196, 197, 199, 211, 221, 482], "batch_sampl": [182, 183, 190, 192, 195, 196, 197, 199], "num_work": [182, 183, 190, 192, 195, 196, 197, 199, 503], "pin_memori": [182, 183, 190, 192, 195, 196, 197, 199], "shuffl": [182, 183, 190, 192, 195, 196, 197, 199, 477, 503], "torch_util": [183, 221, 257], "postprocess_cl": [183, 187, 475], "user_postprocess": [183, 187], "metric_cl": [183, 184, 228, 229, 258, 475], "user_metr": [183, 184], "alwai": [183, 184, 225, 475, 493, 500], "tensorflowoptim": 186, "pytorchoptim": 186, "optimizer_cl": 186, "optimizer_registri": 186, "optimizer_typ": 186, "cross": [186, 228, 229, 258, 488, 509], "tensorflowsgd": 186, "tensorflowadamw": 186, "tensorflow_addon": 186, "adamw": 186, "tensorflowadam": 186, "adam": [186, 510], "pytorchsgd": 186, "util": [188, 217, 221, 223, 251, 257, 302, 303, 304, 306, 308, 311, 315, 326, 329, 335, 336, 341, 343, 344, 346, 354, 355, 360, 362, 363, 366, 370, 376, 377, 385, 387, 411, 414, 418, 423, 427, 459, 482, 500, 503], "record_output": 188, "output_process": 188, "get_activ": 188, "mainli": [189, 221, 254, 503], "train_func": [189, 221, 256, 480, 482, 500], "train_dataload": [189, 221, 480, 500], "pre_process": [189, 216, 221, 232, 239, 243, 255, 482], "post_process": [189, 221], "on_train_begin": [189, 221, 243, 252, 253, 287, 480], "Be": [189, 221, 225], "on_train_end": [189, 221, 243, 252, 253, 287], "pre_epoch_begin": [189, 221, 243], "post_epoch_end": [189, 221, 243], "on_epoch_begin": [189, 221, 243, 252, 253, 257, 273, 287, 290, 500], "on_step_begin": [189, 221, 243, 252, 253, 257, 273, 290, 500], "batch_id": [189, 221, 257, 273], "on_batch_begin": [189, 221, 243], "on_after_compute_loss": [189, 221, 243, 287, 480], "on_before_optimizer_step": [189, 221, 252, 253, 287, 500], "on_post_grad": [189, 221], "on_step_end": [189, 221, 243, 252, 253, 257, 273, 287, 290, 500], "on_batch_end": [189, 221, 243], "on_epoch_end": [189, 221, 243, 252, 253, 257, 273, 287, 290, 480, 500], "register_hook": [189, 221], "input_arg": [189, 221], "input_kwarg": [189, 221], "basedatalod": 190, "basedataload": [190, 192, 195, 196, 197, 199], "_generate_dataload": 190, "drop": [190, 225, 251, 494, 500, 511], "incomplet": 190, "discard": 190, "default_col": 192, "merg": [192, 507, 509], "outer": 192, "defaultdataload": [192, 196, 199], "base_dataload": [192, 194, 195, 196, 197, 199, 211, 221], "drop_last": [193, 198], "iterablefetch": 193, "indexfetch": 193, "singl": [193, 200, 214, 215, 225, 234, 236, 252, 254, 277, 331, 347, 366, 431, 464, 478, 500], "indic": [193, 198, 200, 216, 221, 225, 241, 242, 474, 475, 485, 507], "default_dataload": [194, 196, 199, 211, 221], "fetcher": [194, 211, 221], "mxnet_dataload": [194, 211, 221], "onnxrt_dataload": [194, 211, 221], "pytorch_dataload": [194, 211, 221], "tensorflow_dataload": [194, 211, 221, 424], "mxnetdataload": 195, "onnxrtbertdataload": 196, "bert": [196, 199, 200, 215, 478, 480, 483, 493, 500, 508, 511], "varient": 196, "onnxrtdataload": 196, "pytorchdataload": 197, "data_sourc": 198, "matter": [198, 504], "iterablesampl": 198, "squential": 198, "indexdataset": 198, "retriev": [198, 440], "sequentialsampl": 198, "batchsampl": 198, "tfdatadataload": 199, "tensorflow1": 199, "coupl": 199, "satisfi": [199, 491], "usag": [199, 221, 225, 231, 256, 445, 474, 478, 482, 484, 487, 493, 496, 497, 502, 508], "tf1": [199, 495], "although": [199, 506], "tensorflowbertdataload": 199, "tensorflowmodelzoobertdataload": 199, "zoo": [199, 215, 511], "tensorflowdataload": [199, 424], "directli": [199, 225, 229, 251, 493, 502, 503, 507], "pytorchbertdataset": 200, "model_typ": [200, 349, 379, 478], "tensordataset": [200, 478], "link": [200, 474, 478, 511], "huggingfac": [200, 478], "easi": [200, 221, 255, 474, 477, 501, 503, 506], "squad": [200, 215, 226, 227, 229, 478, 493, 508, 511], "distilbert": [200, 478, 511], "xlnet": [200, 478], "xlm": [200, 478, 511], "101": [200, 229, 493, 511], "2043": 200, "2001": 200, "onnxrtbertdataset": 200, "data_dir": [200, 478], "model_name_or_path": [200, 478], "max_seq_length": [200, 215, 478, 508], "128": [200, 203, 204, 215, 478, 503, 508, 511], "do_lower_cas": [200, 214, 215, 478, 508], "mrpc": [200, 229, 478, 493, 511], "dynamic_length": [200, 478], "shortcut": [200, 478], "truncat": [200, 215, 478, 508], "shorter": [200, 215, 478, 508], "lowercas": [200, 478], "qqp": [200, 478, 493, 511], "qnli": [200, 478, 493, 511], "rte": [200, 478, 493, 511], "st": [200, 478, 493], "cola": [200, 478, 493, 511], "mnli": [200, 478, 493, 511], "wnli": [200, 478, 493, 511], "mobilebert": [200, 478, 480, 511], "roberta": [200, 478, 511], "fix": [200, 252, 476, 478, 509], "uncas": [200, 215, 478, 508, 511], "load_and_cache_exampl": 200, "convert_examples_to_featur": [200, 215], "max_length": 200, "label_list": [200, 229], "output_mod": 200, "pad_token": 200, "pad_token_segment_id": 200, "mask_padding_with_zero": 200, "inputfeatur": [200, 215], "input_id": [200, 215, 480, 500], "vocabulari": [200, 214, 215, 508], "attention_mask": [200, 500], "mask": [200, 225, 247, 250, 252, 254, 265, 500, 511], "NOT": [200, 486], "token_type_id": [200, 500], "segment": [200, 223, 225], "portion": 200, "problem": [200, 229, 236, 493, 494], "regress": [200, 476], "seq_length": 200, "to_json_str": 200, "serial": [200, 347, 354, 355, 385, 434, 436, 447, 448, 452, 453, 477], "json": [200, 201, 215, 307, 419, 421, 429, 436, 445, 478, 495, 508], "tensorflowbertdataset": 200, "label_fil": [200, 215, 478, 508], "parsedecodebert": 200, "tensorflowmodelzoobertdataset": [200, 201], "coco": [201, 208, 225, 229, 493], "parsedecodecoco": 201, "cocorecorddataset": 201, "directori": [201, 202, 262, 296, 297, 358, 411, 429, 445, 458, 478, 482, 485, 507], "interleav": [201, 478], "parallel": [201, 478, 500], "cocoraw": [201, 478], "img_dir": [201, 478], "val2017": [201, 478], "anno_dir": [201, 478], "annot": [201, 225, 478, 493], "instances_val2017": [201, 478], "arrang": [201, 202, 205, 478, 500], "jpg": [201, 205, 207, 478], "coconpi": [201, 478], "npy_dir": [201, 478], "npy": [201, 478], "tensorflowdataset": 202, "pytorchdataset": 202, "mxnetdataset": 202, "onnxrtqldataset": 202, "onnxrtitdataset": 202, "IT": [202, 209], "pytorchmxnetwrapdataset": 202, "datafunc": 202, "pytorchmxnetwrapfunct": [202, 215], "framework_dataset": 202, "convent": [202, 225, 480], "imageclassifi": 202, "choos": [202, 474, 490, 505, 509, 510], "download_url": 202, "filenam": [202, 235, 297, 298, 395, 411, 415, 421, 431, 439, 478], "md5": 202, "download": [202, 370, 393, 394, 396, 397, 427, 474, 478, 487, 491, 505], "gen_bar_updat": 202, "progress": [202, 254], "bar": [202, 474], "check_integr": 202, "fpath": 202, "checksum": 202, "calculate_md5": 202, "chunk_siz": 202, "cifar10": [202, 478], "cifar100": [202, 478], "toronto": [202, 478], "edu": [202, 478], "kriz": [202, 478], "cifar": [202, 478, 511], "tar": [202, 478], "gz": [202, 478], "manual": [202, 478], "internet": [202, 474, 478], "put": [202, 478, 480, 500], "again": [202, 478, 487, 504], "load_meta": 202, "meta": 202, "pytorchcifar10": 202, "mxnetcifar10": 202, "tensorflowcifar10": 202, "pytorchcifar100": 202, "mxnetcifar100": 202, "tensorflowcifar100": 202, "mnist": [202, 478, 482], "institut": 202, "standard": [202, 215, 493, 508, 509], "fashionmnist": [202, 478], "npz": [202, 478], "idx1": [202, 478], "ubyt": [202, 478], "idx3": [202, 478], "t10k": [202, 478], "class_to_idx": 202, "read_data": 202, "pytorchmnist": 202, "mxnetmnist": 202, "tensorflowmnist": 202, "pytorchfashionmnist": 202, "mxnetfashionmnist": 202, "tensorflowfashionmnist": 202, "imagefold": [202, 475, 477, 478, 482], "subfold": 202, "belong": [202, 218, 262, 503], "class_1": [202, 478], "xxx": [202, 478, 480], "png": [202, 478], "xxy": [202, 478], "xxz": [202, 478], "class_n": [202, 478], "123": [202, 478, 508], "nsdf3": [202, 478], "asd932_": [202, 478], "mxnetimagefold": 202, "tensorflowimagefold": 202, "tensorflowtfrecorddataset": 202, "tensorflowimagerecord": 202, "000": [202, 478], "001": [202, 478, 482, 510], "099": [202, 478], "tensorflowvocrecord": 202, "pascal": 202, "voc": [202, 229], "2012": 202, "00000": 202, "00004": 202, "00001": 202, "00003": 202, "dummydataset": [203, 204], "127": [203, 204, 478, 503, 511], "stand_norm": [203, 204, 478], "dummy_v2": [204, 478], "sparse_dummy_v2": [204, 478], "input_shap": [204, 378, 381, 390, 478], "label_shap": [204, 478], "sparsedummydataset": 204, "dense_shap": [204, 478], "sparse_ratio": [204, 478], "imagenetraw": [205, 478], "data_path": [205, 478], "image_list": [205, 478], "img1": [205, 478], "img2": [205, 478], "imgx": [205, 478], "val_map": [205, 478], "pytorchimagenetraw": 205, "mxnetimagenetraw": 205, "tensorflowimagenetraw": 205, "inteltensorflow": [205, 207], "bert_dataset": [206, 211, 221], "coco_dataset": [206, 211, 221], "dummy_dataset": [206, 211, 221], "dummy_dataset_v2": [206, 211, 221], "imagenet_dataset": [206, 211, 221], "style_transfer_dataset": [206, 211, 221], "transfer": [207, 216, 221, 478, 480, 481], "styletransferdataset": 207, "content_fold": [207, 478], "style_fold": [207, 478], "crop_ratio": [207, 478], "resize_shap": [207, 478], "image_format": [207, 478], "holder": [207, 478], "labelbalancecocorecordfilt": 208, "balanc": [208, 499], "labelbalancecocorawfilt": 208, "tensorflowfilt": 209, "onnxrtqlfilt": 209, "onnxrtitfilt": 209, "pytorchfilt": 209, "mxnetfilt": 209, "coco_filt": [210, 211, 221], "imagenet_transform": [211, 213, 221], "quantizedinput": [212, 508], "labelshift": [212, 508], "label_shift": [212, 508], "parsedecodeimagenet": [212, 508], "proto": [212, 215, 508], "convert_to_unicod": 214, "unicod": [214, 222], "utf": 214, "load_vocab": 214, "vocab_fil": [214, 215, 508], "convert_by_vocab": 214, "vocab": 214, "whitespace_token": 214, "whitespac": [214, 227], "fulltoken": 214, "tokenzi": 214, "convert_tokens_to_id": 214, "convert_ids_to_token": 214, "basictoken": 214, "punctuat": [214, 222, 227], "wordpiecetoken": 214, "unk_token": 214, "unk": 214, "max_input_chars_per_word": 214, "wordpiec": [214, 215, 508], "greedi": 214, "longest": [214, 215, 508], "unaff": 214, "un": 214, "aff": 214, "concat_gener": 215, "tensorflowtransform": 215, "mxnettransform": 215, "pytorchtransform": 215, "onnxrtqltransform": 215, "onnxrtittransform": 215, "tensorflowwrapfunct": 215, "transform_func": 215, "pytorchmxnettransform": 215, "get_torchvision_map": 215, "interpol": [215, 493, 508], "torchvis": [215, 237], "composetransform": 215, "transform_list": [215, 508], "croptoboundingbox": [215, 508], "offset_height": [215, 508], "offset_width": [215, 508], "target_height": [215, 508], "target_width": [215, 508], "vertic": [215, 250, 508], "coordin": [215, 277, 508], "horizont": [215, 508], "mxnetcroptoboundingbox": 215, "onnxrtcroptoboundingbox": 215, "tensorflowcroptoboundingbox": 215, "resizewithratio": [215, 508], "min_dim": [215, 508], "800": [215, 508], "max_dim": [215, 508], "1365": [215, 508], "constant_valu": 215, "aspect": [215, 508], "side": [215, 474, 478, 508], "exce": [215, 508], "tensorflowresizewithratio": 215, "transpos": [215, 250, 508], "perm": [215, 508], "permut": [215, 508], "tensorflowtranspos": 215, "mxnettranspos": 215, "pytorchtranspos": 215, "randomverticalflip": [215, 508], "tensorflowrandomverticalflip": 215, "randomhorizontalflip": [215, 477, 508], "tensorflowrandomhorizontalflip": 215, "toarrai": [215, 508], "pil": [215, 508], "casttftransform": 215, "castonnxtransform": 215, "castpytorchtransform": 215, "centercroptftransform": 215, "paddedcentercroptransform": 215, "crop_pad": 215, "resizetftransform": 215, "nearest": [215, 508], "bicub": [215, 508], "resizepytorchtransform": 215, "randomcroptftransform": 215, "locat": [215, 475, 482, 503, 505, 508, 509, 510], "randomresizedcroppytorchtransform": 215, "randomresizedcropmxnettransform": 215, "randomresizedcroptftransform": 215, "get_param": 215, "pramet": 215, "normalizetftransform": 215, "rescal": [215, 508], "deviat": [215, 508], "broadcast": [215, 482, 508], "rescalekeraspretraintransform": 215, "rescaletftransform": 215, "rescaletransform": 215, "alignimagechanneltransform": 215, "dim": [215, 246, 277, 508], "w": [215, 237, 500, 508], "pytorchalignimagechannel": 215, "tondarraytransform": 215, "resizemxnettransform": 215, "resizetransform": 215, "cropresizetftransform": 215, "y": [215, 277, 508], "boundari": [215, 347, 508], "area": [215, 225, 493, 508], "pytorchcropresizetransform": 215, "mxnetcropresizetransform": 215, "cropresizetransform": 215, "centercroptransform": 215, "mxnetnormalizetransform": 215, "pytorchnormalizetransform": 215, "normalizetransform": 215, "randomcroptransform": 215, "randomresizedcroptransform": 215, "get_final_text": 215, "pred_text": 215, "orig_text": 215, "squadexampl": 215, "qas_id": 215, "question_text": 215, "doc_token": 215, "orig_answer_text": 215, "start_posit": 215, "end_posit": 215, "is_imposs": 215, "unique_id": 215, "example_index": 215, "doc_span_index": 215, "token_to_orig_map": 215, "token_is_max_context": 215, "input_mask": [215, 480], "segment_id": [215, 480], "read_squad_exampl": 215, "input_fil": 215, "doc_strid": [215, 508], "max_query_length": [215, 508], "output_fn": 215, "inputbatch": 215, "collecttransform": 215, "10833": 215, "tfsquadv1posttransform": 215, "n_best_siz": [215, 508], "384": [215, 508], "max_answer_length": [215, 508], "total": [215, 229, 252, 254, 262, 265, 266, 478, 508], "nbest_predict": [215, 508], "long": [215, 485, 508], "document": [215, 473, 482, 483, 494, 505, 508], "chunk": [215, 508], "much": [215, 216, 221, 480, 483, 487, 500, 508], "process_result": 215, "get_postprocess_result": 215, "tfmodelzoocollecttransform": 215, "tfsquadv1modelzooposttransform": 215, "squadv1": [215, 508], "parsedecodevoctransform": 215, "_epoch_ran": [216, 221], "ran": [216, 221], "eval_frequ": [216, 221], "frequenc": [216, 221, 252, 499, 510], "term": [216, 221, 480, 492, 493, 497, 498, 509], "best_scor": [216, 221], "best_model": [216, 221], "train_cfg": [216, 221, 290], "evaluation_distribut": [216, 221, 243], "train_distribut": [216, 221, 243], "on_post_forward": [216, 221], "init_train_cfg": [216, 221], "create_criterion": [216, 221], "create_optim": [216, 221], "disil": [216, 221], "generate_hook": [216, 221, 243], "torch2onnx": [217, 221, 257], "torch_to_fp32_onnx": [217, 218], "opset_vers": [217, 218, 287], "dynamic_ax": [217, 218], "input_nam": [217, 218, 265], "do_constant_fold": [217, 218], "verbos": [217, 218, 234, 235, 236], "opset": [217, 218], "ax": [217, 218], "torch_to_int8_onnx": [217, 218], "quant_format": [217, 218], "u8s8": [217, 218], "recip": [217, 218, 220, 221, 255, 257, 274, 509], "qdq_op_fp32_bia": [217, 218], "optionl": [217, 218], "qdq_op_int32_bia": [217, 218], "qdq_op_fp32_bias_qdq": [217, 218], "update_weight_bia": 218, "fp32_onnx_path": [218, 219], "wegiht": 218, "set_data_typ": 218, "weight_typ": 218, "activation_typ": 218, "get_node_map": 218, "module_node_map": 218, "get_quantizable_onnx_op": 218, "quantize_nod": 218, "build_scale_map": 218, "int8_scale_info": 218, "scale_zp_dict": 218, "set_scale_info": 218, "int8_onnx_model": 218, "int8_onnx_path": 218, "recalculate_bia": 218, "recalcul": 218, "remove_nodes_by_nam": 218, "sub_graph_with_int32_bia": 218, "a_info": 218, "b_info": 218, "bias_nam": 218, "nodeproto": 218, "_type_": 218, "qdq_fp32_bia": 218, "excut": 218, "qdq_int32_bia": 218, "qdq_fp32_bias_qdq": 218, "onnx2numpy_dtyp": 219, "onnx_node_typ": 219, "dummydataread": 219, "ortq": 219, "dataread": 219, "get_next": 219, "variou": [220, 221, 230, 255, 257, 274, 490, 502], "bring": [220, 221, 255, 257, 274, 476, 503], "vari": [220, 221, 243, 255, 257, 273, 274, 499, 511], "roc": [220, 221, 229, 243, 255, 257, 273, 274], "footprint": [220, 221, 243, 255, 257, 266, 273, 274, 481, 497, 500, 502, 509], "flexibl": [220, 221, 243, 255, 257, 273, 274, 475, 480, 500], "set_config_by_model": [220, 221, 230], "model_obj": [220, 221, 230], "export": [221, 225, 257, 260, 261, 265, 287, 445, 507], "bleu": [221, 223, 228, 257, 493], "bleu_util": [221, 228, 257], "coco_label_map": [221, 228, 257], "coco_tool": [221, 228, 257], "evaluate_squad": [221, 228, 257], "dynast": [221, 239, 257], "dynas_manag": [221, 237, 238, 239], "dynas_predictor": [221, 237, 238, 239], "dynas_search": [221, 238, 239], "dynas_util": [221, 236, 238, 239], "nas_util": [221, 239, 257], "pruning_recip": [221, 257], "tile_pattern": [221, 244, 245], "pytorch_prun": [221, 257], "logger": [221, 248, 257, 288, 291, 427, 431, 435], "prune_util": [221, 248, 257], "pruner": [221, 243, 248, 250, 253, 257, 456, 510], "graph_optim": [221, 230, 257, 304, 370, 405, 409, 410, 427, 435, 450, 487], "mixed_precis": [221, 257, 306, 370, 405, 427, 435, 450], "model_convers": [221, 257], "quantconf": [221, 255, 274], "qfunc": [221, 255], "routinu": [221, 255], "pruningconf": [221, 243], "pruning_func": [221, 243, 500], "generate_prun": [221, 243], "dens": [221, 243, 254, 500, 511], "spars": [221, 243, 252, 478, 500, 501], "graphoptim": [221, 230, 304, 402, 449], "unicoderegex": 222, "hoc": 222, "hack": 222, "recogn": 222, "nondigit_punct_r": 222, "compil": [222, 499], "regular": [222, 251, 500], "preced": 222, "punct_nondigit_r": 222, "symbol_r": 222, "property_char": 222, "join": 222, "bleu_token": 222, "mose": 222, "smt": 222, "mosesdecod": 222, "mteval": 222, "v14": 222, "pl": 222, "l954": 222, "l983": 222, "tensor2tensor": 223, "bleu_hook": 223, "compute_bleu": 223, "reference_corpu": 223, "translation_corpu": 223, "max_ord": 223, "use_bp": 223, "against": 223, "gram": 223, "flag": [223, 287, 455], "third": [225, 477], "parti": [225, 503], "pycocotool": [225, 485, 491], "object_detect": 225, "noth": [225, 439], "jonathanhuang": 225, "image_id": [225, 493], "encod": [225, 234, 508], "groundtruth": 225, "invok": 225, "groundtruth_dict": 225, "exportgroundtruthtococo": 225, "groundtruth_boxes_list": 225, "groundtruth_classes_list": 225, "max_num_class": 225, "output_path": [225, 264, 439, 494], "detections_list": 225, "exportdetectionstococo": 225, "detection_boxes_list": 225, "detection_scores_list": 225, "detection_classes_list": 225, "cocowrapp": 225, "loadannot": 225, "cocoevalwrapp": 225, "agnostic_mod": 225, "computemetr": 225, "detection_typ": 225, "hold": [225, 277, 477], "being": [225, 237, 256, 291, 292, 366], "datastructur": 225, "mscoco": 225, "replic": 225, "extern": [225, 264, 474], "category_id": 225, "iou_typ": 225, "iou_thr": [225, 229, 493], "map_point": [225, 229, 493], "cocoev": 225, "getcategori": 225, "getagnosticmod": 225, "agnost": [225, 480], "getcategoryidlist": 225, "accumul": 225, "include_metrics_per_categori": 225, "all_metrics_per_categori": 225, "summeri": 225, "per_category_ap": 225, "care": 225, "pollut": 225, "mldash": 225, "summary_metr": 225, "iou": [225, 229], "increment": [225, 275, 276, 509], "50iou": 225, "75iou": 225, "75": [225, 511], "pixel": [225, 508], "medium": 225, "larg": [225, 477, 480, 511], "10000": [225, 277], "recal": [225, 227, 229], "bycategori": 225, "supercategori": 225, "performancebycategori": 225, "category_stat": 225, "exportsingleimagegroundtruthtococo": 225, "next_annotation_id": 225, "category_id_set": 225, "groundtruth_box": 225, "groundtruth_class": 225, "groundtruth_mask": 225, "groundtruth_is_crowd": 225, "ingest": 225, "ones": 225, "exportsingleimagedetectionstococo": 225, "uniqu": [225, 237, 256, 277, 336, 337, 503], "assign": [225, 297, 335, 336, 341, 342, 343, 344, 474, 482, 494, 502], "num_gt_box": 225, "num_detect": [225, 229, 493, 510], "image_height": 225, "image_width": 225, "detection_mask": 225, "crowd": 225, "insid": [225, 480, 500], "exportsingleimagedetectionboxestococo": 225, "detection_box": [225, 510], "detection_scor": [225, 510], "detection_class": [225, 510], "exporsingleimagedetectionboxestococo": 225, "exportsingleimagedetectionmaskstococo": 225, "allenai": [226, 227], "bi": [226, 227], "att": [226, 227], "f1_score": [226, 227], "ground_truth": [226, 227], "metric_max_over_ground_truth": [226, 227], "metric_fn": [226, 227], "exact_match_scor": 226, "exact": 226, "articl": [226, 227], "paragraph": [226, 227], "qa": [226, 227], "cantain": [226, 227], "normalize_answ": 227, "extra": 227, "newlin": 227, "tab": [227, 338, 341, 347, 461, 507], "harmon": [227, 229], "answer_start": 227, "177": 227, "denver": 227, "bronco": 227, "nfl": 227, "afc": 227, "bowl": 227, "56be4db0acb8001400a502ec": 227, "percentag": [227, 235, 510], "basemetr": [228, 229, 258], "single_output": [228, 229, 258], "hvd": [228, 229, 258, 482], "sample_weight": [228, 229, 258], "state": [228, 229, 258, 500], "metric_registri": [228, 229, 258], "metric_typ": [228, 229, 258], "decorator_metr": [228, 229, 258], "tensorflowmetr": 229, "pytorchmetr": 229, "mxnetmetr": 229, "onnxrtqlmetr": 229, "onnxrtitmetr": 229, "wrappytorchmetr": 229, "wrapmxnetmetr": 229, "wraponnxrtmetr": 229, "proport": 229, "were": 229, "pred_list": 229, "pytorchloss": 229, "There": [229, 256, 474, 480, 486, 490, 493, 494, 510], "least": [229, 253, 440, 500, 509], "mae": [229, 493], "absolut": [229, 235, 439, 483, 493, 499, 500, 503, 509], "magnitud": [229, 490, 500, 511], "rmse": [229, 235, 493, 509], "squar": [229, 235, 493, 509], "mse": [229, 349, 355, 474, 493, 502, 505], "tensorflowtopk": 229, "among": 229, "most": [229, 474, 494, 500, 503, 509], "outcom": 229, "num_correct": 229, "num_sampl": 229, "generaltopk": 229, "cocomapv2": [229, 493], "anno_path": [229, 493], "map_kei": 229, "detectionboxes_precis": 229, "output_index_map": [229, 493], "tensorflowmap": 229, "tensorflowcocomap": 229, "tensorflowvocmap": 229, "squadf1": [229, 493], "miou": 229, "21": [229, 511], "hist": [229, 291, 292], "onnxrtglu": 229, "dlrm": [229, 511], "conf_fnam": [232, 239], "init_by_cfg": [232, 239], "init_for_search": [233, 239], "init_cfg": [233, 239], "parametermanag": [234, 237], "hot": 234, "pymoo": [234, 236, 237], "process_param_dict": 234, "upper": [234, 236], "vector": [234, 240, 242], "onehot_gener": 234, "in_arrai": 234, "onehot": 234, "unus": 234, "depth": [234, 480, 504], "input_arrai": 234, "elast": 234, "supernetwork": [234, 237], "mapper": [234, 335, 398, 399], "random_sampl": [234, 277], "subnetwork": [234, 237], "trial_limit": 234, "100000": 234, "translate2param": 234, "pymoo_vector": 234, "translate2pymoo": 234, "import_csv": 234, "filepath": 234, "column_nam": 234, "drop_dupl": 234, "panda": 234, "datafram": [234, 262, 265], "purpos": [234, 486, 494, 502, 509], "subnet": [234, 237], "column": [234, 474, 500], "df": [234, 262, 265], "set_se": 234, "create_training_set": 234, "train_with_al": 234, "33": [234, 511], "sklearn": 234, "alpha": 235, "default_alpha": 235, "cost_factor": 235, "default_cost_factor": 235, "max_iter": 235, "default_max_iter": 235, "regressor": 235, "get_paramet": 235, "get_metr": [235, 313], "mape": 235, "kendal": 235, "rank": [235, 482], "correl": 235, "spearman": 235, "searcher": [235, 242], "searchalgomanag": 236, "optuna": 236, "configure_nsga2": 236, "warm_pop": 236, "crossover_prob": 236, "crossover_eta": 236, "mutation_prob": 236, "02": [236, 511], "mutation_eta": 236, "configure_ag": 236, "run_search": 236, "save_histori": 236, "previous": [236, 477], "problemmultiobject": 236, "evaluation_interfac": 236, "evaluationinterfac": [236, 237], "param_count": 236, "param_upperbound": 236, "ofa": [236, 237], "mani": [236, 237, 266, 477, 491, 509, 510], "get_mac": 237, "input_s": 237, "measure_lat": 237, "warmup_step": 237, "measure_step": 237, "resolut": 237, "warm": [237, 266], "runner": 237, "ofarunn": 237, "acc_predictor": 237, "macs_predictor": 237, "latency_predictor": 237, "imagenetpath": 237, "w1": 237, "estimate_accuracy_top1": 237, "subnet_cfg": 237, "estimate_mac": 237, "estimate_lat": 237, "validate_top1": 237, "validate_mac": 237, "flop": 237, "fvcore": 237, "get_subnet": 237, "predictor_mod": 237, "csv_path": 237, "written": 237, "eval_subnet": 237, "clear_csv": 237, "evaluationinterfaceresnet50": 237, "evaluationinterfacemobilenetv3": 237, "get_torchvision_model": 237, "model_nam": [237, 325, 331, 445], "torchvisionrefer": 237, "baselin": [237, 506, 507], "builder": 240, "count_model_paramet": 240, "previou": [240, 474, 505, 507, 509], "params_vec2params_dict": [240, 242], "paras_vec": 240, "metrics_convers": 240, "init_search_cfg": 240, "nas_method": 241, "create_search_space_pool": 241, "find_pareto_front": 241, "n_point": 241, "n_metric": 241, "n_pareto_point": 241, "get_feedback": 242, "feedback": 242, "para_vec": 242, "gridsearch": 242, "whole": [242, 460, 474, 483, 503, 511], "exhaust": [242, 502], "randomsearch": 242, "bayesianoptimizationsearch": 242, "indices2params_vec": 242, "tfpruningcallback": 243, "input_model": [243, 495, 507], "callback": [243, 288, 290, 291, 461], "pure": 243, "s_output": 243, "s_loss": 243, "t_output": 243, "classmethod": [244, 245, 246, 433, 466, 468, 471], "support_pattern": [244, 245, 246], "pattern_registri": 246, "pattern_typ": 246, "patternbas": [246, 247], "mask_shap": [246, 247], "is_contigu": 246, "compute_spars": [246, 247], "abs_sum": 246, "abs_max": 246, "tile": 247, "tilepatternbas": 247, "nxm": [247, 250], "matrix": 247, "repeat_mask": 247, "ori_shap": 247, "tilepattern_1x1": 247, "1x1": [247, 480], "unstructur": [247, 490, 500, 511], "tilepattern_2x2": 247, "2x2": 247, "tilepattern_1x16": 247, "1x16": 247, "tilepattern_4x1": 247, "4x1": [247, 511], "tilepattern_1x2": 247, "1x2": 247, "register_pattern": 250, "registri": [250, 252, 254], "get_pattern": 250, "assertionerror": [250, 251, 252], "unit": [250, 438, 445, 476], "is_glob": 250, "contrast": [250, 508], "get_mask": 250, "target_sparsity_ratio": [250, 252], "pre_mask": 250, "max_sparsity_ratio_per_lay": [250, 252, 502], "layer_nam": 250, "get_masks_glob": 250, "get_mask_singl": 250, "exact_sparsity_ratio": 250, "obtain": [250, 251, 254, 506, 509], "get_block_size_dict": 250, "get_masks_loc": 250, "get_sparsity_ratio": [250, 253], "calul": 250, "ration": 250, "get_pattern_lock_mask": 250, "lock": [250, 490, 498, 500], "patternnxm": 250, "kept": 250, "block_siz": 250, "block_size_1": 250, "block_size_2": 250, "keep_pre_mask": 250, "unchang": 250, "patternninm": 250, "doc": [250, 493, 500], "md": [250, 482], "check_config": 251, "prune_config": 251, "everyth": 251, "reset_non_value_to_default": 251, "undefin": 251, "process_and_check_config": 251, "obejct": 251, "process_config": 251, "parse_to_prun": 251, "parse_not_to_prun": 251, "register_prun": 252, "get_prun": 252, "module_nam": [252, 254, 297, 445], "cuurent": 252, "current_sparsity_ratio": 252, "global_step": 252, "start_step": [252, 502], "end_step": [252, 502], "update_frequency_on_step": [252, 502], "mask_weight": 252, "formal": 252, "local_step": [252, 253], "judg": 252, "on_after_optimizer_step": [252, 253], "on_before_ev": [252, 253], "on_after_ev": [252, 253], "check_is_pruned_step": 252, "update_scor": 252, "magnitudeprun": 252, "snipprun": 252, "snip": [252, 490, 500, 511], "sensit": [252, 490, 500], "arxiv": 252, "1810": 252, "02340": 252, "gradient": [252, 265, 490, 500, 511], "snipmomentumprun": 252, "moreoev": 252, "patternlockprun": 252, "templat": [253, 257, 318, 336, 341, 427, 435, 471, 474, 509], "tree": 253, "nlp": [253, 483, 500, 503], "huggingface_model": 253, "eager": [253, 299, 404, 408, 413, 482, 490, 503, 504, 507, 511], "config_file_path": 253, "pruner_info": 253, "update_items_for_all_prun": 253, "howev": [253, 500], "analys": 253, "elementwise_over_matmul_gemm_conv": 253, "elementwise_over_al": 253, "blockwise_over_matmul_gemm_conv": 253, "register_schedul": 254, "get_schedul": 254, "gradual": [254, 500], "update_sparsity_ratio": 254, "aggressive_ratio": 254, "current_prune_step": 254, "total_prune_step": 254, "oneshotschedul": 254, "aggress": 254, "iterativeschedul": 254, "target_ratio": 254, "server": [256, 257, 370, 377, 426, 427, 434, 435, 442, 445, 456, 458, 460, 474], "seper": [256, 280], "opt_model": [256, 498], "fulli": [256, 503, 509], "saniti": 256, "illeg": 256, "sync": 256, "accordingli": [256, 509], "ux": 257, "config_gener": [257, 370, 427], "configuration_wizard": [257, 370, 427], "db_manag": [257, 370, 427, 464], "diagnosi": [257, 338, 341, 347, 370, 427, 455, 461], "file_brows": [257, 370, 427], "jobs_manag": [257, 370, 427], "model_zoo": [257, 370, 427], "names_mapp": [257, 370, 427], "profil": [257, 307, 323, 330, 341, 344, 346, 347, 370, 378, 386, 427, 428, 438, 443, 460, 465], "manage_workspac": [257, 370, 427], "workload": [257, 302, 303, 304, 306, 308, 311, 336, 341, 401, 415, 422, 427, 429, 435, 444, 445, 460, 463, 465, 466, 467, 468, 501], "executor": [257, 300, 427, 435], "expiring_dict": [257, 427, 435], "github_info": [257, 427, 435], "hw_info": [257, 427, 435], "json_seri": [257, 303, 354, 355, 360, 362, 363, 366, 376, 385, 411, 414, 427, 434, 435, 443, 446, 447, 448, 449, 451, 452, 453, 454, 455], "proc": [257, 427, 435], "yaml_util": [257, 427, 435], "web": [257, 426, 427, 474, 507], "servic": [257, 427, 459, 460, 499], "router": [257, 427, 460], "basemodel": [260, 261, 262, 264, 265], "plai": [260, 261, 264, 265, 500, 501], "role": [260, 261, 264, 265, 500], "itself": [260, 261, 262, 264], "node_typ": [260, 261, 262, 264, 265], "conv0": [260, 261, 262, 264, 265, 507], "get_model_typ": [262, 379], "get_model_fwk_nam": 262, "fwk": 262, "validate_graph_nod": 262, "validate_and_inference_input_output": 262, "input_tensor_nam": 262, "output_tensor_nam": 262, "graph_sess": 262, "graph_def_sess": 262, "frozen_pb_sess": 262, "load_saved_model": 262, "saved_model_tag": 262, "serv": [262, 462, 470], "signatur": 262, "tag": [262, 433, 445, 507], "metagraphdef": 262, "input_tensor": [262, 265], "keras_sess": 262, "slim_sess": 262, "checkpoint_sess": 262, "estimator_sess": 262, "input_fn": 262, "saved_model_sess": 262, "base_model": [262, 264, 265], "tensorflowsavedmodelmodel": 262, "report_spars": [262, 265], "total_spars": [262, 265], "tensorflowcheckpointmodel": 262, "onnxmodel": [264, 381], "find_node_by_nam": 264, "new_nodes_list": 264, "find_nodes_by_initi": 264, "get_scale_zero": 264, "save_model_to_fil": 264, "use_external_data_format": 264, "2gb": 264, "pytorchbasemodel": 265, "get_all_weight_nam": 265, "get_weight": 265, "update_weight": 265, "new_tensor": 265, "update_gradi": 265, "grad_nam": 265, "new_grad": 265, "grad": 265, "prune_weights_": 265, "place": [265, 491, 507], "get_input": 265, "get_gradi": 265, "pytorchmodel": 265, "pytorchfxmodel": 265, "pytorchipexmodel": 265, "objective_registri": 266, "sart": 266, "result_list": 266, "models": [266, 497, 502, 509], "pruner_registri": 272, "calib_func": 274, "eval_metr": 274, "hybirdblock": 274, "paramt": 274, "automixedprecisiontunestrategi": 275, "tunabl": 275, "fallback": [275, 276, 487, 494, 504, 509], "prioriti": [275, 276, 280], "biggest": [275, 276], "impact": [275, 276, 280, 505, 509], "tune_config": [275, 276, 278, 280, 286], "basictunestrategi": 276, "bayesiantunestrategi": 277, "acq_max": 277, "ac": 277, "gp": 277, "y_max": 277, "random_se": [277, 287, 333, 455, 483, 506, 509, 510], "n_warmup": 277, "n_iter": 277, "acquisit": 277, "gaussian": [277, 509], "relev": 277, "acq": 277, "random_st": 277, "randomst": 277, "scipi": 277, "x_max": 277, "targetspac": 277, "pbound": 277, "9527": [277, 483, 506, 509, 510], "keyerror": 277, "amort": 277, "get_target": 277, "num": [277, 297, 493], "_kei": 277, "exhaustivetunestrategi": 278, "msetunestrategi": 280, "distanc": [280, 349, 480], "tuningspac": 280, "mse_metric_gap": [280, 349], "fp32_tensor": [280, 349], "dequantize_tensor": [280, 349], "euclidean": [280, 349, 480], "mse_impact_lst": 280, "best_qmodel": 280, "_summary_": [280, 287], "current_best_model": 280, "randomtunestrategi": 281, "strategy_registri": [286, 509], "compressionmanag": 287, "uesd": 287, "deal": 287, "commpon": 287, "prepare_compress": 287, "compression_manag": 287, "train_loop": 287, "path_to_sav": 287, "target_model_typ": 287, "quant_mod": 287, "workspac": [287, 296, 335, 336, 341, 343, 344, 345, 375, 444, 446, 455, 495], "layerhistogramcollector": [288, 291], "layer_tensor": [288, 291], "include_lay": [288, 291], "diverg": [288, 291, 292, 480], "create_eval_func": 290, "postprocess_cfg": 290, "create_train_func": 290, "Their": 290, "kl_diverg": 291, "expand_quantized_bin": [291, 292], "quantized_bin": [291, 292], "reference_bin": [291, 292], "expand": [291, 292], "bin": [291, 292], "safe_entropi": [291, 292], "reference_distr_p": [291, 292], "p_sum": [291, 292], "candidate_distr_q": [291, 292], "q_sum": [291, 292], "safe": [291, 292, 476], "entropi": [291, 292, 509], "get_threshold": [291, 292], "hist_edg": [291, 292], "quantized_typ": [291, 292], "num_quantized_bin": [291, 292], "255": [291, 292, 503], "historgram": [291, 292], "number_bin": [291, 292], "checkpoint_dir": 296, "history_cfg": 296, "checkpoint": [296, 495], "best_configur": 296, "best_model_weight": 296, "pt": [296, 495, 501, 504], "histori": [296, 334, 341, 343, 347, 400, 415, 464, 509], "snapshot": [296, 347, 464], "cfg_from_fil": 297, "yaml_fil": [297, 478, 482, 493, 497], "lazyimport": 297, "lazi": 297, "till": [297, 509], "later": [297, 487, 507], "get_siz": [297, 445], "equal_dict": 297, "d2": 297, "compare_kei": 297, "ignore_kei": 297, "ignor": [297, 478], "customized_msg": 297, "elaps": 297, "combine_histogram": 297, "old_hist": 297, "arr": 297, "old": [297, 505], "get_tuning_histori": 297, "tuning_history_path": [297, 415], "load_data_from_pkl": 297, "pkl": 297, "dump_data_to_loc": 297, "project_data": [298, 401, 402, 407, 411, 414, 421], "benchmark_data": 298, "workdir": [298, 411, 421, 427, 431, 435, 442], "config_filenam": [298, 411, 421], "configuration_data": [298, 402, 407, 411, 414], "generate_config": [298, 402, 407, 411, 414, 421], "dataloaderinterfac": [298, 411, 421], "dataloader_data": [298, 309, 336, 341, 411, 421], "parse_arg": [299, 404, 408, 413, 419], "benchmark_mod": [299, 438], "set_eager_execut": [299, 404, 408, 413], "request_id": [300, 400, 415, 416, 431, 439], "asd": [300, 416], "benchmark_id": [300, 315, 316, 326], "benchmark_result_upd": 300, "benchmark_result_update_pytorch_script": 300, "neural_coder_perform": 300, "neural_coder_tim": 300, "pytorch_script_bench_optim": 300, "command_line_of_script": 300, "pytorch_script_bench_original_model": 300, "execute_real_benchmark": 300, "project_detail": [300, 331, 400, 416], "benchmark_detail": 300, "benchmark_model": [301, 370, 427], "execute_benchmark": [301, 370, 427], "benchmarkconfiggener": 302, "configgener": [302, 303, 304, 306, 307, 308], "generate_evaluation_config": [302, 304, 306, 308], "generate_accuracy_config": 302, "generate_performance_config": 302, "workload_directori": 303, "configuration_path": 303, "jsonseri": [303, 354, 355, 360, 362, 363, 366, 376, 385, 411, 414, 434, 436, 443, 446, 447, 448, 449, 451, 452, 453, 454, 455], "get_predefined_config_path": [303, 445], "generate_model_config": 303, "generate_dataloader_config": 303, "graphoptimizationconfiggener": 304, "generate_graph_optimization_config": 304, "benchmark_config_gener": [305, 370, 427], "graph_optimization_config_gener": [305, 370, 427], "mixed_precision_config_gener": [305, 370, 427], "profiling_config_gener": [305, 370, 427], "quantization_config_gener": [305, 370, 427], "mixedprecisionconfiggener": 306, "generate_mixed_precision_config": 306, "profilingconfiggener": 307, "quantizationconfiggener": 308, "generate_tuning_config": 308, "generate_quantization_config": 308, "configurationpars": 309, "input_data": 309, "parse_evaluation_data": 309, "evaluation_data": 309, "parse_transform": 309, "transforms_data": [309, 336, 341], "parse_dataload": 309, "parse_metr": 309, "metric_data": 309, "get_param_typ": 309, "param_group": 309, "parse_valu": 309, "required_typ": 309, "parse_list_valu": 309, "parse_multidim_list": 309, "dimension": 309, "normalize_string_list": 309, "string_list": 309, "bracket": 309, "miss": [309, 503], "get_predefined_configur": 311, "update_config_to_machine_specif": 311, "configuration_pars": [312, 370, 427], "get_boundary_nod": [312, 370, 427], "get_configur": [312, 370, 427], "params_feed": [312, 370, 427], "feeder": 313, "get_framework": [313, 384], "get_domain": 313, "domain": [313, 320, 323, 339, 341, 346, 370, 377, 378, 381, 399, 427, 428, 430, 445, 457, 462, 474, 500, 509], "get_model": [313, 384, 466], "get_dataload": 313, "get_transform": 313, "get_object": 313, "get_strategi": 313, "get_quantization_approach": 313, "get_possible_valu": 313, "bench": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 400, 426], "dbmanag": [314, 346], "database_loc": [314, 346], "log_level": [314, 346, 437], "initialize_databas": [314, 346], "create_sqlalchemy_engin": [314, 346], "create_al": [314, 346], "tabl": [314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 346], "project_id": [315, 318, 325, 326, 329, 331, 336, 340, 341], "model_id": [315, 325, 326, 329], "dataset_id": [315, 318, 326, 329, 336, 340, 341], "warmup_iter": 315, "number_of_inst": 315, "cores_per_inst": [315, 446, 475, 477, 487, 502], "execution_command": [315, 326, 329], "benchark": 315, "delete_benchmark": [315, 335, 341], "benchmark_nam": 315, "update_statu": [315, 326, 329], "execution_statu": [315, 326, 329], "executionstatu": [315, 326, 329, 335, 341, 343, 344, 428, 444], "update_dur": [315, 326, 329], "durat": [315, 326, 329, 335, 341, 343, 344, 431, 497, 506], "update_execution_command": [315, 326, 329, 335, 341, 343, 344], "update_log_path": [315, 326, 329, 341, 344], "update_config_path": [315, 326], "update_dataset": [315, 326, 329], "update_batch_s": [315, 326], "update_mod": 315, "update_cores_per_inst": 315, "update_number_of_inst": 315, "clean_statu": [315, 326, 329, 335, 341, 343, 344, 444], "status_to_clean": [315, 326, 329, 335, 341, 343, 344, 444], "build_info": [315, 316, 318, 325, 326, 329, 330, 334], "benchmark_result": [315, 323, 346, 370], "benchmarkresult": [315, 316], "update_accuraci": 316, "update_perform": 316, "list_by_framework": [317, 324, 332], "framework_id": [317, 324, 325, 332, 348], "query_to_list": [317, 324, 332], "dataloaders_queri": 317, "update_param": 317, "dataloader_id": 317, "fill_dictionari": [317, 319, 320, 322, 324, 327, 328, 332], "dataset_nam": [318, 336, 341], "template_path": 318, "delete_dataset": [318, 336, 341], "update_template_path": 318, "get_domain_id": 319, "domain_nam": 319, "domainflavour": [320, 428], "db": [320, 327, 328, 347, 348], "get_domain_flavour_id": 320, "domain_flavour_nam": 320, "flavour": [320, 339, 341, 399, 428], "get_framework_id": 322, "framework_nam": [322, 397, 434], "domain_flavour": [323, 346, 370, 376, 445], "optimization_typ": [323, 326, 346, 370], "profiling_result": [323, 329, 346, 370], "tuning_detail": [323, 326, 346, 370], "tuning_histori": [323, 326, 341, 343, 346, 370, 405, 427], "metrics_queri": 324, "input_nod": 325, "precision_id": [325, 326, 327, 328], "domain_id": [325, 332], "domain_flavour_id": 325, "supports_profil": [325, 378, 386], "supports_graph": [325, 378], "delete_model": [325, 341, 342], "optimization_type_id": 326, "sampling_s": [326, 446, 477, 509, 510], "tuning_details_id": [326, 333], "diagnosis_config": 326, "delete_optim": [326, 341, 343], "optimization_id": [326, 327, 341, 343, 400], "optimization_nam": [326, 327, 340, 341], "update_optimized_model": [326, 341, 343], "optimized_model_id": 326, "update_sampling_s": 326, "update_precis": 326, "update_tuning_detail": 326, "pin_accuracy_benchmark": [326, 341, 343], "pin": [326, 341, 343], "pin_performance_benchmark": [326, 341, 343], "get_optimization_by_project_and_model": 326, "unpin_benchmark": 326, "db_connect": 326, "unpin": 326, "optimizationtyp": [326, 327, 428], "tuningdetail": [326, 333, 414], "tuninghistori": [326, 334, 415], "optimized_model": [326, 487], "get_pinned_benchmark": 326, "list_for_precis": 327, "precision_nam": [327, 328], "get_optimization_type_for_precis": 327, "get_optimization_type_id": 327, "get_optimization_type_by_nam": 327, "get_optimization_type_by_id": 327, "get_precision_id": 328, "get_precision_by_nam": 328, "get_precision_by_id": 328, "num_thread": 329, "delete_profil": [329, 341, 344], "profiling_id": [329, 330, 341, 344, 416], "profiling_nam": 329, "update_num_thread": 329, "profilingresult": [329, 330], "total_execution_tim": 330, "accelerator_execution_tim": 330, "cpu_execution_tim": 330, "op_run": 330, "op_defin": 330, "get_result": 330, "bulk_add": 330, "params_interfac": [330, 335, 336, 338, 340, 341, 342, 343, 344, 346, 370, 427, 464], "profilingresultaddparamsinterfac": [330, 341, 344, 347], "bulk": [330, 341, 344], "delete_result": 330, "delet": [330, 335, 336, 341, 342, 343, 344, 345, 500], "create_project": [331, 340, 341, 345], "delete_project": [331, 341, 345], "project_nam": [331, 336, 341], "get_model_by_nam": 331, "list_project": [331, 341, 345], "update_not": 331, "list_by_domain": 332, "transforms_queri": 332, "accuracy_criterion_typ": 333, "accuracy_criterion_threshold": 333, "exit_polici": [333, 483, 506, 509, 510], "tuning_details_data": 333, "delete_tuning_detail": 333, "update_tuning_histori": 333, "tuning_history_id": 333, "minimal_accuraci": 334, "baseline_accuraci": 334, "baseline_perform": 334, "last_tune_accuraci": 334, "last_tune_perform": 334, "best_tune_accuraci": 334, "best_tune_perform": 334, "benchmarkapiinterfac": [335, 341], "get_benchmark_detail": [335, 341], "list_benchmark": [335, 341], "update_benchmark_accuraci": [335, 341], "update_benchmark_perform": [335, 341], "update_benchmark_statu": [335, 341], "update_benchmark_dur": [335, 341], "update_path": [335, 341, 343], "add_benchmark": [335, 341], "add_result": [335, 341, 344], "edit_benchmark": [335, 341], "parse_benchmark_data": [335, 341], "benchmarkaddparamsinterfac": [335, 341, 347], "parse_benchmark_edit_data": [335, 341], "benchmarkeditparamsinterfac": [335, 341, 347], "before_delete_benchmark_entri": 335, "sqlite3": 335, "db_model": [335, 346, 370, 427], "datasetapiinterfac": [336, 341], "get_dataset_detail": [336, 341], "list_dataset": [336, 341], "add_dataset": [336, 341], "set_template_path": [336, 341], "parsed_dataset_data": [336, 341], "datasetaddparamsinterfac": [336, 341, 347], "check_if_custom_metric_or_dataload": [336, 341], "dataset_data": [336, 341, 401, 402, 407, 411, 414, 447], "generate_custom_templ": [336, 341], "dataloader_path": [336, 341], "generate_templ": [336, 341], "template_typ": [336, 341], "parse_dataset_data": [336, 341], "get_predefined_dataset": [336, 341], "prepare_predefined_dataload": [336, 341], "prepare_predefined_transform": [336, 341], "ordereddict": [336, 341, 446], "set_database_vers": [336, 337], "version_num": [336, 337], "alembic_vers": [336, 337], "initialize_associ": [336, 337], "initialize_precision_optimization_types_associ": [336, 337], "search_in_list_of_dict_for_unique_valu": [336, 337], "list_of_dict": [336, 337], "search_in_list_of_dict": [336, 337], "diagnosisapiinterfac": [338, 341], "get_op_list": [338, 341, 349], "get_op_detail": [338, 341, 349], "generate_optim": [338, 341], "model_wise_param": [338, 341], "parse_optimization_data": [338, 341, 343], "diagnosisoptimizationparamsinterfac": [338, 341, 347], "parse_op_wise_config": [338, 341], "op_wise_param": [338, 341], "parse_wise_paramet": [338, 341], "params_per_typ": [338, 341], "set_op_wise_pattern_precis": [338, 341], "parse_model_wise_config": [338, 341], "dictionariesapiinterfac": [339, 341], "dictonari": [339, 341], "list_domain": [339, 341], "list_domain_flavour": [339, 341], "list_optimization_typ": [339, 341], "list_optimization_types_for_precis": [339, 341], "list_precis": [339, 341], "list_dataload": [339, 341], "list_dataloaders_by_framework": [339, 341], "list_transform": [339, 341], "list_transforms_by_framework": [339, 341], "list_transforms_by_domain": [339, 341], "list_metr": [339, 341], "list_metrics_by_framework": [339, 341], "examplesapiinterfac": [340, 341], "get_optimization_data": [340, 341], "optimizationaddparamsinterfac": [340, 341, 343, 347], "benchmark_api_interfac": [341, 346, 370], "dataset_api_interfac": [341, 346, 370], "diagnosis_api_interfac": [341, 346, 370], "dictionaries_api_interfac": [341, 346, 370], "examples_api_interfac": [341, 346, 370], "model_api_interfac": [341, 346, 370], "optimization_api_interfac": [341, 346, 370], "profiling_api_interfac": [341, 346, 370], "project_api_interfac": [341, 346, 370], "modelapiinterfac": [341, 342], "add_model": [341, 342, 345], "get_model_detail": [341, 342], "list_model": [341, 342, 370, 396, 427], "parse_model_data": [341, 342], "modeladdparamsinterfac": [341, 342, 347], "optimizationapiinterfac": [341, 343], "get_optimization_detail": [341, 343], "list_optim": [341, 343], "update_optimization_statu": [341, 343], "update_optimization_dur": [341, 343], "add_optim": [341, 343], "add_quantization_optim": [341, 343], "optimization_data": [341, 343, 401, 402, 407, 411, 414], "add_standard_optim": [341, 343], "edit_optim": [341, 343], "add_tuning_histori": [341, 343], "parse_tuning_histori": [341, 343], "tuninghistoryinterfac": [341, 343, 347, 464], "parse_optimization_edit_data": [341, 343], "optimizationeditparamsinterfac": [341, 343, 347], "profilingapiinterfac": [341, 344], "get_profiling_detail": [341, 344], "list_profil": [341, 344], "update_profiling_statu": [341, 344], "update_profiling_dur": [341, 344], "add_profil": [341, 344], "edit_profil": [341, 344], "bulk_add_result": [341, 344], "parse_profiling_data": [341, 344], "profilingaddparamsinterfac": [341, 344, 347], "parse_profiling_result_data": [341, 344], "parse_profiling_edit_data": [341, 344], "profilingeditparamsinterfac": [341, 344, 347], "projectapiinterfac": [341, 345], "get_project_detail": [341, 345], "add_dummy_dataset": [341, 345], "update_project_not": [341, 345], "db_oper": [346, 370, 427], "parse_nod": 347, "tuninghistoryiteminterfac": [347, 464], "update_dataloaders_param": 348, "dataloaders_to_upd": 348, "framework_dataloaders_config": 348, "get_framework_dataloaders_config": 348, "get_framework_transforms_config": 348, "get_tensors_info": [349, 378], "load_quantization_config": 349, "calculate_ms": 349, "input_model_tensor": 349, "optimized_model_tensor": 349, "op_detail": [349, 351, 370, 427], "opdetail": [349, 354], "get_histogram_data": 349, "draw": [349, 506, 509], "diagnosisfactori": 350, "get_diagnosi": 350, "onnx_diagnosi": [351, 370, 427], "onnxrt_diagnosi": [351, 352, 370], "tensorflow_diagnosi": [351, 370, 427], "factori": [351, 370, 405, 418, 423, 427, 438], "op_entri": [351, 370, 427], "onnxrtdiagnosi": 353, "onnxrtmodel": [353, 381], "serialization_typ": [354, 355, 385, 434, 436, 447, 448, 452, 453], "oppattern": 354, "pattern_data": 354, "opweight": 354, "weights_data": 354, "opactiv": 354, "op_activ": 354, "opentri": 355, "activation_min": 355, "activation_max": 355, "tensorflowdiagnosi": 357, "tensorflowmodel": [357, 386, 388, 389, 390, 391], "browser": [358, 474], "get_directory_entri": 358, "get_requested_path": 358, "request": [358, 370, 371, 372, 393, 394, 397, 415, 427, 431, 457, 459, 461, 462, 466, 468, 469, 471, 474, 477, 503], "get_non_hidden_directory_entri": 358, "create_dir_entri": 358, "direntri": 358, "create_file_entri": 358, "create_entri": 358, "is_directori": 358, "sort_entri": 358, "should_show_fil": 358, "should_show_only_model_fil": 358, "get_setting_valu": 358, "get_filter_valu": 358, "filter_requested_entri": 358, "filter_nam": 358, "is_directory_entri": 358, "is_model_or_directory_entri": 358, "is_dataset_or_directory_entri": 358, "brows": 359, "filesystem": [359, 445, 470], "attribute_typ": 360, "expanded_group": [361, 364], "edg": [363, 365, 370, 427, 508], "add_edg": 363, "source_id": 363, "target_id": 363, "get_nod": 363, "highlight_pattern": 363, "highlight": [363, 366, 474], "get_target_nod": 363, "reader": [364, 365, 370, 427], "graphread": 364, "find_pattern_in_graph": [364, 461], "displai": [365, 378], "onnxrt_read": [365, 367, 370], "tensorflow_read": [365, 367, 370], "collaps": [365, 370, 427, 474], "graph_read": [365, 370, 427], "groupnod": 366, "group_nam": 366, "onnxrtread": 368, "tensorflowread": 369, "jobs_control_queu": [370, 371, 427], "frozen_pb": [370, 377, 387], "meta_graph": [370, 377, 387], "model_type_gett": [370, 377, 427], "repositori": [370, 375, 377, 427, 433, 489], "download_config": [370, 395, 396, 427], "download_model": [370, 395, 396, 427], "optimize_model": [370, 403, 405, 406, 409], "neural_coder_optim": [370, 405, 427], "tune_model": [370, 405, 412], "execute_optim": [370, 405, 427], "tensorflow_profil": [370, 418, 427], "execute_profil": [370, 418, 427], "profile_model": [370, 418, 420, 424, 427], "job": 371, "_jobscontrolqueu": 372, "queu": 372, "jobsmanag": 372, "_jobsmmanag": 373, "_job": 373, "get_default_path": 375, "shape_elements_ord": [378, 381, 390, 445], "get_input_nod": [378, 388, 389, 390], "get_output_nod": [378, 388, 389, 390], "ensure_supported_path": 378, "get_model_graph": [378, 381, 389, 390, 461], "get_framework_nam": [378, 381, 383, 390], "supports_path": [378, 381, 383, 386, 388, 389, 391], "guard_requirements_instal": [378, 381, 383, 390], "instal": [378, 381, 383, 390, 397, 485, 499], "nc_model_inst": [381, 390], "onnx_model": 381, "filtered_input_nod": 381, "remove_number_of_samples_from_shap": 381, "pytorchscriptmodel": 383, "modelrepositori": 384, "get_framework_from_path": [384, 445], "get_supported_framework": 384, "is_model_path": 384, "trust": [385, 474], "frozenpbmodel": 386, "kerasmodel": 388, "metagraphmodel": 389, "metagraph": 389, "savedmodelmodel": 391, "get_input_shap": 392, "fix_dynamic_shap": 392, "resourc": [395, 480, 500], "download_yaml_config": 395, "model_info": 395, "download_fil": 395, "download_path": 395, "header": [395, 470, 485], "report_progress": 395, "unpack_arch": 395, "archive_path": 395, "unpack": 395, "archiv": 395, "get_yaml_url": 395, "model_src_dir": 395, "yaml_relative_loc": 395, "get_available_model": 397, "check_vers": 397, "framework_vers": 397, "supported_vers": 397, "validate_model_list": 397, "model_list": 397, "get_framework_module_nam": 397, "get_installed_framework": 397, "mappingdirect": 399, "namesmapp": 399, "framework_map": 399, "domain_map": 399, "domain_flavour_map": 399, "precision_map": 399, "map_nam": 399, "parameter_typ": 399, "execute_optimization_pytorch_script": 400, "execute_optimization_regular": 400, "parse_model_data_to_bench_nam": 400, "parse_log": 400, "optimization_detail": 400, "check_if_collect_tuning_histori": 400, "optimizationfactori": 401, "get_optim": 401, "optimization_script": [402, 407, 411, 414], "optimize_graph": [404, 408], "output_graph": [404, 408, 413, 487], "optimize_graph_config": [404, 408], "optimize_pt_script": 410, "output_model_nam": 411, "output_model_dir": 411, "optimizationinterfac": 411, "accuracycriterion": 414, "optimization_workdir": 415, "watcher": 415, "process_succeed": 415, "signal": [415, 445, 483], "was_history_file_chang": 415, "history_file_modification_tim": 415, "send_history_snapshot": 415, "execute_real_profil": 416, "profiling_detail": 416, "profilerfactori": [417, 422], "get_profil": [417, 422], "profiling_data": [417, 421, 422, 424, 443], "load_profiling_detail": 419, "json_path": 419, "config_path": 421, "initialize_graph": 424, "tf_modul": 424, "create_tf_config": 424, "num_warmup": 424, "get_node_by_nam": 424, "convert_nodes_to_list": 424, "build_dataload": 424, "delete_assign": 425, "wsgi": 426, "prepare_environ": 426, "app": [427, 460], "history_snapshot_pars": [427, 460, 465], "request_data_processor": [427, 460, 465], "response_gener": [427, 460, 465, 466, 468, 471], "status": [428, 440, 444], "ensure_workdir_exists_and_writ": 429, "clean_workloads_wip_statu": 429, "wip": 429, "workloads_list": 429, "migrate_databas": 429, "latest": [429, 439, 491, 501, 505], "alemb": [429, 485, 491], "notfoundexcept": [430, 458, 459], "accessdeniedexcept": 430, "deni": 430, "clienterrorexcept": 430, "internalexcept": 430, "workspace_path": [431, 445], "subject": [431, 457, 492], "send_respons": 431, "log_nam": 431, "additional_log_nam": [431, 439], "shell": [431, 439, 507], "process_dur": 431, "call_on": 431, "cwd": [431, 439], "universal_newlin": [431, 439], "startupinfo": [431, 439], "creationflag": [431, 439], "ignore_exit_cod": [431, 439], "pid": [431, 439], "env_arg": 431, "ncprocess": [431, 440], "refresh_workdir": 431, "is_multi_command": 431, "expir": 432, "expiringdictitem": 432, "expires_at": 432, "is_expir": 432, "expiringdict": 432, "initial_valu": 432, "ttl": 432, "120": 432, "userdict": 432, "githubinfo": 433, "hw": 434, "hwinfo": 434, "get_number_of_socket": 434, "get_distribut": 434, "distibut": 434, "get_bios_vers": 434, "bio": [434, 499], "is_turbo_boost_en": 434, "turbo": [434, 499], "boost": [434, 494, 501], "get_kernel_vers": 434, "get_framework_info": 434, "get_framework_dependency_info": 434, "subdepend": 434, "serializ": 436, "serialize_item": 436, "datetim": 436, "throw": 436, "typeerror": 436, "2016": 436, "84913": 436, "08t11": 436, "084913": 436, "change_log_level": 437, "line": [438, 439, 458, 474, 482, 490, 507], "optimizationpars": 438, "performancepars": 438, "update_parti": 438, "parsed_result": 438, "summarize_parti": 438, "summarize_valu": 438, "accuracypars": 438, "benchmarkparserfactori": 438, "get_pars": 438, "profilingpars": 438, "unify_tim": 438, "string_valu": 438, "micro": 438, "125": [438, 511], "6m": 438, "microsecond": 438, "output_dir": 439, "cmd": [439, 487], "docker": 439, "hub": 439, "aibt_tensorflow": 439, "7_3_mkldnn_tensorflow": 439, "111224": 439, "pull_imag": 439, "0c750a01": 439, "90e0": 439, "4aa8": 439, "99fe": 439, "a194d55a2046": 439, "time_start": 439, "2018": 439, "17t14": 439, "47": [439, 511], "352502": 439, "time_stop": 439, "25": [439, 511], "110410": 439, "info_path": 439, "tail": 439, "along": [439, 491], "is_ok": [439, 440], "subprocess": [439, 461], "popen": 439, "remove_log": 439, "properli": 440, "return_code_al": 440, "remove_successful_log": 440, "success": [440, 457, 491], "sent": 443, "throughput": [443, 487], "acc_input_model": 443, "acc_optimized_model": 443, "size_input_model": 443, "size_optimized_model": 443, "path_optimized_model": 443, "optimization_tim": 443, "insert_data": 443, "calculate_throughput": 443, "readi": 443, "ensure_working_path_exist": 444, "clean_log": 444, "workdir_path": 444, "is_hidden": 445, "get_dataset_path": 445, "get_file_extens": 445, "lead": [445, 480, 494, 500], "is_dataset_fil": 445, "normalize_domain": 445, "underscor": 445, "normalize_framework": 445, "normalize_str": 445, "string_to_norm": 445, "get_model_zoo_config_path": 445, "model_dict": 445, "get_model_zoo_model_path": 445, "check_modul": 445, "get_module_vers": 445, "add_unit": 445, "load_model_config": 445, "load_dataloader_config": 445, "load_transforms_config": 445, "load_transforms_filter_config": 445, "meaning": [445, 498], "load_precisions_config": 445, "load_model_wise_param": 445, "load_metrics_config": 445, "get_metrics_dict": 445, "load_help_nc_param": 445, "replace_with_valu": 445, "file_path": 445, "verify_file_path": 445, "determine_ip": 445, "ip": 445, "is_development_env": 445, "nc_mode": 445, "filter_transform": 445, "parse_bool_valu": 445, "release_tag": 445, "get_shape_from_transform": 445, "get_height_width_from_s": 445, "parse_to_string_list": 445, "parse_to_float_list": 445, "export_to_csv": 445, "parse_vers": 445, "string_vers": 445, "remove_dataload": 446, "datalad": 446, "remove_accuracy_metr": 446, "set_evaluation_dataload": 446, "udpat": 446, "set_evaluation_dataset_path": 446, "get_performance_config": 446, "set_performance_cores_per_inst": 446, "get_performance_cores_per_inst": 446, "set_performance_num_of_inst": 446, "num_of_inst": [446, 475, 477, 487, 502], "get_performance_num_of_inst": 446, "set_accuracy_and_performance_batch_s": 446, "set_quantization_dataload": 446, "set_quantization_dataset_path": 446, "set_quantization_batch_s": 446, "set_workspac": [446, 455], "set_accuracy_go": 446, "accuracy_go": 446, "set_accuracy_metr": 446, "set_transform": 446, "process_transform": 446, "set_quantization_approach": 446, "set_input": 446, "set_output": 446, "set_quantization_sampling_s": 446, "set_performance_warmup": 446, "warmup": [446, 502], "set_performance_iter": 446, "set_optimization_precis": 446, "yaml_path": 446, "is_dummi": 447, "labelbal": 447, "set_transforms_from_list": 447, "transforms_list": 447, "set_dataset": 447, "postprocessschema": 448, "set_accuracy_postprocess_transform": 448, "set_precis": [449, 451], "sgdoptim": 453, "adamwoptim": 453, "adamoptim": 453, "crossentropylosscriterion": 453, "sparsecategoricalcrossentropycriterion": 453, "knowledgedistillationlosscriterion": 453, "weightcompressionapproach": 453, "parse_dict_value_to_float": 453, "parse_dict_value_to_int": 453, "wiseconfigdetail": 454, "wiseconfig": 454, "multiobject": 455, "acccriterion": 455, "exitpolici": 455, "set_timeout": 455, "set_max_tri": 455, "max_trial": [455, 483, 509], "trial": [455, 509], "set_performance_onli": 455, "set_random_se": 455, "float_represent": 456, "dumper": 456, "pruner_represent": 456, "outsid": 457, "create_simple_respons": 457, "gui": [457, 458, 462, 474, 490, 491], "messagequeu": 457, "queue": [457, 462], "post_failur": 457, "post_success": 457, "post_error": 457, "wait": 457, "global_config_directori": 458, "set_up": 458, "determine_values_from_environ": 458, "get_command_line_arg": 458, "determine_server_port": 458, "tri": [458, 509], "max_ports_tri": 458, "port_default": 458, "determine_gui_port": 458, "client": [458, 474], "server_port": 458, "unless": [458, 486], "is_port_taken": 458, "determine_log_level": 458, "determine_url_prefix": 458, "get_url": 458, "dump_token_to_fil": 458, "servicenotfoundexcept": 459, "unknown": 459, "connector": 461, "routingdefinit": 461, "rout": 461, "realtimeroutingdefinit": 461, "realtim": 461, "deferredroutingdefinit": 461, "deferredsubprocessroutingdefinit": 461, "spawn": 461, "get_system_info": 461, "endpoint": 462, "run_serv": 462, "webserv": 462, "get_tls_arg": 462, "tl": [462, 474], "block_ifram": 462, "werkzeug": [462, 470], "ifram": 462, "csp": 462, "block_snif": 462, "mime": 462, "snif": 462, "require_api_token": 462, "author": [462, 492], "j": 462, "handle_api_cal": 462, "subpath": 462, "allow_api_cal": 462, "page_not_found": 462, "disable_cach": 462, "build_paramet": 462, "flask": [462, 474], "web_socket_publish": 462, "web_socket": 462, "flask_socketio": 462, "socketio": [462, 474], "benchmarkservic": 463, "workloadservic": [463, 467, 468, 471], "historysnapshotpars": 464, "history_snapshot": 464, "provide_perform": 464, "parse_history_snapshot": 464, "parse_history_item": 464, "history_item": 464, "extract_accuraci": 464, "extract_perform": 464, "modelservic": 466, "optimizationservic": 467, "profilingservic": 468, "generate_csv": 468, "processor": [469, 487, 494, 499, 501, 503, 504, 511], "requestdataprocessor": 469, "get_string_valu": 469, "responsegener": 470, "serve_from_filesystem": 470, "mimetyp": 470, "as_attach": 470, "add_refresh": 470, "refresh_tim": 470, "refresh": 470, "from_except": 470, "get_status_code_for_except": 470, "get_config": 471, "get_code_templ": 471, "get_output": 471, "symmetr": [473, 503, 508], "asymmetr": [473, 503], "conda": [474, 485, 491, 505], "forg": [474, 485, 491], "setup": [474, 486, 491], "sign": [474, 503, 506], "certif": 474, "ui": 474, "5000": 474, "338174d13706855fc6924cec7b3a8ae8": 474, "listen": 474, "firewal": 474, "8080": 474, "cert": 474, "path_to_cert": 474, "crt": 474, "path_to_private_kei": 474, "encrypt": 474, "insecur": 474, "expos": 474, "forfeit": 474, "threat": 474, "button": [474, 490], "pop": 474, "recognit": [474, 482, 507], "finish": [474, 509], "synthet": 474, "plu": 474, "icon": 474, "unfold": 474, "On": [474, 503], "panel": 474, "navig": 474, "trash": 474, "visibl": 474, "cursor": 474, "prompt": [474, 482], "confirm": 474, "revers": 474, "exit": [474, 483, 487, 494, 509, 510], "pencil": 474, "light": [474, 481], "blue": 474, "color": 474, "row": [474, 500], "arrow": 474, "checkbox": 474, "chart": [474, 503, 506, 507], "offer": [474, 478], "conveni": 474, "variat": 474, "yellow": 474, "warn": 474, "remind": 474, "One": [474, 477, 482, 490, 500, 501], "dialog": 474, "cryptographi": 474, "centercrop": [475, 477, 508, 509], "totensor": [475, 477, 508], "485": [475, 477, 511], "456": [475, 477], "406": [475, 477], "enough": [475, 503], "benchmarkconf": 475, "lpot": [475, 487, 501, 505], "pylint": 476, "flake8": 476, "autopep8": 476, "motiv": 476, "explan": 476, "bug": 476, "reproduc": 476, "submit": 476, "page": 476, "intend": 476, "collabor": 476, "adher": 476, "often": [477, 480, 498, 500], "encount": 477, "consum": 477, "lack": 477, "faster": [477, 479, 501, 511], "dataloadermodul": 477, "hard": 477, "treat": 477, "eas": [477, 491, 501], "advantag": [477, 502], "life": 477, "launch": [477, 494], "__next__": 477, "randomresizedcrop": [477, 508], "imagerecordit": 477, "path_imgrec": 477, "label_width": 477, "preprocess_thread": 477, "data_nthread": 477, "data_shap": 477, "label_nam": 477, "rand_crop": 477, "rand_mirror": 477, "shuffle_dataset": 477, "shuffle_chunk_se": 477, "shuffle_se": 477, "data_layer_typ": 477, "combine_mean_std": 477, "helloworld": [478, 508], "ensp": [478, 493, 508], "imagerecord": [478, 482, 510], "image_nam": 478, "cocorecord": 478, "gt": [478, 508], "lt": [478, 499], "float16": 478, "int64": 478, "style_transf": 478, "content": 478, "tfrecorddataset": [478, 509], "aid": 479, "deploy": 479, "infrastructur": 479, "deploi": [480, 509], "power": [480, 499], "mobil": [480, 511], "workflow": [480, 491, 494, 507], "produc": 480, "softmax": 480, "l": [480, 507, 509], "kd": 480, "kullback": 480, "leibler": 480, "patient": 480, "compact": [480, 500], "ia": 480, "attach": 480, "shallow": 480, "deepest": 480, "deeper": 480, "paper": [480, 500], "10006": 480, "distillationconf": 480, "blendcnn": [480, 511], "loss_sum": 480, "iter_bar": 480, "tqdm": 480, "desc": [480, 500], "teacher_logit": 480, "promis": [481, 500], "huge": 481, "bit": [481, 494, 501, 503], "heavi": 481, "booster": 481, "degrad": 481, "retrain": 481, "incorpor": [481, 509], "novel": 481, "builtin": 482, "program": [482, 487, 494], "addition": [482, 509], "enable_eager_execut": 482, "yaml_file_path": 482, "evaluation_result": 482, "evaluation_time_cost": 482, "partit": 482, "distributedsampl": 482, "train_sampl": 482, "train_dataset": 482, "num_replica": 482, "train_kwarg": 482, "adadelta": 482, "distributedoptim": 482, "named_paramet": 482, "broadcast_paramet": 482, "root_rank": 482, "broadcast_optimizer_st": 482, "set_epoch": 482, "batch_idx": 482, "nll_loss": 482, "log_interv": 482, "0f": 482, "tloss": 482, "6f": 482, "dry_run": 482, "test_func": 482, "host": 482, "num_of_process": 482, "002": 482, "ssh": 482, "readm": 482, "exactli": 482, "resnet50_v1": [482, 487], "resizecropimagenet": [482, 508], "realiz": [482, 493, 497, 504, 506], "tow": 482, "situat": 482, "node1": 482, "node2": 482, "TO": 482, "your_node1_nam": 482, "your_node2_nam": 482, "resnet50_fp32_pretrained_model": [482, 487], "nc_resnet50_v1": 482, "factor": [483, 499, 511], "oppos": 483, "entail": 483, "preserv": 483, "post_training_dynamic_qu": [483, 502], "post_training_static_qu": [483, 502, 509], "accuracy_criterion": [483, 497, 502, 506, 509, 510], "rel": [483, 502, 506, 509, 510, 511], "earli": [483, 503, 509, 510], "determinist": [483, 509], "wide": [484, 494, 503], "varieti": [484, 502, 509], "demonstr": [484, 487, 496, 500, 507], "incompat": 485, "88": [485, 506, 511], "80": [485, 507, 511], "pyobject": 485, "reinstal": 485, "importerror": 485, "libgl": 485, "apt": [485, 491], "yum": [485, 491], "opencv": 485, "conflict": 485, "pend": 485, "27": [485, 491, 511], "quick": [486, 510], "friendli": [486, 510], "let": [486, 502, 510], "up1": 486, "up2": 486, "valid_mixed_precis": 486, "concatv2": 486, "maxpool": 486, "avgpool": 486, "per_channel": [486, 509, 510], "per_tensor": [486, 509, 510], "addn": 486, "grappler_optim": 486, "constfold": 486, "debug_stripp": 486, "primarili": 487, "subexpress": 487, "bfloat16": [487, 494, 504], "explicitli": [487, 488], "op_to_stor": 487, "cpx": 487, "clx": 487, "force_bf16": 487, "executable_nc_wrapp": 487, "consequ": [487, 494], "resnet50_measur": 487, "8280": 487, "2021": 487, "165": 487, "139": 487, "567": [487, 511], "sec": [487, 511], "fp32_optimized_model": 487, "3x": 487, "325": 487, "99": [487, 511], "56": [487, 511], "068": 487, "992": 487, "major": [488, 503], "concept": [488, 506], "custom_metr": 488, "refin": 488, "broad": 490, "snippet": 490, "product": [490, 494, 499, 501, 503, 506, 509], "upload": 490, "qlinearop": [490, 503], "qintegerop": [490, 503], "lasso": [490, 500], "plan": [490, 494], "frequent": 491, "ask": 491, "consolid": 491, "streamlin": 491, "scienc": 491, "anaconda": 491, "suit": [491, 507], "esri": 491, "apach": 492, "softwar": [492, 494, 499, 501, 505], "copyright": 492, "mit": 492, "accompani": 492, "wish": 492, "bibtex": 492, "misc": 492, "feng": 492, "tian": 492, "chuanqi": 492, "wang": 492, "guom": 492, "zhang": 492, "penghui": 492, "cheng": 492, "pengxin": 492, "yuan": 492, "haihao": 492, "shen": 492, "jiong": 492, "gong": 492, "titl": 492, "howpublish": 492, "year": 492, "2020": 492, "logo": [492, 499], "atom": 492, "phi": 492, "pentium": 492, "vtune": 492, "corpor": [492, 499], "subsidiari": [492, 499], "brand": [492, 499], "claim": [492, 499], "special": [493, 497], "popularli": 493, "label_map": 493, "decis": 493, "ap": 493, "pr": 493, "curv": 493, "target_boxes_num": 493, "str_label": 493, "int_label": 493, "inturn": 493, "cocomap": 493, "vocmap": 493, "categor": 493, "multiclass": 493, "multilabel": 493, "multi_metr": 493, "higher_is_bett": [493, 497, 510], "newmetr": 493, "reflect": [493, 499, 508], "recent": 494, "growth": 494, "complex": 494, "fp16": [494, 503], "ieee": 494, "half": 494, "sixteen": 494, "bandwidth": 494, "3rd": [494, 501, 503, 504], "gen": [494, 501, 504], "codenam": 494, "avx512": [494, 503], "vcvtne2ps2bf16": 494, "vcvtneps2bf16": 494, "vdpbf16p": 494, "forc": [494, 504], "user_defined_funct": 494, "converted_model": 494, "avx512_bf16": 494, "persist": 495, "gap": 495, "brought": [495, 503], "tf2": 495, "h5": 495, "onnx_ml_pb2": 495, "hybridblock": 495, "0000": 495, "inc_model": 495, "saved_result": 495, "tflite": 496, "multi_object": 497, "peak": 497, "start_tim": 497, "_result_list": 497, "customobj": 497, "simultan": [498, 502], "arbitrari": 498, "gain": [498, 501], "benefit": [498, 500], "Of": 498, "cours": 498, "instanti": 498, "prune_conf": 498, "post_training_quantization_conf": 498, "quantization_aware_training_conf": 498, "configurationintel": 499, "platinum": [499, 511], "8380": [499, 511], "manufactur": 499, "m50cyp2sbstd": 499, "se5c6200": 499, "86b": 499, "0022": 499, "d64": 499, "2105220049": 499, "microcod": 499, "0xd0002b1": 499, "30ghz": 499, "3ghz": 499, "40": [499, 510, 511], "perf": 499, "256gb": 499, "16x16gb": 499, "ddr4": 499, "3200mt": 499, "nic": 499, "ethernet": 499, "10g": 499, "x550t": 499, "drive": 499, "1x": 499, "intel_ssdsc2kw01": 499, "953": 499, "9g": 499, "ct1000mx500ssd1": 499, "931": 499, "5g": 499, "publicli": 499, "degre": 499, "mark": 499, "trademark": 499, "briefli": 500, "maxim": [500, 509], "art": 500, "increasingli": 500, "crucial": 500, "rule": 500, "salient": 500, "nonzero": 500, "irregular": 500, "anywher": 500, "2in4": 500, "amper": 500, "gemm": 500, "ic": [500, 501], "oc": 500, "kh": 500, "kw": 500, "examin": 500, "lowest": 500, "head": 500, "fastform": 500, "formula": 500, "caus": 500, "num_train_epoch": 500, "pbar": 500, "progressbar": 500, "n_total": 500, "n_gpu": 500, "gradient_accumulation_step": 500, "clip_grad_norm_": 500, "max_grad_norm": 500, "rate": [500, 503], "cv": 500, "pat": 501, "keynot": 501, "intelon": 501, "sep": 501, "alibaba": 501, "chines": 501, "grain": 501, "aug": 501, "purif": 501, "sacrif": 501, "jun": 501, "partner": 501, "democrat": 501, "apr": 501, "ecosystem": 501, "mar": 501, "feb": 501, "sigopt": 501, "jan": 501, "tutori": 501, "bilibili": 501, "ml": 501, "doubl": 501, "mlperf": 501, "reconstruct": 501, "abound": 501, "cern": 501, "gan": 501, "3dgan": 501, "4th": 501, "iml": 501, "workshop": 501, "highli": 501, "intelcaff": 501, "aris": 502, "tell": 502, "henc": 502, "quant_aware_train": 502, "op_type_list": 502, "use_bf16": [502, 504], "weight_compress": [502, 510], "initial_spars": [502, 510], "target_spars": [502, 510], "98": [502, 511], "prune_typ": [502, 510], "basic_magnitud": [502, 510], "start_epoch": [502, 510], "end_epoch": [502, 510], "update_frequ": 502, "prune_domain": 502, "tile_pattern_1x1": 502, "inter_num_of_thread": 502, "intra_num_of_thread": 502, "graph_optimization_level": 502, "disable_al": 502, "veri": [503, 509], "invent": 503, "int4": 503, "cost": 503, "theoret": 503, "affin": 503, "zeropoint": 503, "overflow": 503, "solv": [503, 505], "unseen": 503, "peopl": 503, "emul": 503, "pain": 503, "lossi": 503, "understand": [503, 507], "philosophi": 503, "val_dataset": 503, "val_dataload": 503, "worker": 503, "ping_memori": 503, "enhanc": 504, "cast": [504, 508], "bf16wrapper": 504, "retrac": 504, "site": 505, "assist": 505, "comparison": [505, 507], "sed": 505, "your_script": 505, "backbon": 506, "interact": 506, "mechan": 506, "sigopt_api_token": [506, 509], "sigopt_project_id": [506, 509], "sigopt_experiment_id": 506, "nc": [506, 509], "login": 506, "certain": 506, "suffici": 506, "ordinari": 506, "capac": 506, "sigopt_experiment_nam": [506, 509], "receiv": 506, "analysi": 506, "8266": 506, "8372": 506, "2132": 506, "83": [506, 511], "7495": 506, "8299": 506, "8294": 506, "85": [506, 511], "0837": 506, "8291": 506, "4469": 506, "visual": [507, 509], "discov": 507, "why": 507, "valuabl": 507, "instrument": 507, "writer": 507, "_pre_eval_hook": 507, "submodul": 507, "whitelist": 507, "_recordingobserv": 507, "output_tensors_dict": 507, "current_it": 507, "get_tensor_valu": 507, "_observer_forward_hook": 507, "_add_observer_": 507, "named_children": 507, "leaf": 507, "add_modul": 507, "register_forward_hook": 507, "dump_tim": 507, "summarywrit": 507, "_acc": 507, "tune_": 507, "add_graph": 507, "get_observer_dict": 507, "observer_dict": 507, "is_quant": 507, "add_histogram": 507, "bind_al": 507, "logdir_spec": 507, "tune_0_acc0": 507, "tune_1": 507, "tune_1_acc0": 507, "79": [507, 511], "image_recognit": 507, "run_tuning_dump_tensor": 507, "sh": 507, "four": 507, "baseline_acc_0": 507, "776": 507, "tune_1_acc_0": 507, "095": 507, "runs_v3": 507, "inceptionv3": 507, "v0": 507, "cg": 507, "op_wis": [507, 509, 510], "bash": 507, "run_tun": 507, "topologi": 507, "inception_v3": 507, "dataset_loc": 507, "inceptionv3_fp32_pretrained_model": 507, "output_model": 507, "nc_inceptionv3": 507, "inceptionv3_dump_tensor": 507, "poor": 507, "disappear": 507, "randomcrop": 508, "cropres": 508, "decodeimag": 508, "jpeg": 508, "encodejp": 508, "alignimagechannel": 508, "68": [508, 511], "116": 508, "78": [508, 511], "103": 508, "94": [508, 511], "017": 508, "bilinearimagenet": [508, 510], "topilimag": 508, "padding_mod": 508, "border": 508, "colorjitt": 508, "bright": 508, "satur": 508, "hue": 508, "jitter": 508, "tondarrai": 508, "max_trail": 509, "scale_propagation_max_pool": 509, "scale_propagation_concat": 509, "first_conv_or_matmul_quant": 509, "2000": 509, "tf_record": 509, "model_wis": [509, 510], "conv1": [509, 510], "pool1": 509, "conv2": 509, "guarante": 509, "classic": 509, "black": 509, "come": 509, "discret": 509, "compli": 509, "posterior": 509, "focu": 509, "short": 509, "never": 509, "loglevel": 509, "endlessli": 509, "idea": 509, "primari": 509, "smbo": 509, "hyperparamet": 509, "appl": 509, "surrog": 509, "quantil": 509, "x1": 509, "x2": 509, "densiti": 509, "parzen": 509, "greatest": 509, "hour": 509, "dai": 509, "perspect": 509, "abctunestrategi": 509, "mobilenet_v1": 510, "onnxrt_integ": 510, "onnxrt_qlinear": 510, "image_tensor": 510, "subsect": 510, "hyper": 510, "06": [510, 511], "beta_1": 510, "beta_2": 510, "999": 510, "epsilon": 510, "sparsecategoricalcrossentropi": 510, "reduct": 510, "sum_over_batch_s": 510, "from_logit": 510, "54": [510, 511], "19": [510, 511], "90": [510, 511], "nesterov": 510, "weight_decai": 510, "overal": 510, "ye": 511, "rnn": 511, "unet": 511, "09": 511, "performancethroughput": 511, "efficientnet": 511, "91": 511, "43": 511, "69": 511, "32x": 511, "cnn": 511, "incept": 511, "37": 511, "65": 511, "38": 511, "77": 511, "53": 511, "57x": 511, "46": 511, "61": 511, "58x": 511, "resnet101": 511, "39": 511, "63": 511, "11x": 511, "51x": 511, "26": 511, "59": 511, "23": 511, "06x": 511, "25x": 511, "70": 511, "44": 511, "00": 511, "163": 511, "133": 511, "22x": 511, "73": 511, "97": 511, "49": 511, "111": 511, "20x": 511, "v3": 511, "43x": 511, "v4": 511, "18": 511, "53x": 511, "36": 511, "33x": 511, "44x": 511, "374": 511, "226": 511, "66x": 511, "92": 511, "41x": 511, "fashion": 511, "359": 511, "244": 511, "47x": 511, "172": 511, "66": 511, "98x": 511, "153": 511, "76x": 511, "151": 511, "112": 511, "35x": 511, "26x": 511, "72": 511, "56x": 511, "82": 511, "93x": 511, "vgg16": 511, "89": 511, "178": 511, "14x": 511, "vgg19": 511, "156": 511, "18x": 511, "albert": 511, "23x": 511, "barthez": 511, "81": 511, "86": 511, "82x": 511, "203": 511, "01x": 511, "216": 511, "102": 511, "10x": 511, "sst2": 511, "218": 511, "stsb": 511, "57": 511, "48": 511, "49x": 511, "93": 511, "70x": 511, "50x": 511, "40x": 511, "3878": 511, "3717": 511, "04x": 511, "camembert": 511, "188": 511, "91x": 511, "ctrl": 511, "deberta": 511, "124": 511, "81x": 511, "347": 511, "73x": 511, "382": 511, "198": 511, "flaubert": 511, "561": 511, "35": 511, "370": 511, "52x": 511, "hubert": 511, "84": 511, "36x": 511, "409": 511, "181": 511, "longform": 511, "28x": 511, "mbart": 511, "16x": 511, "639": 511, "490": 511, "31x": 511, "lvwerra": 511, "pegasu": 511, "samsum": 511, "19x": 511, "peleenet": 511, "419": 511, "316": 511, "resnet18": 511, "686": 511, "332": 511, "07x": 511, "611": 511, "333": 511, "83x": 511, "327": 511, "162": 511, "resnext101_32x8d": 511, "175": 511, "88x": 511, "197": 511, "99x": 511, "se_resnext50_32x4d": 511, "308": 511, "144": 511, "13x": 511, "squeezebert": 511, "186": 511, "155": 511, "78x": 511, "transfo": 511, "xl": 511, "37x": 511, "wave2vec2": 511, "60": 511, "58": 511, "21x": 511, "114": 511, "15x": 511, "yolo": 511, "29x": 511, "690": 511, "330": 511, "09x": 511, "614": 511, "334": 511, "84x": 511, "54x": 511, "410": 511, "168": 511, "finetun": 511, "resnext101_32x16d_wsl": 511, "1189": 511, "680": 511, "75x": 511, "677": 511, "381": 511, "59x": 511, "alexnet": 511, "960": 511, "469": 511, "17": 511, "05x": 511, "962": 511, "466": 511, "arcfac": 511, "235": 511, "130": 511, "294": 511, "34x": 511, "604": 511, "51": 511, "80x": 511, "caffenet": 511, "1501": 511, "536": 511, "1493": 511, "533": 511, "1372": 511, "541": 511, "480": 511, "1250": 511, "753": 511, "1130": 511, "748": 511, "emot": 511, "ferplu": 511, "336": 511, "65x": 511, "fcn": 511, "googlenet": 511, "740": 511, "587": 511, "770": 511, "824": 511, "601": 511, "819": 511, "597": 511, "45x": 511, "613": 511, "506": 511, "2454": 511, "1543": 511, "2164": 511, "1564": 511, "38x": 511, "2147": 511, "1046": 511, "1877": 511, "1054": 511, "mobilenetv2": 511, "2751": 511, "1797": 511, "2656": 511, "1835": 511, "7615": 511, "7646": 511, "764": 511, "901": 511, "434": 511, "141": 511, "7614": 511, "575": 511, "952": 511, "433": 511, "7226": 511, "7229": 511, "761": 511, "432": 511, "615": 511, "722": 511, "032": 511, "894": 511, "885": 511, "454": 511, "95x": 511, "603": 511, "455": 511, "644": 511, "636": 511, "254": 511, "791": 511, "shufflenet": 511, "2298": 511, "55": 511, "1480": 511, "55x": 511, "1951": 511, "1490": 511, "squeezenet": 511, "2588": 511, "1605": 511, "61x": 511, "2566": 511, "1936": 511, "725": 511, "570": 511, "27x": 511, "666": 511, "539": 511, "641": 511, "519": 511, "633": 511, "492": 511, "542": 511, "401": 511, "68x": 511, "tini": 511, "yolov3": 511, "648": 511, "518": 511, "221": 511, "319": 511, "307": 511, "30x": 511, "yolov4": 511, "zfnet": 511, "459": 511, "261": 511, "460": 511, "264": 511, "74x": 511, "441": 511, "337": 511, "272": 511, "211": 511, "152": 511, "423": 511, "180": 511, "311": 511, "69x": 511, "taskdataset": 511, "accuracyspars": 511, "ratiospars": 511, "commentsbalanc": 511, "unbalanc": 511, "classificationimagenet": 511, "76top": 511, "13top": 511, "magnitudepost": 511, "magnitudequant": 511, "answeringsquad": 511, "34f1": 511, "2x1": 511, "lassounbalanc": 511, "classificationmnli": 511, "mm": 511, "lockbalanc": 511, "classificationsst": 511, "32accuraci": 511, "sensitivitybalanc": 511, "classificationqqp": 511, "classificationqnli": 511, "54accuraci": 511, "em": 511, "87f1": 511, "momentumunbalanc": 511, "momentumbalanc": 511, "classificationmrpc": 511, "52f1": 511, "61accuraci": 511, "7965": 511, "wideresnet40": 511, "9522": 511, "8178": 511, "0213": 511, "5494": 511, "7153": 511, "5540": 511, "0046": 511, "vgg": 511, "7022": 511, "7415": 511, "7025": 511, "0003": 511, "6739": 511, "7399": 511, "6845": 511, "0106": 511, "7034": 511, "8382": 511, "bilstm": 511, "sst": 511, "8314": 511, "9403": 511, "9048": 511, "0734": 511, "7323": 511, "8256": 511, "8084": 511, "8814": 511, "7442": 511, "8371": 511, "0119": 511, "0115": 511, "tinybert": 511, "8018": 511, "8044": 511, "8363": 511, "8411": 511, "8025": 511, "8074": 511, "0007": 511, "0030": 511, "8626": 511, "8213": 511, "9091": 511, "8782": 511, "8684": 511, "8259": 511, "0058": 511, "distilroberta": 511, "6057": 511, "6455": 511, "6187": 511, "0130": 511, "c6i": 511, "2xlarg": 511, "c6a": 511, "c6g": 511, "a100cuda": 511}, "objects": {"": [[31, 0, 0, "-", "6ece06672ed3_v1_14"], [32, 0, 0, "-", "6f0d0f71d92e_v1_13"], [33, 0, 0, "-", "9e89549a08c8_v1_11"], [34, 0, 0, "-", "block_mask"], [35, 0, 0, "-", "env"], [257, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[31, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [31, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[35, 1, 1, "", "run_migrations_offline"], [35, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[257, 2, 1, "", "Benchmark"], [257, 2, 1, "", "DistillationConfig"], [257, 2, 1, "", "Pruning"], [257, 2, 1, "", "Quantization"], [37, 0, 0, "-", "adaptor"], [160, 0, 0, "-", "algorithm"], [162, 0, 0, "-", "benchmark"], [165, 0, 0, "-", "conf"], [167, 0, 0, "-", "config"], [168, 0, 0, "-", "contrib"], [176, 0, 0, "-", "data"], [221, 0, 0, "-", "experimental"], [258, 0, 0, "-", "metric"], [259, 0, 0, "-", "mix_precision"], [261, 0, 0, "-", "model"], [266, 0, 0, "-", "objective"], [269, 0, 0, "-", "pruners"], [273, 0, 0, "-", "pruning"], [274, 0, 0, "-", "quantization"], [279, 0, 0, "-", "strategy"], [287, 0, 0, "-", "training"], [291, 0, 0, "-", "utils"], [427, 0, 0, "-", "ux"], [472, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[257, 3, 1, "", "on_epoch_begin"], [257, 3, 1, "", "on_epoch_end"], [257, 3, 1, "", "on_step_begin"], [257, 3, 1, "", "on_step_end"]], "neural_compressor.adaptor": [[36, 0, 0, "-", "adaptor"], [38, 0, 0, "-", "mxnet"], [39, 0, 0, "-", "mxnet_utils"], [41, 0, 0, "-", "onnxrt"], [43, 0, 0, "-", "ox_utils"], [66, 0, 0, "-", "pytorch"], [67, 0, 0, "-", "query"], [68, 0, 0, "-", "tensorflow"], [128, 0, 0, "-", "tf_utils"], [154, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[36, 2, 1, "", "Adaptor"], [36, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[36, 3, 1, "", "convert"], [36, 3, 1, "", "evaluate"], [36, 3, 1, "", "inspect_tensor"], [36, 3, 1, "", "quantize"], [36, 3, 1, "", "quantize_input"], [36, 3, 1, "", "query_fused_patterns"], [36, 3, 1, "", "query_fw_capability"], [36, 3, 1, "", "save"], [36, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet": [[38, 2, 1, "", "MXNetQuery"], [38, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[38, 3, 1, "", "get_fuse_patterns"], [38, 3, 1, "", "get_mixed_precision_combination"], [38, 3, 1, "", "get_op_types"], [38, 3, 1, "", "get_precisions"], [38, 3, 1, "", "get_quantization_capability"], [38, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[38, 3, 1, "", "evaluate"], [38, 3, 1, "", "inspect_tensor"], [38, 3, 1, "", "quantize"], [38, 3, 1, "", "query_fw_capability"], [38, 3, 1, "", "recover_tuned_model"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[40, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, 2, 1, "", "CalibCollector"], [40, 2, 1, "", "OpType"], [40, 2, 1, "", "TensorCollector"], [40, 1, 1, "", "calib_model"], [40, 1, 1, "", "check_mx_version"], [40, 1, 1, "", "distribute_calib_tensors"], [40, 1, 1, "", "ensure_list"], [40, 1, 1, "", "fuse"], [40, 1, 1, "", "is_model_quantized"], [40, 1, 1, "", "isiterable"], [40, 1, 1, "", "make_module"], [40, 1, 1, "", "make_nc_model"], [40, 1, 1, "", "make_symbol_block"], [40, 1, 1, "", "parse_tune_config"], [40, 1, 1, "", "prepare_model_data"], [40, 1, 1, "", "quantize_sym_model"], [40, 1, 1, "", "query_quantizable_nodes"], [40, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[41, 2, 1, "", "ONNXRTAdaptor"], [41, 2, 1, "", "ONNXRTQuery"], [41, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [41, 2, 1, "", "ONNXRT_QDQAdaptor"], [41, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [41, 2, 1, "", "ONNXRT_QOperatorAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor": [[41, 3, 1, "", "evaluate"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[41, 3, 1, "", "get_graph_optimization"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_precisions"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.ox_utils": [[42, 0, 0, "-", "calibration"], [55, 0, 0, "-", "operators"], [64, 0, 0, "-", "quantizer"], [65, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[42, 3, 1, "", "augment_graph"], [42, 3, 1, "", "calculate_quantization_params"], [42, 3, 1, "", "calculate_scale_zeropoint"], [42, 3, 1, "", "dump_calibration"], [42, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[44, 0, 0, "-", "activation"], [45, 0, 0, "-", "argmax"], [46, 0, 0, "-", "attention"], [47, 0, 0, "-", "binary_op"], [48, 0, 0, "-", "concat"], [49, 0, 0, "-", "conv"], [50, 0, 0, "-", "direct_q8"], [51, 0, 0, "-", "embed_layernorm"], [52, 0, 0, "-", "gather"], [53, 0, 0, "-", "gavgpool"], [54, 0, 0, "-", "gemm"], [56, 0, 0, "-", "lstm"], [57, 0, 0, "-", "matmul"], [58, 0, 0, "-", "maxpool"], [59, 0, 0, "-", "ops"], [60, 0, 0, "-", "pad"], [61, 0, 0, "-", "pooling"], [62, 0, 0, "-", "resize"], [63, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, 1, 1, "", "op_registry"]], "neural_compressor.adaptor.ox_utils.util": [[65, 2, 1, "", "QuantFormat"], [65, 2, 1, "", "QuantType"], [65, 2, 1, "", "QuantizationMode"], [65, 2, 1, "", "QuantizedInitializer"], [65, 2, 1, "", "QuantizedValue"], [65, 2, 1, "", "QuantizedValueType"], [65, 1, 1, "", "attribute_to_kwarg"], [65, 1, 1, "", "cast_tensor"], [65, 1, 1, "", "find_by_name"], [65, 1, 1, "", "quantize_data"], [65, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[66, 2, 1, "", "PyTorchAdaptor"], [66, 2, 1, "", "PyTorchQuery"], [66, 2, 1, "", "PyTorch_FXAdaptor"], [66, 2, 1, "", "PyTorch_IPEXAdaptor"], [66, 2, 1, "", "TemplateAdaptor"], [66, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "get_non_quant_modules"], [66, 3, 1, "", "inspect_tensor"], [66, 3, 1, "", "is_fused_child"], [66, 3, 1, "", "is_fused_op"], [66, 3, 1, "", "is_last_fused_child"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "save"], [66, 3, 1, "", "set_tensor"], [66, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[66, 3, 1, "", "get_op_types"], [66, 3, 1, "", "get_op_types_by_precision"], [66, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[66, 3, 1, "", "convert_sub_graph"], [66, 3, 1, "", "evaluate"], [66, 3, 1, "", "fuse_fx_model"], [66, 3, 1, "", "prepare_sub_graph"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "inspect_tensor"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[66, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[67, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[67, 3, 1, "", "get_fuse_patterns"], [67, 3, 1, "", "get_mixed_precision_combination"], [67, 3, 1, "", "get_op_types"], [67, 3, 1, "", "get_precisions"], [67, 3, 1, "", "get_quantization_capability"], [67, 3, 1, "", "get_version"], [67, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[68, 2, 1, "", "TensorFlowAdaptor"], [68, 2, 1, "", "TensorflowQuery"], [68, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[68, 3, 1, "", "convert"], [68, 3, 1, "", "evaluate"], [68, 3, 1, "", "fused_node_mapping"], [68, 3, 1, "", "get_optype_wise_ability"], [68, 3, 1, "", "inspect_activation"], [68, 3, 1, "", "inspect_tensor"], [68, 3, 1, "", "inspect_weight_and_bias"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "quantize_input"], [68, 3, 1, "", "query_fw_capability"], [68, 3, 1, "", "recover_tuned_model"], [68, 3, 1, "", "save"], [68, 3, 1, "", "set_tensor"], [68, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[68, 3, 1, "", "generate_internal_patterns"], [68, 3, 1, "", "get_eightbit_patterns"], [68, 3, 1, "", "get_fuse_patterns"], [68, 3, 1, "", "get_mixed_precision_combination"], [68, 3, 1, "", "get_op_types"], [68, 3, 1, "", "get_op_types_by_precision"], [68, 3, 1, "", "get_precisions"], [68, 3, 1, "", "get_quantization_capability"], [68, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[68, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[69, 0, 0, "-", "graph_converter"], [70, 0, 0, "-", "graph_converter_without_calib"], [109, 0, 0, "-", "graph_rewriter"], [127, 0, 0, "-", "graph_util"], [129, 0, 0, "-", "quantize_graph"], [146, 0, 0, "-", "quantize_graph_common"], [149, 0, 0, "-", "transform_graph"], [152, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[72, 0, 0, "-", "bf16"], [97, 0, 0, "-", "generic"], [108, 0, 0, "-", "graph_base"], [117, 0, 0, "-", "int8"], [123, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[71, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[73, 0, 0, "-", "convert_add_to_biasadd"], [74, 0, 0, "-", "convert_layout"], [75, 0, 0, "-", "convert_leakyrelu"], [76, 0, 0, "-", "convert_nan_to_random"], [77, 0, 0, "-", "convert_placeholder_to_const"], [78, 0, 0, "-", "dequantize_cast_optimizer"], [79, 0, 0, "-", "dilated_contraction"], [80, 0, 0, "-", "dummy_biasadd"], [81, 0, 0, "-", "expanddims_optimizer"], [82, 0, 0, "-", "fetch_weight_from_reshape"], [83, 0, 0, "-", "fold_batch_norm"], [84, 0, 0, "-", "fold_constant"], [85, 0, 0, "-", "fuse_biasadd_add"], [86, 0, 0, "-", "fuse_column_wise_mul"], [87, 0, 0, "-", "fuse_conv_with_math"], [88, 0, 0, "-", "fuse_decomposed_bn"], [89, 0, 0, "-", "fuse_decomposed_in"], [90, 0, 0, "-", "fuse_gelu"], [91, 0, 0, "-", "fuse_layer_norm"], [92, 0, 0, "-", "fuse_pad_with_conv"], [93, 0, 0, "-", "fuse_pad_with_fp32_conv"], [94, 0, 0, "-", "fuse_reshape_transpose"], [95, 0, 0, "-", "graph_cse_optimizer"], [96, 0, 0, "-", "grappler_pass"], [98, 0, 0, "-", "insert_print_node"], [99, 0, 0, "-", "move_squeeze_after_relu"], [100, 0, 0, "-", "pre_optimize"], [101, 0, 0, "-", "remove_training_nodes"], [102, 0, 0, "-", "rename_batch_norm"], [103, 0, 0, "-", "split_shared_input"], [104, 0, 0, "-", "strip_equivalent_nodes"], [105, 0, 0, "-", "strip_unused_nodes"], [106, 0, 0, "-", "switch_optimizer"], [107, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[73, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[77, 3, 1, "", "do_transformation"], [77, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[83, 3, 1, "", "do_transformation"], [83, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[84, 3, 1, "", "check_all_folded"], [84, 3, 1, "", "check_const_inputs"], [84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, 1, 1, "", "get_const_dim_count"], [88, 1, 1, "", "node_from_map"], [88, 1, 1, "", "node_name_from_input"], [88, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, 1, 1, "", "get_const_dim_count"], [89, 1, 1, "", "node_from_map"], [89, 1, 1, "", "node_name_from_input"], [89, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, 2, 1, "", "FuseLayerNormOptimizer"], [91, 1, 1, "", "node_from_map"], [91, 1, 1, "", "node_name_from_input"], [91, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[110, 0, 0, "-", "freeze_fake_quant"], [111, 0, 0, "-", "freeze_value"], [112, 0, 0, "-", "freeze_value_without_calib"], [113, 0, 0, "-", "fuse_conv_redundant_dequantize"], [114, 0, 0, "-", "fuse_conv_requantize"], [115, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [116, 0, 0, "-", "fuse_matmul_requantize"], [118, 0, 0, "-", "meta_op_optimizer"], [119, 0, 0, "-", "post_hostconst_converter"], [120, 0, 0, "-", "post_quantized_op_cse"], [121, 0, 0, "-", "rnn_convert"], [122, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[111, 3, 1, "", "do_transformation"], [111, 3, 1, "", "generate_output_graph"], [111, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[112, 3, 1, "", "generate_output_graph"], [112, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [116, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [116, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [116, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[124, 0, 0, "-", "insert_qdq_pattern"], [125, 0, 0, "-", "merge_duplicated_qdq"], [126, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, 2, 1, "", "GraphAnalyzer"], [127, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[127, 3, 1, "", "add_node"], [127, 3, 1, "", "dump_graph"], [127, 3, 1, "", "get_graph_input_output"], [127, 4, 1, "", "graph"], [127, 3, 1, "", "has_positive_input"], [127, 3, 1, "", "parse_graph"], [127, 3, 1, "", "query_fusion_pattern_nodes"], [127, 3, 1, "", "remove_node"], [127, 3, 1, "", "remove_node_with_single_input_output"], [127, 3, 1, "", "replace_const_node"], [127, 3, 1, "", "replace_constant_graph_with_constant_node"], [127, 3, 1, "", "replace_node"], [127, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[127, 3, 1, "", "compare_node_attr"], [127, 3, 1, "", "create_constant_node"], [127, 3, 1, "", "create_node"], [127, 3, 1, "", "node_name_from_input"], [127, 3, 1, "", "set_attr_bool"], [127, 3, 1, "", "set_attr_dtype"], [127, 3, 1, "", "set_attr_float"], [127, 3, 1, "", "set_attr_int"], [127, 3, 1, "", "set_attr_int_list"], [127, 3, 1, "", "set_attr_string"], [127, 3, 1, "", "set_attr_string_list"], [127, 3, 1, "", "set_attr_tensor"], [127, 3, 1, "", "set_attr_type_list"], [127, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[137, 0, 0, "-", "qdq"], [139, 0, 0, "-", "quantize_graph_base"], [140, 0, 0, "-", "quantize_graph_bn"], [141, 0, 0, "-", "quantize_graph_concatv2"], [142, 0, 0, "-", "quantize_graph_conv"], [143, 0, 0, "-", "quantize_graph_for_intel_cpu"], [144, 0, 0, "-", "quantize_graph_matmul"], [145, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, 0, 0, "-", "fuse_qdq_bn"], [131, 0, 0, "-", "fuse_qdq_concatv2"], [132, 0, 0, "-", "fuse_qdq_conv"], [133, 0, 0, "-", "fuse_qdq_deconv"], [134, 0, 0, "-", "fuse_qdq_in"], [135, 0, 0, "-", "fuse_qdq_matmul"], [136, 0, 0, "-", "fuse_qdq_pooling"], [138, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[130, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[130, 3, 1, "", "apply_the_transform"], [130, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[131, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[131, 3, 1, "", "apply_the_transform"], [131, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[132, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[132, 3, 1, "", "apply_the_transform"], [132, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[133, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[133, 3, 1, "", "apply_the_transform"], [133, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[134, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[134, 3, 1, "", "apply_the_transform"], [134, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[135, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[135, 3, 1, "", "apply_batchmatmulv2_fusion"], [135, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [135, 3, 1, "", "apply_matmul_biasadd_fusion"], [135, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [135, 3, 1, "", "apply_the_transform"], [135, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[136, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[136, 3, 1, "", "apply_the_transform"], [136, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[138, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[138, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[139, 2, 1, "", "QuantizeGraphBase"], [139, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[139, 3, 1, "", "do_transform"], [139, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[139, 3, 1, "", "add_output_graph_node"], [139, 3, 1, "", "apply_the_transform"], [139, 3, 1, "", "create_nodes_map"], [139, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[140, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[140, 3, 1, "", "apply_the_transform"], [140, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[141, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[141, 3, 1, "", "apply_the_transform"], [141, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[142, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[142, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [142, 3, 1, "", "apply_the_transform"], [142, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[143, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[143, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[144, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[144, 3, 1, "", "apply_the_transform"], [144, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[145, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[145, 3, 1, "", "apply_the_transform"], [145, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[146, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[146, 3, 1, "", "copy_attr"], [146, 3, 1, "", "create_constant_node"], [146, 3, 1, "", "create_node"], [146, 3, 1, "", "ensure_tensor_name_has_port"], [146, 3, 1, "", "get_sorted_graph"], [146, 3, 1, "", "node_name_from_input"], [146, 3, 1, "", "remove_training_nodes"], [146, 3, 1, "", "set_attr_bool"], [146, 3, 1, "", "set_attr_dtype"], [146, 3, 1, "", "set_attr_float"], [146, 3, 1, "", "set_attr_int"], [146, 3, 1, "", "set_attr_string"], [146, 3, 1, "", "set_attr_string_list"], [146, 3, 1, "", "set_attr_tensor"], [146, 3, 1, "", "set_attr_type_list"], [146, 3, 1, "", "split_shared_inputs"], [146, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[147, 0, 0, "-", "bias_correction"], [148, 0, 0, "-", "graph_transform_base"], [150, 0, 0, "-", "insert_logging"], [151, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[147, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[147, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[150, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[150, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[151, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[151, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[152, 1, 1, "", "disable_random"], [152, 1, 1, "", "get_tensor_by_name"], [152, 1, 1, "", "get_tensor_val_from_graph_node"], [152, 1, 1, "", "is_ckpt_format"], [152, 1, 1, "", "is_saved_model_format"], [152, 1, 1, "", "iterator_sess_run"], [152, 1, 1, "", "read_graph"], [152, 1, 1, "", "strip_equivalent_nodes"], [152, 1, 1, "", "strip_unused_nodes"], [152, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[153, 0, 0, "-", "bf16_convert"], [155, 0, 0, "-", "onnx"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.util": [[157, 1, 1, "", "append_attr"], [157, 1, 1, "", "get_embedding_contiguous"], [157, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[160, 2, 1, "", "Algorithm"], [160, 2, 1, "", "AlgorithmScheduler"], [158, 0, 0, "-", "algorithm"], [160, 1, 1, "", "algorithm_registry"], [159, 0, 0, "-", "fast_bias_correction"], [161, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[158, 2, 1, "", "Algorithm"], [158, 2, 1, "", "AlgorithmScheduler"], [158, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[159, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[161, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[162, 2, 1, "", "Benchmark"]], "neural_compressor.conf": [[163, 0, 0, "-", "config"], [164, 0, 0, "-", "dotdict"], [166, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[163, 2, 1, "", "Benchmark_Conf"], [163, 2, 1, "", "Conf"], [163, 2, 1, "", "DefaultConf"], [163, 2, 1, "", "Distillation_Conf"], [163, 2, 1, "", "Graph_Optimization_Conf"], [163, 2, 1, "", "MixedPrecision_Conf"], [163, 2, 1, "", "NASConfig"], [163, 2, 1, "", "Pruning_Conf"], [163, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[164, 2, 1, "", "DotDict"], [164, 1, 1, "", "deep_get"], [164, 1, 1, "", "deep_set"]], "neural_compressor.config": [[167, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[169, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[170, 0, 0, "-", "sigopt"], [171, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[170, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[170, 3, 1, "", "next_tune_cfg"], [170, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[171, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[171, 3, 1, "", "stop"], [171, 3, 1, "", "traverse"]], "neural_compressor.data": [[176, 2, 1, "", "BaseTransform"], [176, 2, 1, "", "DATASETS"], [176, 2, 1, "", "DataLoader"], [176, 2, 1, "", "Dataset"], [176, 2, 1, "", "FILTERS"], [176, 2, 1, "", "Filter"], [176, 2, 1, "", "IterableDataset"], [176, 2, 1, "", "TRANSFORMS"], [173, 0, 0, "-", "dataloaders"], [176, 1, 1, "", "dataset_registry"], [175, 0, 0, "-", "datasets"], [176, 1, 1, "", "filter_registry"], [176, 1, 1, "", "transform_registry"], [179, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[176, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[173, 2, 1, "", "DataLoader"], [172, 0, 0, "-", "dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[172, 2, 1, "", "DataLoader"]], "neural_compressor.data.datasets": [[174, 0, 0, "-", "imagenet_dataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[174, 2, 1, "", "ONNXRTImagenetDataset"], [174, 2, 1, "", "TensorflowImagenetDataset"]], "neural_compressor.data.transforms": [[177, 0, 0, "-", "coco_transform"], [178, 0, 0, "-", "imagenet_transform"]], "neural_compressor.data.transforms.coco_transform": [[177, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[178, 2, 1, "", "BilinearImagenetTransform"], [178, 2, 1, "", "ONNXResizeCropImagenetTransform"], [178, 2, 1, "", "OnnxBilinearImagenetTransform"], [178, 2, 1, "", "ParseDecodeImagenetTransform"], [178, 2, 1, "", "ResizeWithAspectRatio"], [178, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental": [[221, 2, 1, "", "Benchmark"], [221, 2, 1, "", "Component"], [221, 2, 1, "", "Distillation"], [221, 2, 1, "", "Graph_Optimization"], [221, 2, 1, "", "MixedPrecision"], [221, 2, 1, "", "ModelConversion"], [221, 2, 1, "", "NAS"], [221, 2, 1, "", "Pruning"], [221, 2, 1, "", "Quantization"], [180, 0, 0, "-", "benchmark"], [183, 0, 0, "-", "common"], [189, 0, 0, "-", "component"], [211, 0, 0, "-", "data"], [216, 0, 0, "-", "distillation"], [217, 0, 0, "-", "export"], [220, 0, 0, "-", "graph_optimization"], [228, 0, 0, "-", "metric"], [230, 0, 0, "-", "mixed_precision"], [231, 0, 0, "-", "model_conversion"], [239, 0, 0, "-", "nas"], [243, 0, 0, "-", "pruning"], [244, 0, 0, "-", "pruning_recipes"], [248, 0, 0, "-", "pytorch_pruner"], [255, 0, 0, "-", "quantization"], [256, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[221, 4, 1, "", "b_dataloader"], [221, 4, 1, "", "b_func"], [221, 3, 1, "", "config_instance"], [221, 3, 1, "", "generate_prefix"], [221, 4, 1, "", "metric"], [221, 4, 1, "", "model"], [221, 4, 1, "", "postprocess"], [221, 4, 1, "", "results"], [221, 3, 1, "", "run_instance"], [221, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[221, 4, 1, "", "eval_dataloader"], [221, 4, 1, "", "eval_func"], [221, 3, 1, "", "execute"], [221, 4, 1, "", "model"], [221, 3, 1, "", "on_after_compute_loss"], [221, 3, 1, "", "on_batch_begin"], [221, 3, 1, "", "on_batch_end"], [221, 3, 1, "", "on_before_optimizer_step"], [221, 3, 1, "", "on_epoch_begin"], [221, 3, 1, "", "on_epoch_end"], [221, 3, 1, "", "on_post_grad"], [221, 3, 1, "", "on_step_begin"], [221, 3, 1, "", "on_step_end"], [221, 3, 1, "", "on_train_begin"], [221, 3, 1, "", "on_train_end"], [221, 3, 1, "", "post_epoch_end"], [221, 3, 1, "", "post_process"], [221, 3, 1, "", "pre_epoch_begin"], [221, 3, 1, "", "pre_process"], [221, 3, 1, "", "prepare"], [221, 3, 1, "", "prepare_qat"], [221, 3, 1, "", "register_hook"], [221, 4, 1, "", "train_dataloader"], [221, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[221, 5, 1, "", "_epoch_ran"], [221, 5, 1, "", "best_model"], [221, 5, 1, "", "best_score"], [221, 3, 1, "", "create_criterion"], [221, 3, 1, "", "create_optimizer"], [221, 4, 1, "", "criterion"], [221, 5, 1, "", "eval_frequency"], [221, 4, 1, "", "evaluation_distributed"], [221, 3, 1, "", "execute"], [221, 3, 1, "", "generate_hooks"], [221, 3, 1, "", "init_train_cfg"], [221, 3, 1, "", "on_post_forward"], [221, 4, 1, "", "optimizer"], [221, 3, 1, "", "pre_process"], [221, 3, 1, "", "prepare"], [221, 4, 1, "", "student_model"], [221, 4, 1, "", "teacher_model"], [221, 4, 1, "", "train_cfg"], [221, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[221, 3, 1, "", "dataset"], [221, 4, 1, "", "eval_dataloader"], [221, 4, 1, "", "eval_func"], [221, 4, 1, "", "input"], [221, 4, 1, "", "metric"], [221, 4, 1, "", "model"], [221, 4, 1, "", "output"], [221, 4, 1, "", "postprocess"], [221, 4, 1, "", "precisions"], [221, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[221, 4, 1, "", "precisions"], [221, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[221, 3, 1, "", "dataset"], [221, 4, 1, "", "destination"], [221, 4, 1, "", "eval_dataloader"], [221, 4, 1, "", "eval_func"], [221, 4, 1, "", "metric"], [221, 4, 1, "", "model"], [221, 4, 1, "", "postprocess"], [221, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[221, 5, 1, "", "conf"], [221, 4, 1, "", "evaluation_distributed"], [221, 3, 1, "", "execute"], [221, 3, 1, "", "generate_hooks"], [221, 3, 1, "", "generate_pruners"], [221, 3, 1, "", "pre_process"], [221, 3, 1, "", "prepare"], [221, 5, 1, "", "pruners"], [221, 4, 1, "", "pruning_func"], [221, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[221, 4, 1, "", "calib_dataloader"], [221, 3, 1, "", "dataset"], [221, 3, 1, "", "execute"], [221, 4, 1, "", "metric"], [221, 4, 1, "", "objective"], [221, 4, 1, "", "postprocess"], [221, 3, 1, "", "pre_process"], [221, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[180, 2, 1, "", "Benchmark"], [180, 1, 1, "", "get_architecture"], [180, 1, 1, "", "get_bounded_threads"], [180, 1, 1, "", "get_core_ids"], [180, 1, 1, "", "get_physical_ids"], [180, 1, 1, "", "get_threads"], [180, 1, 1, "", "get_threads_per_core"], [180, 1, 1, "", "set_all_env_var"], [180, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[180, 4, 1, "", "b_dataloader"], [180, 4, 1, "", "b_func"], [180, 3, 1, "", "config_instance"], [180, 3, 1, "", "generate_prefix"], [180, 4, 1, "", "metric"], [180, 4, 1, "", "model"], [180, 4, 1, "", "postprocess"], [180, 4, 1, "", "results"], [180, 3, 1, "", "run_instance"], [180, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[183, 2, 1, "", "DataLoader"], [183, 2, 1, "", "Metric"], [183, 2, 1, "", "Model"], [183, 2, 1, "", "Postprocess"], [181, 0, 0, "-", "criterion"], [182, 0, 0, "-", "dataloader"], [184, 0, 0, "-", "metric"], [185, 0, 0, "-", "model"], [186, 0, 0, "-", "optimizer"], [187, 0, 0, "-", "postprocess"], [188, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[181, 2, 1, "", "Criterions"], [181, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [181, 2, 1, "", "KnowledgeDistillationFramework"], [181, 2, 1, "", "KnowledgeDistillationLoss"], [181, 2, 1, "", "PyTorchCriterions"], [181, 2, 1, "", "PyTorchCrossEntropyLoss"], [181, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [181, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [181, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [181, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [181, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [181, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [181, 2, 1, "", "SelfKnowledgeDistillationLoss"], [181, 2, 1, "", "TensorFlowCrossEntropyLoss"], [181, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [181, 2, 1, "", "TensorflowCriterions"], [181, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [181, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [181, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [181, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[181, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[181, 3, 1, "", "clear_features"], [181, 3, 1, "", "init_feature_matcher"], [181, 3, 1, "", "init_loss_funcs"], [181, 3, 1, "", "loss_cal"], [181, 3, 1, "", "loss_cal_sloss"], [181, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[181, 4, 1, "", "student_model"], [181, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[181, 3, 1, "", "loss_cal"], [181, 3, 1, "", "loss_cal_sloss"], [181, 3, 1, "", "student_targets_loss_cal"], [181, 3, 1, "", "teacher_model_forward"], [181, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[181, 3, 1, "", "init_feature_matcher"], [181, 3, 1, "", "init_loss_funcs"], [181, 3, 1, "", "loss_cal"], [181, 3, 1, "", "loss_cal_sloss"], [181, 3, 1, "", "register_hooks_for_models"], [181, 3, 1, "", "remove_all_hooks"], [181, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[181, 3, 1, "", "KullbackLeiblerDivergence"], [181, 3, 1, "", "SoftCrossEntropy"], [181, 3, 1, "", "student_targets_loss_cal"], [181, 3, 1, "", "teacher_model_forward"], [181, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[181, 3, 1, "", "KullbackLeiblerDivergence"], [181, 3, 1, "", "L2Divergence"], [181, 3, 1, "", "SoftCrossEntropy"], [181, 3, 1, "", "init_loss_funcs"], [181, 3, 1, "", "loss_cal"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[181, 3, 1, "", "init_loss_funcs"], [181, 3, 1, "", "loss_cal"], [181, 3, 1, "", "loss_cal_sloss"], [181, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[181, 3, 1, "", "SoftCrossEntropy"], [181, 3, 1, "", "student_targets_loss_cal"], [181, 3, 1, "", "teacher_model_forward"], [181, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[181, 3, 1, "", "student_targets_loss_cal"], [181, 3, 1, "", "teacher_model_forward"], [181, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[182, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[184, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[185, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[186, 2, 1, "", "Optimizers"], [186, 2, 1, "", "PyTorchOptimizers"], [186, 2, 1, "", "PyTorchSGD"], [186, 2, 1, "", "TensorFlowAdam"], [186, 2, 1, "", "TensorFlowAdamW"], [186, 2, 1, "", "TensorFlowSGD"], [186, 2, 1, "", "TensorflowOptimizers"], [186, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[186, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[187, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[188, 1, 1, "", "get_activation"], [188, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[189, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[189, 4, 1, "", "eval_dataloader"], [189, 4, 1, "", "eval_func"], [189, 3, 1, "", "execute"], [189, 4, 1, "", "model"], [189, 3, 1, "", "on_after_compute_loss"], [189, 3, 1, "", "on_batch_begin"], [189, 3, 1, "", "on_batch_end"], [189, 3, 1, "", "on_before_optimizer_step"], [189, 3, 1, "", "on_epoch_begin"], [189, 3, 1, "", "on_epoch_end"], [189, 3, 1, "", "on_post_grad"], [189, 3, 1, "", "on_step_begin"], [189, 3, 1, "", "on_step_end"], [189, 3, 1, "", "on_train_begin"], [189, 3, 1, "", "on_train_end"], [189, 3, 1, "", "post_epoch_end"], [189, 3, 1, "", "post_process"], [189, 3, 1, "", "pre_epoch_begin"], [189, 3, 1, "", "pre_process"], [189, 3, 1, "", "prepare"], [189, 3, 1, "", "prepare_qat"], [189, 3, 1, "", "register_hook"], [189, 4, 1, "", "train_dataloader"], [189, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[211, 2, 1, "", "BaseTransform"], [211, 2, 1, "", "DATASETS"], [211, 2, 1, "", "Dataset"], [211, 2, 1, "", "FILTERS"], [211, 2, 1, "", "Filter"], [211, 2, 1, "", "IterableDataset"], [211, 2, 1, "", "TRANSFORMS"], [194, 0, 0, "-", "dataloaders"], [211, 1, 1, "", "dataset_registry"], [206, 0, 0, "-", "datasets"], [211, 1, 1, "", "filter_registry"], [210, 0, 0, "-", "filters"], [211, 1, 1, "", "transform_registry"], [213, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[211, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[190, 0, 0, "-", "base_dataloader"], [191, 0, 0, "-", "dataloader"], [192, 0, 0, "-", "default_dataloader"], [193, 0, 0, "-", "fetcher"], [195, 0, 0, "-", "mxnet_dataloader"], [196, 0, 0, "-", "onnxrt_dataloader"], [197, 0, 0, "-", "pytorch_dataloader"], [198, 0, 0, "-", "sampler"], [199, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[190, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[190, 3, 1, "", "batch"], [190, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[192, 2, 1, "", "DefaultDataLoader"], [192, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[192, 3, 1, "", "batch"], [192, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[193, 2, 1, "", "Fetcher"], [193, 2, 1, "", "IndexFetcher"], [193, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[195, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[196, 2, 1, "", "ONNXRTBertDataLoader"], [196, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[197, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[198, 2, 1, "", "BatchSampler"], [198, 2, 1, "", "IterableSampler"], [198, 2, 1, "", "Sampler"], [198, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[199, 2, 1, "", "TFDataDataLoader"], [199, 2, 1, "", "TensorflowBertDataLoader"], [199, 2, 1, "", "TensorflowDataLoader"], [199, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[199, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[206, 2, 1, "", "DATASETS"], [206, 2, 1, "", "Dataset"], [206, 2, 1, "", "IterableDataset"], [200, 0, 0, "-", "bert_dataset"], [201, 0, 0, "-", "coco_dataset"], [202, 0, 0, "-", "dataset"], [206, 1, 1, "", "dataset_registry"], [203, 0, 0, "-", "dummy_dataset"], [204, 0, 0, "-", "dummy_dataset_v2"], [205, 0, 0, "-", "imagenet_dataset"], [207, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[200, 2, 1, "", "InputFeatures"], [200, 2, 1, "", "ONNXRTBertDataset"], [200, 2, 1, "", "ParseDecodeBert"], [200, 2, 1, "", "PytorchBertDataset"], [200, 2, 1, "", "TensorflowBertDataset"], [200, 2, 1, "", "TensorflowModelZooBertDataset"], [200, 1, 1, "", "convert_examples_to_features"], [200, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[200, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[201, 2, 1, "", "COCONpy"], [201, 2, 1, "", "COCORaw"], [201, 2, 1, "", "COCORecordDataset"], [201, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[202, 2, 1, "", "CIFAR10"], [202, 2, 1, "", "CIFAR100"], [202, 2, 1, "", "DATASETS"], [202, 2, 1, "", "Dataset"], [202, 2, 1, "", "FashionMNIST"], [202, 2, 1, "", "ImageFolder"], [202, 2, 1, "", "IterableDataset"], [202, 2, 1, "", "MNIST"], [202, 2, 1, "", "MXNetCIFAR10"], [202, 2, 1, "", "MXNetCIFAR100"], [202, 2, 1, "", "MXNetDatasets"], [202, 2, 1, "", "MXNetFashionMNIST"], [202, 2, 1, "", "MXNetImageFolder"], [202, 2, 1, "", "MXNetMNIST"], [202, 2, 1, "", "ONNXRTITDatasets"], [202, 2, 1, "", "ONNXRTQLDatasets"], [202, 2, 1, "", "PyTorchDatasets"], [202, 2, 1, "", "PytorchCIFAR10"], [202, 2, 1, "", "PytorchCIFAR100"], [202, 2, 1, "", "PytorchFashionMNIST"], [202, 2, 1, "", "PytorchMNIST"], [202, 2, 1, "", "PytorchMxnetWrapDataset"], [202, 2, 1, "", "PytorchMxnetWrapFunction"], [202, 2, 1, "", "TensorflowCIFAR10"], [202, 2, 1, "", "TensorflowCIFAR100"], [202, 2, 1, "", "TensorflowDatasets"], [202, 2, 1, "", "TensorflowFashionMNIST"], [202, 2, 1, "", "TensorflowImageFolder"], [202, 2, 1, "", "TensorflowImageRecord"], [202, 2, 1, "", "TensorflowMNIST"], [202, 2, 1, "", "TensorflowTFRecordDataset"], [202, 2, 1, "", "TensorflowVOCRecord"], [202, 1, 1, "", "calculate_md5"], [202, 1, 1, "", "check_integrity"], [202, 1, 1, "", "dataset_registry"], [202, 1, 1, "", "download_url"], [202, 6, 1, "", "framework_datasets"], [202, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[202, 3, 1, "", "download"], [202, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[202, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[202, 4, 1, "", "class_to_idx"], [202, 3, 1, "", "download"], [202, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[203, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[204, 2, 1, "", "DummyDataset"], [204, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[205, 2, 1, "", "ImagenetRaw"], [205, 2, 1, "", "MXNetImagenetRaw"], [205, 2, 1, "", "PytorchImagenetRaw"], [205, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[207, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[210, 2, 1, "", "FILTERS"], [210, 2, 1, "", "Filter"], [208, 0, 0, "-", "coco_filter"], [209, 0, 0, "-", "filter"], [210, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[208, 2, 1, "", "LabelBalanceCOCORawFilter"], [208, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[209, 2, 1, "", "FILTERS"], [209, 2, 1, "", "Filter"], [209, 2, 1, "", "MXNetFilters"], [209, 2, 1, "", "ONNXRTITFilters"], [209, 2, 1, "", "ONNXRTQLFilters"], [209, 2, 1, "", "PyTorchFilters"], [209, 2, 1, "", "TensorflowFilters"], [209, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[213, 2, 1, "", "BaseTransform"], [213, 2, 1, "", "TRANSFORMS"], [212, 0, 0, "-", "imagenet_transform"], [214, 0, 0, "-", "tokenization"], [215, 0, 0, "-", "transform"], [213, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[213, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[212, 2, 1, "", "LabelShift"], [212, 2, 1, "", "ParseDecodeImagenet"], [212, 2, 1, "", "QuantizedInput"]], "neural_compressor.experimental.data.transforms.tokenization": [[214, 2, 1, "", "BasicTokenizer"], [214, 2, 1, "", "FullTokenizer"], [214, 2, 1, "", "WordpieceTokenizer"], [214, 1, 1, "", "convert_by_vocab"], [214, 1, 1, "", "convert_to_unicode"], [214, 1, 1, "", "load_vocab"], [214, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[214, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[214, 3, 1, "", "convert_ids_to_tokens"], [214, 3, 1, "", "convert_tokens_to_ids"], [214, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[214, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[215, 2, 1, "", "AlignImageChannelTransform"], [215, 2, 1, "", "BaseTransform"], [215, 2, 1, "", "CastONNXTransform"], [215, 2, 1, "", "CastPyTorchTransform"], [215, 2, 1, "", "CastTFTransform"], [215, 2, 1, "", "CenterCropTFTransform"], [215, 2, 1, "", "CenterCropTransform"], [215, 2, 1, "", "CollectTransform"], [215, 2, 1, "", "ComposeTransform"], [215, 2, 1, "", "CropResizeTFTransform"], [215, 2, 1, "", "CropResizeTransform"], [215, 2, 1, "", "CropToBoundingBox"], [215, 2, 1, "", "InputFeatures"], [215, 2, 1, "", "MXNetCropResizeTransform"], [215, 2, 1, "", "MXNetCropToBoundingBox"], [215, 2, 1, "", "MXNetNormalizeTransform"], [215, 2, 1, "", "MXNetTransforms"], [215, 2, 1, "", "MXNetTranspose"], [215, 2, 1, "", "NormalizeTFTransform"], [215, 2, 1, "", "NormalizeTransform"], [215, 2, 1, "", "ONNXRTCropToBoundingBox"], [215, 2, 1, "", "ONNXRTITTransforms"], [215, 2, 1, "", "ONNXRTQLTransforms"], [215, 2, 1, "", "PaddedCenterCropTransform"], [215, 2, 1, "", "ParseDecodeVocTransform"], [215, 2, 1, "", "PyTorchAlignImageChannel"], [215, 2, 1, "", "PyTorchCropResizeTransform"], [215, 2, 1, "", "PyTorchNormalizeTransform"], [215, 2, 1, "", "PyTorchTransforms"], [215, 2, 1, "", "PyTorchTranspose"], [215, 2, 1, "", "PytorchMxnetTransform"], [215, 2, 1, "", "PytorchMxnetWrapFunction"], [215, 2, 1, "", "RandomCropTFTransform"], [215, 2, 1, "", "RandomCropTransform"], [215, 2, 1, "", "RandomHorizontalFlip"], [215, 2, 1, "", "RandomResizedCropMXNetTransform"], [215, 2, 1, "", "RandomResizedCropPytorchTransform"], [215, 2, 1, "", "RandomResizedCropTFTransform"], [215, 2, 1, "", "RandomResizedCropTransform"], [215, 2, 1, "", "RandomVerticalFlip"], [215, 2, 1, "", "RescaleKerasPretrainTransform"], [215, 2, 1, "", "RescaleTFTransform"], [215, 2, 1, "", "RescaleTransform"], [215, 2, 1, "", "ResizeMXNetTransform"], [215, 2, 1, "", "ResizePytorchTransform"], [215, 2, 1, "", "ResizeTFTransform"], [215, 2, 1, "", "ResizeTransform"], [215, 2, 1, "", "ResizeWithRatio"], [215, 2, 1, "", "SquadExample"], [215, 2, 1, "", "TFModelZooCollectTransform"], [215, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [215, 2, 1, "", "TFSquadV1PostTransform"], [215, 2, 1, "", "TRANSFORMS"], [215, 2, 1, "", "TensorflowCropToBoundingBox"], [215, 2, 1, "", "TensorflowRandomHorizontalFlip"], [215, 2, 1, "", "TensorflowRandomVerticalFlip"], [215, 2, 1, "", "TensorflowResizeWithRatio"], [215, 2, 1, "", "TensorflowTransform"], [215, 2, 1, "", "TensorflowTransforms"], [215, 2, 1, "", "TensorflowTranspose"], [215, 2, 1, "", "TensorflowWrapFunction"], [215, 2, 1, "", "ToArray"], [215, 2, 1, "", "ToNDArrayTransform"], [215, 2, 1, "", "Transforms"], [215, 2, 1, "", "Transpose"], [215, 1, 1, "", "convert_examples_to_features"], [215, 1, 1, "", "get_final_text"], [215, 1, 1, "", "get_torchvision_map"], [215, 1, 1, "", "read_squad_examples"], [215, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[215, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[215, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[215, 3, 1, "", "get_postprocess_result"], [215, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[215, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[216, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[216, 5, 1, "", "_epoch_ran"], [216, 5, 1, "", "best_model"], [216, 5, 1, "", "best_score"], [216, 3, 1, "", "create_criterion"], [216, 3, 1, "", "create_optimizer"], [216, 4, 1, "", "criterion"], [216, 5, 1, "", "eval_frequency"], [216, 4, 1, "", "evaluation_distributed"], [216, 3, 1, "", "execute"], [216, 3, 1, "", "generate_hooks"], [216, 3, 1, "", "init_train_cfg"], [216, 3, 1, "", "on_post_forward"], [216, 4, 1, "", "optimizer"], [216, 3, 1, "", "pre_process"], [216, 3, 1, "", "prepare"], [216, 4, 1, "", "student_model"], [216, 4, 1, "", "teacher_model"], [216, 4, 1, "", "train_cfg"], [216, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[218, 0, 0, "-", "torch2onnx"], [217, 1, 1, "", "torch_to_fp32_onnx"], [217, 1, 1, "", "torch_to_int8_onnx"], [219, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.torch2onnx": [[218, 1, 1, "", "build_scale_mapping"], [218, 1, 1, "", "get_node_mapping"], [218, 1, 1, "", "get_quantizable_onnx_ops"], [218, 1, 1, "", "qdq_fp32_bias"], [218, 1, 1, "", "qdq_fp32_bias_qdq"], [218, 1, 1, "", "qdq_int32_bias"], [218, 1, 1, "", "recalculate_bias"], [218, 1, 1, "", "remove_nodes_by_name"], [218, 1, 1, "", "set_data_type"], [218, 1, 1, "", "set_scale_info"], [218, 1, 1, "", "sub_graph_with_int32_bias"], [218, 1, 1, "", "torch_to_fp32_onnx"], [218, 1, 1, "", "torch_to_int8_onnx"], [218, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[219, 2, 1, "", "DummyDataReader"], [219, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[219, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[220, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[220, 3, 1, "", "dataset"], [220, 4, 1, "", "eval_dataloader"], [220, 4, 1, "", "eval_func"], [220, 4, 1, "", "input"], [220, 4, 1, "", "metric"], [220, 4, 1, "", "model"], [220, 4, 1, "", "output"], [220, 4, 1, "", "postprocess"], [220, 4, 1, "", "precisions"], [220, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[228, 2, 1, "", "BaseMetric"], [228, 2, 1, "", "METRICS"], [222, 0, 0, "-", "bleu"], [223, 0, 0, "-", "bleu_util"], [224, 0, 0, "-", "coco_label_map"], [225, 0, 0, "-", "coco_tools"], [226, 0, 0, "-", "evaluate_squad"], [227, 0, 0, "-", "f1"], [229, 0, 0, "-", "metric"], [228, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[228, 4, 1, "", "hvd"], [228, 4, 1, "", "metric"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[228, 5, 1, "", "metrics"], [228, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[222, 2, 1, "", "BLEU"], [222, 2, 1, "", "UnicodeRegex"], [222, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[222, 5, 1, "", "labels"], [222, 5, 1, "", "predictions"], [222, 3, 1, "", "reset"], [222, 3, 1, "", "result"], [222, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[222, 5, 1, "", "nondigit_punct_re"], [222, 3, 1, "", "property_chars"], [222, 5, 1, "", "punct_nondigit_re"], [222, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[223, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[225, 2, 1, "", "COCOEvalWrapper"], [225, 2, 1, "", "COCOWrapper"], [225, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [225, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [225, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[225, 3, 1, "", "ComputeMetrics"], [225, 3, 1, "", "GetAgnosticMode"], [225, 3, 1, "", "GetCategory"], [225, 3, 1, "", "GetCategoryIdList"], [225, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[225, 3, 1, "", "LoadAnnotations"], [225, 5, 1, "", "dataset"], [225, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[226, 1, 1, "", "evaluate"], [226, 1, 1, "", "exact_match_score"], [226, 1, 1, "", "f1_score"], [226, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[227, 1, 1, "", "evaluate"], [227, 1, 1, "", "f1_score"], [227, 1, 1, "", "metric_max_over_ground_truths"], [227, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[229, 2, 1, "", "Accuracy"], [229, 2, 1, "", "BaseMetric"], [229, 2, 1, "", "COCOmAPv2"], [229, 2, 1, "", "F1"], [229, 2, 1, "", "GeneralTopK"], [229, 2, 1, "", "Loss"], [229, 2, 1, "", "MAE"], [229, 2, 1, "", "METRICS"], [229, 2, 1, "", "MSE"], [229, 2, 1, "", "MXNetMetrics"], [229, 2, 1, "", "ONNXRTGLUE"], [229, 2, 1, "", "ONNXRTITMetrics"], [229, 2, 1, "", "ONNXRTQLMetrics"], [229, 2, 1, "", "PyTorchLoss"], [229, 2, 1, "", "PyTorchMetrics"], [229, 2, 1, "", "RMSE"], [229, 2, 1, "", "ROC"], [229, 2, 1, "", "SquadF1"], [229, 2, 1, "", "TensorflowCOCOMAP"], [229, 2, 1, "", "TensorflowMAP"], [229, 2, 1, "", "TensorflowMetrics"], [229, 2, 1, "", "TensorflowTopK"], [229, 2, 1, "", "TensorflowVOCMAP"], [229, 2, 1, "", "WrapMXNetMetric"], [229, 2, 1, "", "WrapONNXRTMetric"], [229, 2, 1, "", "WrapPyTorchMetric"], [229, 2, 1, "", "mIOU"], [229, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[229, 5, 1, "", "label_list"], [229, 5, 1, "", "pred_list"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 5, 1, "", "sample"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[229, 4, 1, "", "hvd"], [229, 4, 1, "", "metric"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[229, 5, 1, "", "k"], [229, 5, 1, "", "num_correct"], [229, 5, 1, "", "num_sample"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 5, 1, "", "sample"], [229, 5, 1, "", "sum"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[229, 5, 1, "", "compare_label"], [229, 5, 1, "", "label_list"], [229, 5, 1, "", "pred_list"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[229, 5, 1, "", "metrics"], [229, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[229, 5, 1, "", "compare_label"], [229, 5, 1, "", "label_list"], [229, 5, 1, "", "pred_list"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[229, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[229, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[229, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[229, 3, 1, "", "compute"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[229, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[229, 5, 1, "", "mse"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[229, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[229, 5, 1, "", "k"], [229, 5, 1, "", "num_correct"], [229, 5, 1, "", "num_sample"], [229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[229, 3, 1, "", "reset"], [229, 3, 1, "", "result"], [229, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[230, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[230, 4, 1, "", "precisions"], [230, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[231, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[231, 3, 1, "", "dataset"], [231, 4, 1, "", "destination"], [231, 4, 1, "", "eval_dataloader"], [231, 4, 1, "", "eval_func"], [231, 4, 1, "", "metric"], [231, 4, 1, "", "model"], [231, 4, 1, "", "postprocess"], [231, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[239, 2, 1, "", "BasicNAS"], [239, 2, 1, "", "DyNAS"], [239, 2, 1, "", "NAS"], [232, 0, 0, "-", "basic_nas"], [233, 0, 0, "-", "dynas"], [238, 0, 0, "-", "dynast"], [240, 0, 0, "-", "nas"], [241, 0, 0, "-", "nas_utils"], [242, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[239, 3, 1, "", "estimate"], [239, 3, 1, "", "execute"], [239, 3, 1, "", "init_by_cfg"], [239, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[239, 3, 1, "", "create_acc_predictor"], [239, 3, 1, "", "create_latency_predictor"], [239, 3, 1, "", "create_macs_predictor"], [239, 3, 1, "", "estimate"], [239, 3, 1, "", "init_cfg"], [239, 3, 1, "", "init_for_search"], [239, 3, 1, "", "search"], [239, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[232, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[232, 3, 1, "", "estimate"], [232, 3, 1, "", "execute"], [232, 3, 1, "", "init_by_cfg"], [232, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[233, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[233, 3, 1, "", "create_acc_predictor"], [233, 3, 1, "", "create_latency_predictor"], [233, 3, 1, "", "create_macs_predictor"], [233, 3, 1, "", "estimate"], [233, 3, 1, "", "init_cfg"], [233, 3, 1, "", "init_for_search"], [233, 3, 1, "", "search"], [233, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[234, 0, 0, "-", "dynas_manager"], [235, 0, 0, "-", "dynas_predictor"], [236, 0, 0, "-", "dynas_search"], [237, 0, 0, "-", "dynas_utils"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[234, 2, 1, "", "ParameterManager"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[234, 3, 1, "", "create_training_set"], [234, 3, 1, "", "import_csv"], [234, 3, 1, "", "onehot_generic"], [234, 3, 1, "", "process_param_dict"], [234, 3, 1, "", "random_sample"], [234, 3, 1, "", "random_samples"], [234, 3, 1, "", "set_seed"], [234, 3, 1, "", "translate2param"], [234, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[235, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[235, 3, 1, "", "get_metrics"], [235, 3, 1, "", "get_parameters"], [235, 3, 1, "", "load"], [235, 3, 1, "", "predict"], [235, 3, 1, "", "save"], [235, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[236, 2, 1, "", "ProblemMultiObjective"], [236, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[236, 3, 1, "", "configure_age"], [236, 3, 1, "", "configure_nsga2"], [236, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[237, 2, 1, "", "EvaluationInterface"], [237, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [237, 2, 1, "", "EvaluationInterfaceResNet50"], [237, 2, 1, "", "OFARunner"], [237, 2, 1, "", "Runner"], [237, 2, 1, "", "TorchVisionReference"], [237, 1, 1, "", "get_macs"], [237, 1, 1, "", "get_torchvision_model"], [237, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[237, 3, 1, "", "clear_csv"], [237, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[237, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[237, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[237, 3, 1, "", "estimate_accuracy_top1"], [237, 3, 1, "", "estimate_latency"], [237, 3, 1, "", "estimate_macs"], [237, 3, 1, "", "get_subnet"], [237, 3, 1, "", "measure_latency"], [237, 3, 1, "", "validate_macs"], [237, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[237, 3, 1, "", "measure_latency"], [237, 3, 1, "", "validate_macs"], [237, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.nas": [[240, 2, 1, "", "NAS"], [240, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[240, 3, 1, "", "count_model_parameters"], [240, 3, 1, "", "dump_search_results"], [240, 3, 1, "", "estimate"], [240, 3, 1, "", "find_best_model_archs"], [240, 3, 1, "", "init_search_cfg"], [240, 3, 1, "", "load_search_results"], [240, 3, 1, "", "metrics_conversion"], [240, 4, 1, "", "model_builder"], [240, 3, 1, "", "params_vec2params_dict"], [240, 3, 1, "", "search"], [240, 4, 1, "", "search_algorithm"], [240, 4, 1, "", "search_space"], [240, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[241, 1, 1, "", "create_search_space_pool"], [241, 1, 1, "", "find_pareto_front"], [241, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[242, 2, 1, "", "BayesianOptimizationSearcher"], [242, 2, 1, "", "GridSearcher"], [242, 2, 1, "", "RandomSearcher"], [242, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[242, 3, 1, "", "get_feedback"], [242, 3, 1, "", "indices2params_vec"], [242, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[242, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[242, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[242, 3, 1, "", "get_feedback"], [242, 3, 1, "", "params_vec2params_dict"], [242, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[243, 2, 1, "", "Pruning"], [243, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[243, 5, 1, "", "conf"], [243, 4, 1, "", "evaluation_distributed"], [243, 3, 1, "", "execute"], [243, 3, 1, "", "generate_hooks"], [243, 3, 1, "", "generate_pruners"], [243, 3, 1, "", "pre_process"], [243, 3, 1, "", "prepare"], [243, 5, 1, "", "pruners"], [243, 4, 1, "", "pruning_func"], [243, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[243, 3, 1, "", "on_after_compute_loss"], [243, 3, 1, "", "on_batch_begin"], [243, 3, 1, "", "on_batch_end"], [243, 3, 1, "", "on_epoch_begin"], [243, 3, 1, "", "on_epoch_end"], [243, 3, 1, "", "on_step_begin"], [243, 3, 1, "", "on_step_end"], [243, 3, 1, "", "on_train_begin"], [243, 3, 1, "", "on_train_end"], [243, 3, 1, "", "post_epoch_end"], [243, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[244, 2, 1, "", "PATTERNS"], [245, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[244, 5, 1, "", "patterns"], [244, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[245, 2, 1, "", "PATTERNS"], [246, 0, 0, "-", "pattern"], [247, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[245, 5, 1, "", "patterns"], [245, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[246, 2, 1, "", "PATTERNS"], [246, 2, 1, "", "PatternBase"], [246, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[246, 5, 1, "", "patterns"], [246, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[246, 3, 1, "", "compute_sparsity"], [246, 3, 1, "", "reduce"], [246, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[247, 2, 1, "", "TilePatternBase"], [247, 2, 1, "", "TilePattern_1x1"], [247, 2, 1, "", "TilePattern_1x16"], [247, 2, 1, "", "TilePattern_1x2"], [247, 2, 1, "", "TilePattern_2x2"], [247, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[247, 3, 1, "", "compute_sparsity"], [247, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[249, 0, 0, "-", "logger"], [250, 0, 0, "-", "patterns"], [251, 0, 0, "-", "prune_utils"], [252, 0, 0, "-", "pruner"], [253, 0, 0, "-", "pruning"], [254, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[250, 2, 1, "", "Pattern"], [250, 2, 1, "", "PatternNInM"], [250, 2, 1, "", "PatternNxM"], [250, 1, 1, "", "get_pattern"], [250, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[250, 3, 1, "", "get_block_size_dict"], [250, 3, 1, "", "get_mask_single"], [250, 3, 1, "", "get_masks"], [250, 3, 1, "", "get_masks_global"], [250, 3, 1, "", "get_masks_local"], [250, 3, 1, "", "get_pattern_lock_masks"], [250, 3, 1, "", "get_sparsity_ratio"], [250, 5, 1, "", "is_global"], [250, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[250, 5, 1, "", "M"], [250, 5, 1, "", "N"], [250, 3, 1, "", "get_masks_global"], [250, 3, 1, "", "get_pattern_lock_masks"], [250, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[250, 5, 1, "", "block_size"], [250, 3, 1, "", "get_block_size_dict"], [250, 3, 1, "", "get_masks_global"], [250, 3, 1, "", "get_pattern_lock_masks"], [250, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[251, 1, 1, "", "check_config"], [251, 1, 1, "", "parse_not_to_prune"], [251, 1, 1, "", "parse_to_prune"], [251, 1, 1, "", "process_and_check_config"], [251, 1, 1, "", "process_config"], [251, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[252, 2, 1, "", "MagnitudePruner"], [252, 2, 1, "", "PatternLockPruner"], [252, 2, 1, "", "Pruner"], [252, 2, 1, "", "SnipMomentumPruner"], [252, 2, 1, "", "SnipPruner"], [252, 1, 1, "", "get_pruner"], [252, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[252, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[252, 3, 1, "", "on_after_optimizer_step"], [252, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[252, 3, 1, "", "check_is_pruned_step"], [252, 5, 1, "", "config"], [252, 5, 1, "", "current_sparsity_ratio"], [252, 5, 1, "", "end_step"], [252, 5, 1, "", "global_step"], [252, 3, 1, "", "mask_weights"], [252, 5, 1, "", "masks"], [252, 5, 1, "", "max_sparsity_ratio_per_layer"], [252, 5, 1, "", "modules"], [252, 3, 1, "", "on_after_eval"], [252, 3, 1, "", "on_after_optimizer_step"], [252, 3, 1, "", "on_before_eval"], [252, 3, 1, "", "on_before_optimizer_step"], [252, 3, 1, "", "on_epoch_begin"], [252, 3, 1, "", "on_epoch_end"], [252, 3, 1, "", "on_step_begin"], [252, 3, 1, "", "on_step_end"], [252, 3, 1, "", "on_train_begin"], [252, 3, 1, "", "on_train_end"], [252, 5, 1, "", "pattern"], [252, 5, 1, "", "scheduler"], [252, 5, 1, "", "scores"], [252, 5, 1, "", "start_step"], [252, 5, 1, "", "target_sparsity_ratio"], [252, 5, 1, "", "update_frequency_on_step"], [252, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[252, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[252, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[253, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[253, 5, 1, "", "config_file_path"], [253, 3, 1, "", "get_sparsity_ratio"], [253, 5, 1, "", "model"], [253, 3, 1, "", "on_after_eval"], [253, 3, 1, "", "on_after_optimizer_step"], [253, 3, 1, "", "on_before_eval"], [253, 3, 1, "", "on_before_optimizer_step"], [253, 3, 1, "", "on_epoch_begin"], [253, 3, 1, "", "on_epoch_end"], [253, 3, 1, "", "on_step_begin"], [253, 3, 1, "", "on_step_end"], [253, 3, 1, "", "on_train_begin"], [253, 3, 1, "", "on_train_end"], [253, 5, 1, "", "pruner_info"], [253, 5, 1, "", "pruners"], [253, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[254, 2, 1, "", "IterativeScheduler"], [254, 2, 1, "", "OneshotScheduler"], [254, 2, 1, "", "Scheduler"], [254, 1, 1, "", "get_scheduler"], [254, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[254, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[254, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[254, 5, 1, "", "config"], [254, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[255, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[255, 4, 1, "", "calib_dataloader"], [255, 3, 1, "", "dataset"], [255, 3, 1, "", "execute"], [255, 4, 1, "", "metric"], [255, 4, 1, "", "objective"], [255, 4, 1, "", "postprocess"], [255, 3, 1, "", "pre_process"], [255, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[256, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[256, 3, 1, "", "append"], [256, 3, 1, "", "combine"], [256, 4, 1, "", "eval_func"], [256, 4, 1, "", "model"], [256, 4, 1, "", "train_func"]], "neural_compressor.metric": [[258, 2, 1, "", "BaseMetric"], [258, 2, 1, "", "METRICS"], [258, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[258, 4, 1, "", "hvd"], [258, 4, 1, "", "metric"], [258, 3, 1, "", "reset"], [258, 3, 1, "", "result"], [258, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[258, 5, 1, "", "metrics"], [258, 3, 1, "", "register"]], "neural_compressor.model": [[261, 2, 1, "", "BaseModel"], [260, 0, 0, "-", "base_model"], [262, 0, 0, "-", "model"], [263, 0, 0, "-", "nets_factory"], [264, 0, 0, "-", "onnx_model"], [265, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[261, 3, 1, "", "export"], [261, 3, 1, "", "framework"], [261, 4, 1, "", "graph_info"], [261, 4, 1, "", "model"], [261, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[260, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[260, 3, 1, "", "export"], [260, 3, 1, "", "framework"], [260, 4, 1, "", "graph_info"], [260, 4, 1, "", "model"], [260, 3, 1, "", "save"]], "neural_compressor.model.model": [[262, 2, 1, "", "MXNetModel"], [262, 2, 1, "", "TensorflowBaseModel"], [262, 2, 1, "", "TensorflowCheckpointModel"], [262, 2, 1, "", "TensorflowSavedModelModel"], [262, 1, 1, "", "checkpoint_session"], [262, 1, 1, "", "estimator_session"], [262, 1, 1, "", "frozen_pb_session"], [262, 1, 1, "", "get_model_fwk_name"], [262, 1, 1, "", "get_model_type"], [262, 1, 1, "", "graph_def_session"], [262, 1, 1, "", "graph_session"], [262, 1, 1, "", "keras_session"], [262, 1, 1, "", "load_saved_model"], [262, 1, 1, "", "saved_model_session"], [262, 1, 1, "", "slim_session"], [262, 1, 1, "", "validate_and_inference_input_output"], [262, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.model.MXNetModel": [[262, 3, 1, "", "framework"], [262, 4, 1, "", "model"], [262, 3, 1, "", "save"]], "neural_compressor.model.model.TensorflowBaseModel": [[262, 3, 1, "", "framework"], [262, 4, 1, "", "graph_info"], [262, 4, 1, "", "model"], [262, 3, 1, "", "save"], [262, 4, 1, "", "weights"]], "neural_compressor.model.model.TensorflowSavedModelModel": [[262, 4, 1, "", "model"], [262, 3, 1, "", "report_sparsity"], [262, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[264, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[264, 3, 1, "", "find_node_by_name"], [264, 3, 1, "", "find_nodes_by_initializer"], [264, 3, 1, "", "framework"], [264, 3, 1, "", "get_scale_zero"], [264, 4, 1, "", "graph_info"], [264, 4, 1, "", "model"], [264, 3, 1, "", "save"], [264, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.torch_model": [[265, 2, 1, "", "PyTorchBaseModel"], [265, 2, 1, "", "PyTorchFXModel"], [265, 2, 1, "", "PyTorchIpexModel"], [265, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[265, 3, 1, "", "framework"], [265, 3, 1, "", "get_all_weight_names"], [265, 3, 1, "", "get_gradient"], [265, 3, 1, "", "get_inputs"], [265, 3, 1, "", "get_weight"], [265, 4, 1, "", "model"], [265, 3, 1, "", "prune_weights_"], [265, 3, 1, "", "report_sparsity"], [265, 3, 1, "", "update_gradient"], [265, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchIpexModel": [[265, 4, 1, "", "graph_info"], [265, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchModel": [[265, 3, 1, "", "export"], [265, 4, 1, "", "graph_info"], [265, 3, 1, "", "save"]], "neural_compressor.objective": [[266, 2, 1, "", "Accuracy"], [266, 2, 1, "", "Footprint"], [266, 2, 1, "", "ModelSize"], [266, 2, 1, "", "Objective"], [266, 2, 1, "", "Performance"], [266, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[266, 3, 1, "", "end"], [266, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[266, 3, 1, "", "end"], [266, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[266, 3, 1, "", "end"], [266, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[266, 3, 1, "", "end"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "result_list"], [266, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[266, 3, 1, "", "end"], [266, 3, 1, "", "start"]], "neural_compressor.pruners": [[267, 0, 0, "-", "gradient_sensitivity"], [268, 0, 0, "-", "group_lasso"], [270, 0, 0, "-", "magnitude"], [271, 0, 0, "-", "pattern_lock"], [272, 0, 0, "-", "pruner"]], "neural_compressor.pruners.pruner": [[272, 1, 1, "", "pruner_registry"]], "neural_compressor.pruning": [[273, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[273, 3, 1, "", "on_epoch_begin"], [273, 3, 1, "", "on_epoch_end"], [273, 3, 1, "", "on_step_begin"], [273, 3, 1, "", "on_step_end"]], "neural_compressor.quantization": [[274, 2, 1, "", "Quantization"], [274, 1, 1, "", "fit"]], "neural_compressor.strategy": [[275, 0, 0, "-", "auto_mixed_precision"], [276, 0, 0, "-", "basic"], [277, 0, 0, "-", "bayesian"], [278, 0, 0, "-", "exhaustive"], [280, 0, 0, "-", "mse"], [281, 0, 0, "-", "random"], [282, 0, 0, "-", "st_utils"], [286, 0, 0, "-", "strategy"]], "neural_compressor.strategy.auto_mixed_precision": [[275, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[275, 3, 1, "", "next_tune_cfg"], [275, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[276, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[276, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[277, 2, 1, "", "BayesianTuneStrategy"], [277, 2, 1, "", "TargetSpace"], [277, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[277, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[277, 3, 1, "", "get_target"], [277, 3, 1, "", "max"], [277, 3, 1, "", "random_sample"], [277, 3, 1, "", "register"], [277, 3, 1, "", "res"]], "neural_compressor.strategy.exhaustive": [[278, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[278, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[280, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[280, 3, 1, "", "mse_impact_lst"], [280, 3, 1, "", "mse_metric_gap"], [280, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[281, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[281, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[283, 0, 0, "-", "tuning_sampler"], [284, 0, 0, "-", "tuning_space"], [285, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.strategy": [[286, 2, 1, "", "TuneStrategy"], [286, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[286, 3, 1, "", "next_tune_cfg"], [286, 3, 1, "", "stop"], [286, 3, 1, "", "traverse"]], "neural_compressor.training": [[287, 2, 1, "", "CompressionManager"], [287, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[287, 3, 1, "", "export"], [287, 3, 1, "", "save"]], "neural_compressor.utils": [[291, 2, 1, "", "KL_Divergence"], [291, 2, 1, "", "LayerHistogramCollector"], [288, 0, 0, "-", "collect_layer_histogram"], [289, 0, 0, "-", "constant"], [290, 0, 0, "-", "create_obj_from_config"], [292, 0, 0, "-", "kl_divergence"], [293, 0, 0, "-", "load_huggingface"], [294, 0, 0, "-", "logger"], [295, 0, 0, "-", "options"], [296, 0, 0, "-", "pytorch"], [297, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[291, 3, 1, "", "expand_quantized_bins"], [291, 3, 1, "", "get_threshold"], [291, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[291, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[288, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[288, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[290, 1, 1, "", "create_eval_func"], [290, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[292, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[292, 3, 1, "", "expand_quantized_bins"], [292, 3, 1, "", "get_threshold"], [292, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[296, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[297, 2, 1, "", "LazyImport"], [297, 2, 1, "", "MODE"], [297, 1, 1, "", "combine_histogram"], [297, 1, 1, "", "dump_data_to_local"], [297, 1, 1, "", "dump_elapsed_time"], [297, 1, 1, "", "equal_dicts"], [297, 1, 1, "", "get_size"], [297, 1, 1, "", "get_tuning_history"], [297, 1, 1, "", "load_data_from_pkl"], [297, 1, 1, "", "recover"]], "neural_compressor.ux": [[370, 0, 0, "-", "components"], [426, 0, 0, "-", "inc_bench"], [435, 0, 0, "-", "utils"], [460, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[301, 0, 0, "-", "benchmark"], [305, 0, 0, "-", "config_generator"], [312, 0, 0, "-", "configuration_wizard"], [346, 0, 0, "-", "db_manager"], [351, 0, 0, "-", "diagnosis"], [359, 0, 0, "-", "file_browser"], [365, 0, 0, "-", "graph"], [371, 0, 0, "-", "jobs_management"], [375, 0, 0, "-", "manage_workspace"], [377, 0, 0, "-", "model"], [396, 0, 0, "-", "model_zoo"], [398, 0, 0, "-", "names_mapper"], [405, 0, 0, "-", "optimization"], [418, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[301, 2, 1, "", "Benchmarks"], [298, 0, 0, "-", "benchmark"], [299, 0, 0, "-", "benchmark_model"], [300, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[298, 2, 1, "", "Benchmark"], [298, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[298, 4, 1, "", "config_filename"], [298, 4, 1, "", "configuration_data"], [298, 3, 1, "", "execute"], [298, 3, 1, "", "generate_config"], [298, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[299, 1, 1, "", "benchmark_model"], [299, 1, 1, "", "parse_args"], [299, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[300, 1, 1, "", "benchmark_result_update"], [300, 1, 1, "", "benchmark_result_update_pytorch_script"], [300, 1, 1, "", "execute_benchmark"], [300, 1, 1, "", "execute_real_benchmark"], [300, 1, 1, "", "pytorch_script_bench_optimizations"], [300, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[302, 0, 0, "-", "benchmark_config_generator"], [303, 0, 0, "-", "config_generator"], [304, 0, 0, "-", "graph_optimization_config_generator"], [306, 0, 0, "-", "mixed_precision_config_generator"], [307, 0, 0, "-", "profiling_config_generator"], [308, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[302, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[302, 3, 1, "", "generate"], [302, 3, 1, "", "generate_accuracy_config"], [302, 3, 1, "", "generate_evaluation_config"], [302, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[303, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[303, 3, 1, "", "generate"], [303, 3, 1, "", "generate_dataloader_config"], [303, 3, 1, "", "generate_model_config"], [303, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[304, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[304, 3, 1, "", "generate"], [304, 3, 1, "", "generate_evaluation_config"], [304, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[306, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[306, 3, 1, "", "generate"], [306, 3, 1, "", "generate_evaluation_config"], [306, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[307, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[307, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[308, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[308, 3, 1, "", "generate"], [308, 3, 1, "", "generate_evaluation_config"], [308, 3, 1, "", "generate_quantization_config"], [308, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[309, 0, 0, "-", "configuration_parser"], [310, 0, 0, "-", "get_boundary_nodes"], [311, 0, 0, "-", "get_configuration"], [313, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[309, 2, 1, "", "ConfigurationParser"], [309, 1, 1, "", "normalize_string_list"], [309, 1, 1, "", "parse_list_value"], [309, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[309, 3, 1, "", "get_param_type"], [309, 3, 1, "", "parse"], [309, 3, 1, "", "parse_dataloader"], [309, 3, 1, "", "parse_evaluation_data"], [309, 3, 1, "", "parse_metric"], [309, 3, 1, "", "parse_transforms"], [309, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[310, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[311, 1, 1, "", "get_predefined_configuration"], [311, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[313, 2, 1, "", "Feeder"], [313, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[313, 3, 1, "", "feed"], [313, 3, 1, "", "get_dataloaders"], [313, 3, 1, "", "get_domains"], [313, 3, 1, "", "get_frameworks"], [313, 3, 1, "", "get_metrics"], [313, 3, 1, "", "get_models"], [313, 3, 1, "", "get_objectives"], [313, 3, 1, "", "get_precisions"], [313, 3, 1, "", "get_quantization_approaches"], [313, 3, 1, "", "get_strategies"], [313, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[346, 2, 1, "", "DBManager"], [314, 0, 0, "-", "db_manager"], [323, 0, 0, "-", "db_models"], [341, 0, 0, "-", "db_operations"], [347, 0, 0, "-", "params_interfaces"], [348, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[346, 3, 1, "", "create_all"], [346, 3, 1, "", "create_sqlalchemy_engine"], [346, 4, 1, "", "engine"], [346, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[314, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[314, 3, 1, "", "create_all"], [314, 3, 1, "", "create_sqlalchemy_engine"], [314, 4, 1, "", "engine"], [314, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[315, 0, 0, "-", "benchmark"], [316, 0, 0, "-", "benchmark_result"], [317, 0, 0, "-", "dataloader"], [318, 0, 0, "-", "dataset"], [319, 0, 0, "-", "domain"], [320, 0, 0, "-", "domain_flavour"], [321, 0, 0, "-", "example"], [322, 0, 0, "-", "framework"], [324, 0, 0, "-", "metric"], [325, 0, 0, "-", "model"], [326, 0, 0, "-", "optimization"], [327, 0, 0, "-", "optimization_type"], [328, 0, 0, "-", "precision"], [329, 0, 0, "-", "profiling"], [330, 0, 0, "-", "profiling_result"], [331, 0, 0, "-", "project"], [332, 0, 0, "-", "transform"], [333, 0, 0, "-", "tuning_details"], [334, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[315, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[315, 3, 1, "", "add"], [315, 3, 1, "", "build_info"], [315, 3, 1, "", "clean_status"], [315, 3, 1, "", "delete_benchmark"], [315, 3, 1, "", "details"], [315, 3, 1, "", "list"], [315, 3, 1, "", "update_batch_size"], [315, 3, 1, "", "update_config_path"], [315, 3, 1, "", "update_cores_per_instance"], [315, 3, 1, "", "update_dataset"], [315, 3, 1, "", "update_duration"], [315, 3, 1, "", "update_execution_command"], [315, 3, 1, "", "update_log_path"], [315, 3, 1, "", "update_mode"], [315, 3, 1, "", "update_number_of_instance"], [315, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[316, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[316, 3, 1, "", "add"], [316, 3, 1, "", "build_info"], [316, 3, 1, "", "update_accuracy"], [316, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[317, 2, 1, "", "Dataloader"], [317, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[317, 3, 1, "", "list"], [317, 3, 1, "", "list_by_framework"], [317, 3, 1, "", "query_to_list"], [317, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[318, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[318, 3, 1, "", "add"], [318, 3, 1, "", "build_info"], [318, 3, 1, "", "delete_dataset"], [318, 3, 1, "", "details"], [318, 3, 1, "", "list"], [318, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[319, 2, 1, "", "Domain"], [319, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[319, 3, 1, "", "get_domain_id"], [319, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[320, 2, 1, "", "DomainFlavour"], [320, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[320, 3, 1, "", "get_domain_flavour_id"], [320, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[321, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[322, 2, 1, "", "Framework"], [322, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[322, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[324, 2, 1, "", "Metric"], [324, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[324, 3, 1, "", "list"], [324, 3, 1, "", "list_by_framework"], [324, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[325, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[325, 3, 1, "", "add"], [325, 3, 1, "", "build_info"], [325, 3, 1, "", "delete_model"], [325, 3, 1, "", "details"], [325, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[326, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[326, 3, 1, "", "add"], [326, 3, 1, "", "build_info"], [326, 3, 1, "", "clean_status"], [326, 3, 1, "", "delete_optimization"], [326, 3, 1, "", "details"], [326, 3, 1, "", "get_optimization_by_project_and_model"], [326, 3, 1, "", "get_pinned_benchmarks"], [326, 3, 1, "", "list"], [326, 3, 1, "", "pin_accuracy_benchmark"], [326, 3, 1, "", "pin_performance_benchmark"], [326, 3, 1, "", "unpin_benchmark"], [326, 3, 1, "", "update_batch_size"], [326, 3, 1, "", "update_config_path"], [326, 3, 1, "", "update_dataset"], [326, 3, 1, "", "update_duration"], [326, 3, 1, "", "update_execution_command"], [326, 3, 1, "", "update_log_path"], [326, 3, 1, "", "update_optimized_model"], [326, 3, 1, "", "update_precision"], [326, 3, 1, "", "update_sampling_size"], [326, 3, 1, "", "update_status"], [326, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[327, 2, 1, "", "OptimizationType"], [327, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[327, 3, 1, "", "add"], [327, 3, 1, "", "get_optimization_type_by_id"], [327, 3, 1, "", "get_optimization_type_by_name"], [327, 3, 1, "", "get_optimization_type_for_precision"], [327, 3, 1, "", "get_optimization_type_id"], [327, 3, 1, "", "list"], [327, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[328, 2, 1, "", "Precision"], [328, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[328, 3, 1, "", "add"], [328, 3, 1, "", "get_precision_by_id"], [328, 3, 1, "", "get_precision_by_name"], [328, 3, 1, "", "get_precision_id"], [328, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[329, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[329, 3, 1, "", "add"], [329, 3, 1, "", "build_info"], [329, 3, 1, "", "clean_status"], [329, 3, 1, "", "delete_profiling"], [329, 3, 1, "", "details"], [329, 3, 1, "", "list"], [329, 3, 1, "", "update_dataset"], [329, 3, 1, "", "update_duration"], [329, 3, 1, "", "update_execution_command"], [329, 3, 1, "", "update_log_path"], [329, 3, 1, "", "update_num_threads"], [329, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[330, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[330, 3, 1, "", "add"], [330, 3, 1, "", "build_info"], [330, 3, 1, "", "bulk_add"], [330, 3, 1, "", "delete_results"], [330, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[331, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[331, 3, 1, "", "create_project"], [331, 3, 1, "", "delete_project"], [331, 3, 1, "", "get_model_by_name"], [331, 3, 1, "", "list_projects"], [331, 3, 1, "", "project_details"], [331, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[332, 2, 1, "", "Transform"], [332, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[332, 3, 1, "", "list"], [332, 3, 1, "", "list_by_domain"], [332, 3, 1, "", "list_by_framework"], [332, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[333, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[333, 3, 1, "", "add"], [333, 3, 1, "", "delete_tuning_details"], [333, 3, 1, "", "update"], [333, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[334, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[334, 3, 1, "", "add"], [334, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[341, 2, 1, "", "BenchmarkAPIInterface"], [341, 2, 1, "", "DatasetAPIInterface"], [341, 2, 1, "", "DiagnosisAPIInterface"], [341, 2, 1, "", "DictionariesAPIInterface"], [341, 2, 1, "", "ExamplesAPIInterface"], [341, 2, 1, "", "ModelAPIInterface"], [341, 2, 1, "", "OptimizationAPIInterface"], [341, 2, 1, "", "ProfilingAPIInterface"], [341, 2, 1, "", "ProjectAPIInterface"], [335, 0, 0, "-", "benchmark_api_interface"], [336, 0, 0, "-", "dataset_api_interface"], [337, 0, 0, "-", "db_operations"], [338, 0, 0, "-", "diagnosis_api_interface"], [339, 0, 0, "-", "dictionaries_api_interface"], [340, 0, 0, "-", "examples_api_interface"], [342, 0, 0, "-", "model_api_interface"], [343, 0, 0, "-", "optimization_api_interface"], [344, 0, 0, "-", "profiling_api_interface"], [345, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[341, 3, 1, "", "add_benchmark"], [341, 3, 1, "", "add_result"], [341, 3, 1, "", "clean_status"], [341, 3, 1, "", "delete_benchmark"], [341, 3, 1, "", "edit_benchmark"], [341, 3, 1, "", "get_benchmark_details"], [341, 3, 1, "", "list_benchmarks"], [341, 3, 1, "", "parse_benchmark_data"], [341, 3, 1, "", "parse_benchmark_edit_data"], [341, 3, 1, "", "update_benchmark_accuracy"], [341, 3, 1, "", "update_benchmark_duration"], [341, 3, 1, "", "update_benchmark_performance"], [341, 3, 1, "", "update_benchmark_status"], [341, 3, 1, "", "update_execution_command"], [341, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[341, 3, 1, "", "add_dataset"], [341, 3, 1, "", "check_if_custom_metric_or_dataloader"], [341, 3, 1, "", "dataloader_path"], [341, 3, 1, "", "delete_dataset"], [341, 3, 1, "", "generate_custom_template"], [341, 3, 1, "", "generate_template"], [341, 3, 1, "", "get_dataset_details"], [341, 3, 1, "", "get_predefined_dataset"], [341, 3, 1, "", "list_datasets"], [341, 3, 1, "", "parse_dataset_data"], [341, 3, 1, "", "prepare_predefined_dataloader"], [341, 3, 1, "", "prepare_predefined_transform"], [341, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[341, 3, 1, "", "generate_optimization"], [341, 3, 1, "", "get_op_details"], [341, 3, 1, "", "get_op_list"], [341, 3, 1, "", "histogram"], [341, 3, 1, "", "model_wise_params"], [341, 3, 1, "", "parse_model_wise_config"], [341, 3, 1, "", "parse_op_wise_config"], [341, 3, 1, "", "parse_optimization_data"], [341, 3, 1, "", "parse_wise_parameters"], [341, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[341, 3, 1, "", "list_dataloaders"], [341, 3, 1, "", "list_dataloaders_by_framework"], [341, 3, 1, "", "list_domain_flavours"], [341, 3, 1, "", "list_domains"], [341, 3, 1, "", "list_metrics"], [341, 3, 1, "", "list_metrics_by_framework"], [341, 3, 1, "", "list_optimization_types"], [341, 3, 1, "", "list_optimization_types_for_precision"], [341, 3, 1, "", "list_precisions"], [341, 3, 1, "", "list_transforms"], [341, 3, 1, "", "list_transforms_by_domain"], [341, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[341, 3, 1, "", "create_project"], [341, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[341, 3, 1, "", "add_model"], [341, 3, 1, "", "delete_model"], [341, 3, 1, "", "get_model_details"], [341, 3, 1, "", "list_models"], [341, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[341, 3, 1, "", "add_optimization"], [341, 3, 1, "", "add_quantization_optimization"], [341, 3, 1, "", "add_standard_optimization"], [341, 3, 1, "", "add_tuning_history"], [341, 3, 1, "", "clean_status"], [341, 3, 1, "", "delete_optimization"], [341, 3, 1, "", "edit_optimization"], [341, 3, 1, "", "get_optimization_details"], [341, 3, 1, "", "list_optimizations"], [341, 3, 1, "", "parse_optimization_data"], [341, 3, 1, "", "parse_optimization_edit_data"], [341, 3, 1, "", "parse_tuning_history"], [341, 3, 1, "", "pin_accuracy_benchmark"], [341, 3, 1, "", "pin_performance_benchmark"], [341, 3, 1, "", "update_execution_command"], [341, 3, 1, "", "update_optimization_duration"], [341, 3, 1, "", "update_optimization_status"], [341, 3, 1, "", "update_optimized_model"], [341, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[341, 3, 1, "", "add_profiling"], [341, 3, 1, "", "add_result"], [341, 3, 1, "", "bulk_add_results"], [341, 3, 1, "", "clean_status"], [341, 3, 1, "", "delete_profiling"], [341, 3, 1, "", "edit_profiling"], [341, 3, 1, "", "get_profiling_details"], [341, 3, 1, "", "list_profilings"], [341, 3, 1, "", "parse_profiling_data"], [341, 3, 1, "", "parse_profiling_edit_data"], [341, 3, 1, "", "parse_profiling_result_data"], [341, 3, 1, "", "update_execution_command"], [341, 3, 1, "", "update_log_path"], [341, 3, 1, "", "update_profiling_duration"], [341, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[341, 3, 1, "", "add_dummy_dataset"], [341, 3, 1, "", "add_model"], [341, 3, 1, "", "create_project"], [341, 3, 1, "", "delete_project"], [341, 3, 1, "", "get_project_details"], [341, 3, 1, "", "list_projects"], [341, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[335, 2, 1, "", "BenchmarkAPIInterface"], [335, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[335, 3, 1, "", "add_benchmark"], [335, 3, 1, "", "add_result"], [335, 3, 1, "", "clean_status"], [335, 3, 1, "", "delete_benchmark"], [335, 3, 1, "", "edit_benchmark"], [335, 3, 1, "", "get_benchmark_details"], [335, 3, 1, "", "list_benchmarks"], [335, 3, 1, "", "parse_benchmark_data"], [335, 3, 1, "", "parse_benchmark_edit_data"], [335, 3, 1, "", "update_benchmark_accuracy"], [335, 3, 1, "", "update_benchmark_duration"], [335, 3, 1, "", "update_benchmark_performance"], [335, 3, 1, "", "update_benchmark_status"], [335, 3, 1, "", "update_execution_command"], [335, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[336, 2, 1, "", "DatasetAPIInterface"], [336, 1, 1, "", "initialize_associations"], [336, 1, 1, "", "initialize_precision_optimization_types_association"], [336, 1, 1, "", "search_in_list_of_dict"], [336, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [336, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[336, 3, 1, "", "add_dataset"], [336, 3, 1, "", "check_if_custom_metric_or_dataloader"], [336, 3, 1, "", "dataloader_path"], [336, 3, 1, "", "delete_dataset"], [336, 3, 1, "", "generate_custom_template"], [336, 3, 1, "", "generate_template"], [336, 3, 1, "", "get_dataset_details"], [336, 3, 1, "", "get_predefined_dataset"], [336, 3, 1, "", "list_datasets"], [336, 3, 1, "", "parse_dataset_data"], [336, 3, 1, "", "prepare_predefined_dataloader"], [336, 3, 1, "", "prepare_predefined_transform"], [336, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[337, 1, 1, "", "initialize_associations"], [337, 1, 1, "", "initialize_precision_optimization_types_association"], [337, 1, 1, "", "search_in_list_of_dict"], [337, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [337, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[338, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[338, 3, 1, "", "generate_optimization"], [338, 3, 1, "", "get_op_details"], [338, 3, 1, "", "get_op_list"], [338, 3, 1, "", "histogram"], [338, 3, 1, "", "model_wise_params"], [338, 3, 1, "", "parse_model_wise_config"], [338, 3, 1, "", "parse_op_wise_config"], [338, 3, 1, "", "parse_optimization_data"], [338, 3, 1, "", "parse_wise_parameters"], [338, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[339, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[339, 3, 1, "", "list_dataloaders"], [339, 3, 1, "", "list_dataloaders_by_framework"], [339, 3, 1, "", "list_domain_flavours"], [339, 3, 1, "", "list_domains"], [339, 3, 1, "", "list_metrics"], [339, 3, 1, "", "list_metrics_by_framework"], [339, 3, 1, "", "list_optimization_types"], [339, 3, 1, "", "list_optimization_types_for_precision"], [339, 3, 1, "", "list_precisions"], [339, 3, 1, "", "list_transforms"], [339, 3, 1, "", "list_transforms_by_domain"], [339, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[340, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[340, 3, 1, "", "create_project"], [340, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[342, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[342, 3, 1, "", "add_model"], [342, 3, 1, "", "delete_model"], [342, 3, 1, "", "get_model_details"], [342, 3, 1, "", "list_models"], [342, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[343, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[343, 3, 1, "", "add_optimization"], [343, 3, 1, "", "add_quantization_optimization"], [343, 3, 1, "", "add_standard_optimization"], [343, 3, 1, "", "add_tuning_history"], [343, 3, 1, "", "clean_status"], [343, 3, 1, "", "delete_optimization"], [343, 3, 1, "", "edit_optimization"], [343, 3, 1, "", "get_optimization_details"], [343, 3, 1, "", "list_optimizations"], [343, 3, 1, "", "parse_optimization_data"], [343, 3, 1, "", "parse_optimization_edit_data"], [343, 3, 1, "", "parse_tuning_history"], [343, 3, 1, "", "pin_accuracy_benchmark"], [343, 3, 1, "", "pin_performance_benchmark"], [343, 3, 1, "", "update_execution_command"], [343, 3, 1, "", "update_optimization_duration"], [343, 3, 1, "", "update_optimization_status"], [343, 3, 1, "", "update_optimized_model"], [343, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[344, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[344, 3, 1, "", "add_profiling"], [344, 3, 1, "", "add_result"], [344, 3, 1, "", "bulk_add_results"], [344, 3, 1, "", "clean_status"], [344, 3, 1, "", "delete_profiling"], [344, 3, 1, "", "edit_profiling"], [344, 3, 1, "", "get_profiling_details"], [344, 3, 1, "", "list_profilings"], [344, 3, 1, "", "parse_profiling_data"], [344, 3, 1, "", "parse_profiling_edit_data"], [344, 3, 1, "", "parse_profiling_result_data"], [344, 3, 1, "", "update_execution_command"], [344, 3, 1, "", "update_log_path"], [344, 3, 1, "", "update_profiling_duration"], [344, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[345, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[345, 3, 1, "", "add_dummy_dataset"], [345, 3, 1, "", "add_model"], [345, 3, 1, "", "create_project"], [345, 3, 1, "", "delete_project"], [345, 3, 1, "", "get_project_details"], [345, 3, 1, "", "list_projects"], [345, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[347, 2, 1, "", "BenchmarkAddParamsInterface"], [347, 2, 1, "", "BenchmarkEditParamsInterface"], [347, 2, 1, "", "DatasetAddParamsInterface"], [347, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [347, 2, 1, "", "ModelAddParamsInterface"], [347, 2, 1, "", "OptimizationAddParamsInterface"], [347, 2, 1, "", "OptimizationEditParamsInterface"], [347, 2, 1, "", "ProfilingAddParamsInterface"], [347, 2, 1, "", "ProfilingEditParamsInterface"], [347, 2, 1, "", "ProfilingResultAddParamsInterface"], [347, 2, 1, "", "TuningHistoryInterface"], [347, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[347, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[347, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[347, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[348, 1, 1, "", "get_framework_dataloaders_config"], [348, 1, 1, "", "get_framework_transforms_config"], [348, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[349, 0, 0, "-", "diagnosis"], [350, 0, 0, "-", "factory"], [352, 0, 0, "-", "onnx_diagnosis"], [354, 0, 0, "-", "op_details"], [355, 0, 0, "-", "op_entry"], [356, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[349, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[349, 3, 1, "", "calculate_mse"], [349, 3, 1, "", "get_histogram_data"], [349, 3, 1, "", "get_op_details"], [349, 3, 1, "", "get_op_list"], [349, 3, 1, "", "get_tensors_info"], [349, 3, 1, "", "load_quantization_config"], [349, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[350, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[350, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[353, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[353, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[353, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[354, 2, 1, "", "OpActivation"], [354, 2, 1, "", "OpDetails"], [354, 2, 1, "", "OpPattern"], [354, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[354, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[355, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[355, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[357, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[357, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[357, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[358, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[358, 1, 1, "", "create_dir_entry"], [358, 1, 1, "", "create_entry"], [358, 1, 1, "", "create_file_entry"], [358, 1, 1, "", "filter_requested_entries"], [358, 1, 1, "", "get_directory_entries"], [358, 1, 1, "", "get_filter_value"], [358, 1, 1, "", "get_non_hidden_directory_entries"], [358, 1, 1, "", "get_requested_path"], [358, 1, 1, "", "get_setting_value"], [358, 1, 1, "", "is_dataset_or_directory_entry"], [358, 1, 1, "", "is_directory_entry"], [358, 1, 1, "", "is_model_or_directory_entry"], [358, 1, 1, "", "should_show_files"], [358, 1, 1, "", "should_show_only_model_files"], [358, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[360, 0, 0, "-", "attribute"], [361, 0, 0, "-", "collapser"], [362, 0, 0, "-", "edge"], [363, 0, 0, "-", "graph"], [364, 0, 0, "-", "graph_reader"], [366, 0, 0, "-", "node"], [367, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[360, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[361, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[361, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[362, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[362, 4, 1, "", "source"], [362, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[363, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[363, 3, 1, "", "add_edge"], [363, 3, 1, "", "add_node"], [363, 4, 1, "", "edges"], [363, 3, 1, "", "get_node"], [363, 3, 1, "", "get_target_nodes"], [363, 3, 1, "", "highlight_pattern"], [363, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[364, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[364, 3, 1, "", "find_pattern_in_graph"], [364, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[366, 2, 1, "", "GroupNode"], [366, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[368, 0, 0, "-", "onnxrt_reader"], [369, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[368, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[368, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[369, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[369, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[372, 0, 0, "-", "jobs_control_queue"], [373, 0, 0, "-", "jobs_manager"], [374, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[375, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[376, 0, 0, "-", "domain"], [378, 0, 0, "-", "model"], [379, 0, 0, "-", "model_type_getter"], [380, 0, 0, "-", "onnxrt"], [382, 0, 0, "-", "pytorch"], [384, 0, 0, "-", "repository"], [385, 0, 0, "-", "shape"], [387, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[376, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[378, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[378, 4, 1, "", "domain"], [378, 3, 1, "", "ensure_supported_path"], [378, 3, 1, "", "get_framework_name"], [378, 3, 1, "", "get_input_nodes"], [378, 3, 1, "", "get_model_graph"], [378, 3, 1, "", "get_output_nodes"], [378, 3, 1, "", "get_tensors_info"], [378, 3, 1, "", "guard_requirements_installed"], [378, 4, 1, "", "input_shape"], [378, 4, 1, "", "shape_elements_order"], [378, 4, 1, "", "supports_graph"], [378, 3, 1, "", "supports_path"], [378, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[379, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[381, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[381, 2, 1, "", "OnnxrtModel"], [381, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[381, 4, 1, "", "domain"], [381, 4, 1, "", "filtered_input_nodes"], [381, 3, 1, "", "get_framework_name"], [381, 3, 1, "", "get_model_graph"], [381, 3, 1, "", "guard_requirements_installed"], [381, 4, 1, "", "input_shape"], [381, 4, 1, "", "nc_model_instance"], [381, 4, 1, "", "shape_elements_order"], [381, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[383, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[383, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[383, 3, 1, "", "get_framework_name"], [383, 3, 1, "", "guard_requirements_installed"], [383, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[384, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[384, 3, 1, "", "get_framework_from_path"], [384, 3, 1, "", "get_frameworks"], [384, 3, 1, "", "get_model"], [384, 3, 1, "", "get_supported_frameworks"], [384, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[385, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[385, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[386, 0, 0, "-", "frozen_pb"], [388, 0, 0, "-", "keras"], [389, 0, 0, "-", "meta_graph"], [390, 0, 0, "-", "model"], [391, 0, 0, "-", "saved_model"], [392, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[386, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[386, 3, 1, "", "supports_path"], [386, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[388, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[388, 3, 1, "", "get_input_nodes"], [388, 3, 1, "", "get_output_nodes"], [388, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[389, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[389, 3, 1, "", "get_input_nodes"], [389, 3, 1, "", "get_model_graph"], [389, 3, 1, "", "get_output_nodes"], [389, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[390, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[390, 3, 1, "", "get_framework_name"], [390, 3, 1, "", "get_input_nodes"], [390, 3, 1, "", "get_model_graph"], [390, 3, 1, "", "get_output_nodes"], [390, 3, 1, "", "guard_requirements_installed"], [390, 4, 1, "", "input_shape"], [390, 4, 1, "", "nc_model_instance"], [390, 4, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[391, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[391, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[392, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[393, 0, 0, "-", "download_config"], [394, 0, 0, "-", "download_model"], [395, 0, 0, "-", "downloader"], [397, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[393, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[394, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[395, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[395, 3, 1, "", "download"], [395, 3, 1, "", "download_config"], [395, 3, 1, "", "download_file"], [395, 3, 1, "", "download_model"], [395, 3, 1, "", "download_yaml_config"], [395, 3, 1, "", "get_yaml_url"], [395, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[397, 1, 1, "", "check_version"], [397, 1, 1, "", "get_available_models"], [397, 1, 1, "", "get_framework_module_name"], [397, 1, 1, "", "get_installed_frameworks"], [397, 1, 1, "", "list_models"], [397, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[399, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[399, 2, 1, "", "MappingDirection"], [399, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[399, 4, 1, "", "domain_flavour_mappings"], [399, 4, 1, "", "domain_mappings"], [399, 4, 1, "", "framework_mappings"], [399, 3, 1, "", "map_name"], [399, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[405, 2, 1, "", "Optimizations"], [400, 0, 0, "-", "execute_optimization"], [401, 0, 0, "-", "factory"], [403, 0, 0, "-", "graph_optimizer"], [406, 0, 0, "-", "mixed_precision"], [409, 0, 0, "-", "neural_coder_optimization"], [411, 0, 0, "-", "optimization"], [412, 0, 0, "-", "tune"], [415, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[400, 1, 1, "", "check_if_collect_tuning_history"], [400, 1, 1, "", "execute_optimization"], [400, 1, 1, "", "execute_optimization_pytorch_script"], [400, 1, 1, "", "execute_optimization_regular"], [400, 1, 1, "", "parse_logs"], [400, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[401, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[401, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[402, 0, 0, "-", "graph_optimization"], [404, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[402, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[402, 4, 1, "", "configuration_data"], [402, 3, 1, "", "execute"], [402, 3, 1, "", "generate_config"], [402, 4, 1, "", "optimization_script"], [402, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[404, 1, 1, "", "optimize_graph"], [404, 1, 1, "", "optimize_graph_config"], [404, 1, 1, "", "parse_args"], [404, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[407, 0, 0, "-", "mixed_precision"], [408, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[407, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[407, 4, 1, "", "configuration_data"], [407, 3, 1, "", "execute"], [407, 3, 1, "", "generate_config"], [407, 4, 1, "", "optimization_script"], [407, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[408, 1, 1, "", "optimize_graph"], [408, 1, 1, "", "optimize_graph_config"], [408, 1, 1, "", "parse_args"], [408, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[410, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[410, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[411, 2, 1, "", "DataloaderInterface"], [411, 2, 1, "", "Optimization"], [411, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[411, 4, 1, "", "command"], [411, 4, 1, "", "config_filename"], [411, 4, 1, "", "configuration_data"], [411, 3, 1, "", "execute"], [411, 3, 1, "", "generate_config"], [411, 4, 1, "", "optimization_script"], [411, 4, 1, "", "output_model_dir"], [411, 4, 1, "", "output_model_name"], [411, 4, 1, "", "parameters"], [411, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[413, 0, 0, "-", "tune_model"], [414, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[413, 1, 1, "", "parse_args"], [413, 1, 1, "", "set_eager_execution"], [413, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[414, 2, 1, "", "AccuracyCriterion"], [414, 2, 1, "", "Tuning"], [414, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[414, 4, 1, "", "configuration_data"], [414, 3, 1, "", "execute"], [414, 3, 1, "", "generate_config"], [414, 4, 1, "", "optimization_script"], [414, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[415, 2, 1, "", "TuningHistory"], [415, 2, 1, "", "Watcher"], [415, 1, 1, "", "tuning_history"], [415, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[415, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[415, 3, 1, "", "history_file_modification_time"], [415, 3, 1, "", "stop"], [415, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[416, 0, 0, "-", "execute_profiling"], [417, 0, 0, "-", "factory"], [419, 0, 0, "-", "profile_model"], [420, 0, 0, "-", "profiler"], [421, 0, 0, "-", "profiling"], [423, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[416, 1, 1, "", "execute_profiling"], [416, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[417, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[417, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[419, 1, 1, "", "load_profiling_details"], [419, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[420, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[420, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[421, 2, 1, "", "DataloaderInterface"], [421, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[421, 4, 1, "", "config_filename"], [421, 4, 1, "", "config_path"], [421, 3, 1, "", "execute"], [421, 3, 1, "", "generate_config"], [421, 4, 1, "", "profiling_data"], [421, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[422, 0, 0, "-", "factory"], [424, 0, 0, "-", "profiler"], [425, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[422, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[422, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[424, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[424, 3, 1, "", "build_dataloader"], [424, 3, 1, "", "convert_nodes_to_list"], [424, 3, 1, "", "create_tf_config"], [424, 3, 1, "", "get_node_by_name"], [424, 3, 1, "", "initialize_graph"], [424, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[425, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[426, 1, 1, "", "main"], [426, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[428, 0, 0, "-", "consts"], [429, 0, 0, "-", "environment"], [430, 0, 0, "-", "exceptions"], [431, 0, 0, "-", "executor"], [432, 0, 0, "-", "expiring_dict"], [433, 0, 0, "-", "github_info"], [434, 0, 0, "-", "hw_info"], [436, 0, 0, "-", "json_serializer"], [437, 0, 0, "-", "logger"], [438, 0, 0, "-", "parser"], [439, 0, 0, "-", "proc"], [440, 0, 0, "-", "processes"], [441, 0, 0, "-", "singleton"], [442, 0, 0, "-", "templates"], [445, 0, 0, "-", "utils"], [450, 0, 0, "-", "workload"], [456, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[428, 2, 1, "", "DomainFlavours"], [428, 2, 1, "", "Domains"], [428, 2, 1, "", "ExecutionStatus"], [428, 2, 1, "", "Frameworks"], [428, 2, 1, "", "OptimizationTypes"], [428, 2, 1, "", "Precisions"], [428, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[429, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[429, 3, 1, "", "clean_workloads_wip_status"], [429, 3, 1, "", "ensure_workdir_exists_and_writeable"], [429, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[430, 7, 1, "", "AccessDeniedException"], [430, 7, 1, "", "ClientErrorException"], [430, 7, 1, "", "InternalException"], [430, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[431, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[431, 4, 1, "", "additional_log_names"], [431, 3, 1, "", "call"], [431, 3, 1, "", "call_one"], [431, 3, 1, "", "is_multi_commands"], [431, 4, 1, "", "log_name"], [431, 4, 1, "", "process_duration"], [431, 3, 1, "", "refresh_workdir"], [431, 4, 1, "", "request_id"], [431, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[432, 2, 1, "", "ExpiringDict"], [432, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[432, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[433, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[433, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[434, 2, 1, "", "HWInfo"], [434, 1, 1, "", "get_bios_version"], [434, 1, 1, "", "get_distribution"], [434, 1, 1, "", "get_framework_dependency_info"], [434, 1, 1, "", "get_framework_info"], [434, 1, 1, "", "get_kernel_version"], [434, 1, 1, "", "get_number_of_sockets"], [434, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[434, 3, 1, "", "initialize"], [434, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[436, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[436, 3, 1, "", "serialize"], [436, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[437, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[438, 2, 1, "", "AccuracyParser"], [438, 2, 1, "", "BenchmarkParserFactory"], [438, 2, 1, "", "OptimizationParser"], [438, 2, 1, "", "Parser"], [438, 2, 1, "", "PerformanceParser"], [438, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[438, 4, 1, "", "patterns"], [438, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[438, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[438, 4, 1, "", "patterns"], [438, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[438, 4, 1, "", "patterns"], [438, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[438, 4, 1, "", "patterns"], [438, 3, 1, "", "process"], [438, 3, 1, "", "summarize_partial"], [438, 3, 1, "", "summarize_value"], [438, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[438, 4, 1, "", "patterns"], [438, 3, 1, "", "process"], [438, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[439, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[439, 4, 1, "", "info"], [439, 4, 1, "", "info_path"], [439, 4, 1, "", "is_ok"], [439, 4, 1, "", "output"], [439, 4, 1, "", "output_path"], [439, 3, 1, "", "remove_logs"], [439, 3, 1, "", "run"], [439, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[440, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[440, 4, 1, "", "is_ok"], [440, 3, 1, "", "remove_successful_logs"], [440, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[441, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[443, 0, 0, "-", "metric"], [444, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[443, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[443, 4, 1, "", "acc_input_model"], [443, 4, 1, "", "acc_optimized_model"], [443, 4, 1, "", "accuracy"], [443, 3, 1, "", "calculate_throughput"], [443, 3, 1, "", "insert_data"], [443, 4, 1, "", "latency"], [443, 4, 1, "", "optimization_time"], [443, 4, 1, "", "path_optimized_model"], [443, 4, 1, "", "profiling_data"], [443, 4, 1, "", "size_input_model"], [443, 4, 1, "", "size_optimized_model"], [443, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[444, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[444, 3, 1, "", "clean_logs"], [444, 3, 1, "", "clean_status"], [444, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[445, 1, 1, "", "check_module"], [445, 1, 1, "", "deprecated"], [445, 1, 1, "", "determine_ip"], [445, 1, 1, "", "export_to_csv"], [445, 1, 1, "", "filter_transforms"], [445, 1, 1, "", "get_dataset_path"], [445, 1, 1, "", "get_file_extension"], [445, 1, 1, "", "get_framework_from_path"], [445, 1, 1, "", "get_height_width_from_size"], [445, 1, 1, "", "get_metrics_dict"], [445, 1, 1, "", "get_model_zoo_config_path"], [445, 1, 1, "", "get_model_zoo_model_path"], [445, 1, 1, "", "get_module_version"], [445, 1, 1, "", "get_predefined_config_path"], [445, 1, 1, "", "get_shape_from_transforms"], [445, 1, 1, "", "get_size"], [445, 1, 1, "", "is_dataset_file"], [445, 1, 1, "", "is_development_env"], [445, 1, 1, "", "is_hidden"], [445, 1, 1, "", "load_dataloader_config"], [445, 1, 1, "", "load_help_nc_params"], [445, 1, 1, "", "load_metrics_config"], [445, 1, 1, "", "load_model_config"], [445, 1, 1, "", "load_model_wise_params"], [445, 1, 1, "", "load_precisions_config"], [445, 1, 1, "", "load_transforms_config"], [445, 1, 1, "", "load_transforms_filter_config"], [445, 1, 1, "", "normalize_domain"], [445, 1, 1, "", "normalize_framework"], [445, 1, 1, "", "normalize_string"], [445, 1, 1, "", "parse_bool_value"], [445, 1, 1, "", "parse_to_float_list"], [445, 1, 1, "", "parse_to_string_list"], [445, 1, 1, "", "parse_version"], [445, 1, 1, "", "release_tag"], [445, 1, 1, "", "replace_with_values"], [445, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[446, 0, 0, "-", "config"], [447, 0, 0, "-", "dataloader"], [448, 0, 0, "-", "evaluation"], [449, 0, 0, "-", "graph_optimization"], [451, 0, 0, "-", "mixed_precision"], [452, 0, 0, "-", "model"], [453, 0, 0, "-", "pruning"], [454, 0, 0, "-", "quantization"], [455, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[446, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[446, 3, 1, "", "dump"], [446, 3, 1, "", "get_performance_configs"], [446, 3, 1, "", "get_performance_cores_per_instance"], [446, 3, 1, "", "get_performance_num_of_instance"], [446, 3, 1, "", "initialize"], [446, 3, 1, "", "load"], [446, 3, 1, "", "process_transform"], [446, 3, 1, "", "remove_accuracy_metric"], [446, 3, 1, "", "remove_dataloader"], [446, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [446, 3, 1, "", "set_accuracy_goal"], [446, 3, 1, "", "set_accuracy_metric"], [446, 3, 1, "", "set_evaluation_dataloader"], [446, 3, 1, "", "set_evaluation_dataset_path"], [446, 3, 1, "", "set_inputs"], [446, 3, 1, "", "set_optimization_precision"], [446, 3, 1, "", "set_outputs"], [446, 3, 1, "", "set_performance_cores_per_instance"], [446, 3, 1, "", "set_performance_iterations"], [446, 3, 1, "", "set_performance_num_of_instance"], [446, 3, 1, "", "set_performance_warmup"], [446, 3, 1, "", "set_quantization_approach"], [446, 3, 1, "", "set_quantization_batch_size"], [446, 3, 1, "", "set_quantization_dataloader"], [446, 3, 1, "", "set_quantization_dataset_path"], [446, 3, 1, "", "set_quantization_sampling_size"], [446, 3, 1, "", "set_transform"], [446, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[447, 2, 1, "", "Dataloader"], [447, 2, 1, "", "Dataset"], [447, 2, 1, "", "Filter"], [447, 2, 1, "", "LabelBalance"], [447, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[447, 3, 1, "", "serialize"], [447, 3, 1, "", "set_dataset"], [447, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[447, 3, 1, "", "is_dummy"], [447, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[447, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[448, 2, 1, "", "Accuracy"], [448, 2, 1, "", "Configs"], [448, 2, 1, "", "Evaluation"], [448, 2, 1, "", "Metric"], [448, 2, 1, "", "Performance"], [448, 2, 1, "", "Postprocess"], [448, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[448, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[448, 4, 1, "", "name"], [448, 4, 1, "", "param"], [448, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[449, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[449, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[451, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[451, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[452, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[452, 4, 1, "", "inputs"], [452, 4, 1, "", "outputs"], [452, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[453, 2, 1, "", "AdamOptimizer"], [453, 2, 1, "", "AdamWOptimizer"], [453, 2, 1, "", "Approach"], [453, 2, 1, "", "Criterion"], [453, 2, 1, "", "CrossEntropyLossCriterion"], [453, 2, 1, "", "KnowledgeDistillationLossCriterion"], [453, 2, 1, "", "Optimizer"], [453, 2, 1, "", "Pruning"], [453, 2, 1, "", "SGDOptimizer"], [453, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [453, 2, 1, "", "Train"], [453, 2, 1, "", "WeightCompressionApproach"], [453, 1, 1, "", "parse_dict_value_to_float"], [453, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[453, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[454, 2, 1, "", "Advance"], [454, 2, 1, "", "Calibration"], [454, 2, 1, "", "Quantization"], [454, 2, 1, "", "WiseConfig"], [454, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[455, 2, 1, "", "AccCriterion"], [455, 2, 1, "", "Diagnosis"], [455, 2, 1, "", "ExitPolicy"], [455, 2, 1, "", "MultiObjectives"], [455, 2, 1, "", "Strategy"], [455, 2, 1, "", "Tuning"], [455, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[455, 4, 1, "", "objective"], [455, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[455, 3, 1, "", "set_max_trials"], [455, 3, 1, "", "set_performance_only"], [455, 3, 1, "", "set_random_seed"], [455, 3, 1, "", "set_timeout"], [455, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[456, 1, 1, "", "float_representer"], [456, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[457, 0, 0, "-", "communication"], [458, 0, 0, "-", "configuration"], [459, 0, 0, "-", "exceptions"], [461, 0, 0, "-", "router"], [462, 0, 0, "-", "server"], [465, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[457, 2, 1, "", "Message"], [457, 2, 1, "", "MessageQueue"], [457, 2, 1, "", "Request"], [457, 2, 1, "", "Response"], [457, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[457, 4, 1, "", "data"], [457, 4, 1, "", "status"], [457, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[457, 3, 1, "", "get"], [457, 3, 1, "", "post_error"], [457, 3, 1, "", "post_failure"], [457, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[458, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[458, 3, 1, "", "determine_gui_port"], [458, 3, 1, "", "determine_log_level"], [458, 3, 1, "", "determine_server_port"], [458, 3, 1, "", "determine_url_prefix"], [458, 3, 1, "", "determine_values_from_environment"], [458, 3, 1, "", "dump_token_to_file"], [458, 3, 1, "", "get_command_line_args"], [458, 3, 1, "", "get_url"], [458, 4, 1, "", "global_config_directory"], [458, 3, 1, "", "is_port_taken"], [458, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[459, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[461, 2, 1, "", "DeferredRoutingDefinition"], [461, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [461, 2, 1, "", "RealtimeRoutingDefinition"], [461, 2, 1, "", "Router"], [461, 2, 1, "", "RoutingDefinition"], [461, 1, 1, "", "find_pattern_in_graph"], [461, 1, 1, "", "get_model_graph"], [461, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[461, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[462, 1, 1, "", "allow_api_call"], [462, 1, 1, "", "block_iframe"], [462, 1, 1, "", "block_sniffing"], [462, 1, 1, "", "build_parameters"], [462, 1, 1, "", "disable_cache"], [462, 1, 1, "", "get_tls_args"], [462, 1, 1, "", "handle_api_call"], [462, 1, 1, "", "page_not_found"], [462, 1, 1, "", "require_api_token"], [462, 1, 1, "", "root"], [462, 1, 1, "", "run_server"], [462, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[463, 0, 0, "-", "benchmark"], [464, 0, 0, "-", "history_snapshot_parser"], [466, 0, 0, "-", "model"], [467, 0, 0, "-", "optimization"], [468, 0, 0, "-", "profiling"], [469, 0, 0, "-", "request_data_processor"], [470, 0, 0, "-", "response_generator"], [471, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[463, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[464, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[464, 3, 1, "", "extract_accuracy"], [464, 3, 1, "", "extract_performance"], [464, 3, 1, "", "parse_history_item"], [464, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[466, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[466, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[467, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[468, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[468, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[469, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[469, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[470, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[470, 3, 1, "", "add_refresh"], [470, 3, 1, "", "from_exception"], [470, 3, 1, "", "get_status_code_for_exception"], [470, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[471, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[471, 3, 1, "", "get_code_template"], [471, 3, 1, "", "get_config"], [471, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 476], "coven": [0, 476], "code": [0, 2, 476], "conduct": [0, 476], "our": [0, 476], "pledg": [0, 476], "standard": [0, 476], "respons": [0, 476], "scope": [0, 476], "enforc": [0, 476], "attribut": [0, 176, 202, 211, 221, 244, 261, 360, 476], "fx": 1, "overview": 1, "usag": [1, 2, 3, 4, 507, 509], "note": 1, "detail": [1, 474], "common": [1, 10, 181, 182, 183, 184, 185, 186, 187, 188, 485], "problem": 1, "dynam": [1, 2, 483, 503], "quantiz": [1, 4, 6, 27, 64, 255, 274, 454, 473, 481, 483, 502, 503, 504, 511], "static": [1, 503], "awar": [1, 4, 503], "train": [1, 4, 287, 482, 503], "neural": [2, 6, 25, 474, 489, 490, 500, 506], "architectur": [2, 3, 6, 25, 479, 490], "search": [2, 25], "introduct": [2, 7, 474, 480, 481, 482, 486, 487, 490, 493, 494, 495, 496, 497, 498, 500, 502, 503, 506, 507, 509, 510], "na": [2, 25, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 502], "api": [2, 6, 7, 9, 21, 480, 488, 493, 494, 497, 498, 500, 502], "basic": [2, 276, 509], "1": [2, 474, 482, 485, 488, 491, 511], "python": [2, 6, 29, 493, 502], "yaml": [2, 475, 477, 481, 482, 486, 510], "2": [2, 21, 474, 485, 488, 491, 511], "onli": 2, "advanc": 2, "custom": [2, 474, 493, 497, 509], "exampl": [2, 3, 4, 7, 321, 475, 480, 481, 482, 484, 487, 494, 495, 497, 498, 500, 503, 507, 511], "ptq": [3, 511], "design": [3, 4, 479, 507, 509], "pytorch": [3, 66, 296, 382, 383, 473, 478, 493, 504, 507, 508, 511], "mobilenetv2": 3, "model": [3, 6, 19, 185, 260, 261, 262, 263, 264, 265, 325, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 452, 466, 474, 495, 496, 509, 511], "helper": 3, "function": [3, 31, 35, 36, 40, 59, 65, 66, 88, 89, 91, 152, 157, 158, 160, 164, 176, 180, 181, 183, 186, 188, 192, 200, 202, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 222, 223, 225, 226, 227, 228, 229, 237, 241, 246, 250, 251, 252, 254, 258, 262, 266, 272, 274, 277, 286, 287, 290, 296, 297, 299, 300, 309, 310, 311, 313, 317, 319, 320, 322, 324, 327, 328, 332, 335, 336, 337, 348, 358, 375, 379, 381, 392, 393, 394, 397, 400, 404, 408, 410, 413, 415, 416, 419, 425, 426, 434, 437, 445, 453, 456, 457, 461, 462, 482], "secur": [5, 474, 482], "polici": 5, "report": 5, "vulner": 5, "intel": [6, 474, 489, 490, 511], "compressor": [6, 474, 489, 490, 506], "instal": [6, 474, 482, 491], "prerequisit": [6, 491], "linux": [6, 491], "get": [6, 7, 277, 480, 486, 493, 494, 497, 498, 500, 502, 503, 510], "start": [6, 7, 474, 480, 486, 493, 494, 497, 498, 500, 502, 503, 510], "jupyterlab": 6, "extens": [6, 511], "gui": 6, "system": [6, 474, 499], "requir": 6, "valid": [6, 511], "hardwar": [6, 511], "environ": [6, 429], "support": [6, 7, 473, 476, 478, 480, 482, 486, 490, 493, 494, 495, 497, 498, 500, 502, 503, 508, 510], "cpu": [6, 511], "base": 6, "64": 6, "compat": 6, "processor": 6, "gpu": 6, "built": [6, 478, 488, 493], "": 6, "xe": 6, "onnx": [6, 155, 473, 511], "multipl": [6, 497, 511], "vendor": 6, "through": [6, 511], "runtim": [6, 473, 511], "softwar": 6, "document": [6, 489], "select": 6, "public": [6, 501], "event": [6, 501], "addit": 6, "content": [6, 12, 25, 31, 35, 36, 37, 38, 40, 41, 42, 55, 59, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 287, 288, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 366, 368, 369, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474], "hire": 6, "adaptor": [7, 8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], "matrix": [7, 473, 480, 486, 490, 493, 494, 495, 497, 498, 500, 502, 503, 510], "work": [7, 503], "flow": [7, 503], "queri": [7, 67], "background": 7, "ad": 7, "new": [7, 474, 509], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 12, 25, 36, 38, 40, 41, 42, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 158, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 291, 292, 297, 298, 301, 302, 303, 304, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 353, 354, 355, 357, 360, 361, 362, 363, 364, 366, 368, 369, 376, 378, 381, 383, 384, 385, 386, 388, 389, 390, 391, 395, 399, 401, 402, 405, 407, 411, 414, 415, 417, 420, 421, 422, 424, 428, 429, 431, 432, 433, 434, 436, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 461, 463, 464, 466, 467, 468, 469, 470, 471], "benchmark": [11, 162, 180, 298, 299, 300, 301, 315, 463, 474, 475, 502], "bleu": [12, 222], "modul": [12, 31, 35, 36, 38, 40, 41, 42, 59, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 157, 158, 159, 161, 162, 163, 164, 167, 170, 171, 172, 174, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 246, 247, 250, 251, 252, 253, 254, 255, 256, 260, 262, 264, 265, 266, 272, 273, 274, 275, 276, 277, 278, 280, 281, 286, 287, 288, 290, 292, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 366, 368, 369, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 404, 407, 408, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471], "criterion": [13, 181], "data": [14, 172, 173, 174, 175, 176, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "dataload": [15, 172, 173, 182, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 317, 447, 475, 477], "basedataload": 15, "dataset": [16, 174, 175, 200, 201, 202, 203, 204, 205, 206, 207, 318, 474, 478, 488], "transform": [17, 177, 178, 179, 212, 213, 214, 215, 332, 488, 508], "metric": [18, 184, 222, 223, 224, 225, 226, 227, 228, 229, 258, 324, 443, 488, 493], "optim": [20, 186, 326, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 467, 474, 487, 498], "compon": [21, 189, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "experiement": 21, "deprec": 21, "0": [21, 511], "distil": [22, 216, 480, 481, 502, 511], "mixedprecis": 23, "modelconvers": 24, "packag": [25, 37, 55, 160, 173, 176, 183, 194, 206, 210, 211, 213, 217, 221, 228, 239, 244, 245, 257, 258, 261, 269, 279, 291, 301, 341, 346, 405], "prune": [26, 243, 253, 273, 453, 500, 502, 511], "schedul": [28, 254, 256, 500], "strategi": [30, 169, 170, 171, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 506, 509], "6ece06672ed3_v1_14": 31, "6f0d0f71d92e_v1_13": 32, "9e89549a08c8_v1_11": 33, "block_mask": 34, "env": 35, "neural_compressor": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "mxnet": [38, 473, 478, 493, 508, 511], "mxnet_util": [39, 40], "util": [40, 65, 152, 157, 219, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 348, 392, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "onnxrt": [41, 380, 381, 478, 493, 508], "ox_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "calibr": 42, "oper": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "activ": 44, "argmax": 45, "attent": 46, "binary_op": 47, "concat": 48, "conv": 49, "direct_q8": 50, "embed_layernorm": 51, "gather": 52, "gavgpool": 53, "gemm": 54, "lstm": 56, "matmul": 57, "maxpool": 58, "op": 59, "pad": 60, "pool": 61, "resiz": 62, "split": 63, "tensorflow": [68, 386, 387, 388, 389, 390, 391, 392, 473, 478, 493, 504, 507, 508, 511], "tf_util": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "graph_convert": 69, "graph_converter_without_calib": 70, "graph_rewrit": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "bf16": [71, 72], "bf16_convert": [71, 153], "gener": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "convert_add_to_biasadd": 73, "convert_layout": 74, "convert_leakyrelu": 75, "convert_nan_to_random": 76, "convert_placeholder_to_const": 77, "dequantize_cast_optim": 78, "dilated_contract": 79, "dummy_biasadd": 80, "expanddims_optim": 81, "fetch_weight_from_reshap": 82, "fold_batch_norm": 83, "fold_const": 84, "fuse_biasadd_add": 85, "fuse_column_wise_mul": 86, "fuse_conv_with_math": 87, "fuse_decomposed_bn": 88, "fuse_decomposed_in": 89, "fuse_gelu": 90, "fuse_layer_norm": 91, "fuse_pad_with_conv": 92, "fuse_pad_with_fp32_conv": 93, "fuse_reshape_transpos": 94, "graph_cse_optim": 95, "grappler_pass": 96, "insert_print_nod": 98, "move_squeeze_after_relu": 99, "pre_optim": 100, "remove_training_nod": 101, "rename_batch_norm": 102, "split_shared_input": 103, "strip_equivalent_nod": 104, "strip_unused_nod": 105, "switch_optim": 106, "update_ent": 107, "graph_bas": 108, "int8": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 511], "freeze_fake_qu": 110, "freeze_valu": 111, "freeze_value_without_calib": 112, "fuse_conv_redundant_dequant": 113, "fuse_conv_requant": 114, "fuse_matmul_redundant_dequant": 115, "fuse_matmul_requant": 116, "meta_op_optim": 118, "post_hostconst_convert": 119, "post_quantized_op_cs": 120, "rnn_convert": 121, "scale_propag": 122, "qdq": [123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 511], "insert_qdq_pattern": 124, "merge_duplicated_qdq": 125, "share_qdq_y_pattern": 126, "graph_util": 127, "quantize_graph": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "fuse_qdq_bn": 130, "fuse_qdq_concatv2": 131, "fuse_qdq_conv": 132, "fuse_qdq_deconv": 133, "fuse_qdq_in": 134, "fuse_qdq_matmul": 135, "fuse_qdq_pool": 136, "optimize_qdq": 138, "quantize_graph_bas": 139, "quantize_graph_bn": 140, "quantize_graph_concatv2": 141, "quantize_graph_conv": 142, "quantize_graph_for_intel_cpu": 143, "quantize_graph_matmul": 144, "quantize_graph_pool": 145, "quantize_graph_common": 146, "transform_graph": [147, 148, 149, 150, 151], "bias_correct": 147, "graph_transform_bas": 148, "insert_log": 150, "rerange_quantized_concat": 151, "torch_util": [153, 154, 155, 156, 157, 188], "symbolic_trac": 156, "algorithm": [158, 159, 160, 161], "fast_bias_correct": 159, "weight_correct": 161, "conf": [163, 164, 165, 166], "config": [163, 167, 446, 475, 477, 497], "dotdict": 164, "pythonic_config": 166, "contrib": [168, 169, 170, 171], "sigopt": [170, 506, 509], "tpe": [171, 509], "imagenet_dataset": [174, 205], "coco_transform": 177, "imagenet_transform": [178, 212], "experiment": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "submodul": [183, 194, 206, 210, 213, 217, 221, 228, 238, 239, 245, 248, 291, 301, 305, 312, 323, 341, 346, 351, 352, 356, 359, 365, 367, 370, 371, 377, 380, 382, 387, 396, 398, 403, 405, 406, 409, 412, 418, 423, 427, 435, 442, 450, 460, 465], "postprocess": 187, "base_dataload": 190, "default_dataload": 192, "fetcher": 193, "mxnet_dataload": 195, "onnxrt_dataload": 196, "pytorch_dataload": 197, "sampler": 198, "tensorflow_dataload": 199, "bert_dataset": 200, "coco_dataset": 201, "dummy_dataset": 203, "dummy_dataset_v2": 204, "style_transfer_dataset": 207, "filter": [208, 209, 210], "coco_filt": 208, "subpackag": [211, 221, 239, 244, 257, 346, 351, 365, 370, 377, 405, 418, 427, 435, 460], "token": 214, "export": [217, 218, 219], "torch2onnx": 218, "graph_optim": [220, 402, 403, 404, 449], "bleu_util": 223, "coco_label_map": 224, "coco_tool": 225, "evaluate_squad": 226, "f1": 227, "mixed_precis": [230, 406, 407, 408, 451], "model_convers": 231, "basic_na": 232, "dyna": 233, "dynast": [234, 235, 236, 237, 238], "dynas_manag": 234, "dynas_predictor": 235, "dynas_search": 236, "dynas_util": 237, "nas_util": 241, "search_algorithm": 242, "pruning_recip": [244, 245, 246, 247], "pattern": [245, 246, 247, 250, 500], "tile_pattern": 247, "pytorch_prun": [248, 249, 250, 251, 252, 253, 254], "logger": [249, 294, 437], "prune_util": 251, "pruner": [252, 267, 268, 269, 270, 271, 272], "mix_precis": 259, "base_model": 260, "nets_factori": 263, "onnx_model": 264, "torch_model": 265, "object": [266, 497], "gradient_sensit": 267, "group_lasso": 268, "magnitud": 270, "pattern_lock": 271, "auto_mixed_precis": 275, "bayesian": [277, 509], "target": 277, "valu": 277, "param": 277, "exhaust": [278, 509], "mse": [280, 509], "random": [281, 509], "st_util": [282, 283, 284, 285], "tuning_sampl": 283, "tuning_spac": 284, "tuning_struct": 285, "collect_layer_histogram": 288, "constant": 289, "create_obj_from_config": 290, "kl_diverg": 292, "load_huggingfac": 293, "option": [295, 474, 482, 491], "ux": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "benchmark_model": 299, "execute_benchmark": 300, "config_gener": [302, 303, 304, 305, 306, 307, 308], "benchmark_config_gener": 302, "graph_optimization_config_gener": 304, "mixed_precision_config_gener": 306, "profiling_config_gener": 307, "quantization_config_gener": 308, "configuration_wizard": [309, 310, 311, 312, 313], "configuration_pars": 309, "get_boundary_nod": 310, "get_configur": 311, "params_feed": 313, "db_manag": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "db_model": [315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "benchmark_result": 316, "domain": [319, 376], "domain_flavour": 320, "framework": [322, 486, 495, 502], "optimization_typ": 327, "precis": [328, 487, 494, 504], "profil": [329, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 468, 474], "profiling_result": 330, "project": [331, 474], "tuning_detail": 333, "tuning_histori": [334, 415], "db_oper": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "benchmark_api_interfac": 335, "dataset_api_interfac": 336, "diagnosis_api_interfac": 338, "dictionaries_api_interfac": 339, "examples_api_interfac": 340, "model_api_interfac": 342, "optimization_api_interfac": 343, "profiling_api_interfac": 344, "project_api_interfac": 345, "params_interfac": 347, "diagnosi": [349, 350, 351, 352, 353, 354, 355, 356, 357, 474], "factori": [350, 401, 417, 422], "onnx_diagnosi": [352, 353], "onnxrt_diagnosi": 353, "op_detail": 354, "op_entri": 355, "tensorflow_diagnosi": [356, 357], "file_brows": [358, 359], "graph": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 474, 487], "collaps": 361, "edg": 362, "graph_read": 364, "node": 366, "reader": [367, 368, 369], "onnxrt_read": 368, "tensorflow_read": 369, "jobs_manag": [371, 372, 373, 374], "jobs_control_queu": 372, "request": [374, 476], "manage_workspac": 375, "model_type_gett": 379, "repositori": 384, "shape": 385, "frozen_pb": 386, "kera": 388, "meta_graph": 389, "saved_model": 391, "model_zoo": [393, 394, 395, 396, 397], "download_config": 393, "download_model": 394, "download": 395, "list_model": 397, "names_mapp": [398, 399], "execute_optim": 400, "optimize_model": [404, 408, 410], "neural_coder_optim": [409, 410], "tune": [412, 413, 414, 455, 487, 503, 509], "tune_model": 413, "execute_profil": 416, "profile_model": 419, "tensorflow_profil": [422, 423, 424, 425], "inc_bench": 426, "const": 428, "except": [430, 459], "executor": 431, "expiring_dict": 432, "github_info": 433, "hw_info": 434, "json_seri": 436, "parser": 438, "proc": 439, "process": 440, "singleton": 441, "templat": [442, 443, 444, 476], "workdir": 444, "workload": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 471], "evalu": [448, 475, 482], "yaml_util": 456, "web": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "commun": 457, "configur": [458, 482, 486, 499, 502, 506, 509, 510], "router": 461, "server": 462, "servic": [463, 464, 465, 466, 467, 468, 469, 470, 471], "history_snapshot_pars": 464, "request_data_processor": 469, "response_gener": 470, "version": 472, "ipex": 473, "refer": 473, "bench": 474, "tabl": 474, "from": [474, 491], "binari": [474, 491], "sourc": [474, 491], "home": 474, "screen": 474, "creat": [474, 477], "predefin": 474, "displai": 474, "list": [474, 478, 508], "remov": 474, "develop": 474, "tab": 474, "wizard": 474, "edit": 474, "entri": 474, "inform": [474, 492], "file": [475, 477, 486, 510], "us": [475, 477, 487, 496], "user": [475, 477, 478, 481, 482, 488, 502, 510], "specif": [475, 477, 478, 509], "run": 475, "contribut": 476, "guidelin": 476, "pull": 476, "checklist": 476, "how": [477, 487, 496], "workflow": 479, "knowledg": [480, 511], "intermedi": 480, "layer": 480, "self": 480, "defin": [481, 482], "distribut": 482, "infer": 482, "horovod": 482, "pure": 482, "option2": 482, "horovodrun": 482, "follow": 482, "ar": 482, "frequent": 485, "ask": 485, "question": 485, "build": [485, 493], "issu": [485, 505], "3": [485, 491], "featur": [486, 490, 502, 503, 510], "fp32": 487, "auto": [487, 504], "mix": [487, 494, 504], "default": 487, "incompat": [488, 505], "chang": [488, 505], "between": 488, "v1": 488, "face": 488, "section": 489, "infrastructur": 490, "ai": 491, "kit": 491, "window": 491, "legal": 492, "licens": 492, "citat": 492, "trademark": 492, "singl": [493, 497], "multi": [493, 498], "convers": 496, "orchestr": 498, "One": 498, "shot": 498, "network": 500, "criteria": 500, "full": 501, "47": 501, "2022": 501, "29": 501, "2021": 501, "14": 501, "2018": 501, "2020": 501, "4": 501, "style": 502, "access": 502, "fundament": 503, "approach": 503, "post": 503, "accuraci": 503, "turn": 504, "ON": 504, "dure": 504, "releas": 505, "known": 505, "prepar": 506, "perform": 506, "benefit": 506, "comparison": 506, "differ": 506, "tensorboard": 507, "part": 509, "relat": 509, "mlperf": 511, "10": 511, "torch": 511, "12": 511, "mode": 511, "qat": 511, "11": 511, "7": 511}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [476, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [476, "our-pledge"]], "Our Standards": [[0, "our-standards"], [476, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [476, "our-responsibilities"]], "Scope": [[0, "scope"], [476, "scope"]], "Enforcement": [[0, "enforcement"], [476, "enforcement"]], "Attribution": [[0, "attribution"], [476, "attribution"]], "FX": [[1, "fx"]], "Overview": [[1, "overview"]], "Usage": [[1, "usage"], [4, "usage"], [507, "usage"], [507, "id2"], [509, "usage"], [509, "id2"], [509, "id4"], [509, "id6"], [509, "id8"], [509, "id10"], [509, "id12"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [483, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Introduction": [[2, "introduction"], [7, "introduction"], [474, "introduction"], [480, "introduction"], [481, "introduction"], [482, "introduction"], [486, "introduction"], [487, "introduction"], [490, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [496, "introduction"], [497, "introduction"], [498, "introduction"], [500, "introduction"], [502, "introduction"], [507, "introduction"], [509, "introduction"], [510, "introduction"]], "NAS API": [[2, "nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "Examples": [[2, "examples"], [4, "examples"], [475, "examples"], [480, "examples"], [481, "examples"], [484, "examples"], [487, "examples"], [494, "examples"], [495, "examples"], [498, "examples"], [500, "examples"], [503, "examples"], [507, "examples"], [507, "id3"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [479, "design"], [507, "design"], [507, "id1"], [509, "design"], [509, "id1"], [509, "id3"], [509, "id5"], [509, "id7"], [509, "id9"], [509, "id11"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [497, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Security Policy": [[5, "security-policy"]], "Report a Vulnerability": [[5, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[6, "intel-neural-compressor"]], "Installation": [[6, "installation"], [491, "installation"]], "Prerequisites": [[6, "prerequisites"], [491, "prerequisites"], [491, "id1"]], "Install on Linux": [[6, "install-on-linux"]], "Getting Started": [[6, "getting-started"]], "Quantization with Python API": [[6, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[6, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[6, "quantization-with-gui"]], "System Requirements": [[6, "system-requirements"]], "Validated Hardware Environment": [[6, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[6, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[6, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[6, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[6, "validated-software-environment"]], "Validated Models": [[6, "validated-models"], [511, "validated-models"]], "Documentation": [[6, "documentation"]], "Selected Publications/Events": [[6, "selected-publications-events"]], "Additional Content": [[6, "additional-content"]], "Hiring": [[6, "hiring"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [503, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "APIs": [[9, "apis"]], "Common": [[10, "common"]], "Benchmark": [[11, "benchmark"], [502, "benchmark"]], "BLEU": [[12, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[12, "module-contents"], [31, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [59, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [247, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [260, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [292, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"]], "Classes": [[12, "classes"], [25, "classes"], [36, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [225, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [250, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [291, "classes"], [292, "classes"], [297, "classes"], [298, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [376, "classes"], [378, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [395, "classes"], [399, "classes"], [401, "classes"], [402, "classes"], [405, "classes"], [407, "classes"], [411, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [424, "classes"], [428, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [443, "classes"], [444, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [457, "classes"], [458, "classes"], [461, "classes"], [463, "classes"], [464, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [471, "classes"]], "Criterion": [[13, "criterion"]], "Data": [[14, "data"]], "Dataloader": [[15, "dataloader"]], "BaseDataLoader": [[15, "basedataloader"]], "dataloaders": [[15, "dataloaders"]], "Datasets": [[16, "datasets"]], "Transforms": [[17, "transforms"]], "Metric": [[18, "metric"]], "Model": [[19, "model"], [495, "model"]], "Optimizer": [[20, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[21, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[22, "distillation"], [480, "distillation"], [502, "distillation"]], "MixedPrecision": [[23, "mixedprecision"]], "ModelConversion": [[24, "modelconversion"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [37, "package-contents"], [55, "package-contents"], [160, "package-contents"], [173, "package-contents"], [176, "package-contents"], [183, "package-contents"], [194, "package-contents"], [206, "package-contents"], [210, "package-contents"], [211, "package-contents"], [213, "package-contents"], [217, "package-contents"], [221, "package-contents"], [228, "package-contents"], [239, "package-contents"], [244, "package-contents"], [245, "package-contents"], [257, "package-contents"], [258, "package-contents"], [261, "package-contents"], [269, "package-contents"], [279, "package-contents"], [291, "package-contents"], [301, "package-contents"], [341, "package-contents"], [346, "package-contents"], [405, "package-contents"]], "Pruning": [[26, "pruning"], [500, "pruning"], [502, "pruning"]], "Quantization": [[27, "quantization"], [502, "quantization"], [503, "quantization"]], "Scheduler": [[28, "scheduler"]], "Pythonic": [[29, "pythonic"]], "Strategy": [[30, "strategy"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "Functions": [[31, "functions"], [35, "functions"], [36, "functions"], [40, "functions"], [59, "functions"], [65, "functions"], [66, "functions"], [88, "functions"], [89, "functions"], [91, "functions"], [152, "functions"], [157, "functions"], [158, "functions"], [160, "functions"], [164, "functions"], [176, "functions"], [180, "functions"], [181, "functions"], [183, "functions"], [186, "functions"], [188, "functions"], [192, "functions"], [200, "functions"], [202, "functions"], [206, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [222, "functions"], [223, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [228, "functions"], [229, "functions"], [237, "functions"], [241, "functions"], [246, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [254, "functions"], [258, "functions"], [262, "functions"], [266, "functions"], [272, "functions"], [274, "functions"], [277, "functions"], [286, "functions"], [287, "functions"], [290, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [300, "functions"], [309, "functions"], [310, "functions"], [311, "functions"], [313, "functions"], [317, "functions"], [319, "functions"], [320, "functions"], [322, "functions"], [324, "functions"], [327, "functions"], [328, "functions"], [332, "functions"], [335, "functions"], [336, "functions"], [337, "functions"], [348, "functions"], [358, "functions"], [375, "functions"], [379, "functions"], [381, "functions"], [392, "functions"], [393, "functions"], [394, "functions"], [397, "functions"], [400, "functions"], [404, "functions"], [408, "functions"], [410, "functions"], [413, "functions"], [415, "functions"], [416, "functions"], [419, "functions"], [425, "functions"], [426, "functions"], [434, "functions"], [437, "functions"], [445, "functions"], [453, "functions"], [456, "functions"], [457, "functions"], [461, "functions"], [462, "functions"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.mxnet": [[38, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[39, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[41, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[43, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[44, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[46, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[48, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[49, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[52, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[55, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[60, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[62, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[63, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[64, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[65, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[66, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[67, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[68, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[69, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[128, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[148, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[149, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[150, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[151, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[152, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[154, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[155, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[157, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[158, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[159, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[160, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[161, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[162, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[163, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[164, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[165, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[166, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[167, "module-neural_compressor.config"]], "neural_compressor.contrib": [[168, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[169, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[170, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[171, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.dataloader": [[172, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders": [[173, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.datasets.imagenet_dataset": [[174, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[175, "module-neural_compressor.data.datasets"]], "neural_compressor.data": [[176, "module-neural_compressor.data"]], "Attributes": [[176, "attributes"], [202, "attributes"], [211, "attributes"], [221, "attributes"], [244, "attributes"], [261, "attributes"]], "neural_compressor.data.transforms.coco_transform": [[177, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[178, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[179, "module-neural_compressor.data.transforms"]], "neural_compressor.experimental.benchmark": [[180, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[181, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[182, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[183, "module-neural_compressor.experimental.common"]], "Submodules": [[183, "submodules"], [194, "submodules"], [206, "submodules"], [210, "submodules"], [213, "submodules"], [217, "submodules"], [221, "submodules"], [228, "submodules"], [238, "submodules"], [239, "submodules"], [245, "submodules"], [248, "submodules"], [291, "submodules"], [301, "submodules"], [305, "submodules"], [312, "submodules"], [323, "submodules"], [341, "submodules"], [346, "submodules"], [351, "submodules"], [352, "submodules"], [356, "submodules"], [359, "submodules"], [365, "submodules"], [367, "submodules"], [370, "submodules"], [371, "submodules"], [377, "submodules"], [380, "submodules"], [382, "submodules"], [387, "submodules"], [396, "submodules"], [398, "submodules"], [403, "submodules"], [405, "submodules"], [406, "submodules"], [409, "submodules"], [412, "submodules"], [418, "submodules"], [423, "submodules"], [427, "submodules"], [435, "submodules"], [442, "submodules"], [450, "submodules"], [460, "submodules"], [465, "submodules"]], "neural_compressor.experimental.common.metric": [[184, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[185, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[186, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[187, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[188, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[189, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[191, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[193, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[194, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[198, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[200, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[201, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[202, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[203, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[206, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[208, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[209, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[210, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[211, "module-neural_compressor.experimental.data"]], "Subpackages": [[211, "subpackages"], [221, "subpackages"], [239, "subpackages"], [244, "subpackages"], [257, "subpackages"], [346, "subpackages"], [351, "subpackages"], [365, "subpackages"], [370, "subpackages"], [377, "subpackages"], [405, "subpackages"], [418, "subpackages"], [427, "subpackages"], [435, "subpackages"], [460, "subpackages"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[212, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[213, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[214, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[215, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[216, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[217, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.torch2onnx": [[218, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[219, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[220, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[221, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[222, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[223, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[224, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[225, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[226, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[227, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[228, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[229, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[230, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[231, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[232, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[233, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[234, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[235, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[236, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[237, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[238, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas": [[239, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[240, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[241, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[242, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[243, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[244, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[245, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[246, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[247, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[248, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[249, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[250, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[251, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[252, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[253, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[254, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[255, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[256, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[257, "module-neural_compressor"]], "neural_compressor.metric": [[258, "module-neural_compressor.metric"]], "neural_compressor.mix_precision": [[259, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[260, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[261, "module-neural_compressor.model"]], "neural_compressor.model.model": [[262, "module-neural_compressor.model.model"]], "neural_compressor.model.nets_factory": [[263, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[264, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.torch_model": [[265, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[266, "module-neural_compressor.objective"]], "neural_compressor.pruners.gradient_sensitivity": [[267, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[268, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[269, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[270, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[271, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[272, "module-neural_compressor.pruners.pruner"]], "neural_compressor.pruning": [[273, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[274, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[275, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[276, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[277, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[277, "get-the-target-value-of-params"]], "neural_compressor.strategy.exhaustive": [[278, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy": [[279, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[280, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.random": [[281, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.st_utils": [[282, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[283, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[284, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[285, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "neural_compressor.strategy.strategy": [[286, "module-neural_compressor.strategy.strategy"]], "neural_compressor.training": [[287, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[288, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[289, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[290, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[291, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[292, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[293, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[294, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[295, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[296, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[297, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[298, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[299, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[300, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[301, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[302, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[303, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[304, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[305, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[306, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[307, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[308, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[309, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[310, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[311, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[312, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[313, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[314, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[316, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[317, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[318, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[319, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[320, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[321, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[322, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[323, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[324, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[325, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[326, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[327, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[328, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[329, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[330, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[331, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[332, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[334, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[335, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[336, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[337, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[338, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[339, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[340, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[341, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[342, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[343, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[344, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[345, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[346, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[347, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[348, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[349, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[350, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[351, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[353, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[354, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[355, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[357, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[358, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[359, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[360, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[361, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[362, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[363, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[364, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[365, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[366, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[367, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[368, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[369, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[370, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[371, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[372, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[373, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[374, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[375, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[376, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[377, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[378, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[379, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[380, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[381, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[382, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[383, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[384, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[385, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[386, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[387, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[388, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[389, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[390, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[391, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[392, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[393, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[394, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[395, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[396, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[397, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[398, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[399, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[400, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[401, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[402, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[403, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[404, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[405, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[406, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[407, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[408, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[410, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[411, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[412, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[413, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[414, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[415, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[416, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[417, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[418, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[419, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[420, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[421, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[425, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[426, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[427, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[428, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[429, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[430, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[431, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[432, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[433, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[434, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[435, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[436, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[437, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[438, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[439, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[440, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[441, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[442, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[443, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[444, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[445, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[446, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[447, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[448, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[449, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[450, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[451, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[452, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[453, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[454, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[455, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[456, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[457, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[458, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[459, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[460, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[461, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[462, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[463, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[464, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[465, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[466, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[467, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[468, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[469, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[470, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[471, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[472, "module-neural_compressor.version"]], "Quantization Support Matrix": [[473, "quantization-support-matrix"]], "TensorFlow": [[473, "tensorflow"], [478, "tensorflow"], [493, "tensorflow"], [508, "tensorflow"]], "PyTorch": [[473, "pytorch"], [478, "pytorch"], [493, "pytorch"], [504, "pytorch"]], "PyTorch IPEX": [[473, "pytorch-ipex"]], "MXNet": [[473, "mxnet"], [478, "mxnet"], [493, "mxnet"], [508, "mxnet"]], "ONNX Runtime": [[473, "onnx-runtime"]], "Reference": [[473, "reference"]], "Intel\u00ae Neural Compressor Bench": [[474, "intel-neural-compressor-bench"]], "Table of Contents": [[474, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[474, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[474, "option-1-install-from-binary"], [491, "option-1-install-from-binary"], [491, "id2"]], "Option 2 Install from source": [[474, "option-2-install-from-source"], [491, "option-2-install-from-source"], [491, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[474, "start-the-intel-neural-compressor-bench"]], "Home screen": [[474, "home-screen"]], "Create new project": [[474, "create-new-project"]], "Predefined model": [[474, "predefined-model"]], "Custom model": [[474, "custom-model"]], "Display model graph": [[474, "display-model-graph"]], "Project list": [[474, "project-list"]], "Remove project": [[474, "remove-project"]], "Develop the project": [[474, "develop-the-project"]], "Optimization tab": [[474, "optimization-tab"]], "Optimization table": [[474, "optimization-table"]], "Optimization wizard": [[474, "optimization-wizard"]], "Editing optimization entries": [[474, "editing-optimization-entries"]], "Optimization details": [[474, "optimization-details"]], "Benchmark tab": [[474, "benchmark-tab"]], "Benchmark table": [[474, "benchmark-table"]], "Benchmark wizard": [[474, "benchmark-wizard"]], "Editing benchmark entries": [[474, "editing-benchmark-entries"]], "Benchmark details": [[474, "benchmark-details"]], "Profiling tab": [[474, "profiling-tab"]], "Profiling table": [[474, "profiling-table"]], "Profiling wizard": [[474, "profiling-wizard"]], "Editing profiling entries": [[474, "editing-profiling-entries"]], "Profiling details": [[474, "profiling-details"]], "Diagnosis tab": [[474, "diagnosis-tab"]], "Dataset tab": [[474, "dataset-tab"]], "Dataset list": [[474, "dataset-list"]], "Dataset wizard": [[474, "dataset-wizard"]], "Dataset details": [[474, "dataset-details"]], "Custom dataset": [[474, "custom-dataset"]], "Project information": [[474, "project-information"]], "System information": [[474, "system-information"]], "Security": [[474, "security"]], "Benchmarking": [[475, "benchmarking"]], "Config evaluation filed in a yaml file": [[475, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[475, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[476, "contribution-guidelines"]], "Pull Request Checklist": [[476, "pull-request-checklist"]], "Pull Request Template": [[476, "pull-request-template"]], "Support": [[476, "support"]], "DataLoader": [[477, "dataloader"]], "How to use it": [[477, "how-to-use-it"], [487, "how-to-use-it"], [496, "how-to-use-it"]], "Config dataloader in a yaml file": [[477, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[477, "create-a-user-specific-dataloader"]], "Dataset": [[478, "dataset"]], "Built-in dataset support list": [[478, "built-in-dataset-support-list"]], "ONNXRT": [[478, "onnxrt"], [493, "onnxrt"], [508, "onnxrt"]], "User-specific dataset": [[478, "user-specific-dataset"]], "Architecture": [[479, "architecture"], [490, "architecture"]], "Workflow": [[479, "workflow"]], "Knowledge Distillation": [[480, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[480, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[480, "self-distillation"]], "Distillation Support Matrix": [[480, "distillation-support-matrix"]], "Get Started with Distillation API": [[480, "get-started-with-distillation-api"]], "Distillation for Quantization": [[481, "distillation-for-quantization"]], "User-defined yaml": [[481, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[482, "distributed-training-and-inference-evaluation"]], "horovod installation": [[482, "horovod-installation"]], "Distributed training and inference (evaluation)": [[482, "id1"]], "Option 1: pure yaml configuration": [[482, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[482, "option2-user-defined-training-function"]], "horovodrun": [[482, "horovodrun"]], "security": [[482, "security"]], "Following examples are supported": [[482, "following-examples-are-supported"]], "Frequently Asked Questions": [[485, "frequently-asked-questions"]], "Common Build Issues": [[485, "common-build-issues"]], "Issue 1:": [[485, "issue-1"]], "Issue 2:": [[485, "issue-2"]], "Issue 3:": [[485, "issue-3"]], "Framework YAML Configuration Files": [[486, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[486, "supported-feature-matrix"], [490, "supported-feature-matrix"], [502, "supported-feature-matrix"], [503, "supported-feature-matrix"], [510, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[486, "get-started-with-framework-yaml-files"]], "Graph Optimization": [[487, "graph-optimization"]], "FP32 Optimization": [[487, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[487, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[487, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[487, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[487, "id1"]], "Incompatible changes between v1.2 and v1.1": [[488, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[488, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[488, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[489, "intel-neural-compressor-documentation"]], "Sections": [[489, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[490, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[491, "linux-installation"]], "Option 3 Install from AI Kit": [[491, "option-3-install-from-ai-kit"]], "Windows Installation": [[491, "windows-installation"]], "Legal Information": [[492, "legal-information"]], "License": [[492, "license"]], "Citation": [[492, "citation"]], "Trademarks": [[492, "trademarks"]], "Metrics": [[493, "metrics"]], "Supported Built-in Metric Matrix": [[493, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[493, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[493, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[493, "build-custom-metric-with-python-api"]], "Mixed Precision": [[494, "mixed-precision"]], "Mixed Precision Support Matrix": [[494, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[494, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[495, "supported-framework-model-matrix"]], "Model Conversion": [[496, "model-conversion"]], "Objective": [[497, "objective"]], "Single Objective": [[497, "single-objective"]], "Multiple Objectives": [[497, "multiple-objectives"]], "Objective Support Matrix": [[497, "objective-support-matrix"]], "Get Start with Objective API": [[497, "get-start-with-objective-api"]], "Config Single Objective": [[497, "config-single-objective"]], "Config Multiple Objectives": [[497, "config-multiple-objectives"]], "Config Custom Objective": [[497, "config-custom-objective"]], "Optimization Orchestration": [[498, "optimization-orchestration"]], "One-shot": [[498, "one-shot"]], "Multi-shot": [[498, "multi-shot"]], "Orchestration Support Matrix": [[498, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[498, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[499, "system-configuration"]], "Neural Network Pruning": [[500, "neural-network-pruning"]], "Pruning Patterns": [[500, "pruning-patterns"]], "Pruning Criteria": [[500, "pruning-criteria"]], "Pruning Schedule": [[500, "pruning-schedule"]], "Pruning Support Matrix": [[500, "pruning-support-matrix"]], "Get Started with Pruning API": [[500, "get-started-with-pruning-api"]], "Full Publications/Events (47)": [[501, "full-publications-events-47"]], "2022 (29)": [[501, "id1"]], "2021 (14)": [[501, "id2"]], "2018 - 2020 (4)": [[501, "id3"]], "Pythonic Style Access for Configurations": [[502, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[502, "pythonic-api-for-user-configurations"], [502, "id1"]], "Pythonic API for Framework Configurations": [[502, "pythonic-api-for-framework-configurations"], [502, "id2"]], "Get Started with Pythonic API for Configurations": [[502, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[502, "nas"]], "Quantization Introduction": [[503, "quantization-introduction"]], "Quantization Fundamentals": [[503, "quantization-fundamentals"]], "Quantization Approaches": [[503, "quantization-approaches"]], "Post Training Dynamic Quantization": [[503, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[503, "post-training-static-quantization"]], "Quantization Aware Training": [[503, "quantization-aware-training"]], "Accuracy Aware Tuning": [[503, "accuracy-aware-tuning"]], "Get Started": [[503, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[504, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[504, "tensorflow"]], "Release": [[505, "release"]], "Known Issues": [[505, "known-issues"]], "Incompatible Changes": [[505, "incompatible-changes"]], "SigOpt Strategy": [[506, "sigopt-strategy"]], "Preparation": [[506, "preparation"]], "SigOpt introduction": [[506, "sigopt-introduction"]], "Neural Compressor configuration": [[506, "neural-compressor-configuration"]], "Performance": [[506, "performance"]], "Benefit for Sigopt strategy": [[506, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[506, "performance-comparison-of-different-strategies"]], "TensorBoard": [[507, "tensorboard"]], "PyTorch TensorBoard": [[507, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[507, "tensorflow-tensorboard"]], "Transform": [[508, "transform"]], "Transform support list": [[508, "transform-support-list"]], "Pytorch": [[508, "pytorch"]], "Tuning Strategies": [[509, "tuning-strategies"]], "Strategy Design": [[509, "strategy-design"]], "Configurations": [[509, "configurations"]], "Model-specific configurations": [[509, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[509, "strategy-tuning-part-related-configurations"]], "Basic": [[509, "basic"]], "Bayesian": [[509, "bayesian"]], "MSE": [[509, "mse"]], "TPE": [[509, "tpe"]], "Exhaustive": [[509, "exhaustive"]], "Random": [[509, "random"]], "SigOpt": [[509, "sigopt"]], "Customize a New Tuning Strategy": [[509, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[510, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[510, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[511, "validated-mlperf-models"]], "Validated Quantization Examples": [[511, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[511, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[511, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[511, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[511, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[511, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[511, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[511, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[511, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[511, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[12, "neural_compressor.experimental.metric.bleu.BLEU"], [222, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [222, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[12, "module-neural_compressor.experimental.metric.bleu"], [31, "module-6ece06672ed3_v1_14"], [32, "module-6f0d0f71d92e_v1_13"], [33, "module-9e89549a08c8_v1_11"], [34, "module-block_mask"], [35, "module-env"], [36, "module-neural_compressor.adaptor.adaptor"], [37, "module-neural_compressor.adaptor"], [38, "module-neural_compressor.adaptor.mxnet"], [39, "module-neural_compressor.adaptor.mxnet_utils"], [40, "module-neural_compressor.adaptor.mxnet_utils.util"], [41, "module-neural_compressor.adaptor.onnxrt"], [42, "module-neural_compressor.adaptor.ox_utils.calibration"], [43, "module-neural_compressor.adaptor.ox_utils"], [44, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [46, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [48, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [49, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [52, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [55, "module-neural_compressor.adaptor.ox_utils.operators"], [56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [59, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [60, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [62, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [63, "module-neural_compressor.adaptor.ox_utils.operators.split"], [64, "module-neural_compressor.adaptor.ox_utils.quantizer"], [65, "module-neural_compressor.adaptor.ox_utils.util"], [66, "module-neural_compressor.adaptor.pytorch"], [67, "module-neural_compressor.adaptor.query"], [68, "module-neural_compressor.adaptor.tensorflow"], [69, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [127, "module-neural_compressor.adaptor.tf_utils.graph_util"], [128, "module-neural_compressor.adaptor.tf_utils"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [148, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [149, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [150, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [151, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [152, "module-neural_compressor.adaptor.tf_utils.util"], [153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [154, "module-neural_compressor.adaptor.torch_utils"], [155, "module-neural_compressor.adaptor.torch_utils.onnx"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.util"], [158, "module-neural_compressor.algorithm.algorithm"], [159, "module-neural_compressor.algorithm.fast_bias_correction"], [160, "module-neural_compressor.algorithm"], [161, "module-neural_compressor.algorithm.weight_correction"], [162, "module-neural_compressor.benchmark"], [163, "module-neural_compressor.conf.config"], [164, "module-neural_compressor.conf.dotdict"], [165, "module-neural_compressor.conf"], [166, "module-neural_compressor.conf.pythonic_config"], [167, "module-neural_compressor.config"], [168, "module-neural_compressor.contrib"], [169, "module-neural_compressor.contrib.strategy"], [170, "module-neural_compressor.contrib.strategy.sigopt"], [171, "module-neural_compressor.contrib.strategy.tpe"], [172, "module-neural_compressor.data.dataloaders.dataloader"], [173, "module-neural_compressor.data.dataloaders"], [174, "module-neural_compressor.data.datasets.imagenet_dataset"], [175, "module-neural_compressor.data.datasets"], [176, "module-neural_compressor.data"], [177, "module-neural_compressor.data.transforms.coco_transform"], [178, "module-neural_compressor.data.transforms.imagenet_transform"], [179, "module-neural_compressor.data.transforms"], [180, "module-neural_compressor.experimental.benchmark"], [181, "module-neural_compressor.experimental.common.criterion"], [182, "module-neural_compressor.experimental.common.dataloader"], [183, "module-neural_compressor.experimental.common"], [184, "module-neural_compressor.experimental.common.metric"], [185, "module-neural_compressor.experimental.common.model"], [186, "module-neural_compressor.experimental.common.optimizer"], [187, "module-neural_compressor.experimental.common.postprocess"], [188, "module-neural_compressor.experimental.common.torch_utils"], [189, "module-neural_compressor.experimental.component"], [190, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [191, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [192, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [193, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [194, "module-neural_compressor.experimental.data.dataloaders"], [195, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [196, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [197, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [198, "module-neural_compressor.experimental.data.dataloaders.sampler"], [199, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [200, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [201, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [202, "module-neural_compressor.experimental.data.datasets.dataset"], [203, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [204, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [205, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [206, "module-neural_compressor.experimental.data.datasets"], [207, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [208, "module-neural_compressor.experimental.data.filters.coco_filter"], [209, "module-neural_compressor.experimental.data.filters.filter"], [210, "module-neural_compressor.experimental.data.filters"], [211, "module-neural_compressor.experimental.data"], [212, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [213, "module-neural_compressor.experimental.data.transforms"], [214, "module-neural_compressor.experimental.data.transforms.tokenization"], [215, "module-neural_compressor.experimental.data.transforms.transform"], [216, "module-neural_compressor.experimental.distillation"], [217, "module-neural_compressor.experimental.export"], [218, "module-neural_compressor.experimental.export.torch2onnx"], [219, "module-neural_compressor.experimental.export.utils"], [220, "module-neural_compressor.experimental.graph_optimization"], [221, "module-neural_compressor.experimental"], [222, "module-neural_compressor.experimental.metric.bleu"], [223, "module-neural_compressor.experimental.metric.bleu_util"], [224, "module-neural_compressor.experimental.metric.coco_label_map"], [225, "module-neural_compressor.experimental.metric.coco_tools"], [226, "module-neural_compressor.experimental.metric.evaluate_squad"], [227, "module-neural_compressor.experimental.metric.f1"], [228, "module-neural_compressor.experimental.metric"], [229, "module-neural_compressor.experimental.metric.metric"], [230, "module-neural_compressor.experimental.mixed_precision"], [231, "module-neural_compressor.experimental.model_conversion"], [232, "module-neural_compressor.experimental.nas.basic_nas"], [233, "module-neural_compressor.experimental.nas.dynas"], [234, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [235, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [236, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [237, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [238, "module-neural_compressor.experimental.nas.dynast"], [239, "module-neural_compressor.experimental.nas"], [240, "module-neural_compressor.experimental.nas.nas"], [241, "module-neural_compressor.experimental.nas.nas_utils"], [242, "module-neural_compressor.experimental.nas.search_algorithms"], [243, "module-neural_compressor.experimental.pruning"], [244, "module-neural_compressor.experimental.pruning_recipes"], [245, "module-neural_compressor.experimental.pruning_recipes.patterns"], [246, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [247, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [248, "module-neural_compressor.experimental.pytorch_pruner"], [249, "module-neural_compressor.experimental.pytorch_pruner.logger"], [250, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [251, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [252, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [253, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [254, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [255, "module-neural_compressor.experimental.quantization"], [256, "module-neural_compressor.experimental.scheduler"], [257, "module-neural_compressor"], [258, "module-neural_compressor.metric"], [259, "module-neural_compressor.mix_precision"], [260, "module-neural_compressor.model.base_model"], [261, "module-neural_compressor.model"], [262, "module-neural_compressor.model.model"], [263, "module-neural_compressor.model.nets_factory"], [264, "module-neural_compressor.model.onnx_model"], [265, "module-neural_compressor.model.torch_model"], [266, "module-neural_compressor.objective"], [267, "module-neural_compressor.pruners.gradient_sensitivity"], [268, "module-neural_compressor.pruners.group_lasso"], [269, "module-neural_compressor.pruners"], [270, "module-neural_compressor.pruners.magnitude"], [271, "module-neural_compressor.pruners.pattern_lock"], [272, "module-neural_compressor.pruners.pruner"], [273, "module-neural_compressor.pruning"], [274, "module-neural_compressor.quantization"], [275, "module-neural_compressor.strategy.auto_mixed_precision"], [276, "module-neural_compressor.strategy.basic"], [277, "module-neural_compressor.strategy.bayesian"], [278, "module-neural_compressor.strategy.exhaustive"], [279, "module-neural_compressor.strategy"], [280, "module-neural_compressor.strategy.mse"], [281, "module-neural_compressor.strategy.random"], [282, "module-neural_compressor.strategy.st_utils"], [283, "module-neural_compressor.strategy.st_utils.tuning_sampler"], [284, "module-neural_compressor.strategy.st_utils.tuning_space"], [285, "module-neural_compressor.strategy.st_utils.tuning_structs"], [286, "module-neural_compressor.strategy.strategy"], [287, "module-neural_compressor.training"], [288, "module-neural_compressor.utils.collect_layer_histogram"], [289, "module-neural_compressor.utils.constant"], [290, "module-neural_compressor.utils.create_obj_from_config"], [291, "module-neural_compressor.utils"], [292, "module-neural_compressor.utils.kl_divergence"], [293, "module-neural_compressor.utils.load_huggingface"], [294, "module-neural_compressor.utils.logger"], [295, "module-neural_compressor.utils.options"], [296, "module-neural_compressor.utils.pytorch"], [297, "module-neural_compressor.utils.utility"], [298, "module-neural_compressor.ux.components.benchmark.benchmark"], [299, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [300, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [301, "module-neural_compressor.ux.components.benchmark"], [302, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [303, "module-neural_compressor.ux.components.config_generator.config_generator"], [304, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [305, "module-neural_compressor.ux.components.config_generator"], [306, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [307, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [308, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [309, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [310, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [311, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [312, "module-neural_compressor.ux.components.configuration_wizard"], [313, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [314, "module-neural_compressor.ux.components.db_manager.db_manager"], [315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [316, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [317, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [318, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [319, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [320, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [321, "module-neural_compressor.ux.components.db_manager.db_models.example"], [322, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [323, "module-neural_compressor.ux.components.db_manager.db_models"], [324, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [325, "module-neural_compressor.ux.components.db_manager.db_models.model"], [326, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [327, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [328, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [329, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [330, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [331, "module-neural_compressor.ux.components.db_manager.db_models.project"], [332, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [334, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [335, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [336, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [337, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [338, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [339, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [340, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [341, "module-neural_compressor.ux.components.db_manager.db_operations"], [342, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [343, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [344, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [345, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [346, "module-neural_compressor.ux.components.db_manager"], [347, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [348, "module-neural_compressor.ux.components.db_manager.utils"], [349, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [350, "module-neural_compressor.ux.components.diagnosis.factory"], [351, "module-neural_compressor.ux.components.diagnosis"], [352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [353, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [354, "module-neural_compressor.ux.components.diagnosis.op_details"], [355, "module-neural_compressor.ux.components.diagnosis.op_entry"], [356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [357, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [358, "module-neural_compressor.ux.components.file_browser.file_browser"], [359, "module-neural_compressor.ux.components.file_browser"], [360, "module-neural_compressor.ux.components.graph.attribute"], [361, "module-neural_compressor.ux.components.graph.collapser"], [362, "module-neural_compressor.ux.components.graph.edge"], [363, "module-neural_compressor.ux.components.graph.graph"], [364, "module-neural_compressor.ux.components.graph.graph_reader"], [365, "module-neural_compressor.ux.components.graph"], [366, "module-neural_compressor.ux.components.graph.node"], [367, "module-neural_compressor.ux.components.graph.reader"], [368, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [369, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [370, "module-neural_compressor.ux.components"], [371, "module-neural_compressor.ux.components.jobs_management"], [372, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [373, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [374, "module-neural_compressor.ux.components.jobs_management.request"], [375, "module-neural_compressor.ux.components.manage_workspace"], [376, "module-neural_compressor.ux.components.model.domain"], [377, "module-neural_compressor.ux.components.model"], [378, "module-neural_compressor.ux.components.model.model"], [379, "module-neural_compressor.ux.components.model.model_type_getter"], [380, "module-neural_compressor.ux.components.model.onnxrt"], [381, "module-neural_compressor.ux.components.model.onnxrt.model"], [382, "module-neural_compressor.ux.components.model.pytorch"], [383, "module-neural_compressor.ux.components.model.pytorch.model"], [384, "module-neural_compressor.ux.components.model.repository"], [385, "module-neural_compressor.ux.components.model.shape"], [386, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [387, "module-neural_compressor.ux.components.model.tensorflow"], [388, "module-neural_compressor.ux.components.model.tensorflow.keras"], [389, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [390, "module-neural_compressor.ux.components.model.tensorflow.model"], [391, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [392, "module-neural_compressor.ux.components.model.tensorflow.utils"], [393, "module-neural_compressor.ux.components.model_zoo.download_config"], [394, "module-neural_compressor.ux.components.model_zoo.download_model"], [395, "module-neural_compressor.ux.components.model_zoo.downloader"], [396, "module-neural_compressor.ux.components.model_zoo"], [397, "module-neural_compressor.ux.components.model_zoo.list_models"], [398, "module-neural_compressor.ux.components.names_mapper"], [399, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [400, "module-neural_compressor.ux.components.optimization.execute_optimization"], [401, "module-neural_compressor.ux.components.optimization.factory"], [402, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [403, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [404, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [405, "module-neural_compressor.ux.components.optimization"], [406, "module-neural_compressor.ux.components.optimization.mixed_precision"], [407, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [408, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [410, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [411, "module-neural_compressor.ux.components.optimization.optimization"], [412, "module-neural_compressor.ux.components.optimization.tune"], [413, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [414, "module-neural_compressor.ux.components.optimization.tune.tuning"], [415, "module-neural_compressor.ux.components.optimization.tuning_history"], [416, "module-neural_compressor.ux.components.profiling.execute_profiling"], [417, "module-neural_compressor.ux.components.profiling.factory"], [418, "module-neural_compressor.ux.components.profiling"], [419, "module-neural_compressor.ux.components.profiling.profile_model"], [420, "module-neural_compressor.ux.components.profiling.profiler"], [421, "module-neural_compressor.ux.components.profiling.profiling"], [422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [425, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [426, "module-neural_compressor.ux.inc_bench"], [427, "module-neural_compressor.ux"], [428, "module-neural_compressor.ux.utils.consts"], [429, "module-neural_compressor.ux.utils.environment"], [430, "module-neural_compressor.ux.utils.exceptions"], [431, "module-neural_compressor.ux.utils.executor"], [432, "module-neural_compressor.ux.utils.expiring_dict"], [433, "module-neural_compressor.ux.utils.github_info"], [434, "module-neural_compressor.ux.utils.hw_info"], [435, "module-neural_compressor.ux.utils"], [436, "module-neural_compressor.ux.utils.json_serializer"], [437, "module-neural_compressor.ux.utils.logger"], [438, "module-neural_compressor.ux.utils.parser"], [439, "module-neural_compressor.ux.utils.proc"], [440, "module-neural_compressor.ux.utils.processes"], [441, "module-neural_compressor.ux.utils.singleton"], [442, "module-neural_compressor.ux.utils.templates"], [443, "module-neural_compressor.ux.utils.templates.metric"], [444, "module-neural_compressor.ux.utils.templates.workdir"], [445, "module-neural_compressor.ux.utils.utils"], [446, "module-neural_compressor.ux.utils.workload.config"], [447, "module-neural_compressor.ux.utils.workload.dataloader"], [448, "module-neural_compressor.ux.utils.workload.evaluation"], [449, "module-neural_compressor.ux.utils.workload.graph_optimization"], [450, "module-neural_compressor.ux.utils.workload"], [451, "module-neural_compressor.ux.utils.workload.mixed_precision"], [452, "module-neural_compressor.ux.utils.workload.model"], [453, "module-neural_compressor.ux.utils.workload.pruning"], [454, "module-neural_compressor.ux.utils.workload.quantization"], [455, "module-neural_compressor.ux.utils.workload.tuning"], [456, "module-neural_compressor.ux.utils.yaml_utils"], [457, "module-neural_compressor.ux.web.communication"], [458, "module-neural_compressor.ux.web.configuration"], [459, "module-neural_compressor.ux.web.exceptions"], [460, "module-neural_compressor.ux.web"], [461, "module-neural_compressor.ux.web.router"], [462, "module-neural_compressor.ux.web.server"], [463, "module-neural_compressor.ux.web.service.benchmark"], [464, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [465, "module-neural_compressor.ux.web.service"], [466, "module-neural_compressor.ux.web.service.model"], [467, "module-neural_compressor.ux.web.service.optimization"], [468, "module-neural_compressor.ux.web.service.profiling"], [469, "module-neural_compressor.ux.web.service.request_data_processor"], [470, "module-neural_compressor.ux.web.service.response_generator"], [471, "module-neural_compressor.ux.web.service.workload"], [472, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[12, "module-neural_compressor.experimental.metric.bleu"], [222, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [222, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [222, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.result"], [222, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.update"], [222, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "run_migrations_offline() (in module env)": [[35, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[35, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[38, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[39, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_qoperatoradaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_QOperatorAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[41, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[43, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[44, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[46, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[48, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[49, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[52, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[55, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[59, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[60, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[62, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[63, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[64, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[65, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[66, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[66, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[67, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[68, "module-neural_compressor.adaptor.tensorflow"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[69, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[128, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[148, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[149, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[150, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[150, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[150, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[151, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[151, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[151, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[152, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[152, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[154, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[155, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[157, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[158, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[159, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[159, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[160, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[160, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[160, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[160, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[161, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[161, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.Benchmark"]], "neural_compressor.benchmark": [[162, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[163, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[163, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[164, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[164, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[164, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[164, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[165, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[166, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[167, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[167, "module-neural_compressor.config"]], "neural_compressor.contrib": [[168, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[169, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[170, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[170, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[170, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[170, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[171, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[171, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[171, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[171, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[172, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[172, "module-neural_compressor.data.dataloaders.dataloader"]], "dataloader (class in neural_compressor.data.dataloaders)": [[173, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[173, "module-neural_compressor.data.dataloaders"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[174, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[174, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[174, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[175, "module-neural_compressor.data.datasets"]], "basetransform (class in neural_compressor.data)": [[176, "neural_compressor.data.BaseTransform"]], "datasets (class in neural_compressor.data)": [[176, "neural_compressor.data.DATASETS"]], "dataloader (class in neural_compressor.data)": [[176, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[176, "neural_compressor.data.Dataset"]], "filters (class in neural_compressor.data)": [[176, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[176, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[176, "neural_compressor.data.IterableDataset"]], "transforms (class in neural_compressor.data)": [[176, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[176, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[176, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[176, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[176, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[176, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[177, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[177, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[178, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[178, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[179, "module-neural_compressor.data.transforms"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[180, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[180, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[180, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[180, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[180, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[180, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[180, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[181, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[181, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[181, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[181, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[182, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[182, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[183, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[183, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[183, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[183, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[183, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[184, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[184, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[185, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[185, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[186, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[186, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[186, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[187, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[187, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[188, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[188, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[188, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[189, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[189, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[189, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[189, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[189, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[189, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[189, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[189, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[190, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[190, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[190, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[191, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[192, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[192, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[192, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[192, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[193, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[193, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[193, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[193, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[194, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[195, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[197, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[198, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[198, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[198, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[198, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[198, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[199, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[200, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[200, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[201, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[201, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[201, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[201, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[201, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[202, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[202, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[202, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[202, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[202, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[202, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[202, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[202, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[203, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[203, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[205, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[205, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[205, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[205, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[206, "neural_compressor.experimental.data.datasets.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[206, "neural_compressor.experimental.data.datasets.Dataset"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[206, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[206, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[206, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[207, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[208, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[208, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[208, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[209, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[209, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[210, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[210, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[210, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[210, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.BaseTransform"]], "datasets (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.DATASETS"]], "dataset (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.Dataset"]], "filters (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[211, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[211, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[211, "neural_compressor.experimental.data.transform_registry"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[212, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[212, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[212, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[212, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[213, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[213, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[213, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[213, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[213, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[214, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[214, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[214, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[214, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [215, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[215, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[215, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[215, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[215, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[215, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[215, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[216, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[216, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[216, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[216, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[216, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[216, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[216, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[216, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[217, "module-neural_compressor.experimental.export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[217, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[217, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[218, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[218, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[219, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[219, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[219, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[219, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[220, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[220, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[221, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[221, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[221, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[221, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[221, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[221, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[221, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[221, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[221, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[221, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[221, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[221, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[221, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[221, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[221, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[221, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[221, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[221, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[221, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[221, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[221, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.model"]], "neural_compressor.experimental": [[221, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[221, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[221, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[221, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[221, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[221, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[221, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[221, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[221, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[221, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[221, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[221, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[221, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[221, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[221, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[221, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[221, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[221, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[221, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[221, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[221, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[221, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[221, "neural_compressor.experimental.Component.train_func"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[222, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[222, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[222, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[222, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[222, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[222, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[223, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[223, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[224, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[225, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[225, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[225, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[225, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[225, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[226, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[226, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[226, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[226, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[226, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[227, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[227, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[227, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[227, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[227, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[228, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[228, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[228, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[228, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[228, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[228, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[228, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[228, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[229, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[229, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[229, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[229, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[229, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[229, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[229, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[229, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[229, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[229, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[229, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[229, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[229, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[229, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[229, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[229, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[229, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[229, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[229, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[229, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[229, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[229, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[229, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[229, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[229, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[229, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[229, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[229, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[229, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[229, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[229, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[229, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[229, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[229, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[229, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[229, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[229, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[229, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[229, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[229, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[229, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[229, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[229, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[229, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[229, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[229, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[229, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[229, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[229, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[229, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[229, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[230, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[230, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[230, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[230, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[231, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[231, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[232, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[232, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[232, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[232, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[232, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[232, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[233, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[233, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[234, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[235, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[236, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[236, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[236, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[237, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[237, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[238, "module-neural_compressor.experimental.nas.dynast"]], "basicnas (class in neural_compressor.experimental.nas)": [[239, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[239, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[239, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[239, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[239, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[239, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[239, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[239, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[239, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[240, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[240, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[240, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[240, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[240, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[240, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[240, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[241, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[241, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[241, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[241, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[242, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[242, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[242, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[242, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[242, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[242, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[243, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[243, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[243, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[243, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[243, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[243, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[243, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[243, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[243, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[243, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[243, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[243, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[243, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[244, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[244, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[244, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[244, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[245, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[246, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[247, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[247, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[248, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[249, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[250, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[250, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[251, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[251, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[252, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[253, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[253, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[254, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[254, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[255, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[255, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[255, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[255, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[255, "neural_compressor.experimental.quantization.Quantization.metric"]], "neural_compressor.experimental.quantization": [[255, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[255, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[255, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[255, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[255, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[256, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[256, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[256, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[256, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[256, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[256, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[256, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[257, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[257, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[257, "neural_compressor.Pruning"]], "quantization (class in neural_compressor)": [[257, "neural_compressor.Quantization"]], "neural_compressor": [[257, "module-neural_compressor"]], "on_epoch_begin() (neural_compressor.pruning method)": [[257, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[257, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[257, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[257, "neural_compressor.Pruning.on_step_end"]], "basemetric (class in neural_compressor.metric)": [[258, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[258, "neural_compressor.metric.METRICS"]], "hvd (neural_compressor.metric.basemetric property)": [[258, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[258, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[258, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[258, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[258, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[258, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[258, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[258, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[258, "neural_compressor.metric.BaseMetric.update"]], "neural_compressor.mix_precision": [[259, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[260, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[260, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[260, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[260, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[260, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[260, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[260, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[261, "neural_compressor.model.BaseModel"]], "export() (neural_compressor.model.basemodel method)": [[261, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[261, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[261, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[261, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[261, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[261, "neural_compressor.model.BaseModel.save"]], "mxnetmodel (class in neural_compressor.model.model)": [[262, "neural_compressor.model.model.MXNetModel"]], "tensorflowbasemodel (class in neural_compressor.model.model)": [[262, "neural_compressor.model.model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.model)": [[262, "neural_compressor.model.model.TensorflowCheckpointModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.model)": [[262, "neural_compressor.model.model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.estimator_session"]], "framework() (neural_compressor.model.model.mxnetmodel method)": [[262, "neural_compressor.model.model.MXNetModel.framework"]], "framework() (neural_compressor.model.model.tensorflowbasemodel method)": [[262, "neural_compressor.model.model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.frozen_pb_session"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.get_model_fwk_name"]], "get_model_type() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.graph_def_session"]], "graph_info (neural_compressor.model.model.tensorflowbasemodel property)": [[262, "neural_compressor.model.model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.graph_session"]], "keras_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.keras_session"]], "load_saved_model() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.load_saved_model"]], "model (neural_compressor.model.model.mxnetmodel property)": [[262, "neural_compressor.model.model.MXNetModel.model"]], "model (neural_compressor.model.model.tensorflowbasemodel property)": [[262, "neural_compressor.model.model.TensorflowBaseModel.model"]], "model (neural_compressor.model.model.tensorflowsavedmodelmodel property)": [[262, "neural_compressor.model.model.TensorflowSavedModelModel.model"]], "neural_compressor.model.model": [[262, "module-neural_compressor.model.model"]], "report_sparsity() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[262, "neural_compressor.model.model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.model.mxnetmodel method)": [[262, "neural_compressor.model.model.MXNetModel.save"]], "save() (neural_compressor.model.model.tensorflowbasemodel method)": [[262, "neural_compressor.model.model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[262, "neural_compressor.model.model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.saved_model_session"]], "slim_session() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.model)": [[262, "neural_compressor.model.model.validate_graph_node"]], "weights (neural_compressor.model.model.tensorflowbasemodel property)": [[262, "neural_compressor.model.model.TensorflowBaseModel.weights"]], "neural_compressor.model.nets_factory": [[263, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[264, "neural_compressor.model.onnx_model.ONNXModel"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[264, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[264, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[264, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[264, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[265, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchipexmodel (class in neural_compressor.model.torch_model)": [[265, "neural_compressor.model.torch_model.PyTorchIpexModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[265, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[265, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchipexmodel property)": [[265, "neural_compressor.model.torch_model.PyTorchIpexModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[265, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[265, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.pytorchipexmodel method)": [[265, "neural_compressor.model.torch_model.PyTorchIpexModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[265, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[265, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[266, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[266, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[266, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[266, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[266, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[266, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[266, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[266, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[266, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[266, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[266, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[266, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[266, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[266, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[266, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[266, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[266, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[266, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[266, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[266, "neural_compressor.objective.Performance.start"]], "neural_compressor.pruners.gradient_sensitivity": [[267, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[268, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[269, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[270, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[271, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[272, "module-neural_compressor.pruners.pruner"]], "pruner_registry() (in module neural_compressor.pruners.pruner)": [[272, "neural_compressor.pruners.pruner.pruner_registry"]], "pruning (class in neural_compressor.pruning)": [[273, "neural_compressor.pruning.Pruning"]], "neural_compressor.pruning": [[273, "module-neural_compressor.pruning"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[273, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[273, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[273, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[273, "neural_compressor.pruning.Pruning.on_step_end"]], "quantization (class in neural_compressor.quantization)": [[274, "neural_compressor.quantization.Quantization"]], "fit() (in module neural_compressor.quantization)": [[274, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[274, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[275, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[275, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[275, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[275, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[276, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[276, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[276, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[277, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[277, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[277, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[277, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[277, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[277, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[277, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[277, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[277, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[277, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[278, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[278, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[278, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[279, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[280, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[280, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[280, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[280, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[280, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[281, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[281, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[281, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[282, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[283, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[284, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[285, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[286, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[286, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[286, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[286, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[286, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[286, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "compressionmanager (class in neural_compressor.training)": [[287, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[287, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[287, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[287, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[287, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[288, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[288, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[288, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[289, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[290, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[290, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[290, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[291, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[291, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[291, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[291, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[291, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[291, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[291, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[292, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[292, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[292, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[292, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[292, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[293, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[294, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[295, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[296, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[296, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[297, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[297, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[298, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[298, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[298, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[299, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[299, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[299, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[299, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[300, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[300, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[301, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[301, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[302, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[302, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[302, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[302, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[302, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[302, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[303, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[303, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[303, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[303, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[303, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[303, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[304, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[304, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[304, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[304, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[304, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[305, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[306, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[306, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[306, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[306, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[306, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[307, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[307, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[307, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[308, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[308, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[308, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[308, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[308, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[308, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[309, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[309, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[310, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[310, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[311, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[311, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[311, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[312, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[313, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[313, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[314, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[314, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[314, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[314, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[314, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[314, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[316, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[316, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[317, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[318, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[319, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[320, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[320, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[320, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[320, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[320, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[321, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[321, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[322, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[322, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[322, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[322, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[323, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[324, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[324, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[324, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[325, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[326, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[327, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[328, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[329, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[330, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[331, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[332, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[334, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[334, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[334, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[334, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[335, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[336, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[336, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[337, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[337, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[337, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[337, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[337, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[337, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[338, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[339, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[340, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[340, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[341, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[342, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[343, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[344, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[345, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[345, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[346, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[346, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[346, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[346, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[346, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[346, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[347, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[347, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[348, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[348, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[348, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[348, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[349, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[349, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[350, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[350, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[350, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[351, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[353, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[353, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[353, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[354, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[354, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[354, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[354, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[354, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[354, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[355, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[355, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[355, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[357, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[357, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[357, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[358, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[358, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[359, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[360, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[360, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[361, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[361, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[361, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[362, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[362, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[362, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[362, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[363, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[363, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[363, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[363, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[363, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[363, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[363, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[363, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[363, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[364, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[364, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[364, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[364, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[365, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[366, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[366, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[366, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[367, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[368, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[368, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[368, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[369, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[369, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[369, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[370, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[371, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[372, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[373, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[374, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[375, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[375, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[376, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[376, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[377, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[378, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[378, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[378, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[378, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[378, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[378, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[378, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[378, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[378, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[378, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[379, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[379, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[380, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[381, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[381, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[381, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[382, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[383, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[383, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[383, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[383, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[383, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[384, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[384, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[385, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[385, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[385, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[386, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[386, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[386, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[386, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[387, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[388, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[388, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[388, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[388, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[388, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[389, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[389, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[389, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[390, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[390, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[391, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[391, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[391, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[392, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[392, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[393, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[393, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[394, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[394, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[395, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[395, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[396, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[397, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[397, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[398, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[399, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[399, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[400, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[400, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[401, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[401, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[401, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[402, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[402, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[403, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[404, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[404, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[404, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[404, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[404, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[405, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[405, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[406, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[407, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[408, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[408, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[408, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[408, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[408, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[410, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[410, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[411, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[411, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[411, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[411, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[412, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[413, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[413, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[413, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[413, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[414, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[414, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[415, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[415, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[415, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[415, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[415, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[415, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[415, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[415, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[415, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[416, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[416, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[416, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[417, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[417, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[417, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[418, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[419, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[419, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[419, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[420, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[420, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[420, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[421, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[421, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[421, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[422, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[422, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[425, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[425, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[426, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[426, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[426, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[427, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[428, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[428, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[429, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[429, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[429, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[429, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[429, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[430, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[430, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[430, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[430, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[430, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[431, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[431, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[431, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[431, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[431, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[431, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[431, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[431, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[431, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[431, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[431, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[432, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[432, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[432, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[432, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[433, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[433, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[433, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[434, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[434, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[434, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[434, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[435, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[436, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[436, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[436, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[436, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[437, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[437, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[438, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[438, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[438, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[438, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[438, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[438, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[438, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[438, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[438, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[438, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[438, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[438, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[438, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[439, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[439, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[439, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[439, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[439, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[440, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[440, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[440, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[440, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[440, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[441, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[441, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[442, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[443, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[443, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[443, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[444, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[444, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[444, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[444, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[444, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[445, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[445, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[446, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[446, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[446, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[446, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[447, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[447, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[447, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[447, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[447, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[448, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[448, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[448, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[448, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[448, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[448, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[449, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[449, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[449, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[450, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[451, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[451, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[451, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[452, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[452, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[452, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[452, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[452, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[453, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[453, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[453, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[454, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[454, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[454, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[454, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[454, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[454, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[455, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[455, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[455, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[455, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[455, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[456, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[456, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[456, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[457, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[457, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[457, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[457, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[457, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[457, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[457, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[457, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[457, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[457, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[457, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[457, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[457, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[458, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[458, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[458, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[458, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[458, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[459, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[459, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[460, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[461, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[461, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[461, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[462, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[462, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[463, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[463, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[464, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[464, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[464, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[464, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[464, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[464, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[465, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[466, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[466, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[466, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[467, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[467, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[468, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[468, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[468, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[469, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[469, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[469, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[470, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[470, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[470, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[470, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[470, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[470, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[471, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[471, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[471, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[471, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[471, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[472, "module-neural_compressor.version"]]}})