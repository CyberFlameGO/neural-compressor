Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruners/gradient_sensitivity/index", "autoapi/neural_compressor/pruners/group_lasso/index", "autoapi/neural_compressor/pruners/index", "autoapi/neural_compressor/pruners/magnitude/index", "autoapi/neural_compressor/pruners/pattern_lock/index", "autoapi/neural_compressor/pruners/pruner/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/helper/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "faq", "framework_yaml", "graph_optimization", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "model_conversion", "objective", "orchestration", "platform_configuration", "pruning", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruners/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruners/group_lasso/index.rst", "autoapi/neural_compressor/pruners/index.rst", "autoapi/neural_compressor/pruners/magnitude/index.rst", "autoapi/neural_compressor/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/pruners/pruner/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/helper/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "faq.md", "framework_yaml.md", "graph_optimization.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "model_conversion.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 1, 2, 3, 7, 35, 77, 132, 200, 210, 232, 236, 261, 263, 489, 490, 491, 492, 493, 495, 497, 502, 508, 511, 512, 513, 515, 518, 519, 521, 522, 523, 524], "interest": [0, 6, 491, 522], "foster": [0, 491], "an": [0, 2, 3, 4, 6, 7, 12, 35, 40, 83, 88, 89, 91, 132, 156, 157, 172, 187, 194, 199, 200, 204, 209, 213, 217, 222, 226, 232, 233, 236, 237, 238, 245, 250, 251, 252, 267, 275, 373, 378, 451, 490, 491, 492, 494, 498, 502, 508, 509, 512, 516, 521, 522, 523, 524], "open": [0, 6, 194, 232, 454, 489, 491, 500, 516], "welcom": [0, 491, 504], "environ": [0, 191, 268, 412, 441, 442, 450, 473, 489, 491, 524], "we": [0, 1, 3, 4, 6, 7, 12, 35, 65, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 91, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 127, 156, 157, 172, 191, 193, 194, 210, 233, 236, 243, 250, 491, 492, 497, 501, 502, 508, 511, 512, 513, 515, 517, 518, 521, 522, 524], "maintain": [0, 6, 240, 491, 510, 515, 520], "make": [0, 1, 3, 7, 156, 157, 172, 209, 261, 263, 265, 329, 361, 393, 489, 491, 492, 501, 508, 518, 519, 524], "particip": [0, 491], "project": [0, 226, 330, 333, 338, 340, 341, 344, 350, 351, 355, 356, 357, 358, 359, 360, 361, 385, 491, 504, 516, 521, 524], "commun": [0, 268, 442, 475, 476, 477, 489, 491], "harass": [0, 491], "free": [0, 181, 182, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 491, 508, 512, 521], "experi": [0, 491, 521, 524], "everyon": [0, 491], "regardless": [0, 236, 491], "ag": [0, 247, 491], "bodi": [0, 491], "size": [0, 3, 120, 187, 189, 201, 203, 204, 210, 213, 217, 219, 222, 226, 236, 245, 248, 261, 275, 312, 330, 340, 341, 458, 460, 461, 489, 490, 491, 492, 493, 497, 500, 502, 512, 515, 523, 524, 525, 526], "disabl": [0, 162, 449, 477, 491], "ethnic": [0, 491], "sex": [0, 175, 491], "characterist": [0, 491], "gender": [0, 491], "ident": [0, 3, 95, 101, 127, 156, 261, 491, 495, 502], "express": [0, 68, 233, 491], "level": [0, 3, 38, 41, 452, 473, 491, 524], "educ": [0, 491], "socio": [0, 491], "econom": [0, 491], "statu": [0, 127, 330, 341, 344, 348, 350, 356, 358, 359, 444, 472, 485, 491, 512], "nation": [0, 213, 491], "person": [0, 6, 175, 491, 516], "appear": [0, 489, 491], "race": [0, 491], "religion": [0, 491], "sexual": [0, 491], "orient": [0, 491], "exampl": [0, 1, 6, 42, 132, 164, 211, 212, 213, 223, 225, 226, 236, 237, 238, 240, 246, 264, 302, 338, 355, 361, 385, 409, 410, 411, 412, 454, 460, 489, 491, 493, 498, 503, 504, 505, 511, 519, 520, 523, 524], "behavior": [0, 7, 236, 491, 495, 501, 510, 522, 524, 525], "contribut": [0, 6, 504], "creat": [0, 2, 7, 31, 32, 33, 35, 68, 127, 139, 156, 193, 194, 201, 211, 213, 227, 232, 236, 244, 245, 250, 251, 252, 267, 275, 288, 305, 329, 346, 355, 356, 360, 361, 439, 459, 472, 485, 491, 493, 498, 502, 510, 511, 518, 521, 522, 524], "posit": [0, 127, 226, 489, 491, 508], "includ": [0, 6, 7, 38, 187, 192, 211, 213, 217, 220, 221, 222, 224, 226, 231, 232, 236, 241, 261, 265, 266, 268, 285, 306, 307, 489, 491, 493, 506, 507, 508, 515, 518, 519, 522, 524], "us": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 40, 41, 59, 65, 66, 68, 91, 130, 132, 133, 139, 164, 169, 171, 173, 174, 175, 181, 182, 187, 191, 192, 197, 209, 210, 211, 212, 213, 214, 215, 218, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 240, 241, 242, 243, 246, 248, 250, 252, 254, 257, 261, 263, 264, 265, 266, 267, 268, 277, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 303, 306, 307, 312, 356, 361, 366, 367, 371, 373, 385, 392, 394, 419, 423, 444, 460, 462, 472, 473, 489, 491, 493, 495, 496, 497, 498, 501, 503, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526], "inclus": [0, 491], "languag": [0, 12, 233, 491, 516], "Being": [0, 491], "respect": [0, 491, 496, 501, 515, 525], "differ": [0, 1, 2, 3, 6, 12, 157, 169, 171, 172, 192, 204, 213, 226, 231, 232, 233, 239, 240, 247, 250, 251, 253, 256, 261, 266, 267, 268, 269, 285, 489, 491, 492, 493, 495, 497, 499, 502, 503, 505, 508, 510, 511, 512, 515, 518, 522, 523, 524], "viewpoint": [0, 491], "gracefulli": [0, 491], "accept": [0, 35, 489, 491, 509], "construct": [0, 193, 194, 195, 196, 198, 211, 214, 215, 218, 305, 490, 491, 493, 497, 524], "critic": [0, 6, 491], "focus": [0, 7, 491, 502], "what": [0, 173, 209, 268, 302, 489, 491], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 21, 29, 30, 35, 36, 38, 40, 41, 42, 66, 68, 74, 75, 81, 83, 85, 91, 102, 106, 107, 113, 114, 115, 127, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 168, 172, 173, 181, 182, 183, 184, 187, 189, 191, 193, 194, 197, 199, 200, 201, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 226, 232, 233, 236, 238, 239, 240, 242, 245, 248, 252, 254, 262, 263, 264, 267, 268, 269, 275, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 311, 329, 361, 373, 393, 396, 398, 399, 401, 403, 404, 406, 412, 447, 449, 451, 453, 454, 458, 460, 462, 468, 473, 475, 489, 490, 491, 492, 493, 495, 497, 498, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525], "best": [0, 2, 4, 6, 66, 226, 227, 231, 232, 243, 244, 250, 251, 266, 268, 285, 491, 506, 512, 518, 523, 524], "show": [0, 3, 489, 490, 491, 495, 497, 515, 524], "empathi": [0, 491], "toward": [0, 4, 491, 495], "other": [0, 1, 66, 88, 89, 91, 156, 210, 238, 267, 273, 289, 451, 455, 477, 489, 491, 498, 501, 502, 505, 507, 510, 512, 514, 515, 518, 523, 524, 526], "member": [0, 7, 232, 241, 491], "unaccept": [0, 491], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 21, 29, 30, 36, 38, 41, 42, 59, 66, 68, 74, 91, 95, 113, 114, 115, 127, 130, 132, 136, 138, 162, 164, 168, 169, 170, 171, 173, 174, 175, 181, 182, 187, 188, 189, 192, 194, 195, 197, 200, 201, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 226, 227, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 277, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 305, 306, 307, 311, 312, 330, 331, 333, 336, 340, 341, 344, 345, 348, 349, 356, 361, 364, 366, 367, 368, 369, 370, 371, 372, 385, 392, 393, 442, 489, 490, 491, 492, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 508, 509, 510, 512, 513, 515, 517, 518, 519, 520, 522, 523, 524, 525, 526], "imageri": [0, 491], "unwelcom": [0, 491], "attent": [0, 211, 491, 495], "advanc": [0, 6, 164, 469, 491, 492, 518, 524, 525], "troll": [0, 491], "insult": [0, 491], "derogatori": [0, 491], "comment": [0, 491, 493, 508, 523], "polit": [0, 491], "attack": [0, 491], "public": [0, 127, 491], "privat": [0, 232, 241, 491], "publish": [0, 491, 507, 509], "inform": [0, 5, 6, 7, 8, 9, 10, 14, 21, 29, 30, 40, 68, 130, 164, 181, 182, 193, 194, 195, 196, 236, 261, 263, 264, 265, 267, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 328, 364, 393, 448, 449, 454, 455, 491, 495, 498, 501, 504, 510, 515, 519, 520, 522, 525, 526], "physic": [0, 191, 491], "electron": [0, 491], "address": [0, 213, 477, 489, 491, 509, 516], "without": [0, 1, 127, 162, 226, 236, 263, 460, 489, 491, 492, 495, 497, 502, 508, 515, 516, 517, 518, 524], "explicit": [0, 156, 491], "permiss": [0, 491], "which": [0, 2, 4, 6, 7, 12, 40, 41, 66, 68, 76, 127, 132, 156, 181, 189, 191, 211, 212, 213, 232, 233, 236, 238, 246, 248, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 273, 275, 286, 287, 289, 296, 458, 489, 490, 491, 492, 493, 495, 497, 498, 501, 502, 505, 508, 509, 510, 511, 513, 515, 517, 518, 519, 520, 522, 523, 524, 525, 526], "could": [0, 68, 181, 182, 213, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 491, 496, 502, 511, 513, 515, 518, 524], "reason": [0, 102, 193, 194, 491, 492, 522, 524], "consid": [0, 1, 162, 240, 491, 492, 495, 524], "inappropri": [0, 491], "profession": [0, 491], "set": [0, 2, 3, 4, 6, 36, 38, 40, 41, 42, 66, 67, 68, 118, 127, 132, 156, 162, 173, 175, 181, 182, 191, 197, 201, 203, 211, 213, 216, 226, 227, 229, 231, 232, 236, 241, 242, 243, 245, 250, 254, 262, 267, 268, 273, 275, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 314, 351, 352, 353, 356, 373, 419, 423, 428, 449, 453, 458, 459, 461, 462, 463, 472, 473, 477, 489, 490, 491, 492, 493, 497, 501, 502, 503, 505, 508, 509, 517, 518, 521, 524, 525], "ar": [0, 2, 3, 4, 6, 7, 12, 36, 42, 66, 83, 95, 139, 149, 178, 200, 211, 226, 232, 233, 236, 240, 246, 248, 252, 261, 262, 263, 264, 267, 268, 288, 305, 311, 312, 393, 396, 398, 405, 446, 455, 489, 490, 491, 492, 493, 495, 496, 498, 499, 501, 503, 505, 507, 508, 509, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526], "clarifi": [0, 491], "expect": [0, 68, 139, 213, 315, 431, 454, 491, 500, 518, 524], "take": [0, 2, 36, 68, 181, 182, 194, 195, 204, 226, 261, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 491, 492, 495, 501, 515, 518, 519, 523, 524, 525], "appropri": [0, 491], "fair": [0, 491], "correct": [0, 3, 157, 172, 236, 237, 238, 240, 262, 414, 489, 491], "action": [0, 491, 502], "ani": [0, 1, 91, 139, 156, 164, 227, 232, 236, 238, 314, 315, 317, 319, 321, 322, 323, 324, 325, 326, 328, 330, 331, 333, 340, 341, 342, 343, 344, 345, 349, 351, 352, 362, 364, 369, 370, 373, 375, 381, 390, 393, 396, 400, 403, 404, 405, 407, 410, 412, 415, 419, 423, 425, 428, 431, 434, 439, 440, 446, 447, 449, 451, 453, 454, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 476, 477, 484, 485, 489, 491, 492, 497], "instanc": [0, 1, 2, 7, 130, 132, 133, 139, 181, 182, 191, 211, 232, 237, 238, 240, 243, 250, 251, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 330, 368, 372, 396, 405, 489, 491, 524, 525, 526], "have": [0, 3, 12, 95, 127, 162, 193, 194, 209, 225, 233, 236, 240, 247, 261, 263, 489, 491, 492, 497, 501, 507, 508, 509, 512, 515, 518], "right": [0, 1, 189, 236, 458, 489, 491, 492, 523], "remov": [0, 3, 68, 83, 95, 106, 118, 120, 127, 132, 149, 156, 192, 229, 238, 330, 333, 340, 341, 344, 346, 348, 350, 396, 454, 455, 461, 490, 491, 502, 515, 522, 524], "edit": [0, 1, 350, 356, 358, 359, 362, 491], "reject": [0, 491], "commit": [0, 491], "wiki": [0, 491], "issu": [0, 5, 489, 491, 506, 518, 522], "align": [0, 226, 491, 523], "thi": [0, 2, 3, 4, 6, 7, 12, 35, 40, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 107, 108, 111, 112, 121, 122, 125, 126, 127, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 164, 168, 172, 181, 182, 193, 194, 199, 200, 210, 211, 212, 213, 214, 215, 216, 218, 225, 226, 232, 233, 236, 237, 238, 240, 245, 253, 254, 261, 263, 264, 265, 266, 267, 268, 277, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 488, 489, 490, 491, 492, 493, 495, 497, 498, 501, 502, 505, 507, 508, 509, 510, 511, 515, 518, 519, 520, 521, 522, 523, 524], "ban": [0, 491], "temporarili": [0, 491], "perman": [0, 491], "thei": [0, 139, 173, 191, 232, 268, 490, 491, 495, 501, 508, 512, 515], "deem": [0, 491], "threaten": [0, 491], "offens": [0, 491], "harm": [0, 491], "appli": [0, 4, 130, 145, 200, 232, 234, 261, 263, 489, 491, 513, 515, 518, 519, 521, 524, 525], "both": [0, 2, 4, 7, 162, 251, 253, 491, 492, 496, 517, 518], "within": [0, 1, 231, 232, 236, 266, 268, 273, 285, 288, 491, 509, 516], "space": [0, 2, 7, 173, 181, 182, 231, 232, 238, 243, 245, 247, 250, 251, 252, 253, 266, 268, 285, 288, 289, 290, 293, 294, 295, 296, 460, 491, 492, 515, 518, 524, 525], "when": [0, 2, 4, 12, 65, 74, 85, 91, 139, 162, 187, 211, 212, 220, 221, 222, 226, 233, 234, 246, 261, 262, 263, 458, 460, 473, 477, 489, 491, 492, 493, 498, 502, 515, 518, 523, 524], "individu": [0, 2, 91, 244, 245, 250, 261, 491], "repres": [0, 65, 213, 218, 236, 238, 240, 332, 334, 335, 337, 339, 342, 343, 346, 347, 458, 491, 493, 518, 524], "its": [0, 2, 68, 118, 127, 130, 139, 164, 207, 213, 225, 226, 234, 235, 239, 240, 263, 267, 269, 288, 289, 489, 491, 492, 495, 507, 508, 509, 514, 515, 521, 523, 524], "offici": [0, 162, 233, 237, 238, 489, 491, 508], "e": [0, 38, 41, 67, 91, 245, 247, 267, 451, 453, 477, 491, 495, 497, 502, 524], "mail": [0, 491], "post": [0, 3, 4, 7, 36, 38, 41, 181, 182, 200, 226, 229, 232, 267, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 472, 491, 496, 497, 505, 506, 513, 522, 524], "via": [0, 139, 231, 232, 254, 266, 268, 284, 285, 477, 491, 497, 502, 505, 521], "social": [0, 491], "media": [0, 491], "account": [0, 245, 491, 521, 524], "act": [0, 209, 491], "appoint": [0, 491], "onlin": [0, 6, 35, 491, 521], "offlin": [0, 35, 312, 491, 518], "event": [0, 491, 522], "represent": [0, 77, 245, 330, 331, 333, 336, 340, 341, 344, 345, 348, 349, 471, 491, 496, 512, 518], "mai": [0, 127, 156, 162, 277, 491, 492, 500, 507, 509, 514, 516, 518], "further": [0, 91, 491, 509, 510], "defin": [0, 2, 3, 4, 7, 38, 40, 41, 65, 66, 67, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 114, 121, 122, 125, 126, 127, 156, 181, 182, 192, 243, 244, 247, 250, 251, 252, 253, 254, 261, 262, 263, 264, 265, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 387, 388, 389, 472, 489, 491, 493, 495, 501, 505, 508, 512, 513, 515, 518, 521, 522, 524, 525], "abus": [0, 491], "otherwis": [0, 182, 213, 226, 289, 296, 491, 493, 517, 523], "report": [0, 489, 491, 521], "contact": [0, 491, 520, 521], "mlp": [0, 491], "mlpc": [0, 491], "dl": [0, 231, 232, 241, 254, 266, 268, 284, 285, 491, 503, 516], "intel": [0, 2, 5, 7, 66, 194, 197, 228, 232, 239, 240, 261, 264, 269, 441, 454, 491, 494, 495, 496, 499, 501, 502, 506, 507, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 525], "com": [0, 3, 6, 164, 211, 233, 234, 237, 238, 261, 264, 454, 489, 491, 493, 502, 506, 507, 520, 521, 526], "all": [0, 1, 3, 4, 6, 7, 36, 41, 42, 59, 66, 68, 81, 84, 106, 107, 119, 139, 169, 171, 183, 184, 187, 191, 192, 197, 200, 201, 209, 213, 217, 220, 221, 222, 224, 226, 229, 232, 233, 236, 238, 239, 240, 252, 255, 256, 257, 258, 261, 264, 267, 269, 271, 272, 275, 276, 277, 283, 286, 287, 288, 289, 293, 294, 296, 306, 307, 316, 327, 329, 338, 354, 356, 361, 366, 367, 380, 382, 385, 386, 392, 393, 396, 398, 405, 411, 418, 420, 424, 425, 427, 433, 438, 442, 451, 455, 477, 489, 491, 492, 493, 497, 501, 502, 506, 513, 514, 515, 516, 518, 519, 523, 524], "complaint": [0, 491], "review": [0, 491], "investig": [0, 491], "result": [0, 2, 3, 12, 36, 38, 41, 66, 68, 162, 181, 189, 191, 192, 226, 232, 233, 236, 237, 238, 239, 240, 245, 247, 251, 269, 277, 286, 287, 288, 290, 291, 293, 294, 295, 296, 313, 315, 330, 331, 344, 345, 350, 356, 359, 362, 436, 476, 479, 489, 490, 491, 492, 495, 497, 498, 502, 505, 507, 508, 512, 515, 516, 518, 521, 522, 523, 524, 526], "necessari": [0, 2, 65, 227, 232, 491, 510, 521, 524], "circumst": [0, 491, 517], "team": [0, 238, 491, 519], "oblig": [0, 491], "confidenti": [0, 489, 491], "regard": [0, 491, 519], "incid": [0, 491], "detail": [0, 6, 68, 226, 330, 333, 340, 341, 344, 346, 348, 350, 351, 353, 356, 357, 358, 359, 360, 364, 369, 429, 434, 448, 491, 501, 503, 508, 509, 515, 520, 521, 522, 524, 526], "specif": [0, 2, 3, 7, 38, 41, 66, 67, 68, 132, 133, 183, 184, 187, 191, 197, 211, 212, 213, 214, 218, 220, 221, 222, 232, 233, 236, 242, 243, 250, 251, 276, 341, 351, 352, 353, 356, 364, 379, 489, 491, 495, 498, 501, 503, 508, 509, 510, 512, 517, 525], "polici": [0, 6, 293, 294, 491, 502, 514, 525], "separ": [0, 225, 476, 489, 491, 503, 507, 513, 517], "who": [0, 491], "do": [0, 12, 36, 38, 41, 66, 210, 211, 227, 228, 229, 232, 233, 236, 264, 267, 289, 311, 489, 491, 493, 497, 501, 502, 505, 508, 512, 519, 520, 524], "follow": [0, 2, 3, 4, 7, 9, 42, 91, 107, 110, 113, 114, 115, 116, 127, 213, 232, 233, 236, 254, 488, 489, 490, 491, 493, 495, 498, 501, 502, 506, 507, 508, 510, 511, 513, 515, 517, 518, 522, 524], "good": [0, 491, 498, 518, 524], "faith": [0, 491], "face": [0, 491, 516, 520], "temporari": [0, 491], "repercuss": [0, 491], "determin": [0, 3, 473, 491, 498], "": [0, 2, 3, 38, 65, 67, 77, 83, 91, 127, 139, 156, 157, 172, 175, 191, 193, 194, 195, 201, 210, 213, 225, 226, 232, 238, 246, 248, 261, 263, 273, 285, 286, 287, 289, 290, 291, 293, 294, 296, 306, 307, 362, 393, 446, 447, 490, 491, 495, 497, 498, 501, 502, 505, 506, 509, 513, 514, 515, 516, 517, 518, 520, 521, 525], "leadership": [0, 491], "adapt": [0, 38, 41, 66, 67, 68, 491], "from": [0, 1, 2, 3, 4, 6, 7, 12, 36, 38, 40, 65, 66, 68, 82, 88, 89, 91, 127, 130, 132, 139, 149, 156, 162, 181, 182, 192, 193, 194, 200, 201, 204, 208, 211, 212, 213, 214, 215, 216, 218, 227, 229, 230, 232, 233, 236, 237, 238, 242, 245, 246, 247, 248, 252, 254, 261, 262, 263, 264, 265, 267, 273, 277, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 311, 312, 330, 333, 334, 335, 337, 340, 341, 342, 343, 344, 346, 348, 350, 351, 353, 356, 357, 358, 359, 360, 362, 373, 378, 396, 399, 408, 409, 410, 412, 434, 439, 453, 454, 458, 460, 461, 462, 477, 479, 484, 485, 490, 491, 492, 493, 495, 496, 497, 499, 500, 502, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524], "version": [0, 1, 6, 7, 38, 40, 41, 67, 68, 74, 181, 228, 229, 412, 444, 449, 460, 489, 491, 501, 506, 507, 514, 516, 524], "1": [0, 1, 3, 4, 6, 7, 36, 38, 41, 42, 65, 66, 68, 75, 95, 111, 130, 132, 160, 162, 170, 172, 189, 191, 192, 193, 194, 201, 203, 206, 207, 208, 210, 211, 212, 214, 215, 218, 219, 226, 231, 232, 236, 237, 238, 240, 245, 248, 254, 261, 263, 266, 267, 268, 284, 285, 289, 305, 315, 431, 439, 488, 490, 491, 492, 493, 495, 498, 501, 502, 508, 509, 512, 513, 514, 515, 517, 518, 520, 522, 523, 524, 525], "4": [0, 3, 6, 7, 12, 68, 74, 187, 220, 221, 222, 224, 226, 233, 234, 236, 451, 490, 491, 492, 500, 501, 505, 506, 508, 514, 515, 523, 524, 526], "avail": [0, 6, 8, 9, 10, 14, 21, 29, 30, 35, 273, 328, 332, 334, 335, 339, 342, 343, 347, 412, 489, 505, 514, 521, 524], "http": [0, 3, 6, 164, 211, 213, 233, 234, 236, 237, 238, 261, 263, 264, 485, 489, 493, 502, 506, 507, 520], "www": [0, 213, 493, 526], "org": [0, 6, 236, 263, 489, 506], "html": 0, "For": [0, 1, 3, 4, 5, 7, 132, 200, 213, 225, 226, 232, 236, 237, 238, 240, 245, 261, 264, 285, 289, 451, 489, 491, 496, 497, 501, 502, 505, 515, 519, 522, 524, 525, 526], "answer": [0, 226, 237, 238, 491, 523, 526], "common": [0, 4, 6, 9, 232, 242, 248, 251, 252, 253, 261, 267, 268, 305, 454, 455, 460, 490, 491, 492, 493, 495, 497, 502, 503, 506, 510, 511, 515, 518], "question": [0, 7, 226, 237, 238, 491, 506, 523, 526], "about": [0, 364, 393, 446, 448, 449, 454, 455, 489, 491, 492, 498, 519, 526], "see": [0, 1, 3, 5, 226, 233, 236, 489, 491, 502, 507, 511, 515, 522, 526], "faq": [0, 6, 491], "pytorch": [1, 6, 7, 187, 192, 197, 199, 210, 211, 213, 216, 217, 220, 221, 222, 224, 226, 228, 229, 230, 231, 232, 239, 240, 241, 259, 261, 264, 266, 268, 269, 276, 285, 315, 385, 392, 415, 425, 442, 495, 497, 498, 499, 501, 505, 506, 509, 510, 515, 516, 517, 518, 520, 524, 525], "toolkit": [1, 6, 506, 516], "develop": [1, 164, 460, 491, 506, 509, 516, 518, 519, 521], "transform": [1, 6, 14, 31, 41, 65, 71, 83, 111, 112, 114, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 157, 160, 161, 185, 187, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 232, 268, 324, 328, 333, 338, 351, 354, 356, 361, 363, 385, 460, 461, 462, 463, 490, 492, 493, 495, 496, 497, 515, 516, 519, 522, 524, 525], "nn": [1, 3, 4, 168, 192, 228, 229, 248, 285, 510, 515, 522], "modul": [1, 3, 4, 228, 249, 250, 259, 260, 450, 457, 465, 489, 490, 495, 505, 508, 510, 517, 519, 522], "With": [1, 4, 7, 118, 492, 512, 515, 516, 518, 526], "convert": [1, 3, 4, 36, 40, 65, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 124, 125, 126, 211, 223, 225, 226, 232, 236, 240, 242, 251, 253, 262, 271, 272, 276, 302, 332, 339, 347, 439, 451, 502, 509, 511, 518, 519, 523], "torch": [1, 3, 4, 66, 164, 168, 192, 228, 229, 240, 248, 276, 285, 497, 509, 510, 515, 518, 522], "graphmodul": [1, 66, 168, 519], "can": [1, 2, 3, 4, 6, 7, 77, 157, 164, 172, 173, 181, 182, 191, 193, 194, 210, 213, 226, 232, 236, 238, 240, 261, 263, 264, 265, 268, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 415, 444, 451, 460, 489, 490, 492, 493, 495, 497, 498, 501, 502, 505, 506, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525], "automat": [1, 6, 213, 216, 231, 232, 241, 248, 266, 268, 285, 489, 493, 505, 509, 513, 523, 524], "insert": [1, 3, 68, 124, 127, 130, 149, 160, 228, 229, 505, 518, 519, 522], "quant": [1, 3, 68, 168, 518], "dequant": [1, 3, 110, 113, 115, 116, 118, 145, 164, 168, 293, 364, 522], "oper": [1, 3, 65, 127, 162, 189, 261, 472, 476, 489, 512, 518, 523, 524], "symbolic_trac": 1, "fake": [1, 4, 68, 130, 518], "valu": [1, 3, 4, 36, 38, 41, 42, 65, 66, 68, 76, 77, 83, 88, 89, 91, 111, 112, 127, 132, 156, 157, 162, 172, 174, 175, 181, 182, 189, 191, 192, 211, 214, 215, 226, 236, 240, 246, 247, 261, 262, 264, 276, 277, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 303, 305, 306, 312, 324, 326, 328, 332, 334, 335, 337, 339, 342, 343, 347, 351, 352, 373, 375, 414, 443, 446, 447, 451, 453, 458, 460, 468, 470, 471, 473, 484, 489, 492, 493, 498, 501, 508, 512, 515, 517, 518, 523, 524, 525], "call": [1, 2, 7, 35, 40, 139, 200, 232, 236, 247, 248, 254, 261, 263, 264, 268, 284, 329, 361, 446, 454, 455, 489, 492, 503, 515, 518, 522, 523, 524], "proxi": 1, "fed": 1, "model": [1, 2, 4, 7, 10, 36, 38, 40, 41, 42, 66, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 156, 162, 164, 168, 173, 178, 181, 182, 191, 192, 194, 195, 200, 207, 210, 211, 213, 226, 227, 228, 229, 230, 231, 232, 240, 241, 242, 243, 244, 246, 248, 250, 251, 253, 254, 261, 262, 263, 264, 265, 266, 267, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 305, 311, 312, 314, 315, 316, 318, 328, 330, 338, 341, 344, 346, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 368, 372, 373, 378, 379, 380, 383, 384, 385, 409, 410, 412, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 433, 435, 438, 439, 442, 443, 450, 458, 460, 465, 475, 476, 480, 490, 492, 493, 495, 496, 497, 498, 502, 503, 505, 507, 508, 509, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 525], "record": [1, 3, 192, 199, 211, 212, 213, 219, 493, 521, 522, 524], "Then": [1, 236, 489, 502], "get": [1, 38, 41, 66, 67, 68, 88, 89, 91, 127, 132, 139, 156, 162, 168, 173, 175, 187, 191, 197, 199, 200, 201, 204, 222, 224, 226, 229, 230, 231, 232, 241, 248, 253, 254, 261, 263, 265, 266, 267, 268, 273, 275, 276, 277, 293, 294, 306, 307, 312, 313, 318, 324, 325, 326, 328, 330, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 368, 372, 373, 378, 390, 393, 394, 396, 398, 399, 403, 404, 405, 407, 410, 412, 414, 415, 416, 417, 422, 426, 429, 430, 432, 436, 437, 439, 441, 448, 449, 453, 458, 460, 461, 463, 467, 470, 472, 473, 476, 477, 481, 483, 484, 485, 486, 489, 490, 492, 493, 505, 506, 522, 524], "sure": [1, 3, 156, 261, 263, 265, 393, 489], "replac": [1, 3, 41, 106, 107, 127, 238, 289, 460, 497, 502, 520], "backend": [1, 38, 41, 42, 66, 67, 68, 197, 202, 203, 205, 207, 211, 212, 214, 215, 216, 217, 218, 222, 224, 226, 241, 488, 497, 498, 503, 505, 517, 518, 523, 525], "pytorch_fx": [1, 187, 213, 217, 220, 221, 222, 517], "conf": [1, 2, 4, 169, 171, 181, 182, 191, 232, 241, 242, 254, 267, 271, 272, 276, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 471, 490, 492, 495, 502, 503, 524], "yaml": [1, 4, 7, 66, 67, 68, 173, 174, 175, 181, 182, 191, 200, 211, 213, 227, 231, 232, 242, 243, 244, 250, 251, 254, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 313, 317, 318, 319, 320, 321, 323, 325, 326, 408, 410, 417, 422, 426, 429, 471, 493, 495, 498, 502, 503, 508, 511, 512, 515, 517, 522, 523, 524], "you": [1, 4, 6, 209, 211, 236, 263, 489, 490, 491, 492, 493, 497, 506, 507, 508, 520, 521, 522, 524], "usual": [1, 4, 36, 38, 41, 66, 68, 211, 232, 254, 492, 495, 513, 518], "neural": [1, 7, 21, 40, 66, 164, 191, 194, 197, 200, 223, 224, 226, 228, 232, 239, 240, 242, 254, 261, 264, 266, 267, 269, 273, 368, 372, 396, 405, 441, 448, 460, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 513, 516, 518, 520, 522, 523, 524, 525], "_": [1, 3, 4, 7, 181, 182, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 488, 495, 497, 498, 501, 502, 508, 509, 510, 512, 515, 518, 519, 520, 521, 522, 524, 525], "compressor": [1, 2, 7, 40, 66, 191, 194, 197, 200, 223, 224, 226, 228, 232, 239, 240, 242, 261, 264, 266, 267, 269, 273, 368, 372, 396, 405, 441, 448, 460, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 513, 515, 516, 518, 520, 522, 523, 524, 525], "sourc": [1, 6, 36, 42, 68, 194, 232, 234, 242, 377, 507, 511, 516], "code": [1, 6, 7, 181, 182, 191, 232, 242, 264, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 351, 356, 374, 392, 454, 455, 485, 486, 492, 493, 495, 497, 503, 505, 507, 508, 512, 513, 515, 516, 517, 518, 521, 522, 523, 524], "shown": [1, 2, 373, 489, 495, 502, 508, 512, 513, 524], "below": [1, 2, 4, 7, 75, 87, 95, 267, 286, 287, 488, 491, 495, 497, 502, 503, 508, 512, 513, 515, 517, 518, 522, 524], "arg": [1, 2, 3, 40, 66, 74, 124, 211, 212, 213, 231, 232, 242, 261, 266, 267, 271, 272, 273, 276, 277, 288, 302, 317, 319, 321, 322, 323, 332, 334, 335, 337, 339, 342, 343, 347, 446, 454, 473, 492, 493, 495, 497, 510, 515, 518, 522, 523], "tune": [1, 4, 6, 7, 36, 38, 40, 41, 66, 68, 173, 181, 182, 211, 213, 231, 232, 266, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 323, 341, 348, 349, 356, 358, 362, 385, 415, 420, 430, 442, 450, 461, 465, 489, 492, 493, 497, 498, 505, 507, 509, 512, 515, 516, 519, 520, 521, 522, 525], "neural_compressor": [1, 2, 4, 6, 12, 490, 492, 493, 495, 497, 502, 503, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 523, 524, 525], "experiment": [1, 2, 4, 6, 12, 185, 188, 189, 268, 439, 490, 493, 495, 497, 502, 509, 510, 511, 512, 513, 515, 517, 519, 520, 523], "import": [1, 2, 3, 4, 6, 162, 232, 242, 245, 302, 312, 490, 492, 493, 495, 497, 502, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 522, 523], "eval": [1, 3, 4, 41, 200, 232, 236, 242, 522], "q_model": [1, 4, 66, 164, 232, 242, 492, 493, 497, 503, 508, 510, 511, 512, 518], "fit": [1, 4, 6, 173, 285, 288, 492, 493, 495, 497, 503, 508, 510, 512, 513, 515, 518], "save": [1, 2, 3, 7, 36, 38, 41, 66, 68, 127, 187, 213, 217, 222, 228, 229, 246, 251, 267, 271, 272, 273, 275, 276, 289, 302, 303, 306, 312, 502, 503, 509, 510, 511, 515, 518], "tuned_checkpoint": 1, "return": [1, 2, 3, 4, 12, 36, 38, 40, 41, 42, 65, 66, 68, 71, 74, 77, 78, 81, 82, 83, 84, 88, 89, 91, 95, 102, 106, 107, 111, 112, 113, 114, 115, 116, 124, 127, 130, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 162, 164, 168, 169, 171, 175, 181, 182, 187, 189, 191, 192, 197, 201, 203, 210, 213, 217, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 257, 261, 262, 263, 264, 265, 267, 269, 271, 272, 273, 275, 276, 277, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 305, 306, 307, 311, 312, 330, 331, 333, 340, 341, 342, 343, 344, 346, 348, 349, 373, 376, 377, 378, 379, 410, 446, 449, 451, 453, 454, 455, 460, 463, 472, 473, 476, 493, 497, 508, 509, 510, 512, 518, 522, 524], "now": [1, 2, 226, 458, 493, 497, 502, 511, 517, 523, 524], "support": [1, 2, 3, 38, 41, 65, 66, 67, 68, 95, 102, 119, 181, 182, 187, 191, 192, 193, 194, 197, 200, 201, 210, 211, 213, 217, 220, 221, 222, 223, 224, 226, 232, 239, 240, 242, 247, 248, 252, 254, 255, 256, 257, 261, 263, 267, 269, 273, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 306, 307, 328, 393, 396, 398, 399, 401, 403, 404, 406, 412, 443, 451, 460, 489, 490, 498, 502, 511, 516, 519, 521, 524, 526], "auto": [1, 286, 312], "method": [1, 2, 3, 4, 6, 66, 127, 139, 156, 157, 168, 187, 193, 194, 204, 209, 210, 211, 213, 217, 220, 221, 222, 224, 226, 232, 239, 240, 245, 248, 251, 252, 253, 257, 266, 269, 271, 272, 273, 275, 276, 446, 451, 455, 472, 490, 492, 495, 496, 498, 508, 513, 515, 518, 519, 523, 524], "avoid": [1, 211, 522], "user": [1, 2, 3, 6, 7, 38, 67, 127, 173, 181, 182, 183, 184, 187, 191, 197, 200, 213, 216, 220, 221, 222, 226, 231, 232, 245, 247, 254, 264, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 312, 445, 495, 498, 501, 502, 505, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 522, 523, 524], "log": [1, 160, 254, 315, 330, 341, 344, 350, 356, 358, 359, 415, 446, 452, 453, 454, 455, 459, 473, 489, 521, 522, 524], "output": [1, 3, 4, 7, 12, 35, 42, 66, 68, 74, 80, 81, 91, 95, 106, 107, 113, 115, 120, 127, 130, 139, 156, 162, 175, 181, 182, 192, 194, 195, 199, 225, 227, 228, 229, 231, 232, 233, 236, 240, 245, 246, 261, 273, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 306, 330, 341, 344, 350, 356, 358, 359, 393, 403, 404, 405, 419, 423, 426, 446, 454, 461, 467, 489, 492, 495, 497, 501, 502, 503, 508, 510, 515, 517, 518, 522, 523, 524, 525], "fail": [1, 127, 455], "symbol": [1, 40, 168, 233, 285, 510], "trace": [1, 66, 164, 168, 228, 229, 285], "info": [1, 36, 38, 41, 66, 127, 193, 194, 198, 229, 261, 267, 273, 330, 331, 333, 340, 341, 344, 345, 349, 446, 449, 454, 460, 476, 489, 491, 502, 510], "entir": [1, 3, 4, 285, 515], "conduct": 1, "combin": [1, 7, 38, 67, 181, 182, 189, 200, 232, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 498, 505, 513, 516, 519, 523, 524], "imper": 1, "control": [1, 36, 38, 68, 107, 169, 171, 248, 356, 361, 489, 514, 524], "flow": [1, 2, 232, 237, 238, 254], "therefor": [1, 4, 518, 520], "int8": [1, 4, 7, 36, 38, 41, 65, 66, 67, 68, 157, 164, 172, 223, 228, 229, 289, 293, 294, 306, 307, 364, 488, 489, 493, 496, 501, 517, 518, 519, 520, 521, 522, 523, 524, 525], "consist": [1, 76, 84, 489, 491, 524], "lot": [1, 498], "9": [1, 3, 4, 6, 247, 506, 515, 517, 525, 526], "higher": [1, 4, 181, 182, 252, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 495, 508, 509, 515, 518, 521], "between": [1, 3, 7, 68, 157, 164, 172, 192, 226, 237, 239, 240, 245, 247, 248, 269, 293, 364, 472, 476, 490, 495, 502, 505, 508, 518, 520, 521, 523, 524], "don": [1, 35, 157, 172, 451, 489, 524], "t": [1, 3, 7, 35, 88, 89, 91, 127, 156, 157, 172, 193, 194, 226, 238, 247, 248, 267, 451, 459, 489, 490, 492, 495, 497, 509, 515, 524, 525, 526], "need": [1, 4, 7, 35, 36, 38, 40, 41, 66, 68, 73, 74, 75, 76, 79, 80, 83, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 148, 149, 153, 156, 173, 181, 182, 187, 193, 194, 195, 196, 201, 209, 210, 213, 220, 221, 222, 226, 227, 232, 239, 240, 245, 254, 267, 269, 275, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 479, 489, 490, 492, 493, 495, 497, 505, 509, 512, 515, 517, 518, 519, 520, 523, 524, 525], "becaus": [1, 226, 236, 261, 515, 518, 523, 524], "modifi": [1, 77, 83, 91, 102, 213, 264, 440, 489, 490, 497, 501, 525], "8": [1, 3, 4, 6, 130, 225, 451, 501, 506, 512, 516, 526], "As": [1, 102, 236, 489, 492, 495, 498, 515, 524], "cannot": [1, 236, 449, 500, 522], "handl": [1, 5, 81, 83, 162, 232, 245, 246, 247, 266, 451, 476, 477, 492], "tensor": [1, 3, 36, 38, 40, 41, 42, 65, 66, 68, 91, 127, 139, 156, 162, 164, 192, 226, 228, 229, 257, 258, 261, 263, 265, 273, 275, 276, 293, 294, 306, 307, 353, 356, 364, 393, 493, 515, 518, 520, 522, 523, 524, 526], "iter": [1, 2, 4, 7, 36, 38, 40, 41, 42, 66, 68, 162, 181, 182, 187, 193, 194, 204, 209, 213, 214, 217, 222, 251, 263, 265, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 306, 307, 330, 454, 461, 492, 495, 515, 517, 522, 524, 525], "so": [1, 7, 139, 226, 263, 302, 498, 500, 505, 508, 518, 519, 522, 523, 524], "might": [1, 489, 491, 524], "meet": [1, 6, 267, 289, 502, 512, 516, 517, 518, 522, 524], "failur": [1, 472], "sometim": [1, 127, 156, 515, 518], "order": [1, 12, 168, 233, 234, 267, 286, 287, 293, 294, 393, 396, 405, 462, 508, 515, 517, 522, 524], "successfulli": [1, 497, 516], "suggest": [1, 253, 521], "two": [1, 2, 114, 127, 164, 187, 191, 213, 217, 218, 222, 236, 261, 265, 267, 312, 489, 490, 493, 495, 497, 501, 502, 508, 509, 513, 515, 518, 519, 521, 524, 525], "approach": [1, 2, 6, 66, 174, 232, 243, 244, 245, 250, 251, 328, 461, 468, 495, 498, 505, 516, 517, 524, 525], "preprocess": [1, 187, 211, 222, 224, 226, 227, 232, 492, 497, 523], "here": [1, 3, 4, 6, 35, 91, 139, 236, 243, 250, 489, 493, 497, 501, 508, 512, 515, 518, 520, 521, 524], "non": [1, 3, 139, 197, 262, 514, 515, 524], "traceabl": [1, 66], "class": [1, 2, 3, 59, 133, 252, 283, 387, 388, 490, 492, 493, 495, 498, 502, 508, 512, 513, 522, 524, 525], "name": [1, 3, 6, 36, 41, 42, 65, 66, 68, 74, 83, 84, 88, 89, 91, 127, 132, 133, 149, 156, 162, 164, 169, 171, 175, 187, 191, 192, 194, 195, 197, 198, 199, 211, 212, 213, 216, 217, 220, 221, 222, 224, 226, 228, 229, 235, 236, 239, 240, 245, 246, 248, 254, 257, 261, 263, 265, 267, 269, 273, 276, 303, 306, 312, 330, 334, 335, 337, 340, 341, 342, 343, 344, 346, 364, 373, 375, 393, 396, 398, 399, 405, 412, 413, 414, 415, 426, 439, 446, 449, 460, 462, 463, 484, 489, 490, 493, 497, 498, 501, 502, 507, 508, 510, 514, 520, 521, 522, 524, 525, 526], "select": [1, 2, 211, 244, 248, 250, 489, 505, 506, 518, 522, 524], "object": [1, 2, 3, 6, 12, 36, 38, 40, 41, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 121, 122, 125, 126, 127, 130, 133, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 164, 168, 169, 171, 173, 174, 175, 181, 182, 183, 184, 187, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 209, 211, 212, 213, 217, 220, 221, 222, 224, 225, 226, 227, 229, 231, 232, 233, 236, 239, 240, 241, 244, 245, 247, 250, 251, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 276, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 303, 305, 306, 307, 311, 312, 328, 342, 343, 346, 348, 389, 451, 454, 460, 470, 472, 473, 477, 489, 490, 492, 493, 500, 508, 509, 510, 513, 517, 518, 523, 524], "pass": [1, 3, 4, 7, 98, 102, 162, 173, 225, 264, 267, 312, 407, 459, 472, 473, 490, 492, 493, 495, 497, 503, 508, 512, 515, 517, 518, 519, 524, 525], "them": [1, 83, 127, 211, 492, 501, 503, 513, 515, 524], "dict": [1, 36, 38, 40, 41, 66, 68, 130, 132, 133, 139, 162, 164, 168, 174, 175, 181, 182, 191, 192, 197, 210, 213, 228, 229, 232, 235, 236, 237, 238, 240, 243, 245, 248, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 273, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 303, 305, 306, 311, 312, 313, 315, 318, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 369, 370, 373, 381, 390, 393, 400, 408, 409, 410, 412, 414, 415, 416, 417, 422, 426, 429, 430, 431, 432, 434, 436, 437, 439, 446, 447, 449, 451, 453, 454, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 476, 477, 479, 481, 483, 484, 486, 508, 517, 522, 524], "These": [1, 3, 505], "function": [1, 2, 4, 7, 38, 41, 68, 83, 127, 156, 181, 182, 200, 212, 231, 232, 243, 250, 251, 254, 264, 267, 275, 286, 287, 289, 290, 291, 293, 294, 295, 303, 306, 489, 490, 492, 495, 503, 505, 506, 508, 509, 515, 518, 521, 522, 524], "If": [1, 83, 88, 89, 91, 95, 102, 127, 181, 182, 213, 226, 236, 248, 261, 262, 263, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 489, 491, 493, 497, 502, 506, 507, 508, 509, 512, 513, 518, 521, 522, 523, 524], "conv2d": [1, 3, 38, 67, 81, 82, 86, 87, 92, 93, 157, 271, 272, 273, 275, 276, 501, 522], "won": 1, "detect": [1, 66, 164, 168, 236, 240, 273, 393, 396, 405, 460, 489], "maskrcnn": 1, "tool": [1, 6, 7, 162, 312, 492, 502, 507, 516, 518], "test": [1, 6, 42, 226, 245, 489, 491, 506, 526], "net": [1, 3], "py": [1, 2, 3, 7, 127, 162, 164, 234, 236, 237, 238, 263, 476, 489, 497, 506, 511, 518, 520, 522], "prepare_custom_config_dict": 1, "non_traceable_module_class": 1, "anchorgener": 1, "rpnpostprocessor": 1, "pooler": 1, "postprocessor": 1, "maskrcnnfpnfeatureextractor": 1, "maskpostprocessor": 1, "fpn": 1, "rpnhead": 1, "decor": [1, 2, 7, 36, 59, 88, 89, 91, 162, 169, 171, 187, 197, 222, 224, 226, 239, 240, 252, 257, 261, 263, 265, 269, 277, 283, 296, 312, 456, 524], "wrap": [1, 68, 133, 139, 192, 236, 324, 497], "untrac": 1, "part": [1, 42, 227, 232, 236, 261, 263, 492, 495, 502, 506, 509, 515], "like": [1, 2, 7, 36, 38, 41, 66, 68, 95, 118, 120, 127, 156, 162, 181, 182, 187, 201, 213, 217, 222, 231, 232, 240, 246, 263, 266, 267, 268, 271, 272, 273, 275, 276, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 489, 491, 495, 498, 502, 505, 511, 513, 515, 518, 524], "global": [1, 132, 261, 473, 517, 524], "want": [1, 7, 88, 89, 91, 127, 209, 211, 263, 302, 489, 490, 493, 497, 508, 512, 513, 521, 522, 524], "move": [1, 68, 517, 520], "out": [1, 6, 156, 211, 212, 213, 231, 232, 261, 266, 268, 275, 285, 491, 493, 517, 518], "keep": [1, 7, 261, 262, 520], "should": [1, 2, 3, 7, 38, 41, 42, 66, 67, 68, 75, 95, 132, 133, 157, 161, 181, 182, 187, 194, 195, 209, 211, 213, 217, 222, 225, 226, 229, 234, 239, 240, 263, 267, 269, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 373, 451, 489, 493, 497, 508, 512, 518, 523, 524, 525], "try": [1, 209, 393, 396, 405, 473, 518], "must": [1, 226, 236, 240, 502, 506, 523, 524], "ssd": [1, 526], "resnet34": [1, 526], "ptq": [1, 497, 505, 518, 522], "python": [1, 9, 96, 139, 162, 194, 213, 232, 236, 312, 412, 489, 491, 493, 497, 506, 516, 519, 523], "r34": 1, "def": [1, 2, 3, 4, 7, 88, 89, 91, 149, 181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 493, 495, 497, 508, 512, 515, 518, 522, 524], "bboxes_labels_scor": 1, "bbox": [1, 236, 508], "prob": 1, "criteria": [1, 231, 232, 254, 261, 263, 266, 268, 284, 285, 524], "0": [1, 3, 4, 6, 9, 36, 38, 42, 65, 66, 67, 74, 112, 156, 162, 170, 178, 189, 192, 193, 194, 201, 203, 206, 207, 208, 210, 211, 214, 215, 218, 223, 226, 228, 229, 231, 232, 240, 245, 247, 248, 252, 254, 261, 266, 268, 284, 285, 446, 454, 489, 490, 492, 493, 495, 497, 498, 501, 507, 508, 509, 512, 514, 515, 517, 518, 521, 522, 523, 524, 525], "45": [1, 247, 526], "max_output": 1, "200": [1, 225, 524, 526], "box": [1, 226, 236, 240, 489, 508, 522, 523, 524], "label": [1, 12, 36, 68, 181, 182, 189, 192, 194, 195, 211, 213, 214, 215, 216, 219, 223, 226, 233, 235, 239, 240, 245, 246, 269, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 381, 493, 508, 515, 523], "score": [1, 12, 233, 234, 236, 237, 238, 240, 261, 263, 508, 512, 515, 521, 524], "zip": 1, "split": [1, 156, 225, 226, 245, 523], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 168, 267, 288, 512, 513], "process": [2, 4, 7, 36, 38, 41, 66, 68, 133, 164, 181, 182, 187, 189, 191, 200, 211, 212, 213, 222, 223, 224, 226, 227, 228, 229, 232, 243, 244, 247, 250, 251, 254, 261, 263, 264, 265, 267, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 327, 408, 409, 412, 442, 446, 450, 453, 454, 461, 489, 490, 492, 493, 495, 496, 497, 502, 513, 515, 518, 522, 523, 524, 525], "autom": 2, "design": [2, 139, 194, 195, 200, 210, 232, 247, 266, 515, 518], "artifici": 2, "network": [2, 3, 6, 164, 245, 248, 263, 489, 495, 496, 516, 518], "ann": 2, "ha": [2, 7, 12, 36, 38, 41, 66, 68, 83, 84, 88, 89, 91, 95, 114, 127, 139, 156, 191, 232, 233, 247, 261, 263, 286, 287, 489, 492, 502, 505, 509, 517, 518, 519, 521], "been": [2, 12, 84, 225, 233, 247, 261, 263, 489, 495, 502, 509], "par": 2, "outperform": 2, "hand": [2, 236, 489], "simplest": [2, 495], "launcher": [2, 495, 515], "configur": [2, 3, 7, 35, 36, 38, 40, 41, 66, 67, 68, 127, 168, 173, 174, 178, 181, 182, 183, 184, 185, 187, 191, 213, 216, 227, 228, 229, 231, 232, 236, 242, 243, 244, 245, 247, 250, 251, 254, 262, 264, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 311, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 341, 351, 353, 356, 415, 417, 422, 426, 429, 442, 444, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 475, 477, 489, 490, 493, 496, 508, 512, 520, 523, 526], "agent": 2, "path": [2, 3, 7, 36, 38, 41, 66, 68, 156, 162, 173, 174, 211, 212, 213, 226, 227, 228, 229, 231, 232, 242, 243, 244, 245, 248, 250, 251, 254, 262, 264, 266, 267, 268, 273, 276, 284, 285, 302, 312, 313, 318, 330, 333, 340, 341, 344, 350, 351, 356, 358, 359, 373, 379, 390, 393, 396, 398, 399, 401, 403, 404, 405, 406, 410, 417, 422, 426, 429, 430, 436, 446, 454, 458, 460, 461, 470, 485, 489, 490, 492, 493, 495, 497, 502, 503, 508, 510, 511, 515, 523, 524, 525], "syntax": [2, 501], "note": [2, 3, 6, 36, 38, 41, 66, 68, 75, 236, 264, 288, 289, 346, 356, 360, 489, 490, 497, 498, 501, 502, 515, 518, 522, 524, 525, 526], "dyna": [2, 232, 245, 246, 247, 248, 249, 250, 268, 505, 517], "section": [2, 489, 495, 515, 517, 525], "option": [2, 36, 38, 41, 66, 68, 127, 156, 178, 181, 182, 192, 201, 211, 226, 228, 229, 232, 236, 242, 247, 248, 261, 267, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 312, 318, 329, 330, 331, 333, 340, 341, 344, 346, 348, 349, 351, 356, 361, 364, 393, 400, 403, 404, 405, 410, 419, 423, 429, 430, 432, 437, 446, 447, 451, 454, 458, 460, 461, 463, 466, 468, 470, 479, 485, 490, 492, 493, 498, 501, 502, 509, 523, 524, 525], "requir": [2, 3, 4, 7, 130, 139, 200, 232, 236, 248, 267, 273, 289, 314, 316, 324, 327, 380, 386, 393, 396, 398, 405, 411, 418, 419, 420, 421, 423, 424, 425, 427, 428, 433, 438, 442, 489, 490, 492, 496, 497, 501, 502, 506, 509, 510, 514, 518, 520, 522, 524, 525], "search_algorithm": [2, 174, 232, 250, 251, 268], "nsga2": [2, 247], "seed": [2, 162, 245, 247, 253, 470, 492, 498, 524, 525], "42": [2, 253, 514, 526], "supernet": [2, 247, 248], "ofa_mbv3_d234_e346_k357_w1": 2, "metric": [2, 6, 7, 10, 12, 36, 38, 41, 66, 68, 181, 182, 191, 194, 227, 231, 232, 242, 243, 244, 246, 248, 250, 251, 252, 253, 254, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 324, 328, 333, 338, 351, 354, 356, 361, 385, 442, 450, 453, 457, 460, 461, 463, 479, 489, 490, 492, 497, 502, 509, 521, 522, 524, 525, 526], "acc": [2, 3, 38, 41, 240, 248, 277, 522, 526], "mac": [2, 244, 246, 248, 250], "popul": [2, 247], "50": [2, 236, 238, 247, 502, 526], "num_ev": [2, 247], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 245, 248, 460, 489], "batch_siz": [2, 3, 193, 194, 201, 203, 206, 207, 208, 209, 210, 211, 212, 228, 229, 248, 318, 330, 341, 439, 461, 490, 492, 493, 497, 502, 503, 518], "64": [2, 3, 226, 523, 526], "dataset_path": [2, 248, 461], "dataset": [2, 4, 6, 7, 14, 36, 38, 41, 66, 68, 181, 182, 187, 193, 194, 201, 203, 204, 206, 207, 208, 209, 210, 222, 231, 232, 236, 237, 238, 240, 242, 248, 266, 267, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 330, 338, 341, 344, 351, 356, 360, 361, 362, 373, 385, 458, 460, 461, 462, 490, 492, 497, 498, 502, 508, 518, 524, 525, 526], "imagenet": [2, 4, 185, 189, 213, 216, 223, 248, 522, 523, 525, 526], "ilsvrc2012": [2, 248], "also": [2, 3, 6, 7, 12, 187, 210, 213, 217, 222, 226, 233, 285, 489, 490, 491, 492, 495, 502, 505, 508, 512, 513, 515, 518, 519, 524], "nasconfig": [2, 174, 232, 244, 250, 251], "argument": [2, 264, 267, 314, 419, 423, 428, 434, 446, 454, 473, 490, 495, 502], "config": [2, 38, 40, 41, 66, 67, 68, 130, 132, 133, 139, 173, 181, 182, 191, 200, 211, 231, 232, 245, 251, 254, 261, 262, 263, 264, 265, 268, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 305, 311, 312, 313, 314, 317, 318, 319, 321, 323, 326, 350, 356, 358, 359, 363, 364, 408, 410, 417, 419, 422, 423, 426, 428, 429, 436, 439, 442, 450, 460, 463, 464, 465, 466, 470, 471, 473, 481, 483, 486, 489, 493, 495, 497, 502, 505, 510, 515, 517, 519, 522, 524], "under": [2, 3, 127, 139, 213, 311, 489, 493, 502, 507, 508, 513, 515, 518, 522, 524], "file": [2, 7, 66, 156, 162, 173, 174, 181, 182, 199, 211, 212, 213, 216, 225, 226, 227, 229, 231, 232, 236, 242, 243, 244, 245, 246, 248, 250, 251, 254, 262, 264, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 317, 318, 319, 320, 321, 322, 323, 373, 410, 419, 423, 430, 446, 453, 454, 459, 460, 461, 473, 477, 481, 483, 485, 486, 489, 493, 497, 500, 502, 503, 507, 508, 510, 512, 515, 517, 522, 523, 524], "input": [2, 7, 36, 40, 42, 65, 66, 68, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 108, 111, 112, 121, 122, 124, 125, 126, 127, 132, 133, 139, 156, 162, 164, 168, 181, 182, 192, 194, 195, 200, 211, 212, 213, 215, 223, 225, 226, 227, 228, 229, 231, 232, 236, 241, 248, 254, 267, 273, 275, 276, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 314, 324, 346, 350, 351, 353, 356, 357, 358, 359, 360, 393, 396, 403, 404, 405, 407, 419, 423, 428, 434, 458, 461, 467, 489, 492, 493, 495, 497, 501, 502, 503, 508, 509, 510, 515, 517, 518, 522, 523, 525], "aim": [2, 492, 524], "accord": [2, 7, 40, 68, 139, 181, 187, 211, 212, 213, 222, 224, 226, 232, 265, 266, 276, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 459, 493, 497, 515, 519, 523, 524], "pleas": [2, 4, 5, 6, 7, 127, 164, 211, 212, 213, 216, 261, 263, 264, 489, 493, 496, 497, 506, 508, 509, 512, 515, 519, 520, 521], "regist": [2, 7, 36, 59, 169, 171, 187, 192, 197, 200, 213, 217, 220, 221, 222, 224, 226, 227, 232, 239, 240, 252, 253, 254, 255, 256, 257, 261, 263, 265, 269, 277, 283, 288, 296, 490, 493, 497, 508, 512, 524], "__new__": 2, "self": [2, 3, 7, 84, 114, 232, 236, 254, 263, 288, 473, 489, 493, 505, 508, 512, 521, 522, 524], "conf_fname_or_obj": [2, 173, 191, 200, 227, 231, 232, 241, 242, 243, 244, 250, 251, 254, 266, 267, 268, 284, 285], "kwarg": [2, 65, 66, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 194, 195, 198, 213, 226, 231, 232, 242, 264, 266, 267, 271, 272, 273, 275, 276, 285, 302, 311, 312, 317, 319, 321, 322, 323, 332, 334, 335, 337, 339, 342, 343, 347], "current": [2, 3, 7, 38, 41, 67, 68, 83, 91, 95, 127, 132, 232, 242, 248, 261, 263, 264, 265, 288, 489, 497, 498, 501, 508, 512, 515, 518, 524], "built": [2, 7, 96, 139, 194, 195, 197, 202, 205, 207, 211, 212, 217, 219, 221, 222, 223, 224, 226, 267, 490, 497, 512, 523, 524, 525], "inherit": [2, 7, 38, 41, 66, 67, 68, 192, 200, 208, 226, 232, 263, 265, 492], "base": [2, 7, 12, 36, 38, 40, 41, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 130, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 169, 170, 171, 172, 173, 174, 175, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 236, 239, 240, 241, 243, 244, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 303, 306, 307, 312, 317, 318, 319, 321, 322, 323, 326, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 368, 369, 370, 372, 375, 377, 378, 381, 391, 393, 396, 398, 400, 401, 403, 404, 405, 406, 414, 417, 422, 426, 429, 439, 443, 445, 447, 449, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 476, 478, 482, 483, 493, 496, 497, 498, 501, 514, 521, 522, 524, 526], "nasbas": [2, 243, 244, 250, 251], "interfac": [2, 6, 38, 41, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 108, 110, 111, 112, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 183, 184, 187, 231, 232, 247, 248, 254, 266, 267, 268, 277, 284, 285, 305, 306, 307, 313, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 426, 429, 436, 448, 505, 518, 520], "own": [2, 38, 41, 66, 67, 68, 95, 209, 226, 489, 492, 493, 505, 508, 512, 521, 524], "just": [2, 3, 4, 35, 193, 194, 195, 196, 198, 201, 226, 502, 513, 518, 523, 524], "nas_registri": [2, 252], "well": [2, 3, 35, 181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 493, 518, 520, 525], "wai": [2, 212, 213, 216, 489, 492, 493, 508, 513, 515, 518, 524, 525], "__init__": [2, 3, 7, 493, 508, 512, 524], "search_spac": [2, 174, 243, 250, 251, 252, 253], "none": [2, 3, 7, 12, 36, 38, 40, 41, 42, 65, 66, 68, 84, 111, 127, 133, 139, 156, 162, 164, 168, 173, 174, 175, 178, 181, 182, 185, 191, 192, 193, 194, 200, 201, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223, 226, 227, 228, 229, 231, 232, 233, 236, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 254, 258, 262, 266, 267, 268, 269, 273, 276, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 305, 306, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 329, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 345, 347, 350, 351, 352, 355, 356, 359, 361, 362, 363, 378, 393, 396, 398, 405, 410, 412, 417, 419, 422, 423, 426, 428, 429, 430, 431, 435, 436, 439, 441, 444, 446, 447, 449, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 472, 473, 477, 485, 493, 508, 518, 522, 523, 524], "model_build": [2, 243, 250, 251], "initi": [2, 3, 65, 133, 162, 181, 182, 192, 200, 208, 211, 227, 232, 243, 244, 250, 251, 262, 263, 267, 275, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 329, 351, 352, 361, 410, 439, 441, 449, 461, 492, 493, 502, 508, 509, 515, 524], "select_model_arch": [2, 244, 250, 251], "propos": [2, 7, 251, 495, 509, 515, 524], "algorithm": [2, 6, 7, 12, 40, 174, 225, 233, 240, 243, 247, 250, 251, 253, 293, 294, 306, 307, 495, 501, 505, 515, 518, 522, 524, 525], "next": [2, 181, 204, 230, 251, 265, 286, 287, 288, 290, 291, 293, 294, 295, 296, 489, 509, 517, 524], "res_save_path": [2, 251], "estim": [2, 3, 4, 164, 240, 243, 244, 248, 250, 251, 273, 524], "pragma": 2, "cover": [2, 491, 503, 516], "perform": [2, 4, 6, 7, 83, 118, 173, 191, 211, 225, 231, 232, 243, 244, 246, 248, 250, 251, 254, 266, 268, 277, 284, 285, 289, 317, 331, 341, 350, 356, 358, 444, 453, 461, 463, 470, 479, 489, 490, 492, 494, 496, 502, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526], "depend": [2, 36, 40, 68, 83, 181, 182, 191, 232, 243, 250, 251, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 491, 500, 501, 502, 517, 524], "load_search_result": [2, 251], "load": [2, 3, 36, 211, 213, 225, 226, 236, 246, 251, 273, 285, 311, 312, 434, 460, 461, 492, 517, 518], "exist": [2, 31, 74, 156, 175, 191, 192, 236, 251, 273, 275, 331, 350, 356, 358, 359, 396, 444, 459, 460, 502, 508, 515, 524], "dump_search_result": [2, 251], "find_best_model_arch": [2, 251], "find": [2, 6, 7, 65, 88, 89, 91, 162, 240, 251, 252, 275, 288, 312, 410, 476, 489, 515, 521, 522, 524], "pareto": [2, 251, 252], "front": [2, 251, 252], "setter": [2, 193, 194], "A": [2, 3, 6, 41, 66, 68, 75, 77, 91, 95, 96, 127, 130, 132, 133, 139, 156, 162, 168, 187, 193, 194, 195, 196, 213, 217, 222, 225, 226, 227, 232, 233, 236, 237, 238, 240, 243, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 288, 492, 499, 501, 508, 510, 515, 516, 523, 524, 525], "callabl": [2, 178, 238, 268, 302, 460, 476, 477], "our": [2, 3, 6, 157], "leverag": [2, 96, 495, 502, 513, 518], "grid": [2, 253], "random": [2, 76, 156, 162, 189, 226, 245, 253, 288, 470, 498, 517, 523, 525], "bayesian": [2, 253, 507, 517], "optim": [2, 3, 4, 6, 10, 41, 66, 74, 78, 81, 82, 84, 95, 96, 106, 107, 113, 114, 115, 116, 133, 156, 178, 194, 200, 227, 231, 232, 246, 253, 263, 264, 266, 268, 285, 302, 303, 306, 313, 315, 319, 321, 338, 342, 343, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 367, 368, 371, 372, 385, 436, 442, 443, 453, 458, 461, 464, 468, 475, 480, 495, 497, 501, 505, 506, 507, 510, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525], "given": [2, 35, 40, 41, 42, 68, 88, 89, 91, 132, 133, 162, 225, 226, 236, 275, 285, 373, 379, 393, 396, 398, 399, 401, 403, 404, 406, 447, 460, 473, 492, 515, 523], "train": [2, 3, 6, 7, 36, 38, 41, 66, 68, 83, 139, 181, 182, 200, 211, 213, 226, 227, 232, 242, 243, 245, 246, 250, 254, 263, 264, 266, 267, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 468, 488, 493, 495, 496, 502, 505, 509, 511, 513, 515, 516, 524, 525, 526], "evalu": [2, 3, 4, 7, 12, 36, 38, 41, 66, 68, 173, 181, 182, 191, 211, 227, 231, 232, 233, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 250, 251, 254, 263, 264, 267, 268, 269, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 305, 317, 319, 321, 323, 324, 442, 450, 461, 465, 492, 493, 495, 502, 503, 505, 508, 509, 511, 512, 515, 518, 521, 522, 524, 525], "potenti": 2, "after": [2, 3, 4, 40, 42, 66, 168, 189, 193, 194, 200, 211, 226, 227, 228, 229, 232, 245, 261, 263, 264, 265, 293, 447, 489, 490, 492, 493, 495, 505, 508, 511, 512, 513, 515, 518, 519, 521, 522, 523, 524], "sever": [2, 3, 156, 226, 265, 489, 495, 505, 509, 515, 517, 523, 525], "procedur": [2, 174, 524], "lie": [2, 251], "through": [2, 3, 164, 181, 182, 225, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 501, 503, 505, 506, 508, 512, 513, 517, 521], "basic_na": [2, 232, 250, 268], "basicna": [2, 243, 250], "compon": [2, 6, 9, 227, 232, 243, 250, 254, 266, 267, 268, 302, 442, 476, 479, 491, 492, 497, 507, 513, 514, 524], "super": [2, 3, 4, 238, 245, 248, 512], "predictor": [2, 244, 245, 246, 248, 250], "predict": [2, 3, 12, 162, 194, 195, 226, 233, 237, 238, 239, 240, 246, 248, 269, 495, 508, 522, 523], "4x": [2, 3, 518], "more": [2, 3, 4, 5, 6, 83, 156, 162, 181, 226, 236, 261, 286, 289, 296, 489, 493, 495, 497, 502, 505, 506, 508, 509, 512, 513, 515, 519, 524, 526], "sampl": [2, 6, 98, 124, 187, 201, 204, 209, 211, 212, 213, 217, 222, 226, 239, 240, 252, 269, 288, 341, 396, 461, 492, 493, 505, 518, 523, 524, 525, 526], "effici": [2, 492, 495, 513, 516], "than": [2, 3, 4, 75, 83, 173, 211, 226, 236, 493, 503, 508, 512, 513, 515, 518, 521, 523], "typic": [2, 83, 132, 139, 232, 242, 267, 496, 515], "one": [2, 6, 7, 12, 68, 127, 132, 149, 183, 184, 187, 200, 226, 232, 233, 236, 239, 240, 242, 245, 261, 264, 265, 269, 302, 455, 489, 492, 495, 496, 497, 501, 502, 505, 506, 508, 509, 512, 513, 515, 517, 518, 520, 523, 524], "shot": [2, 6, 200, 232, 263, 265, 505, 515, 516, 524], "figur": [2, 515], "first": [2, 3, 4, 7, 42, 68, 114, 157, 172, 175, 211, 225, 227, 232, 236, 289, 373, 489, 493, 502, 506, 509, 517, 518, 519, 521, 522, 524, 525], "phase": [2, 169, 171, 267, 515, 518, 519, 524], "small": [2, 4, 236, 489, 524], "sub": [2, 66, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 191, 229, 232, 248, 490], "randomli": [2, 226, 253, 288, 523, 524], "valid": [2, 7, 36, 38, 66, 67, 68, 75, 127, 156, 213, 236, 248, 262, 263, 273, 412, 477, 493, 495, 501, 505, 507, 515, 518, 520], "measur": [2, 7, 36, 38, 41, 66, 68, 162, 191, 247, 248, 277, 479, 490, 495, 502, 508, 511, 522, 524], "provid": [2, 7, 127, 139, 181, 182, 187, 200, 222, 224, 226, 231, 232, 236, 245, 254, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 373, 393, 399, 446, 455, 479, 488, 489, 490, 491, 492, 496, 497, 498, 499, 505, 506, 509, 510, 517, 518, 522, 525, 526], "inner": 2, "loop": [2, 4, 277, 302, 501, 521, 524], "multi": [2, 95, 191, 232, 236, 247, 324, 492, 493, 505, 512, 515, 524], "evolutionari": 2, "extens": [2, 7, 66, 267, 399, 460, 501, 505, 509, 510, 516, 524, 525], "cycl": [2, 492], "continu": [2, 236, 261, 289, 515], "until": [2, 502, 524], "conclud": 2, "count": [2, 3, 40, 251, 493, 524], "met": [2, 182, 289, 296, 501, 509, 518, 522, 524], "create_acc_predictor": [2, 244, 250], "accuraci": [2, 3, 4, 6, 66, 173, 181, 182, 191, 227, 231, 232, 240, 244, 245, 246, 248, 250, 254, 266, 268, 277, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 317, 331, 341, 350, 356, 358, 429, 453, 458, 461, 463, 479, 489, 490, 492, 496, 497, 498, 502, 508, 509, 511, 512, 513, 515, 516, 517, 520, 521, 522, 524, 525, 526], "create_macs_predictor": [2, 244, 250], "create_latency_predictor": [2, 244, 250], "latenc": [2, 244, 245, 246, 248, 250, 458, 502, 521, 524], "mobilenetv3": [2, 247, 248], "static": [3, 4, 7, 66, 127, 156, 230, 245, 267, 285, 324, 328, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 393, 396, 398, 399, 401, 403, 404, 405, 406, 416, 430, 432, 437, 439, 444, 446, 451, 453, 458, 459, 461, 473, 477, 484, 485, 505, 524, 526], "quantiz": [3, 7, 21, 36, 38, 40, 41, 42, 65, 66, 67, 68, 110, 114, 116, 118, 124, 130, 132, 133, 136, 138, 139, 149, 164, 168, 173, 181, 182, 193, 194, 200, 223, 228, 229, 230, 231, 232, 242, 267, 268, 275, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 306, 307, 311, 312, 323, 328, 356, 358, 364, 442, 450, 461, 465, 489, 490, 492, 493, 497, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 516, 520, 522, 523, 524, 525], "involv": 3, "weight": [3, 4, 6, 7, 36, 65, 66, 68, 81, 82, 83, 139, 156, 157, 164, 172, 228, 229, 239, 240, 258, 261, 263, 265, 269, 273, 276, 369, 470, 488, 489, 496, 501, 503, 508, 512, 515, 517, 518, 522, 524, 525, 526], "float": [3, 4, 12, 36, 38, 41, 65, 66, 68, 127, 156, 164, 189, 211, 223, 233, 234, 236, 237, 238, 245, 247, 248, 261, 263, 264, 265, 273, 276, 288, 315, 331, 340, 348, 349, 364, 370, 425, 430, 446, 447, 451, 453, 458, 460, 461, 468, 470, 471, 479, 488, 493, 498, 508, 517, 518, 523], "int": [3, 36, 38, 40, 41, 66, 68, 127, 156, 162, 189, 201, 210, 211, 212, 223, 226, 228, 229, 234, 236, 240, 245, 247, 248, 252, 277, 318, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 407, 439, 446, 447, 449, 451, 452, 453, 454, 455, 460, 461, 463, 468, 470, 473, 485, 493, 508, 515, 517, 523], "feed": [3, 36, 66, 162, 210, 328, 495], "batch": [3, 4, 36, 38, 40, 68, 83, 132, 193, 194, 200, 201, 203, 204, 209, 210, 232, 248, 254, 268, 284, 302, 330, 341, 458, 489, 492, 495, 502, 515, 523, 524, 526], "data": [3, 6, 7, 10, 36, 38, 40, 41, 42, 65, 66, 68, 76, 124, 127, 156, 162, 164, 168, 173, 181, 182, 191, 192, 193, 194, 228, 229, 230, 232, 248, 261, 267, 268, 275, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 313, 315, 318, 324, 325, 326, 328, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 373, 389, 390, 393, 396, 400, 405, 408, 409, 410, 412, 415, 417, 422, 426, 429, 431, 436, 439, 446, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 476, 481, 483, 484, 486, 489, 492, 493, 497, 498, 501, 502, 506, 508, 509, 518, 519, 521, 522, 523, 524], "comput": [3, 4, 12, 65, 68, 83, 139, 164, 200, 227, 232, 233, 234, 236, 237, 238, 240, 246, 496, 508, 509, 515, 518, 524], "distribut": [3, 6, 40, 157, 172, 193, 194, 201, 203, 204, 206, 207, 208, 209, 210, 227, 232, 254, 449, 495, 506, 518, 520, 524, 526], "activ": [3, 4, 6, 7, 36, 38, 41, 42, 66, 68, 145, 164, 199, 228, 229, 293, 294, 369, 488, 489, 496, 498, 501, 514, 517, 518, 522, 524, 525], "done": [3, 4, 495, 511, 515, 518], "observ": [3, 498, 521, 522, 524], "point": [3, 4, 42, 65, 223, 237, 238, 252, 277, 288, 488, 498, 508, 518, 523, 524], "how": [3, 5, 7, 226, 227, 232, 247, 248, 261, 489, 490, 491, 493, 495, 497, 503, 515, 518, 523, 524, 525], "infer": [3, 4, 6, 7, 40, 42, 149, 156, 231, 232, 266, 268, 273, 285, 488, 492, 495, 502, 509, 512, 515, 516, 518, 522, 524], "time": [3, 4, 162, 226, 240, 277, 288, 312, 447, 453, 454, 458, 473, 497, 500, 512, 515, 516, 518, 521, 522, 523, 524], "simpl": [3, 6, 226, 489, 506, 521, 524], "techniqu": [3, 4, 6, 232, 505, 513, 515, 517, 518, 525], "would": [3, 127, 491, 502, 509, 518], "simpli": [3, 263, 497, 510], "divid": [3, 524], "rang": [3, 4, 7, 214, 215, 226, 236, 245, 302, 493, 495, 497, 498, 515, 518, 523], "256": [3, 189, 218, 490, 492, 493, 497, 523, 524, 526], "sophist": 3, "addit": [3, 83, 91, 168, 181, 302, 446, 489, 495, 502, 520], "step": [3, 4, 36, 38, 68, 114, 200, 232, 261, 263, 264, 265, 277, 302, 489, 491, 495, 496, 497, 509, 515, 517, 519, 521, 522, 524], "allow": [3, 4, 197, 288, 477, 489, 490, 495, 497, 498, 502, 508, 509, 517, 524, 525], "u": [3, 91, 157, 172], "instead": [3, 174, 175, 210, 312], "back": [3, 36, 38, 41, 66, 68, 139, 226, 245], "everi": [3, 7, 38, 67, 88, 89, 91, 261, 263, 264, 515, 524], "signific": [3, 6, 516, 518], "speed": [3, 6, 502, 516, 518], "up": [3, 6, 40, 91, 122, 226, 232, 248, 254, 262, 277, 350, 489, 497, 501, 502, 505, 516, 517, 518, 521, 523, 525], "pre": [3, 133, 181, 182, 211, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 493, 495, 502, 509, 515, 516, 518, 522, 524, 526], "notabl": 3, "modif": [3, 7, 430, 492, 501], "enabl": [3, 6, 66, 68, 263, 449, 489, 497, 502, 509, 514, 515, 516, 519], "floatfunct": 3, "quantstub": 3, "dequantstub": 3, "begin": [3, 133, 200, 232, 254, 263, 264, 268, 284, 495, 515, 524], "end": [3, 4, 7, 127, 162, 200, 211, 225, 226, 232, 245, 263, 264, 268, 277, 284, 495, 501, 502, 506, 512, 515, 522, 523, 524], "relu6": [3, 95, 501], "relu": [3, 36, 95, 152, 501, 522], "_make_divis": 3, "v": [3, 91, 502, 525], "divisor": 3, "min_valu": 3, "taken": [3, 181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "origin": [3, 65, 66, 168, 191, 211, 226, 232, 245, 261, 262, 263, 264, 315, 493, 502, 515, 518, 523, 525], "tf": [3, 6, 68, 133, 139, 162, 210, 211, 212, 213, 226, 273, 315, 489, 497, 510, 516, 519, 523], "repo": [3, 211, 493, 499], "It": [3, 6, 7, 66, 74, 83, 181, 182, 199, 232, 238, 240, 245, 246, 252, 261, 266, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 489, 490, 495, 502, 515, 518, 521, 524, 525], "ensur": [3, 40, 42, 226, 264, 288, 329, 361, 393, 396, 398, 405, 444, 489, 497, 498, 518, 523], "layer": [3, 7, 36, 38, 41, 66, 67, 68, 91, 132, 133, 139, 192, 199, 261, 262, 264, 303, 305, 306, 312, 472, 492, 496, 505, 515, 520, 524], "channel": [3, 7, 157, 172, 189, 226, 248, 261, 393, 396, 405, 505, 506, 515, 523, 526], "number": [3, 4, 66, 88, 89, 201, 209, 212, 223, 226, 237, 238, 240, 247, 251, 261, 288, 306, 307, 396, 449, 458, 461, 489, 493, 497, 498, 508, 515, 518, 521, 523, 524], "divis": 3, "seen": [3, 7, 312], "github": [3, 6, 164, 211, 233, 234, 237, 238, 261, 264, 408, 410, 448, 489, 491, 493, 499, 506, 507, 520], "tensorflow": [3, 6, 7, 74, 96, 98, 102, 127, 139, 162, 187, 192, 197, 210, 211, 212, 213, 216, 217, 218, 220, 221, 222, 224, 226, 229, 230, 231, 232, 234, 236, 239, 240, 241, 242, 266, 268, 269, 273, 285, 371, 372, 384, 385, 392, 438, 439, 440, 442, 489, 495, 497, 499, 501, 502, 505, 506, 507, 509, 510, 511, 515, 516, 517, 518, 521, 524, 525], "blob": [3, 164, 233, 234, 237, 238, 261], "master": [3, 233, 234, 237, 238, 261, 264], "research": [3, 507], "slim": [3, 236, 273, 510], "mobilenet": [3, 521, 526], "param": [3, 7, 42, 65, 66, 67, 68, 82, 88, 89, 91, 111, 112, 127, 156, 162, 164, 168, 191, 197, 201, 236, 239, 240, 269, 312, 332, 363, 460, 463, 510, 524], "new_v": 3, "max": [3, 41, 42, 65, 68, 157, 172, 226, 237, 238, 288, 470, 488, 489, 518, 523, 524], "2": [3, 4, 6, 7, 9, 65, 67, 68, 74, 95, 170, 191, 212, 236, 238, 240, 248, 257, 258, 263, 286, 287, 488, 493, 495, 497, 501, 502, 505, 507, 508, 509, 512, 513, 514, 515, 518, 520, 523, 524], "round": [3, 4, 157, 172, 488, 498, 518], "down": [3, 83], "doe": [3, 4, 12, 233, 236, 245, 493, 498, 508, 520, 523, 524], "go": [3, 289, 501, 517, 523], "10": [3, 6, 213, 236, 288, 439, 489, 493, 506, 517, 523], "convbnrelu": 3, "sequenti": [3, 68, 209, 267, 513, 524], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "3": [3, 4, 6, 42, 67, 68, 91, 132, 162, 187, 213, 217, 222, 224, 226, 236, 248, 451, 493, 495, 497, 501, 502, 508, 509, 512, 515, 517, 518, 523, 524, 526], "stride": [3, 226, 523], "group": [3, 381, 505, 515, 522, 523, 524, 526], "pad": [3, 92, 93, 211, 226, 493, 523], "bia": [3, 68, 156, 157, 228, 229, 522], "fals": [3, 4, 7, 36, 38, 40, 41, 42, 66, 68, 84, 92, 93, 111, 114, 121, 127, 130, 141, 148, 153, 157, 160, 161, 162, 182, 189, 191, 192, 193, 194, 199, 201, 203, 206, 207, 208, 210, 211, 213, 226, 236, 239, 240, 245, 246, 247, 248, 261, 269, 275, 289, 296, 305, 381, 400, 446, 449, 454, 455, 460, 479, 485, 492, 493, 501, 508, 512, 517, 518, 522, 523, 524, 525], "batchnorm2d": 3, "momentum": [3, 263, 505, 515, 525], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 512], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 83], "dw": 3, "linear": [3, 65, 228, 229, 261, 495], "conv": [3, 36, 42, 114, 152, 517], "add": [3, 12, 42, 65, 73, 85, 127, 132, 136, 145, 162, 197, 211, 213, 233, 240, 262, 264, 267, 289, 324, 330, 331, 333, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 355, 356, 357, 358, 359, 360, 362, 378, 460, 485, 489, 491, 493, 497, 501, 502, 508, 511, 512, 521, 522, 524], "skip_add": 3, "forward": [3, 4, 40, 192, 517, 518, 522], "x": [3, 40, 210, 226, 248, 288, 495, 497, 510, 515, 518, 522, 523], "els": [3, 40, 83, 84, 162, 209, 289, 446, 460, 522], "num_class": [3, 240], "1000": [3, 247, 458, 502, 524, 525], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 6, 164, 291, 497, 524, 526], "main": [3, 6, 181, 197, 264, 286, 289, 296, 441, 477, 497, 518], "width": [3, 189, 226, 248, 261, 497, 518, 523, 525], "multipli": [3, 498], "adjust": [3, 4, 248, 518], "each": [3, 4, 7, 38, 41, 42, 66, 67, 68, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 132, 157, 161, 164, 189, 209, 213, 216, 223, 226, 234, 236, 237, 238, 247, 248, 263, 273, 276, 277, 293, 294, 306, 307, 489, 492, 493, 495, 498, 501, 512, 513, 515, 521, 522, 523, 524], "amount": 3, "structur": [3, 127, 263, 389, 505, 515, 518, 522, 526], "multipl": [3, 83, 132, 197, 202, 203, 205, 211, 212, 214, 215, 216, 217, 218, 222, 224, 226, 241, 263, 286, 287, 446, 493, 513, 521, 524], "turn": [3, 508], "off": [3, 88, 89, 91, 519], "block": [3, 245, 261, 264, 477, 505, 512, 515], "input_channel": 3, "32": [3, 164, 236, 497, 503, 515, 526], "last_channel": 3, "1280": 3, "c": [3, 91, 95, 213, 489, 493, 500, 506], "n": [3, 91, 212, 226, 234, 261, 449, 493, 495, 515, 523], "16": [3, 31, 502, 515, 526], "6": [3, 6, 38, 489, 501, 518, 526], "24": [3, 31, 524, 526], "96": [3, 236, 526], "160": 3, "320": 3, "onli": [3, 7, 38, 41, 42, 66, 68, 74, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 132, 157, 172, 191, 193, 194, 197, 211, 232, 242, 261, 263, 460, 470, 472, 473, 490, 492, 497, 501, 502, 506, 509, 517, 522, 524, 525], "check": [3, 4, 6, 40, 66, 83, 84, 127, 132, 139, 162, 168, 182, 213, 232, 242, 262, 267, 289, 296, 312, 351, 356, 393, 396, 398, 399, 401, 403, 404, 406, 412, 415, 430, 446, 447, 449, 454, 460, 462, 489, 491, 497, 502, 506], "element": [3, 42, 209, 236, 261, 264, 493, 505, 508, 515], "assum": [3, 7, 225, 236, 252, 501], "know": [3, 127, 193, 194, 227, 232, 254, 447, 497, 520], "len": [3, 164, 226, 288, 493, 497, 515, 523], "rais": [3, 12, 83, 88, 89, 91, 102, 127, 192, 233, 236, 239, 240, 261, 262, 263, 269, 288, 460, 473, 515], "valueerror": [3, 12, 83, 88, 89, 91, 102, 127, 233, 236, 240, 500], "empti": [3, 132, 236], "list": [3, 6, 7, 12, 36, 38, 40, 41, 42, 65, 66, 68, 74, 77, 127, 132, 139, 156, 162, 168, 181, 182, 189, 191, 192, 204, 211, 225, 226, 228, 229, 232, 233, 234, 236, 237, 238, 240, 245, 247, 248, 252, 254, 261, 264, 273, 276, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 306, 307, 324, 326, 328, 330, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 373, 376, 378, 379, 381, 393, 396, 399, 400, 403, 404, 405, 407, 412, 415, 417, 419, 422, 423, 426, 429, 439, 446, 451, 453, 454, 455, 458, 460, 461, 462, 463, 464, 466, 467, 468, 470, 472, 479, 488, 501, 512, 517, 519, 522, 524], "got": [3, 162, 286, 287, 500, 502, 522], "format": [3, 36, 38, 41, 42, 65, 66, 68, 74, 162, 187, 211, 212, 213, 217, 222, 228, 229, 232, 236, 242, 245, 251, 415, 451, 493, 495, 497, 508, 509, 510, 511, 518], "build": [3, 6, 7, 40, 132, 139, 149, 229, 230, 243, 245, 250, 251, 273, 276, 330, 331, 333, 344, 345, 349, 373, 430, 439, 460, 477, 489, 506, 510, 516, 524], "featur": [3, 127, 178, 192, 211, 212, 223, 226, 268, 490, 491, 492, 494, 495, 502, 509, 510, 516, 520, 523], "invert": 3, "residu": 3, "output_channel": 3, "last": [3, 66, 68, 114, 168, 181, 201, 261, 286, 287, 288, 290, 291, 293, 294, 295, 296, 430, 489, 509, 518, 524], "classifi": [3, 211, 240, 289, 493, 495], "dropout": 3, "m": [3, 65, 91, 261, 495, 502, 526], "isinst": 3, "init": [3, 192, 493, 508, 512], "kaiming_normal_": 3, "mode": [3, 7, 35, 36, 38, 41, 65, 66, 68, 127, 191, 220, 232, 236, 273, 312, 330, 453, 489, 490, 502, 505, 518, 519], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 498, 517, 521, 524, 525, 526], "mean": [3, 4, 83, 91, 189, 201, 226, 236, 238, 240, 246, 248, 261, 277, 490, 492, 497, 498, 501, 508, 515, 518, 523, 524, 525], "fuse": [3, 4, 36, 40, 66, 68, 85, 86, 90, 91, 92, 93, 113, 114, 115, 116, 118, 152, 164, 168, 522], "bn": [3, 36, 83, 102, 526], "prior": [3, 40, 110, 524], "chang": [3, 102, 118, 157, 172, 263, 265, 312, 326, 331, 430, 452, 458, 491, 492, 497, 500, 508, 522, 523, 524], "numer": [3, 4, 240, 488, 509, 516], "fuse_model": [3, 4], "type": [3, 7, 12, 36, 38, 40, 41, 42, 65, 66, 67, 68, 78, 81, 82, 83, 84, 91, 95, 106, 107, 113, 114, 115, 118, 127, 130, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 162, 164, 168, 169, 171, 175, 182, 187, 192, 197, 201, 209, 211, 213, 217, 220, 221, 222, 224, 226, 228, 229, 230, 232, 233, 234, 236, 239, 240, 242, 245, 247, 252, 255, 256, 257, 261, 263, 265, 267, 269, 271, 272, 273, 275, 276, 277, 283, 288, 289, 296, 302, 305, 311, 324, 342, 343, 351, 352, 354, 356, 394, 446, 449, 451, 453, 456, 489, 493, 501, 505, 509, 515, 518, 523, 525], "fuse_modul": 3, "true": [3, 4, 40, 66, 68, 83, 84, 106, 127, 130, 132, 160, 162, 164, 182, 191, 201, 209, 211, 213, 214, 225, 226, 228, 229, 234, 236, 240, 245, 257, 261, 289, 296, 410, 446, 449, 454, 455, 460, 493, 497, 501, 508, 512, 517, 518, 519, 522, 523, 524, 525], "idx": [3, 252, 493], "str": [3, 12, 36, 40, 41, 66, 127, 156, 164, 169, 171, 187, 192, 197, 201, 211, 212, 213, 217, 220, 221, 222, 223, 224, 226, 228, 229, 230, 233, 234, 236, 238, 239, 240, 245, 247, 248, 252, 257, 269, 271, 272, 276, 302, 305, 313, 314, 315, 318, 324, 325, 326, 328, 329, 330, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 353, 355, 356, 361, 362, 363, 364, 369, 370, 373, 375, 376, 377, 378, 379, 381, 390, 391, 393, 394, 396, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 410, 412, 414, 415, 417, 419, 422, 423, 426, 428, 429, 430, 431, 434, 435, 436, 439, 446, 448, 449, 451, 453, 454, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 476, 477, 484, 485, 493, 508, 517, 522, 523], "help": [3, 6, 77, 199, 242, 275, 328, 460, 492, 510, 524], "averagemet": 3, "store": [3, 42, 213, 236, 255, 256, 257, 261, 263, 503], "averag": [3, 164, 236, 237, 238, 240, 495, 508, 512, 515, 524], "fmt": 3, "f": [3, 91, 495, 497, 518], "reset": [3, 12, 233, 239, 240, 269, 277, 473, 508], "val": [3, 68, 162, 185, 213, 262, 512], "avg": [3, 4, 518], "sum": [3, 240, 495], "updat": [3, 12, 31, 83, 95, 127, 132, 139, 229, 233, 239, 240, 248, 261, 263, 269, 276, 315, 330, 331, 332, 333, 341, 344, 346, 348, 350, 356, 358, 359, 360, 363, 430, 453, 461, 464, 466, 470, 489, 492, 508, 514, 515, 524], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 40, 65, 66, 111, 112, 127, 156, 192, 245, 262, 265, 377, 378, 492, 493, 495, 497, 509, 515, 522, 523, 525], "topk": [3, 490, 492, 497, 508], "over": [3, 4, 6, 187, 213, 217, 222, 236, 240, 505, 508, 517, 524], "k": [3, 240, 508, 515], "top": [3, 127, 226, 231, 232, 240, 254, 266, 268, 284, 285, 286, 287, 508, 523, 526], "specifi": [3, 38, 41, 42, 66, 67, 68, 127, 156, 181, 182, 191, 226, 231, 232, 236, 239, 240, 243, 246, 248, 250, 251, 254, 266, 267, 268, 269, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 312, 328, 330, 333, 340, 341, 342, 344, 345, 346, 350, 351, 353, 354, 356, 358, 359, 363, 364, 365, 378, 410, 414, 415, 416, 432, 437, 453, 460, 473, 477, 489, 496, 497, 498, 501, 508, 512, 517, 518, 523, 524, 525], "no_grad": 3, "maxk": 3, "pred": [3, 162, 239, 240, 269, 508], "eq": 3, "view": [3, 6, 489, 491, 499, 520], "expand_a": 3, "re": [3, 66, 68, 288, 502, 524], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 213, 236, 245, 492, 493, 497, 502, 503, 517, 518, 523, 524, 525, 526], "criterion": [3, 4, 10, 66, 164, 178, 194, 197, 227, 232, 268, 429, 468, 495, 502, 515, 518, 524, 525], "data_load": [3, 4, 7, 41, 68], "neval_batch": [3, 4], "top1": [3, 4, 248, 518], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 42, 189, 192, 215, 236, 240, 493, 501, 508, 514, 517, 523, 525, 526], "cnt": [3, 4, 495], "imag": [3, 4, 189, 212, 213, 216, 218, 223, 226, 236, 248, 458, 489, 493, 497, 502, 517, 522, 523, 526], "loss": [3, 4, 6, 66, 139, 178, 192, 200, 231, 232, 240, 254, 266, 268, 284, 285, 302, 495, 496, 497, 498, 508, 509, 515, 518, 524, 525], "acc1": 3, "acc5": 3, "print": [3, 4, 164, 240, 489, 495, 497, 508, 524], "load_model": 3, "model_fil": 3, "state_dict": [3, 164, 497, 522], "load_state_dict": 3, "cpu": [3, 4, 113, 114, 115, 116, 124, 127, 156, 248, 491, 505, 509, 514, 516, 517, 519, 522], "print_size_of_model": 3, "temp": 3, "p": [3, 236, 489], "mb": [3, 460], "o": [3, 6, 91, 373, 491, 514], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 273], "float_model_fil": 3, "start": [3, 68, 226, 233, 236, 247, 277, 454, 473, 506, 522, 523], "min": [3, 42, 68, 157, 172, 488, 489, 518, 523], "per": [3, 7, 38, 41, 66, 67, 68, 191, 201, 210, 236, 248, 306, 307, 330, 489, 502, 514, 519, 524, 526], "qconfig": [3, 4, 40, 522], "default_qconfig": 3, "prepar": [3, 4, 6, 40, 66, 200, 227, 232, 254, 266, 351, 356, 441, 493, 497, 518], "calibr": [3, 7, 36, 38, 40, 41, 66, 168, 173, 181, 182, 231, 232, 266, 267, 268, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 306, 307, 469, 492, 503, 505, 518, 524, 525], "fusion": [3, 7, 38, 67, 91, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 501], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 91, 95, 245, 495, 503], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 453, 518], "minmaxobserv": 3, "reduce_rang": [3, 42, 517], "dtype": [3, 65, 127, 156, 214, 215, 223, 226, 228, 229, 230, 492, 493, 501, 517, 522, 523, 524, 525], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 522], "min_val": [3, 306, 307], "max_val": [3, 306, 307], "quantizedconvrelu2d": 3, "scale": [3, 4, 36, 42, 65, 68, 83, 157, 172, 189, 223, 226, 229, 275, 488, 498, 518, 523], "15583468973636627": 3, "zero_point": [3, 42, 65, 229, 275], "quantizedconv2d": [3, 68], "19358506798744202": 3, "74": [3, 526], "631847": 3, "300": [3, 492], "67": [3, 526], "significantli": [3, 509, 515], "lower": [3, 225, 226, 238, 460, 488, 496, 515, 516, 518, 523], "62": [3, 526], "same": [3, 7, 68, 77, 162, 211, 226, 236, 254, 289, 312, 490, 492, 493, 495, 497, 501, 514, 517, 518, 522, 523, 524], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 83, 257, 492, 496, 509, 516, 518, 519, 524, 525], "almost": 3, "decreas": [3, 120], "improv": [3, 491, 502, 515, 518, 519, 524, 526], "repeat": [3, 258, 524], "exercis": 3, "recommend": [3, 7, 194, 195, 492, 501, 515, 517, 524], "x86": [3, 509], "basi": 3, "histogram": [3, 303, 306, 312, 353, 356, 364, 522], "collect": [3, 40, 68, 187, 193, 194, 195, 196, 198, 222, 224, 226, 233, 238, 239, 240, 269, 303, 306, 312, 313, 415, 436, 447, 449, 460, 461, 518, 522, 524], "pick": 3, "paramet": [3, 4, 12, 36, 38, 40, 41, 42, 59, 65, 66, 68, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 121, 122, 125, 126, 127, 130, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 162, 164, 168, 169, 171, 173, 174, 175, 178, 181, 182, 187, 189, 191, 192, 197, 201, 210, 211, 213, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 276, 277, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 305, 306, 307, 311, 312, 324, 328, 332, 333, 351, 352, 353, 356, 362, 364, 373, 399, 417, 422, 426, 429, 441, 446, 451, 453, 454, 459, 460, 462, 472, 473, 489, 492, 493, 497, 498, 505, 508, 515, 518, 521, 523, 524, 525], "manner": [3, 495, 510], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 488], "jit": [3, 522], "script": [3, 35, 233, 234, 237, 238, 314, 315, 398, 415, 417, 419, 422, 423, 425, 426, 428, 429, 434, 497, 505, 516], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 526], "increas": [3, 494, 505], "resnet50": [3, 6, 248, 497, 502, 518, 521, 526], "qat": [4, 66, 229, 232, 242, 496, 497, 505, 511, 518], "simul": 4, "low": [4, 6, 7, 38, 67, 68, 181, 182, 214, 215, 231, 232, 241, 266, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 490, 493, 497, 509, 516, 518, 524], "precis": [4, 6, 7, 36, 38, 41, 66, 67, 68, 181, 182, 231, 232, 236, 238, 240, 241, 266, 268, 277, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 328, 338, 341, 342, 351, 352, 353, 354, 355, 356, 361, 385, 414, 419, 421, 422, 423, 443, 461, 464, 466, 488, 489, 490, 496, 497, 501, 505, 516, 517, 518, 524], "dure": [4, 40, 68, 83, 139, 245, 248, 261, 265, 267, 275, 455, 509, 510, 512, 513, 515, 518, 522, 525], "backward": [4, 236, 302, 495, 497, 515, 518, 520], "mimic": [4, 518], "still": [4, 264, 518, 519], "thu": [4, 236, 518], "made": [4, 7, 91, 246, 248, 518, 520], "while": [4, 6, 7, 68, 263, 288, 489, 492, 502, 505, 509, 517, 518], "fact": [4, 518], "ultim": [4, 518], "yield": [4, 181, 182, 193, 194, 209, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 518, 524], "either": [4, 182, 236, 289, 296, 509, 513, 517, 518], "dynam": [4, 7, 83, 201, 228, 229, 267, 320, 492, 495, 505, 516, 526], "training_func_for_nc": 4, "epoch": [4, 200, 227, 232, 254, 263, 264, 268, 284, 302, 495, 497, 515, 525], "30": [4, 6, 226, 490, 492, 505, 523, 526], "sgd": [4, 178, 197, 268, 517, 525], "lr": [4, 497], "0001": [4, 178, 268, 517], "nepoch": [4, 495], "train_load": [4, 497], "zero_grad": [4, 495, 497, 515], "break": [4, 495, 497], "freez": [4, 110, 515], "disable_observ": 4, "norm": 4, "varianc": [4, 157, 172], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 83, 263, 293, 294, 453, 512, 515, 518, 520, 524], "alreadi": [4, 7, 191, 213, 225, 447, 473, 489, 493, 505], "implement": [4, 6, 12, 38, 41, 66, 67, 68, 73, 74, 75, 76, 79, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 181, 182, 187, 206, 209, 210, 211, 213, 217, 222, 233, 239, 240, 257, 261, 265, 269, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 490, 492, 493, 520, 522, 524, 525], "hook": [4, 66, 181, 192, 199, 200, 227, 232, 254, 286, 289, 296, 305, 495, 515, 522], "prepare_qat": [4, 200, 232], "high": [4, 214, 215, 493, 506, 516, 524], "accur": 4, "inc": [4, 6, 66, 226, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 516, 517, 520], "switch": [4, 66, 106, 522], "run": [4, 6, 7, 35, 36, 38, 40, 42, 66, 127, 162, 181, 182, 191, 210, 225, 232, 245, 248, 262, 263, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 411, 454, 475, 476, 477, 489, 491, 497, 500, 501, 502, 509, 515, 516, 518, 520, 521, 522, 524, 525], "better": [4, 68, 118, 181, 182, 252, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 496, 508, 509, 515, 516, 518, 521, 524], "match": [4, 127, 139, 225, 236, 237, 495, 498], "zero": [4, 42, 65, 226, 240, 261, 263, 264, 488, 515, 523, 524], "fine": [4, 6, 211, 493, 515, 516, 518], "num_train_batch": 4, "20": [4, 6, 226, 247, 514, 523, 525, 526], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 111, 112, 113, 114, 115, 116, 119, 124, 127, 148, 153, 156, 161, 192, 248, 495, 515, 517], "quantized_model": 4, "api": [4, 8, 10, 14, 29, 30, 41, 66, 91, 96, 127, 139, 231, 232, 236, 266, 268, 285, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 476, 477, 492, 502, 504, 505, 511, 520, 521, 524], "q_func": [4, 7, 36, 38, 41, 66, 68, 181, 182, 232, 266, 267, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 524], "eval_dataload": [4, 181, 182, 200, 231, 232, 242, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 492, 503, 524], "val_load": [4, 518], "timeout": [4, 182, 289, 296, 470, 498, 517, 521, 524, 525], "constrain": 4, "71": [4, 526], "close": [4, 157, 172], "debug": [4, 366, 367, 371, 489, 524], "analyz": [4, 127, 156, 273, 515, 521, 522], "limit": [4, 288, 491, 495, 515, 522], "sinc": [4, 12, 231, 232, 233, 254, 266, 268, 284, 285, 430, 495, 498, 508, 513], "actual": [4, 68, 240, 497], "arithmet": [4, 501], "easili": [4, 7, 512, 515], "relat": [4, 227, 232, 236, 254, 261, 268, 284, 305, 392, 395, 397, 402, 478, 481, 482, 483, 486, 525], "refer": [4, 6, 7, 12, 164, 211, 233, 234, 239, 240, 261, 263, 264, 269, 490, 493, 496, 497, 503, 507, 508, 509, 512, 515, 517, 518, 520, 523, 524], "center": [5, 6, 226, 523, 524], "work": [5, 231, 232, 254, 266, 268, 285, 492, 495, 515, 519, 520, 522], "resolv": 5, "guidelin": [5, 6, 504], "librari": [6, 194, 232, 488, 506, 516], "popular": [6, 7, 232, 493, 495, 515, 518, 524], "compress": [6, 200, 232, 254, 302, 495, 505, 512, 513, 515, 516, 518], "mainstream": 6, "deep": [6, 7, 175, 488, 492, 505, 506, 509, 516, 518, 524], "learn": [6, 7, 488, 492, 493, 503, 505, 506, 509, 515, 516, 518, 522, 524], "framework": [6, 7, 36, 38, 41, 66, 68, 173, 183, 184, 187, 192, 193, 194, 197, 202, 203, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 226, 231, 232, 239, 240, 241, 248, 266, 267, 268, 269, 271, 272, 273, 275, 276, 285, 305, 314, 328, 338, 354, 356, 361, 363, 365, 385, 393, 396, 398, 399, 405, 412, 414, 419, 423, 428, 432, 443, 449, 460, 461, 488, 489, 492, 493, 497, 498, 499, 502, 503, 505, 506, 508, 509, 515, 516, 518, 523, 524, 525, 526], "mxnet": [6, 7, 40, 187, 206, 210, 213, 216, 217, 220, 221, 222, 224, 226, 231, 232, 239, 240, 266, 268, 269, 273, 285, 499, 501, 505, 509, 510, 517, 524, 525], "formerli": 6, "known": [6, 193, 194, 288, 515, 522, 524], "deliv": [6, 516], "unifi": [6, 7, 183, 184, 187, 231, 232, 266, 268, 285, 453, 492, 503, 505, 510], "across": [6, 42, 231, 232, 241, 266, 268, 285, 494, 515], "technologi": [6, 213, 514], "prune": [6, 21, 156, 200, 232, 255, 256, 257, 259, 261, 262, 263, 265, 267, 268, 276, 302, 442, 450, 465, 497, 501, 505, 513, 516, 518, 525], "knowledg": [6, 192, 227, 232, 496, 505, 510, 525], "distil": [6, 21, 178, 192, 199, 200, 232, 268, 302, 505, 513, 525], "driven": [6, 509, 512, 522], "strategi": [6, 7, 9, 36, 38, 40, 41, 66, 68, 168, 213, 232, 266, 328, 348, 443, 460, 470, 497, 505, 516, 517, 518, 519, 520, 525], "quickli": [6, 524], "gener": [6, 7, 36, 40, 65, 68, 111, 112, 139, 181, 182, 187, 191, 201, 210, 213, 214, 215, 216, 222, 224, 226, 229, 230, 232, 233, 241, 245, 254, 261, 264, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 351, 356, 362, 417, 422, 426, 428, 429, 434, 435, 436, 445, 454, 485, 489, 492, 495, 502, 508, 509, 512, 514, 515, 516, 518, 519, 522, 523, 524], "predefin": [6, 318, 351, 355, 356, 460], "sparsiti": [6, 258, 261, 263, 264, 265, 273, 276, 493, 505, 515, 526], "goal": [6, 173, 182, 227, 231, 232, 254, 266, 268, 284, 285, 289, 296, 461, 513, 518, 524], "teacher": [6, 178, 192, 227, 232, 268, 495, 496, 526], "student": [6, 192, 199, 211, 227, 232, 493, 495, 496, 526], "ai": [6, 516, 519], "oneapi": [6, 506, 516], "analyt": [6, 506, 516], "visit": [6, 526], "websit": [6, 506], "io": [6, 492], "7": [6, 490, 492, 500, 501, 502, 506, 518, 520, 524], "releas": [6, 448, 460, 504, 506], "binari": [6, 162, 240, 500, 508], "stabl": [6, 489, 506, 516], "basic": [6, 225, 243, 250, 261, 505, 506, 517, 521], "pip": [6, 489, 497, 500, 506, 520], "Or": [6, 263], "full": [6, 65, 68, 191, 211, 212, 213, 232, 489, 493, 500, 506, 507, 524], "nightli": [6, 489, 506], "git": [6, 489, 506], "clone": [6, 489, 506], "cd": [6, 489, 497, 506], "r": [6, 65, 91, 157, 172, 248, 489, 506, 514, 518, 526], "txt": [6, 216, 454, 489, 493, 506], "pypi": [6, 489, 506], "found": [6, 227, 232, 243, 244, 250, 251, 275, 288, 445, 460, 477, 509, 524], "guid": [6, 211, 493, 495, 506], "fp32": [6, 7, 36, 38, 66, 67, 68, 113, 115, 157, 164, 172, 181, 182, 228, 229, 240, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 364, 501, 508, 509, 517, 518, 519, 520, 521, 522, 524, 525, 526], "wget": [6, 502], "storag": [6, 236, 502, 508], "googleapi": [6, 502], "v1_6": [6, 502], "mobilenet_v1_1": 6, "0_224_frozen": 6, "pb": [6, 68, 273, 285, 401, 404, 415, 497, 502, 510, 522, 526], "dummi": [6, 214, 215, 230, 240, 356, 360, 462, 489, 493, 502, 508], "shape": [6, 127, 139, 156, 189, 214, 215, 226, 236, 261, 385, 392, 393, 396, 405, 407, 442, 489, 493, 501, 502, 523], "224": [6, 189, 248, 490, 492, 493, 497, 502, 523, 524, 525], "calib_dataload": [6, 193, 194, 232, 266, 267, 285, 492, 493, 503, 508, 518], "dataload": [6, 7, 14, 31, 36, 38, 40, 41, 42, 66, 68, 164, 168, 173, 181, 182, 187, 191, 194, 200, 211, 222, 227, 232, 242, 254, 266, 267, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 305, 313, 318, 324, 328, 338, 351, 354, 356, 361, 363, 385, 426, 436, 439, 442, 450, 460, 461, 465, 489, 493, 497, 502, 503, 508, 509, 511, 518, 522, 523, 524, 525], "search": [6, 12, 21, 91, 174, 181, 182, 231, 232, 233, 243, 244, 245, 247, 248, 250, 251, 252, 253, 266, 268, 285, 288, 290, 295, 351, 352, 379, 505, 508, 516, 522, 524], "jupyt": 6, "lab": 6, "manag": [6, 245, 246, 247, 248, 329, 361, 363, 386, 444, 459], "click": [6, 489, 505, 516, 522], "12": [6, 489], "onnxruntim": [6, 7, 41, 207, 232, 241, 368, 372, 498, 505, 517], "raw": [6, 212, 216, 219, 508, 524], "vision": 6, "classif": [6, 211, 226, 240, 264, 495, 508, 516], "resnet": [6, 497, 502, 526], "v1": [6, 31, 32, 33, 68, 162, 237, 238, 240, 273, 497, 508, 510, 520, 521, 526], "inc_bench": [6, 268, 442, 489], "xeon": [6, 502, 507, 509, 514, 516, 518, 519, 526], "scalabl": [6, 502, 509, 514, 516, 518, 519, 526], "skylak": 6, "cascad": [6, 502], "lake": [6, 502, 509, 516], "cooper": [6, 509, 516], "icelak": 6, "futur": [6, 83, 181, 182, 193, 194, 287, 288, 289, 290, 291, 293, 294, 295, 296, 505, 509, 511], "sapphir": 6, "rapid": 6, "flex": 6, "seri": [6, 189, 523], "amd": [6, 505, 526], "arm": [6, 505, 526], "nvidia": [6, 505, 515, 518, 526], "cento": [6, 454], "ubuntu": [6, 514], "04": [6, 451, 514, 526], "11": [6, 33, 451, 489, 502, 508, 509], "variabl": [6, 139, 191, 213, 232, 241, 247, 288, 449, 473, 489], "tf_enable_onednn_opt": [6, 489], "onednn": [6, 488], "default": [6, 7, 12, 36, 66, 68, 119, 127, 156, 162, 175, 178, 181, 182, 189, 192, 200, 201, 203, 211, 212, 213, 223, 226, 228, 229, 232, 233, 236, 239, 240, 242, 262, 268, 269, 273, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 312, 332, 334, 335, 337, 339, 342, 343, 347, 369, 370, 373, 390, 400, 449, 451, 462, 463, 467, 468, 489, 490, 492, 493, 498, 501, 505, 508, 511, 512, 517, 519, 521, 523, 524, 525], "420": [6, 505], "speedup": [6, 505, 518], "geomean": [6, 505], "2x": [6, 505, 514], "vnni": [6, 505, 517, 518], "minim": [6, 157, 172, 288, 495, 508, 515, 518, 524], "overview": 6, "dive": [6, 501], "mix": [6, 7, 68, 286, 421, 422, 423, 466, 505, 524], "orchestr": [6, 302, 505], "benchmark": [6, 10, 36, 38, 68, 193, 194, 232, 267, 268, 277, 331, 338, 341, 350, 356, 358, 361, 362, 385, 442, 443, 453, 458, 475, 480, 492, 502, 510, 511, 524, 525, 526], "convers": [6, 7, 75, 102, 232, 242, 509, 518, 519], "tensorboard": [6, 7, 36, 38, 41, 66, 68, 302, 305, 524], "coder": [6, 505, 516], "topic": 6, "adaptor": [6, 9, 200, 232, 305, 505, 519, 520, 522, 524], "togeth": [6, 226, 261, 267, 492, 495, 506, 516, 522, 523, 524], "tencent": [6, 516], "deepen": [6, 516], "cloud": [6, 516], "foundat": [6, 516], "digit": [6, 233, 516], "intellig": [6, 516], "industri": [6, 493, 508, 516], "dec": [6, 516], "2022": [6, 31, 32, 33, 526], "fast": [6, 516], "achiev": [6, 231, 232, 266, 268, 285, 508, 513, 515, 516, 518, 522, 524], "sota": [6, 516], "nov": [6, 516], "virtual": [6, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 516], "applianc": [6, 516], "packag": [6, 7, 320, 327, 332, 334, 335, 337, 338, 339, 342, 343, 346, 347, 366, 367, 371, 374, 380, 382, 385, 386, 392, 411, 413, 418, 421, 424, 425, 427, 433, 438, 442, 475, 489, 500, 506, 516, 520, 524], "bitnami": [6, 516], "diffus": [6, 516], "few": [6, 489, 516, 524], "distilbert": [6, 211, 493, 516, 526], "oct": [6, 516], "innov": [6, 516], "acceler": [6, 495, 515, 516, 519, 524], "legal": [6, 504], "secur": [6, 514, 516], "send": [6, 430, 472, 477, 491], "your": [6, 209, 211, 236, 489, 490, 491, 493, 497, 507, 521, 522, 524], "resum": [6, 181, 182, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302], "solut": [7, 157, 172, 245, 500, 516, 524], "onnx": [7, 41, 42, 65, 207, 228, 229, 230, 271, 272, 276, 302, 315, 415, 499, 501, 505, 509, 510, 516, 517, 518], "runtim": [7, 454, 498, 499, 501, 505, 517, 518], "bridg": [7, 505], "vanilla": [7, 505], "10004": [7, 495, 501, 505, 509, 513, 517, 525], "complet": [7, 84, 489, 524, 525, 526], "subclass": [7, 36, 59, 169, 171, 187, 197, 206, 210, 213, 217, 220, 221, 222, 224, 226, 239, 240, 252, 255, 256, 257, 261, 263, 265, 269, 277, 283, 296, 524], "adaptor_registri": [7, 36], "abc": [7, 130, 238, 393, 453, 522, 524], "abcadaptor": 7, "framework_specific_info": [7, 36, 38, 41, 66, 68], "tune_cfg": [7, 36, 38, 40, 41, 66, 68, 168, 289], "postprocess": [7, 36, 38, 41, 66, 68, 187, 191, 194, 222, 224, 226, 231, 232, 242, 266, 267, 268, 463, 490, 492, 522, 523], "query_fw_cap": [7, 36, 38, 41, 66, 68, 524], "query_fused_pattern": [7, 36], "awar": [7, 36, 38, 41, 66, 68, 164, 183, 184, 187, 200, 232, 242, 261, 266, 267, 496, 497, 505, 509, 511, 513, 526], "he": 7, "intersect": [7, 240, 508], "graph": [7, 41, 42, 66, 68, 71, 77, 78, 79, 80, 81, 82, 83, 84, 91, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 121, 122, 125, 126, 127, 149, 156, 157, 160, 161, 162, 210, 229, 231, 268, 271, 272, 273, 275, 276, 319, 321, 385, 393, 396, 404, 405, 407, 417, 418, 419, 424, 425, 439, 440, 442, 461, 464, 476, 493, 495, 497, 503, 508, 510, 518, 519, 522], "decid": [7, 68, 132, 133, 234, 263, 286, 287, 293, 294, 373, 498, 520, 524], "besid": [7, 491, 495, 513], "introduc": [7, 95, 501, 515, 518, 520, 524], "describ": [7, 41, 66, 68, 248, 489, 501, 522], "op": [7, 36, 38, 41, 42, 66, 67, 68, 77, 81, 83, 86, 87, 90, 91, 92, 93, 95, 102, 106, 107, 110, 113, 114, 115, 116, 118, 124, 127, 156, 157, 160, 162, 228, 229, 286, 287, 289, 293, 294, 306, 307, 353, 356, 364, 369, 370, 378, 476, 489, 501, 502, 509, 518, 519, 520, 522, 524, 525], "sequenc": [7, 12, 68, 84, 211, 225, 226, 233, 234, 238, 261, 493, 501, 523], "past": 7, "abov": [7, 74, 236, 490, 502, 515], "wa": [7, 156, 430, 489, 516, 524], "hidden": [7, 261, 460, 515], "corner": [7, 226, 523], "effect": [7, 515], "mainten": 7, "difficult": 7, "correspond": [7, 12, 68, 139, 164, 211, 233, 236, 240, 261, 263, 267, 288, 501, 515, 517, 518, 521, 524], "abil": [7, 492, 501], "clear": [7, 12, 132, 209, 233, 239, 240, 248, 269, 501, 508], "fragment": 7, "field": [7, 127, 156, 213, 236, 267, 489, 490, 497, 498, 502, 524, 525], "enumer": [7, 40, 65, 252, 302, 312, 316, 414, 420, 443, 497, 515, 522], "scenario": [7, 35, 328, 489, 490, 495, 502, 515], "hardwar": [7, 38, 67, 449, 495, 502, 505, 509, 514, 515, 516, 517], "doesn": [7, 127, 226, 267, 459, 490, 492, 497, 525], "bf16": [7, 38, 67, 102, 113, 115, 289, 501, 502, 509, 519, 524], "granular": [7, 38, 67, 501, 505, 515, 524, 525], "scheme": [7, 38, 42, 65, 67, 477, 492, 501, 524, 525], "semant": [7, 501], "pattern": [7, 36, 38, 67, 68, 82, 83, 91, 114, 118, 124, 127, 152, 213, 232, 255, 259, 263, 268, 353, 356, 369, 378, 379, 453, 476, 493, 501, 505, 513, 517, 526], "abstract": [7, 36, 38, 67, 77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126, 130, 139, 192, 226, 227, 231, 232, 239, 240, 251, 253, 257, 261, 265, 266, 268, 269, 271, 272, 273, 275, 276, 277, 285, 296, 318, 393, 404, 405, 426, 435, 453, 476, 503], "querybackendcap": [7, 38, 41, 66, 67, 68], "tensorflowqueri": [7, 68], "look": [7, 501, 508, 512, 525], "microsoft": 7, "mla": [7, 488], "kernel": [7, 449, 514, 515, 524], "becom": [7, 83], "integr": [7, 162, 192, 489], "explor": 7, "attribut": [7, 65, 83, 127, 139, 156, 168, 174, 175, 200, 266, 380, 381, 385, 442, 458, 501, 503, 509, 517, 525], "whether": [7, 40, 41, 42, 66, 68, 132, 133, 162, 189, 201, 209, 211, 226, 227, 232, 234, 236, 240, 254, 261, 263, 312, 415, 493, 508, 523], "qlinear": [7, 213, 220, 240, 526], "qdq": [7, 130, 168, 228, 229, 505, 518], "integ": [7, 139, 227, 232, 236, 240, 252, 261, 263, 265, 306, 307, 518, 524], "qtype": [7, 42, 65], "choic": [7, 211, 489, 493, 508], "float32": [7, 42, 214, 215, 226, 236, 458, 490, 493, 518, 523], "uint8": [7, 65, 223, 236, 306, 307, 488, 493, 501, 517, 518, 523, 524, 525], "node": [7, 40, 42, 65, 68, 71, 74, 75, 76, 77, 83, 84, 85, 88, 89, 91, 95, 107, 120, 127, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 162, 229, 271, 272, 273, 275, 276, 362, 375, 376, 377, 378, 379, 380, 385, 393, 396, 403, 404, 405, 439, 440, 442, 489, 497, 522], "exclud": [7, 107], "three": [7, 95, 211, 264, 489, 492, 502, 506, 509, 513, 518, 519, 521, 522, 524], "onnxrt": [7, 187, 211, 213, 220, 221, 222, 224, 226, 239, 240, 269, 367, 368, 383, 385, 392, 442], "onnxrt_qlinearopsadaptor": [7, 41], "dump_elapsed_tim": [7, 312], "recov": [7, 38, 41, 68, 312, 496], "q_config": [7, 38, 41, 42, 67, 68, 228, 229], "inspect_tensor": [7, 36, 38, 41, 66, 68], "op_list": [7, 36, 38, 41, 66, 68, 293, 522], "iteration_list": [7, 36, 38, 41, 66, 68], "inspect_typ": [7, 36, 38, 41, 66, 68, 364], "save_to_disk": [7, 36, 38, 41, 66, 68], "save_path": [7, 38, 41, 68, 228, 229, 271, 272, 276, 302, 510], "quantization_cfg": [7, 38, 41, 68], "set_tensor": [7, 36, 38, 41, 66, 68], "tensor_dict": [7, 36, 38, 41, 66, 68], "input_graph": [7, 41, 148, 149, 153, 156, 157, 314, 419, 423, 428, 435], "fp32_baselin": [7, 38, 41, 66, 68, 305], "diagnosis_help": 7, "fp32_model": [7, 66, 68, 164, 228, 229, 293, 312, 492], "int8_model": [7, 228, 229], "experiement": 9, "deprec": [9, 227, 232, 460, 523], "bilingu": [12, 233], "understudi": [12, 233], "qualiti": [12, 233], "text": [12, 225, 226, 233, 238, 264, 507, 516, 523, 526], "machin": [12, 233, 326, 489, 506, 516, 522], "translat": [12, 68, 233, 234, 245, 248], "natur": [12, 233], "anoth": [12, 36, 68, 127, 226, 232, 233, 242, 302, 492, 495, 511, 523, 524], "approxim": [12, 233, 234, 508], "glue": [12, 233, 240, 493, 508], "word": [12, 225, 233, 502, 508, 526], "piec": [12, 225, 233, 508], "decod": [12, 233, 508, 523], "id": [12, 31, 32, 33, 191, 225, 233, 235, 236, 237, 238, 330, 331, 333, 334, 335, 337, 340, 341, 342, 343, 344, 346, 348, 349, 377, 378, 381, 446, 508, 521, 524], "token": [12, 211, 222, 224, 226, 232, 233, 234, 473, 477, 489, 493, 508, 521, 523, 524], "By": [12, 35, 233, 508, 510], "ngram": [12, 233, 508], "breviti": [12, 233, 234, 508], "penalti": [12, 233, 234, 508], "beam": [12, 233, 508, 524], "cach": [12, 211, 233, 394, 477, 500, 518], "error": [12, 66, 164, 233, 240, 246, 267, 445, 472, 508, 524], "occur": [12, 233], "length": [12, 211, 226, 233, 236, 493, 508, 518, 523], "bleu_scor": [12, 233, 234], "schedul": [21, 232, 259, 263, 268, 302, 513], "mixedprecis": [21, 232, 241, 321, 422, 466, 509], "modelconvers": [21, 232, 242, 511], "architectur": [21, 191, 243, 244, 250, 251, 253, 495, 506, 515, 516], "na": [21, 174, 232, 268, 273, 505], "14": [31, 32, 228, 229, 526], "revis": [31, 32, 33], "6ece06672ed3": 31, "6f0d0f71d92e": [31, 32], "date": [31, 32, 33, 430], "08": [31, 226, 523, 526], "31": [31, 526], "07": [31, 32, 525, 526], "229939": 31, "update_dataload": 31, "db_session": [31, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 358, 360, 363], "sqlalchemi": [31, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 355, 356, 358, 360, 361, 363, 500, 506], "orm": [31, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 355, 356, 358, 360, 363], "session": [31, 162, 210, 273, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 358, 360, 361, 363, 522], "databas": [31, 213, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 430, 444, 459], "update_transform": 31, "13": [32, 33, 285, 489, 526], "9e89549a08c8": [32, 33], "29": [32, 526], "41": [32, 502, 526], "291905": 32, "03": [33, 451, 526], "22": [33, 451, 454, 526], "34": [33, 526], "52": [33, 526], "916541": 33, "run_migrations_offlin": 35, "migrat": [35, 444], "context": [35, 517], "url": [35, 213, 410, 473, 507], "engin": [35, 247, 329, 341, 361], "though": 35, "skip": [35, 277, 522, 524], "creation": [35, 327], "even": [35, 83, 489, 515], "dbapi": 35, "execut": [35, 38, 41, 66, 68, 71, 74, 160, 200, 227, 232, 243, 244, 250, 254, 263, 266, 267, 285, 305, 311, 313, 314, 315, 330, 341, 344, 350, 356, 358, 359, 415, 417, 419, 422, 423, 426, 428, 429, 431, 436, 439, 443, 446, 454, 455, 476, 489, 495, 497, 502, 509, 513, 515, 518, 526], "emit": 35, "string": [35, 36, 38, 41, 66, 67, 68, 77, 84, 127, 132, 133, 156, 162, 173, 174, 192, 197, 211, 213, 227, 229, 231, 232, 233, 236, 242, 243, 244, 247, 250, 251, 252, 254, 261, 262, 263, 264, 265, 266, 267, 268, 273, 276, 284, 285, 305, 306, 307, 312, 324, 439, 460, 484, 508, 523], "run_migrations_onlin": 35, "associ": [35, 236, 351, 352], "connect": [35, 263, 341, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 489, 515, 521], "cl": [36, 59, 66, 169, 171, 187, 192, 197, 213, 217, 220, 221, 222, 224, 226, 252, 257, 261, 263, 265, 277, 283, 296], "quanit": [36, 38, 41], "chosen": [36, 489], "categori": [36, 68, 213, 235, 236, 493], "mini": [36, 38, 68, 526], "boolean": [36, 38, 40, 68, 77, 247, 460], "inspect": [36, 38, 41, 66, 68, 489, 520, 522], "capabl": [36, 38, 41, 66, 67, 68, 501, 509, 517, 518, 524, 525], "queri": [36, 38, 40, 41, 66, 68, 127, 132, 139, 162, 289, 332, 339, 347, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 518], "dump": [36, 38, 41, 42, 66, 68, 127, 228, 229, 312, 322, 430, 451, 461, 473, 518, 522, 524], "contain": [36, 38, 41, 42, 66, 68, 77, 88, 89, 91, 95, 127, 130, 156, 162, 164, 173, 181, 182, 211, 212, 213, 227, 228, 229, 231, 232, 236, 237, 238, 242, 245, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 268, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 311, 316, 320, 327, 332, 334, 335, 337, 338, 339, 342, 343, 346, 347, 351, 356, 361, 366, 367, 371, 374, 380, 385, 386, 392, 411, 418, 420, 421, 424, 425, 427, 433, 438, 442, 446, 454, 492, 493, 495, 505, 508, 515, 522, 524], "bool": [36, 40, 41, 42, 66, 83, 84, 127, 132, 156, 162, 164, 168, 182, 189, 211, 213, 226, 228, 229, 234, 236, 240, 245, 247, 248, 261, 289, 296, 340, 373, 378, 381, 393, 396, 398, 399, 400, 401, 403, 404, 406, 410, 412, 415, 430, 446, 447, 449, 454, 455, 460, 462, 463, 473, 479, 485, 493, 508, 517, 523], "disk": [36, 66, 68], "memori": [36, 66, 95, 231, 232, 254, 266, 268, 284, 285, 492, 496, 509, 512, 515, 518, 524], "numpi": [36, 38, 41, 66, 68, 88, 89, 91, 127, 162, 226, 230, 236, 240, 245, 247, 252, 306, 307, 500, 523], "arrai": [36, 38, 41, 66, 68, 127, 156, 162, 226, 236, 240, 245, 247, 252, 276, 288, 306, 307, 523], "node0_nam": [36, 66, 68], "weight0_nam": [36, 38, 41, 66, 68], "bias0_nam": [36, 38, 41, 66, 68], "node1_nam": [36, 66, 68], "weight1_nam": [36, 66, 68], "bias1_nam": [36, 66, 68], "output0_nam": [36, 66, 68], "output1_nam": [36, 66, 68], "respons": [36, 38, 41, 66, 68, 449, 453, 459, 472, 476, 477, 481, 483, 485, 486, 518], "int32": [36, 38, 41, 66, 68, 228, 229, 493], "someth": [36, 38, 41, 66, 68, 181, 182, 213, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "quantize_input": [36, 68], "abl": [36, 68, 102, 181, 182, 225, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 515, 518], "where": [36, 38, 42, 65, 66, 68, 139, 236, 240, 251, 253, 261, 495, 498, 515, 522, 524], "destinatin": 36, "destin": [36, 42, 68, 232, 242, 511], "mxnetadaptor": 38, "nc_model": [38, 40, 254], "unimpl": [38, 41], "yet": [38, 41, 68, 489], "mxnetmodel": [38, 273], "data_x": [38, 40], "loader": [38, 40, 181, 182, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "compare_label": [38, 41, 66, 68, 240, 508], "pipelin": [38, 41, 66, 68, 227, 232, 243, 244, 250, 267, 496, 513], "modelwis": [38, 286, 287], "opwis": [38, 293, 294], "recover_tuned_model": [38, 68], "mxnetqueri": 38, "local_config_fil": [38, 41, 66, 68], "get_vers": [38, 41, 67, 68], "get_precis": [38, 41, 67, 68, 328], "g": [38, 41, 67, 245, 247, 267, 453, 495, 502, 515, 520, 524], "get_op_typ": [38, 41, 66, 67, 68], "fully_connect": 38, "get_fuse_pattern": [38, 67, 68], "get_quantization_cap": [38, 41, 66, 67, 68], "etc": [38, 67, 173, 200, 225, 227, 231, 232, 238, 246, 247, 254, 266, 268, 284, 285, 311, 495, 505, 521], "get_mixed_precision_combin": [38, 67, 68], "optyp": 40, "enum": [40, 65, 312, 414, 443], "deriv": [40, 65, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 200, 227, 232, 261, 263, 265, 312], "new": [40, 65, 77, 127, 149, 162, 187, 191, 201, 213, 222, 224, 226, 261, 262, 265, 267, 275, 312, 355, 356, 360, 472, 490, 491, 497, 509, 516, 518, 520, 521, 523, 525], "isiter": 40, "obj": [40, 173, 210, 227, 231, 232, 242, 243, 244, 250, 251, 254, 262, 266, 267, 268, 284, 285, 305, 312], "ensure_list": 40, "check_mx_vers": 40, "mx": [40, 492], "__version__": 40, "make_nc_model": 40, "sym_model": 40, "ctx": [40, 492], "input_desc": 40, "tupl": [40, 66, 127, 139, 181, 182, 189, 192, 223, 226, 228, 229, 236, 245, 248, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 379, 410, 460, 479, 493, 508, 515, 523], "symnet": 40, "aux": 40, "descript": [40, 127, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 229, 230, 236, 251], "ncmodel": 40, "suppli": 40, "prepare_model_data": 40, "dataloaderwrap": 40, "is_model_quant": 40, "query_quantizable_nod": 40, "map": [40, 42, 68, 149, 226, 229, 231, 232, 235, 236, 237, 238, 240, 245, 254, 261, 263, 266, 268, 284, 285, 414, 490, 493, 497, 508, 515, 518], "quantize_sym_model": 40, "run_forward": 40, "b_filter": 40, "collector": 40, "pre_batch": 40, "post_batch": 40, "propag": [40, 139], "filter": [40, 185, 187, 211, 212, 213, 214, 215, 216, 218, 222, 232, 268, 333, 373, 396, 462, 493, 505, 515, 522, 524], "make_symbol_block": 40, "gluon": [40, 285, 510], "symbolblock": 40, "make_modul": 40, "parse_tune_config": 40, "quantizable_nod": 40, "distribute_calib_tensor": 40, "calib_tensor": 40, "calib_cfg": 40, "tensor_to_nod": 40, "kl": [40, 303, 306, 307, 501, 524, 525], "minmax": [40, 501, 524, 525], "calib_model": 40, "qsym_model": 40, "calib_data": [40, 492], "gather": [40, 42, 261, 449], "calibdata": 40, "threshold": [40, 42, 170, 236, 261, 303, 306, 307, 508], "calibcollector": 40, "include_tensors_kl": 40, "include_tensors_minmax": 40, "num_bin": [40, 303, 306, 307], "8001": [40, 303, 306], "collectorbas": 40, "tensorcollector": 40, "include_nod": 40, "qtensor_to_tensor": 40, "onnxruntimeadaptor": 41, "rt": 41, "todo": [41, 211, 214, 236, 306, 307, 458], "func": [41, 192, 267, 460, 477, 525], "onnxdataload": 41, "evalut": 41, "onnxtransform": 41, "onnxmetr": 41, "evaluaton": 41, "visualizaton": 41, "boolen": [41, 66, 68], "f1": [41, 232, 237, 239, 240, 268, 490, 497, 508, 521, 526], "modelproto": [41, 229, 510], "onnxrt_integeropsadaptor": 41, "onnxrt_qdqadaptor": 41, "onnxrtqueri": 41, "infom": [41, 68, 193, 194, 229], "compos": [41, 66, 68, 156, 226, 492, 523, 524], "dictionari": [41, 42, 66, 68, 88, 89, 91, 139, 164, 168, 174, 175, 178, 225, 236, 243, 245, 248, 250, 251, 253, 268, 332, 334, 335, 337, 339, 342, 343, 347, 351, 352, 354], "kei": [41, 66, 68, 127, 132, 156, 162, 164, 175, 236, 252, 262, 264, 273, 303, 305, 306, 312, 453, 468, 489, 522, 524], "get_op_types_by_precis": [41, 66, 68], "get_graph_optim": 41, "onnxrtaug": 42, "model_wrapp": 42, "dump_op_typ": 42, "black_nod": 42, "white_nod": 42, "cpuexecutionprovid": 42, "augment": 42, "augment_graph": 42, "activation_onli": 42, "weight_onli": 42, "quantization_candid": 42, "get_intermediate_output": 42, "calib_mod": 42, "intermedi": [42, 65, 192, 505, 515, 518], "dump_calibr": 42, "naiv": 42, "give": [42, 492, 524], "pair": [42, 124, 132, 509], "minimum": [42, 65, 524], "second": [42, 85, 211, 289, 373, 453, 489, 498, 512, 524, 525], "maximum": [42, 65, 75, 211, 226, 234, 261, 263, 288, 493, 518, 523], "ad": [42, 139, 211, 233, 288, 330, 331, 333, 340, 341, 342, 343, 344, 348, 349, 489, 502, 509, 522], "reducemin": 42, "reducemax": 42, "calculate_quantization_param": 42, "quantization_threshold": 42, "calcul": [42, 66, 68, 164, 192, 214, 215, 237, 238, 248, 258, 261, 263, 264, 277, 293, 303, 306, 364, 453, 458, 493, 508, 512, 515, 518, 521, 524, 525], "matmul": [42, 67, 73, 86, 106, 107, 116, 145, 229, 261, 501], "param_nam": [42, 324], "conv_3": 42, "np": [42, 127, 156, 226, 288, 497, 523], "conv_4": 42, "calculate_scale_zeropoint": 42, "last_nod": 42, "next_nod": 42, "rmin": [42, 65, 488], "rmax": [42, 65, 488], "quantize_rang": [42, 65], "op_registri": 59, "op_typ": [59, 66, 289, 293], "quanttyp": 65, "cast_tensor": 65, "tensorproto": 65, "tensor_target_dtyp": 65, "quantize_data_with_scale_zero": 65, "sym": [65, 501, 524, 525], "asym": [65, 501, 524, 525], "To": [65, 236, 257, 261, 265, 451, 489, 491, 497, 509, 517, 519, 520, 524, 525], "pack": [65, 82], "b": [65, 91, 95, 211, 229, 493, 508], "ab": [65, 263, 488, 518], "quantize_data": 65, "trasnform": 65, "equat": [65, 238, 240, 518], "q": [65, 124], "z": [65, 495], "real": [65, 66, 193, 194, 214, 497, 516, 518], "quantizedvalu": 65, "new_quantized_nam": 65, "scale_nam": 65, "zero_point_nam": 65, "quantized_value_typ": 65, "axi": 65, "quint8": 65, "linearli": 65, "inputoutputinti": 65, "quantizediniti": 65, "quantized_data": 65, "quantizationmod": 65, "quantizedvaluetyp": 65, "quantformat": [65, 229], "attribute_to_kwarg": 65, "helper": [65, 66, 164, 168, 211, 212, 213, 225, 229, 455], "make_nod": 65, "find_by_nam": 65, "item_list": 65, "item": [65, 175, 225, 262, 289, 362, 447, 479, 497, 521], "get_ops_recurs": 66, "prefix": [66, 162, 191, 232, 233, 473, 502, 522], "graph_info": [66, 68, 271, 272, 273, 275, 276], "templateadaptor": 66, "tampl": 66, "is_fused_modul": [66, 164, 168], "_propagate_qconfig_help": [66, 164, 168], "calculate_hessian_trac": 66, "enable_act": [66, 164], "hessian": [66, 164], "gradient": [66, 139, 263, 276, 505, 515, 524, 526], "amap": 66, "op_nam": [66, 289, 293, 364, 369, 370, 378, 379, 522], "hessian_trac": [66, 164], "pytorchadaptor": 66, "objext": 66, "summari": [66, 119, 120, 191, 232, 489, 491, 514, 522], "optimizer_tupl": 66, "criterion_tupl": 66, "is_fused_child": 66, "_post_eval_hook": [66, 522], "is_fused_op": 66, "is_last_fused_child": 66, "q_capabl": 66, "get_non_quant_modul": 66, "model_kwarg": 66, "non_quant_modul": 66, "custom": [66, 132, 173, 245, 267, 311, 351, 356, 495, 515, 521], "keyword": 66, "custom_non_quant_dict": 66, "pytorch_ipexadaptor": 66, "ipex": [66, 505, 518, 526], "unspport": 66, "No": [66, 500, 514, 516], "pytorch_fxadaptor": 66, "fx": [66, 168, 285, 505, 516, 518, 519, 526], "prepare_sub_graph": 66, "sub_module_list": 66, "fx_op_cfg": 66, "is_qat": 66, "example_input": [66, 228, 229], "recurs": [66, 312], "qconfigmap": 66, "prepare_fx": 66, "dir": [66, 168, 211, 311, 493, 500, 503], "convert_sub_graph": 66, "fuse_fx_model": 66, "fused_model": 66, "calculate_op_sensit": [66, 68], "output_op_nam": [66, 68], "confidence_batch": [66, 68, 524], "fallback": [66, 68, 168, 286, 287, 502, 509, 519, 524], "requantize_cfg": [66, 68], "stage": [66, 68, 114, 454, 495, 522, 524], "sort": [66, 68, 156, 373, 524], "sensit": [66, 68, 263, 505, 515, 524], "ops_lst": 66, "pytorchqueri": 66, "set_quantization_config": 67, "organ": [67, 489, 525], "unsupported_precis": 67, "tensorflowadaptor": 68, "graphdef": [68, 77, 78, 81, 82, 84, 91, 95, 106, 107, 113, 114, 115, 116, 127, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 162, 273, 439, 510], "graph_def": [68, 74, 162, 273, 285, 407, 439, 440], "frozen": [68, 77, 273, 285, 401, 404, 489, 510], "ckpt": [68, 162, 273, 285, 526], "savedmodel": [68, 273, 285, 526], "folder": [68, 162, 213, 218, 285, 311, 493, 522], "larger": 68, "tuning_cfg_to_fw": 68, "tuning_cfg": 68, "pars": [68, 156, 211, 212, 223, 226, 314, 324, 350, 351, 353, 356, 357, 358, 359, 362, 415, 419, 423, 428, 434, 453, 460, 468, 479, 523], "compat": [68, 102, 162, 236, 245, 273, 497, 510, 520], "wise": [68, 157, 172, 261, 288, 353, 356, 460, 489, 492, 505, 515, 522, 524, 525], "definit": [68, 127, 204, 209, 378, 391, 400, 446, 476], "inspect_weight_and_bia": 68, "node_list": 68, "graph_node_name_map": [68, 162], "fused_node_map": 68, "pattern_map": 68, "seq": 68, "fused_mapping_revers": 68, "fused_map": 68, "inspect_activ": 68, "local": [68, 261, 312, 326, 356, 361, 374, 394, 489, 521, 524], "tensorflowbasemodel": [68, 273, 405], "quantizedv2": 68, "get_optype_wise_": 68, "union": [68, 234, 236, 240, 302, 324, 326, 341, 362, 400, 446, 449, 451, 453, 454, 460, 463, 464, 466, 468, 472, 508], "qat_convert": 68, "quantize_recip": [68, 132, 133], "kera": [68, 91, 133, 139, 197, 273, 385, 392, 402, 497, 510], "converted_model": [68, 509], "mse": [68, 168, 240, 294, 364, 370, 489, 508, 517, 520], "backup": 68, "cfg": [68, 92, 93, 174], "fallen": 68, "previou": [68, 251, 489, 520, 522, 524], "denot": 68, "tensorflow_itexadaptor": 68, "performance_onli": [68, 124, 148, 153, 161, 470, 524], "get_eightbit_pattern": 68, "qdq_enabl": 68, "eightbit": [68, 522], "generate_internal_pattern": 68, "intern": [68, 127, 164, 445, 492], "bf16convert": [71, 519], "fp32_op": [71, 124], "bf16_op": [71, 124, 519], "graph_bas": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126], "graphrewriterbas": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126], "do_transform": [71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 141, 148, 149, 153, 157, 160, 161], "convertaddtobiasaddoptim": 73, "addv2": [73, 90, 91, 501], "biasadd": [73, 85, 87, 145, 152, 501], "convertlayoutoptim": 74, "layout": 74, "nchw": 74, "nhwc": 74, "convertleakyreluoptim": 75, "subgraph": [75, 83, 87, 91], "leakyrelu": 75, "mul": [75, 86, 87, 90, 91, 145], "coeffici": [75, 246], "less": [75, 495, 515], "convertnantorandom": 76, "const": [76, 84, 85, 88, 89, 91, 106, 107, 120, 127, 268, 330, 341, 344, 350, 356, 358, 359, 363, 442, 450, 459], "nan": 76, "convertplaceholdertoconst": 77, "rewrit": [77, 78, 79, 80, 81, 82, 83, 84, 94, 99, 101, 102, 103, 104, 105, 108, 111, 112, 121, 122, 125, 126], "renam": [77, 102, 520], "placeholderwithdefault": 77, "constant": [77, 83, 127, 156, 228, 229, 288, 443, 492, 501, 523], "simplifi": 77, "input_graph_def": [77, 78, 81, 82, 84, 91, 95, 106, 107, 127, 156], "nodes_to_convert": 77, "placehold": [77, 209], "strtobool": 77, "val_str": 77, "equival": [77, 245], "dequantizecastoptim": 78, "dilatedcontract": 79, "injectdummybiasaddoptim": 80, "expanddimsoptim": 81, "expanddim": 81, "whose": [81, 106, 107, 262, 503, 515, 524], "fetchweightfromreshapeoptim": 82, "fetch": [82, 204, 236, 492], "reshap": [82, 91, 257], "foldbatchnormnodesoptim": 83, "scale_after_norm": 83, "batchnormwithglobalnorm": 83, "nodedef": [83, 88, 89, 91, 127, 156, 439], "normal": [83, 91, 226, 238, 460, 490, 492, 512, 523], "fold": [83, 84, 228, 229, 501], "convolut": [83, 495, 515, 516], "onc": [83, 127, 162, 197, 265, 489, 492, 516], "That": [83, 489, 492], "opportun": 83, "rather": [83, 503], "expens": [83, 495, 524], "bake": 83, "identifi": [83, 88, 89, 91, 236, 273], "simpler": 83, "form": [83, 91, 102, 236, 238, 454, 489, 495], "spot": 83, "fusedbatchnorm": [83, 102], "fusedbatchnormv3": 83, "_fusedbatchnormex": 83, "newer": 83, "style": [83, 204, 218, 491, 493, 503], "badli": [83, 91, 102], "duplic": [83, 91, 120, 288], "graphfoldconstantoptim": 84, "check_all_fold": 84, "check_const_input": 84, "node_nam": [84, 88, 89, 91, 127, 156, 162, 229, 273, 275, 345, 439], "supported_op_typ": 84, "fusebiasaddandaddoptim": 85, "fusecolumnwisemuloptim": 86, "depthwiseconv2dn": [86, 501], "fuseconvwithmathoptim": 87, "elimin": [87, 502], "math": [87, 518], "realdiv": [87, 90], "node_name_from_input": [88, 89, 91, 127, 156], "strip": [88, 89, 91, 162, 522], "port": [88, 89, 91, 156, 473, 477, 489], "underli": [88, 89, 91, 246], "node_from_map": [88, 89, 91], "node_map": [88, 89, 91], "pull": [88, 89, 91, 454], "entri": [88, 89, 91, 164, 197, 231, 267, 370, 373, 453, 460, 507], "index": [88, 89, 91, 132, 139, 187, 191, 204, 209, 213, 217, 222, 232, 252, 277, 312, 477, 492, 508], "isn": [88, 89, 91, 127], "present": [88, 89, 91, 489, 516], "values_from_const": [88, 89, 91, 127], "node_def": [88, 89, 91, 127], "extract": [88, 89, 91, 127, 213, 479, 493], "ndarrai": [88, 89, 91, 127, 226, 245, 247, 276, 288, 303, 306, 500, 523], "access": [88, 89, 91, 127, 139, 174, 175, 445, 460, 473, 477, 489], "get_const_dim_count": [88, 89], "dimens": [88, 89, 203, 226, 248, 258, 288, 493, 495, 515, 523], "fusegeluoptim": 90, "sqrt": 90, "erf": 90, "gelu": 90, "fuselayernormoptim": 91, "remap": 91, "smaller": [91, 226, 495, 515, 523], "layernorm": 91, "case": [91, 95, 191, 210, 225, 226, 231, 232, 240, 254, 266, 267, 268, 284, 285, 451, 455, 460, 489, 490, 492, 495, 497, 501, 503, 508, 512, 515, 516, 518, 523, 525], "fusedbatcnormv3": 91, "And": [91, 200, 232], "restrict": [91, 515, 521], "2d": 91, "3d": [91, 516, 526], "contraint": 91, "fusedop": 91, "fill": [91, 332, 334, 335, 337, 339, 342, 343, 347, 489, 521, 523], "gamma": 91, "beta": 91, "h": [91, 226, 497, 523], "_mkllayernorm": 91, "fusepadwithconv2doptim": 92, "excluded_op_nam": [92, 93], "new_api": [92, 93, 98, 114, 121, 148, 153, 157], "itex_qdq_mod": [92, 93], "fusepadwithfp32conv2doptim": 93, "fusetransposereshapeoptim": 94, "graphcseoptim": 95, "cse": 95, "those": [95, 293, 294, 312, 495, 502, 503, 513, 515, 518, 524], "child": [95, 522], "b1": 95, "c1c2": 95, "d1": [95, 312], "c1": 95, "c2": 95, "bound": [95, 191, 226, 232, 236, 245, 288, 508, 523], "elim": 95, "grappleroptim": 96, "input_output_nam": 96, "opt_cfg": 96, "wrapper": [96, 139, 187, 192, 193, 194, 195, 196, 210, 222, 224, 226, 236, 240, 477, 485, 519], "grappler": [96, 501], "insertprintminmaxnod": 98, "pre_node_nam": 98, "post_node_nam": 98, "movesqueezeafterreluoptim": 99, "removetrainingnodesoptim": 101, "protected_nod": [101, 156], "types_to_splic": [101, 156], "checknumer": [101, 156], "stopgradi": 101, "renamebatchnormoptim": 102, "fusedbatchnormv2": 102, "due": [102, 515, 518, 522], "histor": 102, "latter": [102, 132], "former": 102, "platform": [102, 449, 502, 505, 516, 518, 521, 526], "vnni_bf16": 102, "amx": 102, "instruct": [102, 489, 495, 506, 509, 516, 517, 518], "splitsharedinputoptim": 103, "stripequivalentnodesoptim": 104, "output_node_nam": [104, 105, 148, 149, 153, 156, 162], "stripunusednodesoptim": 105, "input_node_nam": [105, 148, 153, 156, 162], "switchoptim": 106, "condit": [106, 211, 212, 213, 226, 493, 507, 523, 524], "enter": [106, 107], "updateenteroptim": 107, "workaround": 107, "freezefakequantopoptim": 110, "fake_qu": [110, 124, 148, 153], "freezevaluetransform": 111, "max_min_data": [111, 112], "postfix": [111, 112], "tensor_data": 111, "th": [111, 112], "gpu": [111, 112, 124, 127, 156, 505, 515, 517, 518], "itex_mod": [111, 124, 148, 153], "generate_output_graph": [111, 112], "max_name_valu": [111, 112], "freeze_max": [111, 112], "freeze_min": [111, 112], "generate_output_graph_rang": [111, 112], "freezevaluewithoutcalibtransform": 112, "95": [112, 236, 240, 508, 526], "fuseconvredundantdequantizetransform": 113, "_quantizedconv": 113, "_quantizeddeconv": 113, "successor": [113, 114, 115, 116], "fuseconvrequantizetransform": 114, "requant": [114, 116, 522], "fuse_pattern": 114, "sum_pattern": 114, "fusematmulredundantdequantizetransform": 115, "_quantizedmatmul": [115, 116], "fusematmulrequantizedequantizetransform": 116, "quantizedmatmul": 116, "quantizedmatmulwithbiasanddequant": 116, "fusematmulrequantizetransform": 116, "rtype": [116, 288, 455], "fusematmulrequantizedequantizenewapitransform": 116, "fusematmulrequantizenewapitransform": 116, "newapi": 116, "metainfochangingmemopoptim": 118, "metaop": 118, "posthostconstconvert": 119, "hostconst": 119, "postcseoptim": 120, "share": [120, 156, 500, 501, 524], "quantizev2": [120, 145], "quantizedrnnconvert": 121, "calibration_data": [121, 124], "rnn_detail": 121, "scalepropagationtransform": 122, "direct": [122, 261, 414], "generategraphwithqdqpattern": 124, "op_wise_config": [124, 148, 153], "quantized_nod": 124, "dq": 124, "befor": [124, 139, 200, 211, 227, 228, 229, 232, 254, 261, 263, 264, 265, 293, 350, 489, 491, 492, 493, 495, 497, 500, 501, 502, 512, 515, 518, 521, 522, 524], "mergeduplicatedqdqoptim": 125, "shareqdqforitexypatternoptim": 126, "graphanalyz": 127, "extend_engin": 127, "singleton": [127, 268, 442, 450], "properti": [127, 139, 191, 192, 200, 201, 203, 211, 213, 227, 231, 232, 239, 240, 241, 242, 251, 254, 266, 267, 269, 271, 272, 273, 275, 276, 313, 329, 361, 368, 372, 377, 378, 381, 393, 396, 401, 405, 414, 417, 422, 426, 429, 436, 446, 453, 454, 455, 458, 463, 467, 470, 472, 473, 507, 514], "getter": [127, 200, 227, 232, 251, 254, 266, 267, 273, 276, 394], "_graph": 127, "has_positive_input": 127, "retrun": 127, "neg": 127, "get_graph_input_output": 127, "clearli": 127, "similar": [127, 502, 517, 524, 525], "summarize_graph": 127, "writtern": 127, "googl": [127, 509, 516], "query_fusion_pattern_nod": 127, "aggreg": [127, 455], "_search_pattern": 127, "remove_node_with_single_input_output": 127, "rebuild": 127, "except": [127, 268, 312, 442, 450, 451, 460, 475, 485, 526], "remove_nod": 127, "replace_const_nod": 127, "new_const_nod": 127, "target_nod": 127, "old_constant_node_nam": 127, "replace_al": 127, "outdat": 127, "replace_constant_graph_with_constant_nod": 127, "new_nod": 127, "old_end_node_nam": 127, "replace_single_nod": 127, "old_output_node_nam": 127, "old_output_nam": 127, "old_input_node_nam": 127, "old_input_nam": 127, "bottom": [127, 286, 287, 489], "replace_nod": 127, "old_node_nam": 127, "output_nodes_nam": 127, "node_name_detail": 127, "parent": [127, 258, 263, 265, 522], "add_nod": [127, 378], "start_node_nam": 127, "end_node_nam": 127, "dump_graph": 127, "parse_graph": 127, "graphrewriterhelp": 127, "encapsul": [127, 181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 510], "compare_node_attr": 127, "node_a": 127, "node_b": 127, "compar": [127, 164, 240, 293, 294, 489, 492, 496, 502, 508, 518, 521, 522, 524], "create_nod": [127, 156], "create_constant_nod": [127, 156], "datatyp": [127, 156, 519, 524], "set_attr_dtyp": [127, 156], "set_attr_tensor": [127, 156], "set_attr_type_list": [127, 156], "attr": [127, 156, 162], "set_attr_string_list": [127, 156], "set_attr_str": [127, 156], "set_attr_int_list": 127, "set_attr_int": [127, 156], "set_attr_float": [127, 156], "set_attr_bool": [127, 156], "fakequantizebas": 130, "get_config": [130, 139, 486], "serial": [130, 211, 362, 369, 370, 400, 449, 451, 462, 463, 467, 468, 492], "fakequant": 130, "classmethod": [130, 139, 255, 256, 257, 448, 481, 483, 486], "from_config": [130, 139], "instanti": [130, 513], "per_channel": [130, 501, 524, 525], "num_bit": 130, "channel_axi": [130, 170, 172], "symmetr": [130, 488, 518, 523], "narrow_rang": 130, "quantizeconfig": [132, 133, 139], "There": [132, 240, 267, 489, 495, 501, 505, 508, 509, 525], "add_quantize_recip": 132, "recip": [132, 228, 229, 231, 232, 266, 268, 285, 524], "layer_nam": [132, 261], "some": [132, 181, 200, 211, 232, 262, 286, 289, 296, 460, 489, 498, 506, 508, 512, 515, 518, 519, 522, 524], "conv5_block3_3_conv": 132, "flase": 132, "conv5_block3_3_add": 132, "query_lay": 132, "layer_recip": 132, "remove_lay": 132, "layers_nam": 132, "get_quantize_recip": 132, "is_empti": 132, "clear_quantize_recip": 132, "init_quantize_config": 133, "model_nam": [133, 248, 340, 346, 460], "special": [133, 508, 512], "qat_clone_funct": 133, "leav": 133, "quantizewrapp": [133, 139], "wrapped_lay": 133, "quantizelayeradd": 136, "quantize_layer_bas": [136, 138], "quantizelayerbas": [136, 138], "quantizelayerbatchnorm": 138, "batchnorm": 138, "quantizewrapperbas": 139, "trainabl": 139, "sublay": 139, "trainable_weight": 139, "track": 139, "descent": 139, "non_trainable_weight": 139, "manual": [139, 213, 493], "add_loss": 139, "regular": [139, 233, 262, 515], "eager": [139, 264, 314, 419, 423, 428, 497, 505, 518, 519, 522, 526], "safe": [139, 306, 307, 491], "gradienttap": 139, "input_shap": [139, 215, 393, 396, 405, 493], "tensorshap": 139, "compute_output_shap": 139, "caus": [139, 515], "state": [139, 164, 239, 240, 269, 515], "happen": 139, "later": [139, 312, 502, 522], "output_shap": 139, "query_input_index": 139, "logic": [139, 181, 182, 286, 289, 296, 472, 524, 525], "live": 139, "output_obj": 139, "fusenodestartwithfusedbatchnormv3": [140, 150], "quantize_graph_bas": [140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155], "quantizenodebas": [140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155], "get_longest_fus": [140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155], "apply_the_transform": [140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155], "fusenodestartwithconcatv2": [141, 151], "fusenodestartwithconv2d": [142, 152], "fusenodestartwithdeconv2d": 143, "fusenodestartwithfusedinstancenorm": 144, "fusenodestartwithmatmul": [145, 154], "apply_matmul_biasadd_relu_fus": 145, "match_node_nam": [145, 152], "apply_matmul_biasadd_fus": 145, "apply_batchmatmulv2_fus": 145, "batchmatmul": 145, "batchmatmulv2": 145, "apply_batchmatmulv2_mul_add_fus": 145, "fusenodestartwithpool": [146, 155], "optimizeqdqgraph": 148, "op_wise_sequ": [148, 153], "quantizegraphbas": [148, 149, 153], "remove_dead_nod": 149, "output_nam": [149, 228, 229], "longer": [149, 211, 226, 493, 523], "add_output_graph_nod": 149, "output_nod": [149, 340], "create_nodes_map": 149, "apply_conv_biasadd_relu_fus": 152, "quantizegraphforintel": 153, "quantizegraphhelp": 156, "staticmethod": 156, "get_sorted_graph": 156, "reorder": 156, "easier": [156, 489, 516], "split_shared_input": 156, "in_graph": [156, 162], "ouput": 156, "remove_training_nod": 156, "aren": 156, "uncondition": 156, "copy_attr": 156, "attr_valu": 156, "copi": [156, 262], "unique_node_name_from_input": 156, "ensure_tensor_name_has_port": 156, "biascorrect": 157, "fp32_graph": 157, "weight_empir": 157, "graph_transform_bas": [157, 160, 161], "graphtransformbas": [157, 160, 161], "Will": [157, 183, 184, 187, 473, 495, 505], "task": [157, 211, 218, 240, 493, 495, 505, 508], "w_int8": [157, 172], "w_fp32": [157, 172], "ratio": [157, 172, 223, 226, 261, 263, 264, 265, 493, 515, 523, 526], "equal": [157, 172, 508], "scale_c": [157, 172], "shift": [157, 172, 223, 523], "notic": [157, 172, 191, 232, 507], "empir": [157, 172], "insertlog": 160, "input_pb": [160, 161], "node_name_list": 160, "show_nam": 160, "show_op": 160, "first_n": 160, "summar": [160, 495], "1024": [160, 213], "messag": [160, 460, 472, 477, 524], "dump_fp32": 160, "rerangequantizedconcat": 161, "rerange_quant": 161, "concat": [161, 446], "disable_random": 162, "read_graph": 162, "in_graph_is_binari": 162, "read": [162, 213, 216, 226, 262, 264, 379, 383, 384, 493, 519, 521], "write_graph": 162, "out_graph_def": 162, "out_graph_fil": 162, "write": [162, 187, 220, 221, 222, 236, 312, 497, 503, 521, 522], "is_ckpt_format": 162, "model_path": [162, 379, 394, 399, 460], "is_saved_model_format": 162, "saved_model": [162, 232, 242, 385, 392, 402, 511], "get_tensor_by_nam": 162, "try_cnt": 162, "scope": [162, 200, 232], "tensor_nam": [162, 276], "suffix": 162, "iterator_sess_run": 162, "sess": 162, "iter_op": 162, "feed_dict": [162, 210], "output_tensor": [162, 273], "makeiter": 162, "strip_unused_nod": 162, "strip_unused_lib": 162, "r1": 162, "15": [162, 247, 501, 502, 526], "branch": 162, "strip_equivalent_nod": 162, "get_tensor_val_from_graph_nod": 162, "tensor_v": 162, "hessiantrac": 164, "yao": 164, "zhewei": 164, "et": 164, "al": 164, "pyhessian": 164, "2020": [164, 507], "ieee": [164, 509], "confer": 164, "big": 164, "dong": 164, "zhen": 164, "hawq": [164, 291], "system": [164, 191, 312, 449, 475, 476, 515], "33": [164, 245, 526], "18518": 164, "18529": 164, "openvinotoolkit": 164, "nncf": 164, "mse_metric_gap": [164, 293, 364], "fp32_tensor": [164, 293, 364], "dequantize_tensor": [164, 293, 364], "euclidean": [164, 293, 364, 495], "distanc": [164, 293, 294, 364, 495], "get_act_gap": 164, "gap": [164, 510], "get_avg_trac": 164, "num_sampl": [164, 240], "compare_weight": 164, "float_dict": 164, "quantized_dict": 164, "being": [164, 236, 248, 267, 306, 307, 381], "usag": [164, 210, 232, 236, 242, 267, 460, 489, 493, 497, 499, 502, 508, 511, 512, 517, 523], "wt_compare_dict": 164, "float_model": 164, "qmodel": 164, "compute_error": 164, "weight_dict": 164, "get_embedding_contigu": 168, "embed": 168, "contigu": [168, 515], "append_attr": 168, "fx_model": 168, "get_mse_order_per_fp32": 168, "example_inp": 168, "influenc": 168, "fallback_ord": 168, "algorithm_registri": [169, 171], "algorithm_typ": [169, 171], "registr": [169, 171, 187, 197, 213, 217, 220, 221, 222, 224, 226, 257], "algorithmschedul": [169, 171], "fastbiascorrect": 170, "weightcorrect": 172, "ep": 172, "1e": [172, 525], "05": [172, 236, 240, 454, 502, 508, 526], "benchmark_conf": [173, 174, 268], "prefer": [173, 231, 232, 266, 268, 285], "b_dataload": [173, 191, 232, 490, 511], "b_func": [173, 191, 232], "benchmarkconfig": 173, "cfg_fname": 174, "parser": [174, 268, 324, 442, 446, 450, 479], "quantization_conf": [174, 268, 285], "dotdict": 174, "pruning_conf": [174, 268, 284], "graph_optimization_conf": [174, 231, 232, 502], "mixedprecision_conf": 174, "distillation_conf": [174, 227, 232], "defaultconf": 174, "notat": [174, 175], "deep_get": 175, "dot": [175, 460, 509, 518], "nest": 175, "eg": [175, 187, 213, 217, 222, 493, 517], "john": 175, "deep_set": 175, "male": 175, "distillationconfig": [178, 268], "teacher_model": [178, 192, 227, 232, 268, 495], "learning_r": [178, 268, 517, 525], "altern": [178, 268], "sigopttunestrategi": 181, "q_dataload": [181, 182, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 503, 524], "eval_func": [181, 182, 200, 231, 232, 242, 267, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 490, 492, 493, 497, 509, 518, 524, 525], "q_hook": [181, 182, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "tunestrategi": [181, 182, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 524], "hpo": 181, "mandatori": [181, 182, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 498, 525], "reserv": [181, 182, 200, 232, 267, 287, 288, 289, 290, 291, 293, 294, 295, 296], "tuner": [181, 182, 231, 232, 266, 268, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "scalar": [181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 306, 307, 508, 509, 518], "pseudo": [181, 182, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 522], "next_tune_cfg": [181, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 524], "travers": [181, 182, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 524], "concret": [181, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296], "overrid": [181, 200, 232, 266, 286, 289, 296, 312, 451], "constraint": [181, 231, 232, 266, 268, 285, 492, 521, 524, 525], "tpetunestrategi": 182, "stop": [182, 289, 296, 430, 454, 498, 524, 525], "trials_count": [182, 289, 296], "reach": [182, 261, 265, 289, 296, 491, 515, 524], "entranc": [183, 184, 187], "dispatch": [183, 184, 187, 505], "tensorflowimagenetdataset": 185, "iterabledataset": [185, 187, 209, 212, 213, 215, 217, 222], "onnxrtimagenetdataset": 185, "root": [185, 211, 212, 213, 240, 246, 271, 272, 273, 275, 276, 302, 477, 490, 492, 493, 497, 508, 524, 525], "subset": [185, 213, 493], "num_cor": [185, 211, 212, 493], "28": [185, 211, 212, 493, 502, 526], "tensorflow_itex": [187, 213, 216, 217, 218, 220, 221, 222, 517], "onnxrt_qdq": [187, 213, 217, 220, 221, 222, 517], "onnxrt_qlinearop": [187, 213, 217, 220, 221, 222, 226, 517], "onnxrt_integerop": [187, 213, 217, 220, 221, 222, 226, 498, 517], "pytorch_ipex": [187, 213, 217, 220, 221, 222, 517, 525], "onnxrt_qoper": [187, 213, 217, 220, 221, 222, 517], "overwrit": [187, 213, 217, 222], "__getitem__": [187, 209, 213, 217, 222, 224, 226, 490, 492, 493], "__len__": [187, 209, 213, 217, 222, 492, 493], "__iter__": [187, 209, 213, 217, 222, 490, 492], "inter": [187, 209, 213, 217, 222], "dataset_registri": [187, 213, 217, 222], "dataset_typ": [187, 213, 217, 222, 231, 232, 242, 266, 333], "dataset_format": [187, 213, 217, 222], "data_format": [187, 189, 213, 217, 222], "raw_imag": [187, 213, 217, 222], "tfrecord": [187, 211, 212, 213, 217, 222, 493], "transform_cl": [187, 222, 224, 226], "basetransform": [187, 188, 189, 222, 223, 224, 226], "transform_registri": [187, 222, 224, 226], "transform_typ": [187, 222, 224, 226], "__call__": [187, 220, 221, 222, 492], "filter_registri": [187, 220, 221, 222], "filter_typ": [187, 220, 221, 222], "parsedecodecocotransform": 188, "parsedecodeimagenettransform": 189, "tensorflowresizecropimagenettransform": 189, "height": [189, 226, 248, 261, 497, 515, 523, 525], "random_crop": [189, 523], "resize_sid": [189, 523], "resize_method": 189, "bilinear": [189, 226, 523], "random_flip_left_right": [189, 523], "mean_valu": [189, 523], "channels_last": 189, "subpixel": 189, "rgb": 189, "applic": [189, 445, 473, 475, 477, 489, 516, 522, 523], "crop": [189, 226, 493, 523], "desir": [189, 223, 226, 523], "resiz": [189, 211, 212, 226, 490, 492, 493, 523, 524], "flip": [189, 226, 523], "left": [189, 226, 489, 523], "std": [189, 226, 248, 490, 492, 523], "bilinearimagenettransform": 189, "central_fract": [189, 523], "875": [189, 523], "fraction": [189, 523], "onnxbilinearimagenettransform": 189, "onnxresizecropimagenettransform": 189, "std_valu": 189, "229": [189, 490, 492], "225": [189, 490, 492], "resizewithaspectratio": 189, "87": [189, 526], "inter_pol": 189, "cv2": 189, "inter_area": 189, "set_env_var": 191, "env_var": 191, "overwrite_exist": 191, "env": [191, 446, 454], "set_all_env_var": 191, "core": [191, 232, 247, 330, 489, 507, 514, 526], "get_architectur": 191, "get_threads_per_cor": 191, "thread": [191, 476, 489, 492, 514], "get_thread": 191, "get_physical_id": 191, "socket": [191, 449, 477, 514, 526], "get_core_id": 191, "get_bounded_thread": 191, "core_id": 191, "bind": 191, "command": [191, 232, 330, 341, 344, 350, 356, 358, 359, 426, 446, 454, 473, 489, 497, 502], "possibl": [191, 232, 245, 328, 393, 489, 498, 502, 513, 519, 524], "unnecessari": [191, 232], "Not": [191, 200, 232, 254, 445], "summary_benchmark": [191, 232], "config_inst": [191, 232], "trigger": [191, 232, 263, 502], "generate_prefix": [191, 232], "core_list": [191, 232], "numactl": [191, 232], "run_inst": [191, 232], "critet": 192, "tensorflowcrossentropyloss": 192, "pytorchcrossentropyloss": 192, "tensorflowknowledgedistillationloss": 192, "pytorchknowledgedistillationloss": [192, 495], "pytorchintermediatelayersknowledgedistillationloss": 192, "tensorflowcriterion": 192, "pytorchcriterion": 192, "criterion_cl": 192, "criterion_registri": 192, "criterion_typ": 192, "registry_criterion": 192, "param_dict": [192, 197, 245], "crossentropyloss": 192, "tensorflowsparsecategoricalcrossentropi": 192, "sparsecategoricalcrossentropyloss": 192, "knowledgedistillationframework": 192, "student_model": [192, 227, 232, 495], "knowledgedistillationloss": [192, 525], "temperatur": [192, 525], "loss_typ": [192, 525], "ce": [192, 525], "loss_weight": [192, 525], "teacher_model_forward": 192, "notimplementederror": [192, 239, 240, 269], "teacher_student_loss_c": 192, "student_output": [192, 200, 232, 495], "teacher_output": [192, 200, 227, 232], "student_targets_loss_c": 192, "groud": 192, "truth": [192, 237, 238], "loss_cal": 192, "loss_cal_sloss": 192, "student_loss": [192, 200, 232, 495], "softcrossentropi": 192, "logit": [192, 495], "ground": [192, 237, 238], "kullbackleiblerdiverg": 192, "pytorchknowledgedistillationlosswrapp": 192, "tensorflowknowledgedistillationlosswrapp": 192, "tensorflowknowledgedistillationlossextern": 192, "intermediatelayersknowledgedistillationloss": 192, "layer_map": 192, "add_origin_loss": 192, "init_loss_func": 192, "init_feature_match": 192, "student_featur": 192, "teacher_featur": 192, "matcher": 192, "clear_featur": 192, "clean": [192, 225, 330, 341, 344, 350, 351, 356, 358, 359, 360, 444, 459, 491], "register_hooks_for_model": 192, "attributeerror": 192, "remove_all_hook": 192, "pytorch_linear_feature_match": 192, "pytorchintermediatelayersknowledgedistillationlosswrapp": 192, "selfknowledgedistillationloss": 192, "selfknowledg": 192, "pytorchselfknowledgedistillationloss": 192, "l2diverg": 192, "feature1": 192, "feature2": 192, "pytorchselfknowledgedistillationlosswrapp": 192, "collate_fn": [193, 194, 201, 203, 204, 206, 207, 208, 210, 493], "last_batch": [193, 194, 201, 203, 206, 207, 208, 210], "rollov": [193, 194, 201, 203, 206, 207, 208, 210], "sampler": [193, 194, 201, 203, 205, 206, 207, 208, 210, 222, 232, 497], "batch_sampl": [193, 194, 201, 203, 206, 207, 208, 210], "num_work": [193, 194, 201, 203, 206, 207, 208, 210, 518], "pin_memori": [193, 194, 201, 203, 206, 207, 208, 210], "shuffl": [193, 194, 201, 203, 206, 207, 208, 210, 492, 518], "torch_util": [194, 232, 268], "postprocess_cl": [194, 198, 490], "user_postprocess": [194, 198], "metric_cl": [194, 195, 239, 240, 269, 490], "user_metr": [194, 195], "alwai": [194, 195, 236, 490, 508, 515], "tensorflowoptim": 197, "pytorchoptim": 197, "optimizer_cl": 197, "optimizer_registri": 197, "optimizer_typ": 197, "cross": [197, 239, 240, 269, 503, 524], "tensorflowsgd": 197, "tensorflowadamw": 197, "tensorflow_addon": 197, "adamw": 197, "tensorflowadam": 197, "adam": [197, 525], "pytorchsgd": 197, "util": [199, 228, 232, 234, 262, 268, 317, 318, 319, 321, 323, 326, 330, 341, 344, 350, 351, 356, 358, 359, 361, 369, 370, 375, 377, 378, 381, 385, 391, 392, 400, 402, 426, 429, 433, 438, 442, 474, 497, 515, 518], "record_output": 199, "output_process": 199, "get_activ": 199, "mainli": [200, 232, 265, 518], "train_func": [200, 232, 267, 495, 497, 515], "train_dataload": [200, 232, 495, 515], "pre_process": [200, 227, 232, 243, 250, 254, 266, 497], "post_process": [200, 232], "on_train_begin": [200, 232, 254, 263, 264, 302, 495], "Be": [200, 232, 236], "on_train_end": [200, 232, 254, 263, 264, 302], "pre_epoch_begin": [200, 232, 254], "post_epoch_end": [200, 232, 254], "on_epoch_begin": [200, 232, 254, 263, 264, 268, 284, 302, 305, 515], "on_step_begin": [200, 232, 254, 263, 264, 268, 284, 305, 515], "batch_id": [200, 232, 268, 284], "on_batch_begin": [200, 232, 254], "on_after_compute_loss": [200, 232, 254, 302, 495], "on_before_optimizer_step": [200, 232, 263, 264, 302, 515], "on_post_grad": [200, 232], "on_step_end": [200, 232, 254, 263, 264, 268, 284, 302, 305, 515], "on_batch_end": [200, 232, 254], "on_epoch_end": [200, 232, 254, 263, 264, 268, 284, 302, 305, 495, 515], "register_hook": [200, 232], "input_arg": [200, 232], "input_kwarg": [200, 232], "basedatalod": 201, "basedataload": [201, 203, 206, 207, 208, 210], "_generate_dataload": 201, "drop": [201, 236, 262, 509, 515, 526], "incomplet": 201, "discard": 201, "default_col": 203, "merg": [203, 522, 524], "outer": 203, "defaultdataload": [203, 207, 210], "base_dataload": [203, 205, 206, 207, 208, 210, 222, 232], "drop_last": [204, 209], "iterablefetch": 204, "indexfetch": 204, "singl": [204, 211, 225, 226, 236, 245, 247, 263, 265, 288, 346, 362, 381, 446, 479, 493, 515], "indic": [204, 209, 211, 227, 232, 236, 252, 253, 489, 490, 500, 522], "default_dataload": [205, 207, 210, 222, 232], "fetcher": [205, 222, 232], "mxnet_dataload": [205, 222, 232], "onnxrt_dataload": [205, 222, 232], "pytorch_dataload": [205, 222, 232], "tensorflow_dataload": [205, 222, 232, 439], "mxnetdataload": 206, "onnxrtbertdataload": 207, "bert": [207, 210, 211, 226, 493, 495, 498, 508, 515, 523, 526], "varient": 207, "onnxrtdataload": 207, "pytorchdataload": 208, "data_sourc": 209, "matter": [209, 519], "iterablesampl": 209, "squential": 209, "indexdataset": 209, "retriev": [209, 455], "sequentialsampl": 209, "batchsampl": 209, "tfdatadataload": 210, "tensorflow1": 210, "coupl": 210, "satisfi": [210, 506], "tf1": [210, 510], "although": [210, 521], "tensorflowbertdataload": 210, "tensorflowmodelzoobertdataload": 210, "zoo": [210, 226, 526], "tensorflowdataload": [210, 439], "directli": [210, 236, 240, 262, 508, 517, 518, 522], "pytorchbertdataset": 211, "model_typ": [211, 364, 394, 493], "tensordataset": [211, 493], "link": [211, 489, 493, 526], "huggingfac": [211, 493], "easi": [211, 232, 266, 489, 492, 516, 518, 521], "squad": [211, 226, 237, 238, 240, 493, 508, 523, 526], "xlnet": [211, 493], "xlm": [211, 493, 526], "101": [211, 240, 508, 526], "2043": 211, "2001": 211, "onnxrtbertdataset": 211, "data_dir": [211, 493], "model_name_or_path": [211, 493], "max_seq_length": [211, 226, 493, 523], "128": [211, 214, 215, 226, 493, 518, 523, 526], "do_lower_cas": [211, 225, 226, 493, 523], "mrpc": [211, 240, 493, 508, 526], "dynamic_length": [211, 493], "shortcut": [211, 493], "truncat": [211, 226, 493, 523], "shorter": [211, 226, 493, 523], "lowercas": [211, 493], "qqp": [211, 493, 508, 526], "qnli": [211, 493, 508, 526], "rte": [211, 493, 508, 526], "st": [211, 493, 508], "cola": [211, 493, 508, 526], "mnli": [211, 493, 508, 526], "wnli": [211, 493, 508, 526], "mobilebert": [211, 493, 495, 526], "roberta": [211, 493, 526], "fix": [211, 263, 491, 493, 524], "uncas": [211, 226, 493, 523, 526], "load_and_cache_exampl": 211, "convert_examples_to_featur": [211, 226], "max_length": 211, "label_list": [211, 240], "output_mod": 211, "pad_token": 211, "pad_token_segment_id": 211, "mask_padding_with_zero": 211, "inputfeatur": [211, 226], "input_id": [211, 226, 495, 515], "vocabulari": [211, 225, 226, 523], "attention_mask": [211, 515], "mask": [211, 236, 258, 261, 263, 265, 276, 515, 526], "NOT": [211, 501], "token_type_id": [211, 515], "segment": [211, 234, 236], "portion": 211, "problem": [211, 240, 247, 508, 509, 524], "regress": [211, 491], "seq_length": 211, "to_json_str": 211, "json": [211, 212, 226, 322, 434, 436, 444, 451, 460, 493, 510, 523], "tensorflowbertdataset": 211, "label_fil": [211, 226, 493, 523], "parsedecodebert": 211, "tensorflowmodelzoobertdataset": [211, 212], "coco": [212, 219, 236, 240, 508], "parsedecodecoco": 212, "cocorecorddataset": 212, "directori": [212, 213, 273, 311, 312, 373, 426, 444, 460, 473, 493, 497, 500, 522], "interleav": [212, 493], "parallel": [212, 493, 515], "cocoraw": [212, 493], "img_dir": [212, 493], "val2017": [212, 493], "anno_dir": [212, 493], "annot": [212, 236, 493, 508], "instances_val2017": [212, 493], "arrang": [212, 213, 216, 493, 515], "jpg": [212, 216, 218, 493], "coconpi": [212, 493], "npy_dir": [212, 493], "npy": [212, 493], "tensorflowdataset": 213, "pytorchdataset": 213, "mxnetdataset": 213, "onnxrtqldataset": 213, "onnxrtitdataset": 213, "IT": [213, 220], "pytorchmxnetwrapdataset": 213, "datafunc": 213, "pytorchmxnetwrapfunct": [213, 226], "framework_dataset": 213, "convent": [213, 236, 495], "imageclassifi": 213, "choos": [213, 489, 505, 520, 524, 525], "download_url": 213, "filenam": [213, 246, 312, 313, 410, 426, 430, 436, 446, 454, 493], "md5": 213, "download": [213, 385, 408, 409, 411, 412, 442, 489, 493, 502, 506, 520], "gen_bar_updat": 213, "progress": [213, 265], "bar": [213, 489], "check_integr": 213, "fpath": 213, "checksum": 213, "calculate_md5": 213, "chunk_siz": 213, "cifar10": [213, 493], "cifar100": [213, 493], "toronto": [213, 493], "edu": [213, 493], "kriz": [213, 493], "cifar": [213, 493, 526], "tar": [213, 493], "gz": [213, 493], "internet": [213, 489, 493], "put": [213, 493, 495, 515], "again": [213, 493, 502, 519, 524], "load_meta": 213, "meta": 213, "pytorchcifar10": 213, "mxnetcifar10": 213, "tensorflowcifar10": 213, "pytorchcifar100": 213, "mxnetcifar100": 213, "tensorflowcifar100": 213, "mnist": [213, 493, 497], "institut": 213, "standard": [213, 226, 508, 523, 524], "fashionmnist": [213, 493], "npz": [213, 493], "idx1": [213, 493], "ubyt": [213, 493], "idx3": [213, 493], "t10k": [213, 493], "class_to_idx": 213, "read_data": 213, "pytorchmnist": 213, "mxnetmnist": 213, "tensorflowmnist": 213, "pytorchfashionmnist": 213, "mxnetfashionmnist": 213, "tensorflowfashionmnist": 213, "imagefold": [213, 490, 492, 493, 497], "subfold": 213, "belong": [213, 229, 273, 518], "class_1": [213, 493], "xxx": [213, 493, 495], "png": [213, 493], "xxy": [213, 493], "xxz": [213, 493], "class_n": [213, 493], "123": [213, 493, 523], "nsdf3": [213, 493], "asd932_": [213, 493], "mxnetimagefold": 213, "tensorflowimagefold": 213, "tensorflowtfrecorddataset": 213, "tensorflowimagerecord": 213, "000": [213, 493], "001": [213, 493, 497, 525], "099": [213, 493], "tensorflowvocrecord": 213, "pascal": 213, "voc": [213, 240], "2012": 213, "00000": 213, "00004": 213, "00001": 213, "00003": 213, "dummydataset": [214, 215], "127": [214, 215, 493, 518, 526], "stand_norm": [214, 215, 493], "dummy_v2": [215, 493], "sparse_dummy_v2": [215, 493], "label_shap": [215, 493], "sparsedummydataset": 215, "dense_shap": [215, 493], "sparse_ratio": [215, 493], "imagenetraw": [216, 493], "data_path": [216, 493], "image_list": [216, 493], "img1": [216, 493], "img2": [216, 493], "imgx": [216, 493], "val_map": [216, 493], "pytorchimagenetraw": 216, "mxnetimagenetraw": 216, "tensorflowimagenetraw": 216, "inteltensorflow": [216, 218], "bert_dataset": [217, 222, 232], "coco_dataset": [217, 222, 232], "dummy_dataset": [217, 222, 232], "dummy_dataset_v2": [217, 222, 232], "imagenet_dataset": [217, 222, 232], "style_transfer_dataset": [217, 222, 232], "transfer": [218, 227, 232, 493, 495, 496], "styletransferdataset": 218, "content_fold": [218, 493], "style_fold": [218, 493], "crop_ratio": [218, 493], "resize_shap": [218, 493], "image_format": [218, 493], "holder": [218, 493], "labelbalancecocorecordfilt": 219, "balanc": [219, 514], "labelbalancecocorawfilt": 219, "tensorflowfilt": 220, "onnxrtqlfilt": 220, "onnxrtitfilt": 220, "pytorchfilt": 220, "mxnetfilt": 220, "coco_filt": [221, 222, 232], "imagenet_transform": [222, 224, 232], "quantizedinput": [223, 523], "labelshift": [223, 523], "label_shift": [223, 523], "parsedecodeimagenet": [223, 523], "proto": [223, 226, 523], "convert_to_unicod": 225, "unicod": [225, 233], "utf": 225, "load_vocab": 225, "vocab_fil": [225, 226, 523], "convert_by_vocab": 225, "vocab": 225, "whitespace_token": 225, "whitespac": [225, 238], "fulltoken": 225, "tokenzi": 225, "convert_tokens_to_id": 225, "convert_ids_to_token": 225, "basictoken": 225, "punctuat": [225, 233, 238], "wordpiecetoken": 225, "unk_token": 225, "unk": 225, "max_input_chars_per_word": 225, "wordpiec": [225, 226, 523], "greedi": 225, "longest": [225, 226, 523], "unaff": 225, "un": 225, "aff": 225, "concat_gener": 226, "tensorflowtransform": 226, "mxnettransform": 226, "pytorchtransform": 226, "onnxrtqltransform": 226, "onnxrtittransform": 226, "tensorflowwrapfunct": 226, "transform_func": 226, "pytorchmxnettransform": 226, "get_torchvision_map": 226, "interpol": [226, 508, 523], "torchvis": [226, 248], "composetransform": 226, "transform_list": [226, 523], "croptoboundingbox": [226, 523], "offset_height": [226, 523], "offset_width": [226, 523], "target_height": [226, 523], "target_width": [226, 523], "vertic": [226, 261, 523], "coordin": [226, 288, 523], "horizont": [226, 523], "mxnetcroptoboundingbox": 226, "onnxrtcroptoboundingbox": 226, "tensorflowcroptoboundingbox": 226, "resizewithratio": [226, 523], "min_dim": [226, 523], "800": [226, 523], "max_dim": [226, 523], "1365": [226, 523], "constant_valu": 226, "aspect": [226, 523], "side": [226, 489, 493, 523], "exce": [226, 523], "tensorflowresizewithratio": 226, "transpos": [226, 261, 523], "perm": [226, 523], "permut": [226, 523], "tensorflowtranspos": 226, "mxnettranspos": 226, "pytorchtranspos": 226, "randomverticalflip": [226, 523], "tensorflowrandomverticalflip": 226, "randomhorizontalflip": [226, 492, 523], "tensorflowrandomhorizontalflip": 226, "toarrai": [226, 523], "pil": [226, 523], "casttftransform": 226, "castonnxtransform": 226, "castpytorchtransform": 226, "centercroptftransform": 226, "paddedcentercroptransform": 226, "crop_pad": 226, "resizetftransform": 226, "nearest": [226, 523], "bicub": [226, 523], "resizepytorchtransform": 226, "randomcroptftransform": 226, "locat": [226, 490, 497, 518, 520, 523, 524, 525], "randomresizedcroppytorchtransform": 226, "randomresizedcropmxnettransform": 226, "randomresizedcroptftransform": 226, "get_param": 226, "pramet": 226, "normalizetftransform": 226, "rescal": [226, 523], "deviat": [226, 523], "broadcast": [226, 497, 523], "rescalekeraspretraintransform": 226, "rescaletftransform": 226, "rescaletransform": 226, "alignimagechanneltransform": 226, "dim": [226, 257, 288, 523], "w": [226, 248, 515, 523], "pytorchalignimagechannel": 226, "tondarraytransform": 226, "resizemxnettransform": 226, "resizetransform": 226, "cropresizetftransform": 226, "y": [226, 288, 523], "boundari": [226, 362, 523], "area": [226, 236, 508, 523], "pytorchcropresizetransform": 226, "mxnetcropresizetransform": 226, "cropresizetransform": 226, "centercroptransform": 226, "mxnetnormalizetransform": 226, "pytorchnormalizetransform": 226, "normalizetransform": 226, "randomcroptransform": 226, "randomresizedcroptransform": 226, "get_final_text": 226, "pred_text": 226, "orig_text": 226, "squadexampl": 226, "qas_id": 226, "question_text": 226, "doc_token": 226, "orig_answer_text": 226, "start_posit": 226, "end_posit": 226, "is_imposs": 226, "unique_id": 226, "example_index": 226, "doc_span_index": 226, "token_to_orig_map": 226, "token_is_max_context": 226, "input_mask": [226, 495], "segment_id": [226, 495], "read_squad_exampl": 226, "input_fil": 226, "doc_strid": [226, 523], "max_query_length": [226, 523], "output_fn": 226, "inputbatch": 226, "collecttransform": 226, "10833": 226, "tfsquadv1posttransform": 226, "n_best_siz": [226, 523], "384": [226, 523], "max_answer_length": [226, 523], "total": [226, 240, 263, 265, 273, 276, 277, 493, 523], "nbest_predict": [226, 523], "long": [226, 500, 523, 524], "document": [226, 488, 497, 498, 509, 520, 523], "chunk": [226, 523], "much": [226, 227, 232, 495, 498, 502, 515, 523], "process_result": 226, "get_postprocess_result": 226, "tfmodelzoocollecttransform": 226, "tfsquadv1modelzooposttransform": 226, "squadv1": [226, 523], "parsedecodevoctransform": 226, "_epoch_ran": [227, 232], "ran": [227, 232], "eval_frequ": [227, 232], "frequenc": [227, 232, 263, 514, 525], "term": [227, 232, 495, 507, 508, 512, 513, 524], "best_scor": [227, 232], "best_model": [227, 232], "train_cfg": [227, 232, 305], "evaluation_distribut": [227, 232, 254], "train_distribut": [227, 232, 254], "on_post_forward": [227, 232], "init_train_cfg": [227, 232], "create_criterion": [227, 232], "create_optim": [227, 232], "disil": [227, 232], "generate_hook": [227, 232, 254], "torch2onnx": [228, 232, 268], "torch_to_fp32_onnx": [228, 229], "opset_vers": [228, 229], "dynamic_ax": [228, 229], "input_nam": [228, 229, 276], "do_constant_fold": [228, 229], "verbos": [228, 229, 245, 246, 247], "opset": [228, 229], "ax": [228, 229], "torch_to_int8_onnx": [228, 229], "quant_format": [228, 229], "u8s8": [228, 229], "qdq_op_fp32_bia": [228, 229], "optionl": [228, 229], "qdq_op_int32_bia": [228, 229], "qdq_op_fp32_bias_qdq": [228, 229], "update_weight_bia": 229, "fp32_onnx_path": [229, 230], "wegiht": 229, "set_data_typ": 229, "weight_typ": 229, "activation_typ": 229, "get_node_map": 229, "module_node_map": 229, "get_quantizable_onnx_op": 229, "quantize_nod": 229, "build_scale_map": 229, "int8_scale_info": 229, "scale_zp_dict": 229, "set_scale_info": 229, "int8_onnx_model": 229, "int8_onnx_path": 229, "recalculate_bia": 229, "recalcul": 229, "remove_nodes_by_nam": 229, "sub_graph_with_int32_bia": 229, "a_info": 229, "b_info": 229, "bias_nam": 229, "nodeproto": 229, "_type_": 229, "qdq_fp32_bia": 229, "excut": 229, "qdq_int32_bia": 229, "qdq_fp32_bias_qdq": 229, "onnx2numpy_dtyp": 230, "onnx_node_typ": 230, "dummydataread": 230, "ortq": 230, "dataread": 230, "get_next": 230, "variou": [231, 232, 241, 266, 268, 285, 505, 517], "bring": [231, 232, 266, 268, 285, 491, 518], "vari": [231, 232, 254, 266, 268, 284, 285, 514, 526], "roc": [231, 232, 240, 254, 266, 268, 284, 285], "footprint": [231, 232, 254, 266, 268, 277, 284, 285, 496, 512, 515, 517, 524], "flexibl": [231, 232, 254, 266, 268, 284, 285, 490, 495, 515], "set_config_by_model": [231, 232, 241], "model_obj": [231, 232, 241], "export": [232, 236, 268, 271, 272, 276, 302, 460, 522], "bleu": [232, 234, 239, 268, 508], "bleu_util": [232, 239, 268], "coco_label_map": [232, 239, 268], "coco_tool": [232, 239, 268], "evaluate_squad": [232, 239, 268], "dynast": [232, 250, 268], "dynas_manag": [232, 248, 249, 250], "dynas_predictor": [232, 248, 249, 250], "dynas_search": [232, 249, 250], "dynas_util": [232, 247, 249, 250], "nas_util": [232, 250, 268], "pruning_recip": [232, 268], "tile_pattern": [232, 255, 256], "pytorch_prun": [232, 268], "logger": [232, 259, 268, 303, 306, 442, 446, 450], "prune_util": [232, 259, 268], "pruner": [232, 254, 259, 261, 264, 268, 471, 525], "graph_optim": [232, 241, 268, 319, 385, 420, 424, 425, 442, 450, 465, 502], "mixed_precis": [232, 268, 321, 385, 420, 442, 450, 465], "model_convers": [232, 268], "quantconf": [232, 266, 285], "qfunc": [232, 266], "routinu": [232, 266], "pruningconf": [232, 254], "pruning_func": [232, 254, 515], "generate_prun": [232, 254], "dens": [232, 254, 265, 515, 526], "spars": [232, 254, 263, 493, 515, 516], "graphoptim": [232, 241, 319, 417, 464], "unicoderegex": 233, "hoc": 233, "hack": 233, "recogn": 233, "nondigit_punct_r": 233, "compil": [233, 514], "preced": 233, "punct_nondigit_r": 233, "symbol_r": 233, "property_char": 233, "join": 233, "bleu_token": 233, "mose": 233, "smt": 233, "mosesdecod": 233, "mteval": 233, "v14": 233, "pl": 233, "l954": 233, "l983": 233, "tensor2tensor": 234, "bleu_hook": 234, "compute_bleu": 234, "reference_corpu": 234, "translation_corpu": 234, "max_ord": 234, "use_bp": 234, "against": 234, "gram": 234, "flag": [234, 302, 470], "third": [236, 492, 524], "parti": [236, 518], "pycocotool": [236, 500, 506], "object_detect": 236, "noth": [236, 454], "jonathanhuang": 236, "image_id": [236, 508], "encod": [236, 245, 523], "groundtruth": 236, "invok": 236, "groundtruth_dict": 236, "exportgroundtruthtococo": 236, "groundtruth_boxes_list": 236, "groundtruth_classes_list": 236, "max_num_class": 236, "output_path": [236, 275, 454, 509], "detections_list": 236, "exportdetectionstococo": 236, "detection_boxes_list": 236, "detection_scores_list": 236, "detection_classes_list": 236, "cocowrapp": 236, "loadannot": 236, "cocoevalwrapp": 236, "agnostic_mod": 236, "computemetr": 236, "detection_typ": 236, "hold": [236, 288, 492], "datastructur": 236, "mscoco": 236, "replic": 236, "extern": [236, 275, 489], "category_id": 236, "iou_typ": 236, "iou_thr": [236, 240, 508], "map_point": [236, 240, 508], "cocoev": 236, "getcategori": 236, "getagnosticmod": 236, "agnost": [236, 495], "getcategoryidlist": 236, "accumul": 236, "include_metrics_per_categori": 236, "all_metrics_per_categori": 236, "summeri": 236, "per_category_ap": 236, "care": 236, "pollut": 236, "mldash": 236, "summary_metr": 236, "iou": [236, 240], "increment": [236, 286, 287, 524], "50iou": 236, "75iou": 236, "75": [236, 526], "pixel": [236, 523], "medium": 236, "larg": [236, 492, 495, 524, 526], "10000": [236, 288], "recal": [236, 238, 240], "bycategori": 236, "supercategori": 236, "performancebycategori": 236, "category_stat": 236, "exportsingleimagegroundtruthtococo": 236, "next_annotation_id": 236, "category_id_set": 236, "groundtruth_box": 236, "groundtruth_class": 236, "groundtruth_mask": 236, "groundtruth_is_crowd": 236, "ingest": 236, "ones": 236, "exportsingleimagedetectionstococo": 236, "uniqu": [236, 248, 267, 288, 351, 352, 518], "assign": [236, 312, 350, 351, 356, 357, 358, 359, 489, 497, 509, 517], "num_gt_box": 236, "num_detect": [236, 240, 508, 525], "image_height": 236, "image_width": 236, "detection_mask": 236, "crowd": 236, "insid": [236, 495, 515], "exportsingleimagedetectionboxestococo": 236, "detection_box": [236, 525], "detection_scor": [236, 525], "detection_class": [236, 525], "exporsingleimagedetectionboxestococo": 236, "exportsingleimagedetectionmaskstococo": 236, "allenai": [237, 238], "bi": [237, 238], "att": [237, 238], "f1_score": [237, 238], "ground_truth": [237, 238], "metric_max_over_ground_truth": [237, 238], "metric_fn": [237, 238], "exact_match_scor": 237, "exact": 237, "articl": [237, 238], "paragraph": [237, 238], "qa": [237, 238], "cantain": [237, 238], "normalize_answ": 238, "extra": 238, "newlin": 238, "tab": [238, 353, 356, 362, 476, 522], "harmon": [238, 240], "answer_start": 238, "177": 238, "denver": 238, "bronco": 238, "nfl": 238, "afc": 238, "bowl": 238, "56be4db0acb8001400a502ec": 238, "percentag": [238, 246, 525], "basemetr": [239, 240, 269], "single_output": [239, 240, 269], "hvd": [239, 240, 269, 497], "sample_weight": [239, 240, 269], "metric_registri": [239, 240, 269], "metric_typ": [239, 240, 269], "decorator_metr": [239, 240, 269], "tensorflowmetr": 240, "pytorchmetr": 240, "mxnetmetr": 240, "onnxrtqlmetr": 240, "onnxrtitmetr": 240, "wrappytorchmetr": 240, "wrapmxnetmetr": 240, "wraponnxrtmetr": 240, "proport": 240, "were": 240, "pred_list": 240, "pytorchloss": 240, "least": [240, 264, 455, 515, 524], "mae": [240, 508], "absolut": [240, 246, 454, 498, 508, 514, 515, 518, 524], "magnitud": [240, 505, 515, 526], "rmse": [240, 246, 508, 524], "squar": [240, 246, 508, 524], "tensorflowtopk": 240, "among": 240, "most": [240, 489, 509, 515, 518, 524], "outcom": 240, "num_correct": 240, "generaltopk": 240, "cocomapv2": [240, 508], "anno_path": [240, 508], "map_kei": 240, "detectionboxes_precis": 240, "output_index_map": [240, 508], "tensorflowmap": 240, "tensorflowcocomap": 240, "tensorflowvocmap": 240, "squadf1": [240, 508], "miou": 240, "21": [240, 526], "hist": [240, 306, 307], "onnxrtglu": 240, "dlrm": [240, 526], "conf_fnam": [243, 250], "init_by_cfg": [243, 250], "init_for_search": [244, 250], "init_cfg": [244, 250], "parametermanag": [245, 248], "hot": 245, "pymoo": [245, 247, 248], "process_param_dict": 245, "upper": [245, 247], "vector": [245, 251, 253], "onehot_gener": 245, "in_arrai": 245, "onehot": 245, "unus": 245, "depth": [245, 495, 519], "input_arrai": 245, "elast": 245, "supernetwork": [245, 248], "mapper": [245, 350, 413, 414], "random_sampl": [245, 288], "subnetwork": [245, 248], "trial_limit": 245, "100000": 245, "translate2param": 245, "pymoo_vector": 245, "translate2pymoo": 245, "import_csv": 245, "filepath": 245, "column_nam": 245, "drop_dupl": 245, "panda": 245, "datafram": [245, 273, 276], "purpos": [245, 501, 509, 517, 524], "subnet": [245, 248], "column": [245, 489, 515], "df": [245, 273, 276], "set_se": 245, "create_training_set": 245, "train_with_al": 245, "sklearn": 245, "alpha": 246, "default_alpha": 246, "cost_factor": 246, "default_cost_factor": 246, "max_iter": 246, "default_max_iter": 246, "regressor": 246, "get_paramet": 246, "get_metr": [246, 328], "mape": 246, "kendal": 246, "rank": [246, 497], "correl": 246, "spearman": 246, "searcher": [246, 253], "searchalgomanag": 247, "optuna": 247, "configure_nsga2": 247, "warm_pop": 247, "crossover_prob": 247, "crossover_eta": 247, "mutation_prob": 247, "02": [247, 526], "mutation_eta": 247, "configure_ag": 247, "run_search": 247, "save_histori": 247, "previous": [247, 492], "problemmultiobject": 247, "evaluation_interfac": 247, "evaluationinterfac": [247, 248], "param_count": 247, "param_upperbound": 247, "ofa": [247, 248], "mani": [247, 248, 277, 492, 506, 524, 525], "get_mac": 248, "input_s": 248, "measure_lat": 248, "warmup_step": 248, "measure_step": 248, "resolut": 248, "warm": [248, 277], "runner": 248, "ofarunn": 248, "acc_predictor": 248, "macs_predictor": 248, "latency_predictor": 248, "imagenetpath": 248, "w1": 248, "estimate_accuracy_top1": 248, "subnet_cfg": 248, "estimate_mac": 248, "estimate_lat": 248, "validate_top1": 248, "validate_mac": 248, "flop": 248, "fvcore": 248, "get_subnet": 248, "predictor_mod": 248, "csv_path": 248, "written": 248, "eval_subnet": 248, "clear_csv": 248, "evaluationinterfaceresnet50": 248, "evaluationinterfacemobilenetv3": 248, "get_torchvision_model": 248, "torchvisionrefer": 248, "baselin": [248, 521, 522], "builder": 251, "count_model_paramet": 251, "params_vec2params_dict": [251, 253], "paras_vec": 251, "metrics_convers": 251, "init_search_cfg": 251, "nas_method": 252, "create_search_space_pool": 252, "find_pareto_front": 252, "n_point": 252, "n_metric": 252, "n_pareto_point": 252, "get_feedback": 253, "feedback": 253, "para_vec": 253, "gridsearch": 253, "whole": [253, 475, 489, 498, 518, 526], "exhaust": [253, 517], "randomsearch": 253, "bayesianoptimizationsearch": 253, "indices2params_vec": 253, "tfpruningcallback": 254, "input_model": [254, 510, 522], "callback": [254, 303, 305, 306, 476], "pure": 254, "s_output": 254, "s_loss": 254, "t_output": 254, "support_pattern": [255, 256, 257], "pattern_registri": 257, "pattern_typ": 257, "patternbas": [257, 258], "mask_shap": [257, 258], "is_contigu": 257, "compute_spars": [257, 258], "abs_sum": 257, "abs_max": 257, "tile": 258, "tilepatternbas": 258, "nxm": [258, 261], "matrix": 258, "repeat_mask": 258, "ori_shap": 258, "tilepattern_1x1": 258, "1x1": [258, 495], "unstructur": [258, 505, 515, 526], "tilepattern_2x2": 258, "2x2": 258, "tilepattern_1x16": 258, "1x16": 258, "tilepattern_4x1": 258, "4x1": [258, 526], "tilepattern_1x2": 258, "1x2": 258, "register_pattern": 261, "registri": [261, 263, 265], "get_pattern": 261, "assertionerror": [261, 262, 263], "unit": [261, 453, 460, 491], "is_glob": 261, "contrast": [261, 523], "get_mask": 261, "target_sparsity_ratio": [261, 263], "pre_mask": 261, "max_sparsity_ratio_per_lay": [261, 263, 517], "get_masks_glob": 261, "get_mask_singl": 261, "exact_sparsity_ratio": 261, "obtain": [261, 262, 265, 521, 524], "get_block_size_dict": 261, "get_masks_loc": 261, "get_sparsity_ratio": [261, 264], "calul": 261, "ration": 261, "get_pattern_lock_mask": 261, "lock": [261, 505, 513, 515], "patternnxm": 261, "kept": 261, "block_siz": 261, "block_size_1": 261, "block_size_2": 261, "keep_pre_mask": 261, "unchang": 261, "patternninm": 261, "doc": [261, 508, 515], "md": [261, 497], "check_config": 262, "prune_config": 262, "everyth": 262, "reset_non_value_to_default": 262, "undefin": 262, "process_and_check_config": 262, "obejct": 262, "process_config": 262, "parse_to_prun": 262, "parse_not_to_prun": 262, "register_prun": 263, "get_prun": 263, "module_nam": [263, 265, 312, 460], "cuurent": 263, "current_sparsity_ratio": 263, "global_step": 263, "start_step": [263, 517], "end_step": [263, 517], "update_frequency_on_step": [263, 517], "mask_weight": 263, "formal": 263, "local_step": [263, 264], "judg": 263, "on_after_optimizer_step": [263, 264], "on_before_ev": [263, 264], "on_after_ev": [263, 264], "check_is_pruned_step": 263, "update_scor": 263, "magnitudeprun": 263, "snipprun": 263, "snip": [263, 505, 515, 526], "arxiv": 263, "1810": 263, "02340": 263, "snipmomentumprun": 263, "moreoev": 263, "patternlockprun": 263, "templat": [264, 268, 333, 351, 356, 442, 450, 486, 489, 524], "tree": 264, "nlp": [264, 498, 515, 518], "huggingface_model": 264, "config_file_path": 264, "pruner_info": 264, "update_items_for_all_prun": 264, "howev": [264, 515], "analys": 264, "elementwise_over_matmul_gemm_conv": 264, "elementwise_over_al": 264, "blockwise_over_matmul_gemm_conv": 264, "register_schedul": 265, "get_schedul": 265, "gradual": [265, 515], "update_sparsity_ratio": 265, "aggressive_ratio": 265, "current_prune_step": 265, "total_prune_step": 265, "oneshotschedul": 265, "aggress": 265, "iterativeschedul": 265, "target_ratio": 265, "server": [267, 268, 385, 392, 441, 442, 449, 450, 457, 460, 471, 473, 475, 489], "seper": [267, 293, 294], "opt_model": [267, 513], "fulli": [267, 518, 524], "saniti": 267, "illeg": 267, "sync": 267, "accordingli": [267, 524], "ux": 268, "config_gener": [268, 385, 442], "configuration_wizard": [268, 385, 442], "db_manag": [268, 385, 442, 479], "diagnosi": [268, 353, 356, 362, 385, 442, 470, 476], "file_brows": [268, 385, 442], "jobs_manag": [268, 385, 442], "model_zoo": [268, 385, 442], "names_mapp": [268, 385, 442], "profil": [268, 322, 338, 345, 356, 359, 361, 362, 385, 393, 401, 442, 443, 453, 458, 475, 480], "manage_workspac": [268, 385, 442], "workload": [268, 317, 318, 319, 321, 323, 326, 351, 356, 416, 430, 437, 442, 444, 450, 459, 460, 475, 478, 480, 481, 482, 483, 516], "executor": [268, 315, 442, 450], "expiring_dict": [268, 442, 450], "github_info": [268, 442, 450], "hw_info": [268, 442, 450], "json_seri": [268, 318, 369, 370, 375, 377, 378, 381, 391, 400, 426, 429, 442, 449, 450, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470], "proc": [268, 442, 450], "yaml_util": [268, 442, 450], "web": [268, 441, 442, 489, 522], "servic": [268, 442, 474, 475, 514], "router": [268, 442, 475], "basemodel": [271, 272, 273, 275, 276], "plai": [271, 272, 275, 276, 515, 516], "role": [271, 272, 275, 276, 515], "itself": [271, 272, 273, 275], "node_typ": [271, 272, 273, 275, 276], "conv0": [271, 272, 273, 275, 276, 522], "get_model_typ": [273, 394], "get_model_fwk_nam": 273, "fwk": 273, "validate_graph_nod": 273, "validate_and_inference_input_output": 273, "input_tensor_nam": 273, "output_tensor_nam": 273, "graph_sess": 273, "graph_def_sess": 273, "frozen_pb_sess": 273, "load_saved_model": 273, "saved_model_tag": 273, "serv": [273, 477, 485], "signatur": 273, "tag": [273, 448, 460, 522], "metagraphdef": 273, "input_tensor": [273, 276], "keras_sess": 273, "slim_sess": 273, "checkpoint_sess": 273, "estimator_sess": 273, "input_fn": 273, "saved_model_sess": 273, "base_model": [273, 275, 276], "tensorflowsavedmodelmodel": 273, "report_spars": [273, 276], "total_spars": [273, 276], "tensorflowqatmodel": 273, "tensorflowcheckpointmodel": 273, "onnxmodel": [275, 396], "find_node_by_nam": 275, "new_nodes_list": 275, "find_nodes_by_initi": 275, "get_scale_zero": 275, "save_model_to_fil": 275, "use_external_data_format": 275, "2gb": 275, "pytorchbasemodel": 276, "get_all_weight_nam": 276, "get_weight": 276, "update_weight": 276, "new_tensor": 276, "update_gradi": 276, "grad_nam": 276, "new_grad": 276, "grad": 276, "prune_weights_": 276, "place": [276, 506, 522], "get_input": 276, "get_gradi": 276, "pytorchmodel": 276, "pytorchfxmodel": 276, "pytorchipexmodel": 276, "objective_registri": 277, "sart": 277, "result_list": 277, "models": [277, 512, 517, 524], "pruner_registri": 283, "calib_func": 285, "eval_metr": 285, "hybirdblock": 285, "paramt": 285, "automixedprecisiontunestrategi": 286, "tunabl": [286, 289], "prioriti": [286, 287, 289, 293, 294], "biggest": [286, 287], "impact": [286, 287, 293, 294, 520, 524], "tune_config": [286, 287, 289, 290, 291, 293, 294, 296], "basictunestrategi": 287, "bayesiantunestrategi": 288, "acq_max": 288, "ac": 288, "gp": 288, "y_max": 288, "random_se": [288, 302, 348, 470, 498, 521, 524, 525], "n_warmup": 288, "n_iter": 288, "acquisit": 288, "gaussian": [288, 524], "relev": 288, "acq": 288, "random_st": 288, "randomst": 288, "scipi": 288, "x_max": 288, "targetspac": 288, "pbound": 288, "9527": [288, 498, 521, 524, 525], "keyerror": 288, "amort": 288, "get_target": 288, "num": [288, 312, 508], "_kei": 288, "conservativetunestrategi": 289, "quantifi": 289, "quantifiable_op": 289, "quant_queu": 289, "fp16": [289, 509, 518], "thing": 289, "exhaustivetunestrategi": 290, "hawq_v2tunestrategi": 291, "msetunestrategi": 293, "tuningspac": [293, 294], "mse_impact_lst": 293, "best_qmodel": 293, "_summary_": [293, 302], "current_best_model": 293, "mse_v2tunestrategi": 294, "randomtunestrategi": 295, "strategy_registri": [296, 524], "compressionmanag": 302, "uesd": 302, "deal": 302, "commpon": 302, "prepare_compress": 302, "compression_manag": 302, "train_loop": 302, "path_to_sav": 302, "workspac": [302, 311, 350, 351, 356, 358, 359, 360, 390, 459, 461, 470, 510], "layerhistogramcollector": [303, 306], "layer_tensor": [303, 306], "include_lay": [303, 306], "diverg": [303, 306, 307, 495], "create_eval_func": 305, "postprocess_cfg": 305, "create_train_func": 305, "Their": 305, "kl_diverg": 306, "expand_quantized_bin": [306, 307], "quantized_bin": [306, 307], "reference_bin": [306, 307], "expand": [306, 307], "bin": [306, 307], "safe_entropi": [306, 307], "reference_distr_p": [306, 307], "p_sum": [306, 307], "candidate_distr_q": [306, 307], "q_sum": [306, 307], "entropi": [306, 307, 524], "get_threshold": [306, 307], "hist_edg": [306, 307], "quantized_typ": [306, 307], "num_quantized_bin": [306, 307], "255": [306, 307, 518], "historgram": [306, 307], "number_bin": [306, 307], "checkpoint_dir": 311, "history_cfg": 311, "checkpoint": [311, 510], "best_configur": 311, "best_model_weight": 311, "pt": [311, 510, 516, 519], "histori": [311, 349, 356, 358, 362, 415, 430, 479, 524], "snapshot": [311, 362, 479], "cfg_from_fil": 312, "yaml_fil": [312, 493, 497, 508, 512], "lazyimport": 312, "lazi": 312, "till": [312, 524], "get_siz": [312, 460], "equal_dict": 312, "d2": 312, "compare_kei": 312, "ignore_kei": 312, "ignor": [312, 493], "customized_msg": 312, "elaps": 312, "combine_histogram": 312, "old_hist": 312, "arr": 312, "old": [312, 520], "get_tuning_histori": 312, "tuning_history_path": [312, 430], "load_data_from_pkl": 312, "pkl": 312, "dump_data_to_loc": 312, "project_data": [313, 416, 417, 422, 426, 429, 436], "benchmark_data": 313, "workdir": [313, 426, 436, 442, 446, 450, 457], "config_filenam": [313, 426, 436], "configuration_data": [313, 417, 422, 426, 429], "generate_config": [313, 417, 422, 426, 429, 436], "dataloaderinterfac": [313, 426, 436], "dataloader_data": [313, 324, 351, 356, 426, 436], "parse_arg": [314, 419, 423, 428, 434], "benchmark_mod": [314, 453], "set_eager_execut": [314, 419, 423, 428], "request_id": [315, 415, 430, 431, 446, 454], "asd": [315, 431], "benchmark_id": [315, 330, 331, 341], "benchmark_result_upd": 315, "benchmark_result_update_pytorch_script": 315, "neural_coder_perform": 315, "neural_coder_tim": 315, "pytorch_script_bench_optim": 315, "command_line_of_script": 315, "pytorch_script_bench_original_model": 315, "execute_real_benchmark": 315, "project_detail": [315, 346, 415, 431], "benchmark_detail": 315, "benchmark_model": [316, 385, 442], "execute_benchmark": [316, 385, 442], "benchmarkconfiggener": 317, "configgener": [317, 318, 319, 321, 322, 323], "generate_evaluation_config": [317, 319, 321, 323], "generate_accuracy_config": 317, "generate_performance_config": 317, "workload_directori": 318, "configuration_path": 318, "jsonseri": [318, 369, 370, 375, 377, 378, 381, 391, 400, 426, 429, 449, 451, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470], "get_predefined_config_path": [318, 460], "generate_model_config": 318, "generate_dataloader_config": 318, "graphoptimizationconfiggener": 319, "generate_graph_optimization_config": 319, "benchmark_config_gener": [320, 385, 442], "graph_optimization_config_gener": [320, 385, 442], "mixed_precision_config_gener": [320, 385, 442], "profiling_config_gener": [320, 385, 442], "quantization_config_gener": [320, 385, 442], "mixedprecisionconfiggener": 321, "generate_mixed_precision_config": 321, "profilingconfiggener": 322, "quantizationconfiggener": 323, "generate_tuning_config": 323, "generate_quantization_config": 323, "configurationpars": 324, "input_data": 324, "parse_evaluation_data": 324, "evaluation_data": 324, "parse_transform": 324, "transforms_data": [324, 351, 356], "parse_dataload": 324, "parse_metr": 324, "metric_data": 324, "get_param_typ": 324, "param_group": 324, "parse_valu": 324, "required_typ": 324, "parse_list_valu": 324, "parse_multidim_list": 324, "dimension": 324, "normalize_string_list": 324, "string_list": 324, "bracket": 324, "miss": [324, 518], "get_predefined_configur": 326, "update_config_to_machine_specif": 326, "configuration_pars": [327, 385, 442], "get_boundary_nod": [327, 385, 442], "get_configur": [327, 385, 442], "params_feed": [327, 385, 442], "feeder": 328, "get_framework": [328, 399], "get_domain": 328, "domain": [328, 335, 338, 354, 356, 361, 385, 392, 393, 396, 414, 442, 443, 445, 460, 472, 477, 489, 515, 524], "get_model": [328, 399, 481], "get_dataload": 328, "get_transform": 328, "get_object": 328, "get_strategi": 328, "get_quantization_approach": 328, "get_possible_valu": 328, "bench": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 415, 441], "dbmanag": [329, 361], "database_loc": [329, 361], "log_level": [329, 361, 452], "initialize_databas": [329, 361], "create_sqlalchemy_engin": [329, 361], "create_al": [329, 361], "tabl": [329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 361], "project_id": [330, 333, 340, 341, 344, 346, 351, 355, 356], "model_id": [330, 340, 341, 344], "dataset_id": [330, 333, 341, 344, 351, 355, 356], "warmup_iter": 330, "number_of_inst": 330, "cores_per_inst": [330, 461, 490, 492, 502, 517], "execution_command": [330, 341, 344], "benchark": 330, "delete_benchmark": [330, 350, 356], "benchmark_nam": 330, "update_statu": [330, 341, 344], "execution_statu": [330, 341, 344], "executionstatu": [330, 341, 344, 350, 356, 358, 359, 443, 459], "update_dur": [330, 341, 344], "durat": [330, 341, 344, 350, 356, 358, 359, 446, 512, 521], "update_execution_command": [330, 341, 344, 350, 356, 358, 359], "update_log_path": [330, 341, 344, 356, 359], "update_config_path": [330, 341], "update_dataset": [330, 341, 344], "update_batch_s": [330, 341], "update_mod": 330, "update_cores_per_inst": 330, "update_number_of_inst": 330, "clean_statu": [330, 341, 344, 350, 356, 358, 359, 459], "status_to_clean": [330, 341, 344, 350, 356, 358, 359, 459], "build_info": [330, 331, 333, 340, 341, 344, 345, 349], "benchmark_result": [330, 338, 361, 385], "benchmarkresult": [330, 331], "update_accuraci": 331, "update_perform": 331, "list_by_framework": [332, 339, 347], "framework_id": [332, 339, 340, 347, 363], "query_to_list": [332, 339, 347], "dataloaders_queri": 332, "update_param": 332, "dataloader_id": 332, "fill_dictionari": [332, 334, 335, 337, 339, 342, 343, 347], "dataset_nam": [333, 351, 356], "template_path": 333, "delete_dataset": [333, 351, 356], "update_template_path": 333, "get_domain_id": 334, "domain_nam": 334, "domainflavour": [335, 443], "db": [335, 342, 343, 362, 363], "get_domain_flavour_id": 335, "domain_flavour_nam": 335, "flavour": [335, 354, 356, 414, 443], "get_framework_id": 337, "framework_nam": [337, 412, 449], "domain_flavour": [338, 361, 385, 391, 460], "optimization_typ": [338, 341, 361, 385], "profiling_result": [338, 344, 361, 385], "tuning_detail": [338, 341, 361, 385], "tuning_histori": [338, 341, 356, 358, 361, 385, 420, 442], "metrics_queri": 339, "input_nod": 340, "precision_id": [340, 341, 342, 343], "domain_id": [340, 347], "domain_flavour_id": 340, "supports_profil": [340, 393, 401], "supports_graph": [340, 393], "delete_model": [340, 356, 357], "optimization_type_id": 341, "sampling_s": [341, 461, 492, 524, 525], "tuning_details_id": [341, 348], "diagnosis_config": 341, "delete_optim": [341, 356, 358], "optimization_id": [341, 342, 356, 358, 415], "optimization_nam": [341, 342, 355, 356], "update_optimized_model": [341, 356, 358], "optimized_model_id": 341, "update_sampling_s": 341, "update_precis": 341, "update_tuning_detail": 341, "pin_accuracy_benchmark": [341, 356, 358], "pin": [341, 356, 358], "pin_performance_benchmark": [341, 356, 358], "get_optimization_by_project_and_model": 341, "unpin_benchmark": 341, "db_connect": 341, "unpin": 341, "optimizationtyp": [341, 342, 443], "tuningdetail": [341, 348, 429], "tuninghistori": [341, 349, 430], "optimized_model": [341, 502], "get_pinned_benchmark": 341, "list_for_precis": 342, "precision_nam": [342, 343], "get_optimization_type_for_precis": 342, "get_optimization_type_id": 342, "get_optimization_type_by_nam": 342, "get_optimization_type_by_id": 342, "get_precision_id": 343, "get_precision_by_nam": 343, "get_precision_by_id": 343, "num_thread": 344, "delete_profil": [344, 356, 359], "profiling_id": [344, 345, 356, 359, 431], "profiling_nam": 344, "update_num_thread": 344, "profilingresult": [344, 345], "total_execution_tim": 345, "accelerator_execution_tim": 345, "cpu_execution_tim": 345, "op_run": 345, "op_defin": 345, "get_result": 345, "bulk_add": 345, "params_interfac": [345, 350, 351, 353, 355, 356, 357, 358, 359, 361, 385, 442, 479], "profilingresultaddparamsinterfac": [345, 356, 359, 362], "bulk": [345, 356, 359], "delete_result": 345, "delet": [345, 350, 351, 356, 357, 358, 359, 360, 515], "create_project": [346, 355, 356, 360], "delete_project": [346, 356, 360], "project_nam": [346, 351, 356], "get_model_by_nam": 346, "list_project": [346, 356, 360], "update_not": 346, "list_by_domain": 347, "transforms_queri": 347, "accuracy_criterion_typ": 348, "accuracy_criterion_threshold": 348, "exit_polici": [348, 498, 521, 524, 525], "tuning_details_data": 348, "delete_tuning_detail": 348, "update_tuning_histori": 348, "tuning_history_id": 348, "minimal_accuraci": 349, "baseline_accuraci": 349, "baseline_perform": 349, "last_tune_accuraci": 349, "last_tune_perform": 349, "best_tune_accuraci": 349, "best_tune_perform": 349, "benchmarkapiinterfac": [350, 356], "get_benchmark_detail": [350, 356], "list_benchmark": [350, 356], "update_benchmark_accuraci": [350, 356], "update_benchmark_perform": [350, 356], "update_benchmark_statu": [350, 356], "update_benchmark_dur": [350, 356], "update_path": [350, 356, 358], "add_benchmark": [350, 356], "add_result": [350, 356, 359], "edit_benchmark": [350, 356], "parse_benchmark_data": [350, 356], "benchmarkaddparamsinterfac": [350, 356, 362], "parse_benchmark_edit_data": [350, 356], "benchmarkeditparamsinterfac": [350, 356, 362], "before_delete_benchmark_entri": 350, "sqlite3": 350, "db_model": [350, 361, 385, 442], "datasetapiinterfac": [351, 356], "get_dataset_detail": [351, 356], "list_dataset": [351, 356], "add_dataset": [351, 356], "set_template_path": [351, 356], "parsed_dataset_data": [351, 356], "datasetaddparamsinterfac": [351, 356, 362], "check_if_custom_metric_or_dataload": [351, 356], "dataset_data": [351, 356, 416, 417, 422, 426, 429, 462], "generate_custom_templ": [351, 356], "dataloader_path": [351, 356], "generate_templ": [351, 356], "template_typ": [351, 356], "parse_dataset_data": [351, 356], "get_predefined_dataset": [351, 356], "prepare_predefined_dataload": [351, 356], "prepare_predefined_transform": [351, 356], "ordereddict": [351, 356, 461], "set_database_vers": [351, 352], "version_num": [351, 352], "alembic_vers": [351, 352], "initialize_associ": [351, 352], "initialize_precision_optimization_types_associ": [351, 352], "search_in_list_of_dict_for_unique_valu": [351, 352], "list_of_dict": [351, 352], "search_in_list_of_dict": [351, 352], "diagnosisapiinterfac": [353, 356], "get_op_list": [353, 356, 364], "get_op_detail": [353, 356, 364], "generate_optim": [353, 356], "model_wise_param": [353, 356], "parse_optimization_data": [353, 356, 358], "diagnosisoptimizationparamsinterfac": [353, 356, 362], "parse_op_wise_config": [353, 356], "op_wise_param": [353, 356], "parse_wise_paramet": [353, 356], "params_per_typ": [353, 356], "set_op_wise_pattern_precis": [353, 356], "parse_model_wise_config": [353, 356], "dictionariesapiinterfac": [354, 356], "dictonari": [354, 356], "list_domain": [354, 356], "list_domain_flavour": [354, 356], "list_optimization_typ": [354, 356], "list_optimization_types_for_precis": [354, 356], "list_precis": [354, 356], "list_dataload": [354, 356], "list_dataloaders_by_framework": [354, 356], "list_transform": [354, 356], "list_transforms_by_framework": [354, 356], "list_transforms_by_domain": [354, 356], "list_metr": [354, 356], "list_metrics_by_framework": [354, 356], "examplesapiinterfac": [355, 356], "get_optimization_data": [355, 356], "optimizationaddparamsinterfac": [355, 356, 358, 362], "benchmark_api_interfac": [356, 361, 385], "dataset_api_interfac": [356, 361, 385], "diagnosis_api_interfac": [356, 361, 385], "dictionaries_api_interfac": [356, 361, 385], "examples_api_interfac": [356, 361, 385], "model_api_interfac": [356, 361, 385], "optimization_api_interfac": [356, 361, 385], "profiling_api_interfac": [356, 361, 385], "project_api_interfac": [356, 361, 385], "modelapiinterfac": [356, 357], "add_model": [356, 357, 360], "get_model_detail": [356, 357], "list_model": [356, 357, 385, 411, 442], "parse_model_data": [356, 357], "modeladdparamsinterfac": [356, 357, 362], "optimizationapiinterfac": [356, 358], "get_optimization_detail": [356, 358], "list_optim": [356, 358], "update_optimization_statu": [356, 358], "update_optimization_dur": [356, 358], "add_optim": [356, 358], "add_quantization_optim": [356, 358], "optimization_data": [356, 358, 416, 417, 422, 426, 429], "add_standard_optim": [356, 358], "edit_optim": [356, 358], "add_tuning_histori": [356, 358], "parse_tuning_histori": [356, 358], "tuninghistoryinterfac": [356, 358, 362, 479], "parse_optimization_edit_data": [356, 358], "optimizationeditparamsinterfac": [356, 358, 362], "profilingapiinterfac": [356, 359], "get_profiling_detail": [356, 359], "list_profil": [356, 359], "update_profiling_statu": [356, 359], "update_profiling_dur": [356, 359], "add_profil": [356, 359], "edit_profil": [356, 359], "bulk_add_result": [356, 359], "parse_profiling_data": [356, 359], "profilingaddparamsinterfac": [356, 359, 362], "parse_profiling_result_data": [356, 359], "parse_profiling_edit_data": [356, 359], "profilingeditparamsinterfac": [356, 359, 362], "projectapiinterfac": [356, 360], "get_project_detail": [356, 360], "add_dummy_dataset": [356, 360], "update_project_not": [356, 360], "db_oper": [361, 385, 442], "parse_nod": 362, "tuninghistoryiteminterfac": [362, 479], "update_dataloaders_param": 363, "dataloaders_to_upd": 363, "framework_dataloaders_config": 363, "get_framework_dataloaders_config": 363, "get_framework_transforms_config": 363, "get_tensors_info": [364, 393], "load_quantization_config": 364, "calculate_ms": 364, "input_model_tensor": 364, "optimized_model_tensor": 364, "op_detail": [364, 366, 385, 442], "opdetail": [364, 369], "get_histogram_data": 364, "draw": [364, 521, 524], "diagnosisfactori": 365, "get_diagnosi": 365, "onnx_diagnosi": [366, 385, 442], "onnxrt_diagnosi": [366, 367, 385], "tensorflow_diagnosi": [366, 385, 442], "factori": [366, 385, 420, 433, 438, 442, 453], "op_entri": [366, 385, 442], "onnxrtdiagnosi": 368, "onnxrtmodel": [368, 396], "serialization_typ": [369, 370, 400, 449, 451, 462, 463, 467, 468], "oppattern": 369, "pattern_data": 369, "opweight": 369, "weights_data": 369, "opactiv": 369, "op_activ": 369, "opentri": 370, "activation_min": 370, "activation_max": 370, "tensorflowdiagnosi": 372, "tensorflowmodel": [372, 401, 403, 404, 405, 406], "browser": [373, 489], "get_directory_entri": 373, "get_requested_path": 373, "request": [373, 385, 386, 387, 408, 409, 412, 430, 442, 446, 472, 474, 476, 477, 481, 483, 484, 486, 489, 492, 518], "get_non_hidden_directory_entri": 373, "create_dir_entri": 373, "direntri": 373, "create_file_entri": 373, "create_entri": 373, "is_directori": 373, "sort_entri": 373, "should_show_fil": 373, "should_show_only_model_fil": 373, "get_setting_valu": 373, "get_filter_valu": 373, "filter_requested_entri": 373, "filter_nam": 373, "is_directory_entri": 373, "is_model_or_directory_entri": 373, "is_dataset_or_directory_entri": 373, "brows": 374, "filesystem": [374, 460, 485], "attribute_typ": 375, "expanded_group": [376, 379], "edg": [378, 380, 385, 442, 523], "add_edg": 378, "source_id": 378, "target_id": 378, "get_nod": 378, "highlight_pattern": 378, "highlight": [378, 381, 489], "get_target_nod": 378, "reader": [379, 380, 385, 442], "graphread": 379, "find_pattern_in_graph": [379, 476], "displai": [380, 393], "onnxrt_read": [380, 382, 385], "tensorflow_read": [380, 382, 385], "collaps": [380, 385, 442, 489], "graph_read": [380, 385, 442], "groupnod": 381, "group_nam": 381, "onnxrtread": 383, "tensorflowread": 384, "jobs_control_queu": [385, 386, 442], "frozen_pb": [385, 392, 402], "meta_graph": [385, 392, 402], "model_type_gett": [385, 392, 442], "repositori": [385, 390, 392, 442, 448, 504], "download_config": [385, 410, 411, 442], "download_model": [385, 410, 411, 442], "optimize_model": [385, 418, 420, 421, 424], "neural_coder_optim": [385, 420, 442], "tune_model": [385, 420, 427], "execute_optim": [385, 420, 442], "tensorflow_profil": [385, 433, 442], "execute_profil": [385, 433, 442], "profile_model": [385, 433, 435, 439, 442], "job": 386, "_jobscontrolqueu": 387, "queu": 387, "jobsmanag": 387, "_jobsmmanag": 388, "_job": 388, "get_default_path": 390, "shape_elements_ord": [393, 396, 405, 460], "get_input_nod": [393, 403, 404, 405], "get_output_nod": [393, 403, 404, 405], "ensure_supported_path": 393, "get_model_graph": [393, 396, 404, 405, 476], "get_framework_nam": [393, 396, 398, 405], "supports_path": [393, 396, 398, 401, 403, 404, 406], "guard_requirements_instal": [393, 396, 398, 405], "instal": [393, 396, 398, 405, 412, 500, 514], "nc_model_inst": [396, 405], "onnx_model": 396, "filtered_input_nod": 396, "remove_number_of_samples_from_shap": 396, "pytorchscriptmodel": 398, "modelrepositori": 399, "get_framework_from_path": [399, 460], "get_supported_framework": 399, "is_model_path": 399, "trust": [400, 489], "frozenpbmodel": 401, "kerasmodel": 403, "metagraphmodel": 404, "metagraph": 404, "savedmodelmodel": 406, "get_input_shap": 407, "fix_dynamic_shap": 407, "resourc": [410, 495, 515], "download_yaml_config": 410, "model_info": 410, "download_fil": 410, "download_path": 410, "header": [410, 485, 500], "report_progress": 410, "unpack_arch": 410, "archive_path": 410, "unpack": 410, "archiv": 410, "get_yaml_url": 410, "model_src_dir": 410, "yaml_relative_loc": 410, "get_available_model": 412, "check_vers": 412, "framework_vers": 412, "supported_vers": 412, "validate_model_list": 412, "model_list": 412, "get_framework_module_nam": 412, "get_installed_framework": 412, "mappingdirect": 414, "namesmapp": 414, "framework_map": 414, "domain_map": 414, "domain_flavour_map": 414, "precision_map": 414, "map_nam": 414, "parameter_typ": 414, "execute_optimization_pytorch_script": 415, "execute_optimization_regular": 415, "parse_model_data_to_bench_nam": 415, "parse_log": 415, "optimization_detail": 415, "check_if_collect_tuning_histori": 415, "optimizationfactori": 416, "get_optim": 416, "optimization_script": [417, 422, 426, 429], "optimize_graph": [419, 423], "output_graph": [419, 423, 428, 502], "optimize_graph_config": [419, 423], "optimize_pt_script": 425, "output_model_nam": 426, "output_model_dir": 426, "optimizationinterfac": 426, "accuracycriterion": 429, "optimization_workdir": 430, "watcher": 430, "process_succeed": 430, "signal": [430, 460, 498], "was_history_file_chang": 430, "history_file_modification_tim": 430, "send_history_snapshot": 430, "execute_real_profil": 431, "profiling_detail": 431, "profilerfactori": [432, 437], "get_profil": [432, 437], "profiling_data": [432, 436, 437, 439, 458], "load_profiling_detail": 434, "json_path": 434, "config_path": 436, "initialize_graph": 439, "tf_modul": 439, "create_tf_config": 439, "num_warmup": 439, "get_node_by_nam": 439, "convert_nodes_to_list": 439, "build_dataload": 439, "delete_assign": 440, "wsgi": 441, "prepare_environ": 441, "app": [442, 475], "history_snapshot_pars": [442, 475, 480], "request_data_processor": [442, 475, 480], "response_gener": [442, 475, 480, 481, 483, 486], "status": [443, 455, 459], "ensure_workdir_exists_and_writ": 444, "clean_workloads_wip_statu": 444, "wip": [444, 526], "workloads_list": 444, "migrate_databas": 444, "latest": [444, 454, 506, 516, 520], "alemb": [444, 500, 506], "notfoundexcept": [445, 473, 474], "accessdeniedexcept": 445, "deni": 445, "clienterrorexcept": 445, "internalexcept": 445, "workspace_path": [446, 460], "subject": [446, 472, 507], "send_respons": 446, "log_nam": 446, "additional_log_nam": [446, 454], "shell": [446, 454, 522], "process_dur": 446, "call_on": 446, "cwd": [446, 454], "universal_newlin": [446, 454], "startupinfo": [446, 454], "creationflag": [446, 454], "ignore_exit_cod": [446, 454], "pid": [446, 454], "env_arg": 446, "ncprocess": [446, 455], "refresh_workdir": 446, "is_multi_command": 446, "expir": 447, "expiringdictitem": 447, "expires_at": 447, "is_expir": 447, "expiringdict": 447, "initial_valu": 447, "ttl": 447, "120": 447, "userdict": 447, "githubinfo": 448, "hw": 449, "hwinfo": 449, "get_number_of_socket": 449, "get_distribut": 449, "distibut": 449, "get_bios_vers": 449, "bio": [449, 514], "is_turbo_boost_en": 449, "turbo": [449, 514], "boost": [449, 509, 516], "get_kernel_vers": 449, "get_framework_info": 449, "get_framework_dependency_info": 449, "subdepend": 449, "serializ": 451, "serialize_item": 451, "datetim": 451, "throw": 451, "typeerror": 451, "2016": 451, "84913": 451, "08t11": 451, "084913": 451, "change_log_level": 452, "line": [453, 454, 473, 489, 497, 505, 522], "optimizationpars": 453, "performancepars": 453, "update_parti": 453, "parsed_result": 453, "summarize_parti": 453, "summarize_valu": 453, "accuracypars": 453, "benchmarkparserfactori": 453, "get_pars": 453, "profilingpars": 453, "unify_tim": 453, "string_valu": 453, "micro": 453, "125": [453, 526], "6m": 453, "microsecond": 453, "output_dir": 454, "cmd": [454, 502], "docker": 454, "hub": 454, "aibt_tensorflow": 454, "7_3_mkldnn_tensorflow": 454, "111224": 454, "pull_imag": 454, "0c750a01": 454, "90e0": 454, "4aa8": 454, "99fe": 454, "a194d55a2046": 454, "time_start": 454, "2018": 454, "17t14": 454, "47": [454, 526], "352502": 454, "time_stop": 454, "25": [454, 526], "110410": 454, "info_path": 454, "tail": 454, "along": [454, 506], "is_ok": [454, 455], "subprocess": [454, 476], "popen": 454, "remove_log": 454, "properli": 455, "return_code_al": 455, "remove_successful_log": 455, "success": [455, 472, 506], "sent": 458, "throughput": [458, 502], "acc_input_model": 458, "acc_optimized_model": 458, "size_input_model": 458, "size_optimized_model": 458, "path_optimized_model": 458, "optimization_tim": 458, "insert_data": 458, "calculate_throughput": 458, "readi": 458, "ensure_working_path_exist": 459, "clean_log": 459, "workdir_path": 459, "is_hidden": 460, "get_dataset_path": 460, "get_file_extens": 460, "lead": [460, 495, 509, 515], "is_dataset_fil": 460, "normalize_domain": 460, "underscor": 460, "normalize_framework": 460, "normalize_str": 460, "string_to_norm": 460, "get_model_zoo_config_path": 460, "model_dict": 460, "get_model_zoo_model_path": 460, "check_modul": 460, "get_module_vers": 460, "add_unit": 460, "load_model_config": 460, "load_dataloader_config": 460, "load_transforms_config": 460, "load_transforms_filter_config": 460, "meaning": [460, 513], "load_precisions_config": 460, "load_model_wise_param": 460, "load_metrics_config": 460, "get_metrics_dict": 460, "load_help_nc_param": 460, "replace_with_valu": 460, "file_path": 460, "verify_file_path": 460, "determine_ip": 460, "ip": 460, "is_development_env": 460, "nc_mode": 460, "filter_transform": 460, "parse_bool_valu": 460, "release_tag": 460, "get_shape_from_transform": 460, "get_height_width_from_s": 460, "parse_to_string_list": 460, "parse_to_float_list": 460, "export_to_csv": 460, "parse_vers": 460, "string_vers": 460, "remove_dataload": 461, "datalad": 461, "remove_accuracy_metr": 461, "set_evaluation_dataload": 461, "udpat": 461, "set_evaluation_dataset_path": 461, "get_performance_config": 461, "set_performance_cores_per_inst": 461, "get_performance_cores_per_inst": 461, "set_performance_num_of_inst": 461, "num_of_inst": [461, 490, 492, 502, 517], "get_performance_num_of_inst": 461, "set_accuracy_and_performance_batch_s": 461, "set_quantization_dataload": 461, "set_quantization_dataset_path": 461, "set_quantization_batch_s": 461, "set_workspac": [461, 470], "set_accuracy_go": 461, "accuracy_go": 461, "set_accuracy_metr": 461, "set_transform": 461, "process_transform": 461, "set_quantization_approach": 461, "set_input": 461, "set_output": 461, "set_quantization_sampling_s": 461, "set_performance_warmup": 461, "warmup": [461, 517], "set_performance_iter": 461, "set_optimization_precis": 461, "yaml_path": 461, "is_dummi": 462, "labelbal": 462, "set_transforms_from_list": 462, "transforms_list": 462, "set_dataset": 462, "postprocessschema": 463, "set_accuracy_postprocess_transform": 463, "set_precis": [464, 466], "sgdoptim": 468, "adamwoptim": 468, "adamoptim": 468, "crossentropylosscriterion": 468, "sparsecategoricalcrossentropycriterion": 468, "knowledgedistillationlosscriterion": 468, "weightcompressionapproach": 468, "parse_dict_value_to_float": 468, "parse_dict_value_to_int": 468, "wiseconfigdetail": 469, "wiseconfig": 469, "multiobject": 470, "acccriterion": 470, "exitpolici": 470, "set_timeout": 470, "set_max_tri": 470, "max_trial": [470, 498, 524], "trial": [470, 524], "set_performance_onli": 470, "set_random_se": 470, "float_represent": 471, "dumper": 471, "pruner_represent": 471, "outsid": 472, "create_simple_respons": 472, "gui": [472, 473, 477, 489, 505, 506], "messagequeu": 472, "queue": [472, 477], "post_failur": 472, "post_success": 472, "post_error": 472, "wait": 472, "global_config_directori": 473, "set_up": 473, "determine_values_from_environ": 473, "get_command_line_arg": 473, "determine_server_port": 473, "tri": [473, 524], "max_ports_tri": 473, "port_default": 473, "determine_gui_port": 473, "client": [473, 489], "server_port": 473, "unless": [473, 501], "is_port_taken": 473, "determine_log_level": 473, "determine_url_prefix": 473, "get_url": 473, "dump_token_to_fil": 473, "servicenotfoundexcept": 474, "unknown": 474, "connector": 476, "routingdefinit": 476, "rout": 476, "realtimeroutingdefinit": 476, "realtim": 476, "deferredroutingdefinit": 476, "deferredsubprocessroutingdefinit": 476, "spawn": 476, "get_system_info": 476, "endpoint": 477, "run_serv": 477, "webserv": 477, "get_tls_arg": 477, "tl": [477, 489], "block_ifram": 477, "werkzeug": [477, 485], "ifram": 477, "csp": 477, "block_snif": 477, "mime": 477, "snif": 477, "require_api_token": 477, "author": [477, 507], "j": 477, "handle_api_cal": 477, "subpath": 477, "allow_api_cal": 477, "page_not_found": 477, "disable_cach": 477, "build_paramet": 477, "flask": [477, 489], "web_socket_publish": 477, "web_socket": 477, "flask_socketio": 477, "socketio": [477, 489], "benchmarkservic": 478, "workloadservic": [478, 482, 483, 486], "historysnapshotpars": 479, "history_snapshot": 479, "provide_perform": 479, "parse_history_snapshot": 479, "parse_history_item": 479, "history_item": 479, "extract_accuraci": 479, "extract_perform": 479, "modelservic": 481, "optimizationservic": 482, "profilingservic": 483, "generate_csv": 483, "processor": [484, 502, 509, 514, 516, 518, 519, 526], "requestdataprocessor": 484, "get_string_valu": 484, "responsegener": 485, "serve_from_filesystem": 485, "mimetyp": 485, "as_attach": 485, "add_refresh": 485, "refresh_tim": 485, "refresh": 485, "from_except": 485, "get_status_code_for_except": 485, "get_code_templ": 486, "get_output": 486, "asymmetr": [488, 518], "conda": [489, 500, 506, 520], "forg": [489, 500, 506], "setup": [489, 501, 506], "sign": [489, 518, 521], "certif": 489, "ui": 489, "5000": 489, "338174d13706855fc6924cec7b3a8ae8": 489, "listen": 489, "firewal": 489, "8080": 489, "cert": 489, "path_to_cert": 489, "crt": 489, "path_to_private_kei": 489, "encrypt": 489, "insecur": 489, "expos": 489, "forfeit": 489, "threat": 489, "button": [489, 505], "pop": 489, "recognit": [489, 497, 522], "finish": [489, 524], "synthet": 489, "plu": 489, "icon": 489, "unfold": 489, "On": [489, 518], "panel": 489, "navig": 489, "trash": 489, "visibl": 489, "cursor": 489, "prompt": [489, 497], "confirm": 489, "revers": 489, "exit": [489, 498, 502, 509, 524, 525], "pencil": 489, "light": [489, 496], "blue": 489, "color": 489, "row": [489, 515], "arrow": 489, "checkbox": 489, "chart": [489, 518, 521, 522], "offer": [489, 493], "conveni": 489, "variat": 489, "yellow": 489, "warn": 489, "remind": 489, "One": [489, 492, 497, 505, 515, 516], "dialog": 489, "cryptographi": 489, "centercrop": [490, 492, 523, 524], "totensor": [490, 492, 523], "485": [490, 492, 526], "456": [490, 492], "406": [490, 492], "enough": [490, 518], "benchmarkconf": 490, "lpot": [490, 502, 516, 520], "pylint": 491, "flake8": 491, "autopep8": 491, "motiv": 491, "explan": 491, "bug": 491, "reproduc": 491, "submit": 491, "page": 491, "intend": 491, "collabor": 491, "adher": 491, "often": [492, 495, 513, 515], "encount": 492, "consum": 492, "lack": 492, "faster": [492, 494, 516, 526], "dataloadermodul": 492, "hard": 492, "treat": 492, "eas": [492, 506, 516], "advantag": [492, 517], "life": 492, "launch": [492, 509], "__next__": 492, "randomresizedcrop": [492, 523], "imagerecordit": 492, "path_imgrec": 492, "label_width": 492, "preprocess_thread": 492, "data_nthread": 492, "data_shap": 492, "label_nam": 492, "rand_crop": 492, "rand_mirror": 492, "shuffle_dataset": 492, "shuffle_chunk_se": 492, "shuffle_se": 492, "data_layer_typ": 492, "combine_mean_std": 492, "helloworld": [493, 523], "ensp": [493, 508, 523], "imagerecord": [493, 497, 525], "image_nam": 493, "cocorecord": 493, "gt": [493, 523], "lt": [493, 514], "float16": 493, "int64": 493, "style_transf": 493, "content": 493, "tfrecorddataset": [493, 524], "aid": 494, "deploy": 494, "infrastructur": 494, "deploi": [495, 524], "power": [495, 514], "mobil": [495, 526], "workflow": [495, 506, 509, 522], "produc": 495, "softmax": 495, "l": [495, 522, 524], "kd": 495, "kullback": 495, "leibler": 495, "patient": 495, "compact": [495, 515], "ia": 495, "attach": 495, "shallow": 495, "deepest": 495, "deeper": 495, "paper": [495, 515], "10006": 495, "distillationconf": 495, "blendcnn": [495, 526], "loss_sum": 495, "iter_bar": 495, "tqdm": 495, "desc": [495, 515], "teacher_logit": 495, "promis": [496, 515], "huge": 496, "bit": [496, 509, 516, 518], "heavi": 496, "booster": 496, "degrad": 496, "retrain": 496, "incorpor": [496, 524], "novel": 496, "builtin": 497, "program": [497, 502, 509], "addition": [497, 524], "enable_eager_execut": 497, "yaml_file_path": 497, "evaluation_result": 497, "evaluation_time_cost": 497, "partit": 497, "distributedsampl": 497, "train_sampl": 497, "train_dataset": 497, "num_replica": 497, "train_kwarg": 497, "adadelta": 497, "distributedoptim": 497, "named_paramet": 497, "broadcast_paramet": 497, "root_rank": 497, "broadcast_optimizer_st": 497, "set_epoch": 497, "batch_idx": 497, "nll_loss": 497, "log_interv": 497, "0f": 497, "tloss": 497, "6f": 497, "dry_run": 497, "test_func": 497, "host": 497, "num_of_process": 497, "002": 497, "ssh": 497, "readm": 497, "exactli": 497, "resnet50_v1": [497, 502], "resizecropimagenet": [497, 523], "realiz": [497, 508, 512, 519, 521], "tow": 497, "situat": 497, "node1": 497, "node2": 497, "TO": 497, "your_node1_nam": 497, "your_node2_nam": 497, "resnet50_fp32_pretrained_model": [497, 502], "nc_resnet50_v1": 497, "factor": [498, 514, 526], "oppos": 498, "entail": 498, "preserv": 498, "post_training_dynamic_qu": [498, 517], "post_training_static_qu": [498, 517, 524], "accuracy_criterion": [498, 512, 517, 521, 524, 525], "rel": [498, 517, 521, 524, 525, 526], "earli": [498, 518, 524, 525], "determinist": [498, 524], "wide": [499, 509, 518], "varieti": [499, 517, 524], "demonstr": [499, 502, 511, 515, 522], "incompat": 500, "88": [500, 521, 526], "80": [500, 522, 526], "pyobject": 500, "reinstal": 500, "importerror": 500, "libgl": 500, "apt": [500, 506], "yum": [500, 506], "opencv": 500, "conflict": 500, "pend": 500, "27": [500, 506, 526], "quick": [501, 525], "friendli": [501, 525], "let": [501, 517, 525], "up1": 501, "up2": 501, "valid_mixed_precis": 501, "concatv2": 501, "maxpool": 501, "avgpool": 501, "per_tensor": [501, 524, 525], "addn": 501, "grappler_optim": 501, "constfold": 501, "debug_stripp": 501, "primarili": 502, "subexpress": 502, "bfloat16": [502, 509, 519], "explicitli": [502, 503], "op_to_stor": 502, "cpx": 502, "clx": 502, "force_bf16": 502, "executable_nc_wrapp": 502, "consequ": [502, 509], "resnet50_measur": 502, "8280": 502, "2021": 502, "165": 502, "139": 502, "567": [502, 526], "sec": [502, 526], "fp32_optimized_model": 502, "3x": 502, "325": 502, "99": [502, 526], "56": [502, 526], "068": 502, "992": 502, "major": [503, 518], "concept": [503, 521], "custom_metr": 503, "refin": 503, "broad": 505, "snippet": 505, "product": [505, 509, 514, 516, 518, 521, 524], "upload": 505, "qlinearop": [505, 518], "qintegerop": [505, 518], "lasso": [505, 515], "plan": [505, 509], "frequent": 506, "ask": 506, "consolid": 506, "streamlin": 506, "scienc": 506, "anaconda": 506, "suit": [506, 522], "esri": 506, "apach": 507, "softwar": [507, 509, 514, 516, 520], "copyright": 507, "mit": 507, "accompani": 507, "wish": 507, "bibtex": 507, "misc": 507, "feng": 507, "tian": 507, "chuanqi": 507, "wang": 507, "guom": 507, "zhang": 507, "penghui": 507, "cheng": 507, "pengxin": 507, "yuan": 507, "haihao": 507, "shen": 507, "jiong": 507, "gong": 507, "titl": 507, "howpublish": 507, "year": 507, "logo": [507, 514], "atom": 507, "phi": 507, "pentium": 507, "vtune": 507, "corpor": [507, 514], "subsidiari": [507, 514], "brand": [507, 514], "claim": [507, 514], "popularli": 508, "label_map": 508, "decis": 508, "ap": 508, "pr": 508, "curv": 508, "target_boxes_num": 508, "str_label": 508, "int_label": 508, "inturn": 508, "cocomap": 508, "vocmap": 508, "categor": 508, "multiclass": 508, "multilabel": 508, "multi_metr": 508, "higher_is_bett": [508, 512, 525], "newmetr": 508, "reflect": [508, 514, 523], "recent": 509, "growth": 509, "complex": 509, "half": 509, "sixteen": 509, "bandwidth": 509, "3rd": [509, 516, 518, 519], "gen": [509, 516, 519], "codenam": 509, "avx512": [509, 518], "vcvtne2ps2bf16": 509, "vcvtneps2bf16": 509, "vdpbf16p": 509, "forc": [509, 519], "user_defined_funct": 509, "avx512_bf16": 509, "persist": 510, "brought": [510, 518], "tf2": 510, "h5": 510, "onnx_ml_pb2": 510, "hybridblock": 510, "0000": 510, "inc_model": 510, "saved_result": 510, "tflite": 511, "multi_object": 512, "peak": 512, "start_tim": 512, "_result_list": 512, "customobj": 512, "simultan": [513, 517], "arbitrari": 513, "gain": [513, 516], "benefit": [513, 515], "Of": 513, "cours": 513, "prune_conf": 513, "post_training_quantization_conf": 513, "quantization_aware_training_conf": 513, "configurationintel": 514, "platinum": [514, 526], "8380": [514, 526], "manufactur": 514, "m50cyp2sbstd": 514, "se5c6200": 514, "86b": 514, "0022": 514, "d64": 514, "2105220049": 514, "microcod": 514, "0xd0002b1": 514, "30ghz": 514, "3ghz": 514, "40": [514, 525, 526], "perf": 514, "256gb": 514, "16x16gb": 514, "ddr4": 514, "3200mt": 514, "nic": 514, "ethernet": 514, "10g": 514, "x550t": 514, "drive": 514, "1x": 514, "intel_ssdsc2kw01": 514, "953": 514, "9g": 514, "ct1000mx500ssd1": 514, "931": 514, "5g": 514, "publicli": 514, "degre": 514, "mark": 514, "trademark": 514, "briefli": 515, "maxim": [515, 524], "art": 515, "increasingli": 515, "crucial": 515, "rule": 515, "salient": 515, "nonzero": 515, "irregular": 515, "anywher": 515, "2in4": 515, "amper": 515, "gemm": 515, "ic": [515, 516], "oc": 515, "kh": 515, "kw": 515, "examin": 515, "lowest": 515, "head": 515, "fastform": 515, "formula": 515, "num_train_epoch": 515, "pbar": 515, "progressbar": 515, "n_total": 515, "n_gpu": 515, "gradient_accumulation_step": 515, "clip_grad_norm_": 515, "max_grad_norm": 515, "rate": [515, 518], "cv": 515, "plug": 516, "twitter": 516, "linkedin": 516, "zone": 516, "hug": 516, "land": 516, "gcp": 516, "aw": [516, 526], "azur": 516, "marketplac": 516, "pat": 516, "keynot": 516, "intelon": 516, "sep": 516, "alibaba": 516, "chines": 516, "grain": 516, "aug": 516, "purif": 516, "sacrif": 516, "jun": 516, "partner": 516, "democrat": 516, "apr": 516, "ecosystem": 516, "mar": 516, "feb": 516, "sigopt": 516, "jan": 516, "tutori": 516, "bilibili": 516, "ml": 516, "doubl": 516, "mlperf": 516, "reconstruct": 516, "abound": 516, "cern": 516, "gan": 516, "3dgan": 516, "4th": 516, "iml": 516, "workshop": 516, "highli": 516, "intelcaff": 516, "aris": 517, "tell": 517, "henc": 517, "quant_aware_train": 517, "op_type_list": 517, "use_bf16": [517, 519], "weight_compress": [517, 525], "initial_spars": [517, 525], "target_spars": [517, 525], "98": [517, 526], "prune_typ": [517, 525], "basic_magnitud": [517, 525], "start_epoch": [517, 525], "end_epoch": [517, 525], "update_frequ": 517, "prune_domain": 517, "tile_pattern_1x1": 517, "inter_num_of_thread": 517, "intra_num_of_thread": 517, "graph_optimization_level": 517, "disable_al": 517, "veri": [518, 524], "invent": 518, "int4": 518, "cost": 518, "theoret": 518, "affin": 518, "zeropoint": 518, "overflow": 518, "solv": [518, 520, 524], "unseen": 518, "peopl": 518, "emul": 518, "pain": 518, "lossi": 518, "understand": [518, 522], "philosophi": 518, "val_dataset": 518, "val_dataload": 518, "worker": 518, "ping_memori": 518, "enhanc": 519, "cast": [519, 523], "bf16wrapper": 519, "retrac": 519, "site": 520, "assist": 520, "comparison": [520, 522], "sed": 520, "your_script": 520, "backbon": 521, "interact": 521, "mechan": 521, "sigopt_api_token": [521, 524], "sigopt_project_id": [521, 524], "sigopt_experiment_id": 521, "nc": [521, 524], "login": 521, "certain": 521, "suffici": 521, "ordinari": 521, "capac": 521, "sigopt_experiment_nam": [521, 524], "receiv": 521, "analysi": 521, "8266": 521, "8372": 521, "2132": 521, "83": [521, 526], "7495": 521, "8299": 521, "8294": 521, "85": [521, 526], "0837": 521, "8291": 521, "4469": 521, "visual": [522, 524], "discov": 522, "why": 522, "valuabl": 522, "instrument": 522, "writer": 522, "_pre_eval_hook": 522, "submodul": 522, "whitelist": 522, "_recordingobserv": 522, "output_tensors_dict": 522, "current_it": 522, "get_tensor_valu": 522, "_observer_forward_hook": 522, "_add_observer_": 522, "named_children": 522, "leaf": 522, "add_modul": 522, "register_forward_hook": 522, "dump_tim": 522, "summarywrit": 522, "_acc": 522, "tune_": 522, "add_graph": 522, "get_observer_dict": 522, "observer_dict": 522, "is_quant": 522, "add_histogram": 522, "bind_al": 522, "logdir_spec": 522, "tune_0_acc0": 522, "tune_1": 522, "tune_1_acc0": 522, "79": [522, 526], "image_recognit": 522, "run_tuning_dump_tensor": 522, "sh": 522, "four": 522, "baseline_acc_0": 522, "776": 522, "tune_1_acc_0": 522, "095": 522, "runs_v3": 522, "inceptionv3": 522, "v0": 522, "cg": 522, "op_wis": [522, 524, 525], "bash": 522, "run_tun": 522, "topologi": 522, "inception_v3": 522, "dataset_loc": 522, "inceptionv3_fp32_pretrained_model": 522, "output_model": 522, "nc_inceptionv3": 522, "inceptionv3_dump_tensor": 522, "poor": 522, "disappear": 522, "randomcrop": 523, "cropres": 523, "decodeimag": 523, "jpeg": 523, "encodejp": 523, "alignimagechannel": 523, "68": [523, 526], "116": 523, "78": [523, 526], "103": 523, "94": [523, 526], "017": 523, "bilinearimagenet": [523, 525], "topilimag": 523, "padding_mod": 523, "border": 523, "colorjitt": 523, "bright": 523, "satur": 523, "hue": 523, "jitter": 523, "tondarrai": 523, "max_trail": 524, "scale_propagation_max_pool": 524, "scale_propagation_concat": 524, "first_conv_or_matmul_quant": 524, "2000": 524, "tf_record": 524, "model_wis": [524, 525], "conv1": [524, 525], "pool1": 524, "conv2": 524, "guarante": 524, "classic": 524, "black": 524, "come": 524, "discret": 524, "compli": 524, "posterior": 524, "focu": 524, "short": 524, "never": 524, "loglevel": 524, "endlessli": 524, "idea": 524, "primari": 524, "optimum": 524, "redund": 524, "protect": 524, "especi": 524, "smbo": 524, "hyperparamet": 524, "appl": 524, "surrog": 524, "quantil": 524, "x1": 524, "x2": 524, "densiti": 524, "parzen": 524, "greatest": 524, "hour": 524, "dai": 524, "perspect": 524, "abctunestrategi": 524, "mobilenet_v1": 525, "onnxrt_integ": 525, "onnxrt_qlinear": 525, "image_tensor": 525, "subsect": 525, "hyper": 525, "06": [525, 526], "beta_1": 525, "beta_2": 525, "999": 525, "epsilon": 525, "sparsecategoricalcrossentropi": 525, "reduct": 525, "sum_over_batch_s": 525, "from_logit": 525, "54": [525, 526], "19": [525, 526], "90": [525, 526], "nesterov": 525, "weight_decai": 525, "overal": 525, "ye": 526, "rnn": 526, "unet": 526, "09": 526, "performancethroughput": 526, "efficientnet": 526, "91": 526, "43": 526, "69": 526, "32x": 526, "cnn": 526, "incept": 526, "37": 526, "65": 526, "38": 526, "77": 526, "53": 526, "57x": 526, "46": 526, "61": 526, "58x": 526, "resnet101": 526, "39": 526, "63": 526, "11x": 526, "51x": 526, "26": 526, "59": 526, "23": 526, "06x": 526, "25x": 526, "70": 526, "44": 526, "00": 526, "163": 526, "133": 526, "22x": 526, "73": 526, "97": 526, "49": 526, "111": 526, "20x": 526, "v3": 526, "43x": 526, "v4": 526, "18": 526, "53x": 526, "36": 526, "33x": 526, "44x": 526, "374": 526, "226": 526, "66x": 526, "92": 526, "41x": 526, "fashion": 526, "359": 526, "244": 526, "47x": 526, "172": 526, "66": 526, "98x": 526, "153": 526, "76x": 526, "151": 526, "112": 526, "35x": 526, "26x": 526, "72": 526, "56x": 526, "82": 526, "93x": 526, "vgg16": 526, "89": 526, "178": 526, "14x": 526, "vgg19": 526, "156": 526, "18x": 526, "albert": 526, "23x": 526, "barthez": 526, "81": 526, "86": 526, "82x": 526, "203": 526, "01x": 526, "216": 526, "102": 526, "10x": 526, "sst2": 526, "218": 526, "stsb": 526, "57": 526, "48": 526, "49x": 526, "93": 526, "70x": 526, "50x": 526, "40x": 526, "3878": 526, "3717": 526, "04x": 526, "camembert": 526, "188": 526, "91x": 526, "ctrl": 526, "deberta": 526, "124": 526, "81x": 526, "347": 526, "73x": 526, "382": 526, "198": 526, "flaubert": 526, "561": 526, "35": 526, "370": 526, "52x": 526, "hubert": 526, "84": 526, "36x": 526, "409": 526, "181": 526, "longform": 526, "28x": 526, "mbart": 526, "16x": 526, "639": 526, "490": 526, "31x": 526, "lvwerra": 526, "pegasu": 526, "samsum": 526, "19x": 526, "peleenet": 526, "419": 526, "316": 526, "resnet18": 526, "686": 526, "332": 526, "07x": 526, "611": 526, "333": 526, "83x": 526, "327": 526, "162": 526, "resnext101_32x8d": 526, "175": 526, "88x": 526, "197": 526, "99x": 526, "se_resnext50_32x4d": 526, "308": 526, "144": 526, "13x": 526, "squeezebert": 526, "186": 526, "155": 526, "78x": 526, "transfo": 526, "xl": 526, "37x": 526, "wave2vec2": 526, "60": 526, "58": 526, "21x": 526, "114": 526, "15x": 526, "yolo": 526, "29x": 526, "690": 526, "330": 526, "09x": 526, "614": 526, "334": 526, "84x": 526, "54x": 526, "410": 526, "168": 526, "finetun": 526, "resnext101_32x16d_wsl": 526, "1189": 526, "680": 526, "75x": 526, "677": 526, "381": 526, "59x": 526, "alexnet": 526, "960": 526, "469": 526, "17": 526, "05x": 526, "962": 526, "466": 526, "arcfac": 526, "235": 526, "130": 526, "294": 526, "34x": 526, "604": 526, "51": 526, "80x": 526, "caffenet": 526, "1501": 526, "536": 526, "1493": 526, "533": 526, "1372": 526, "541": 526, "480": 526, "1250": 526, "753": 526, "1130": 526, "748": 526, "emot": 526, "ferplu": 526, "336": 526, "65x": 526, "fcn": 526, "googlenet": 526, "740": 526, "587": 526, "770": 526, "824": 526, "601": 526, "819": 526, "597": 526, "45x": 526, "613": 526, "506": 526, "2454": 526, "1543": 526, "2164": 526, "1564": 526, "38x": 526, "2147": 526, "1046": 526, "1877": 526, "1054": 526, "mobilenetv2": 526, "2751": 526, "1797": 526, "2656": 526, "1835": 526, "7615": 526, "7646": 526, "764": 526, "901": 526, "434": 526, "141": 526, "7614": 526, "575": 526, "952": 526, "433": 526, "7226": 526, "7229": 526, "761": 526, "432": 526, "615": 526, "722": 526, "032": 526, "894": 526, "885": 526, "454": 526, "95x": 526, "603": 526, "455": 526, "644": 526, "636": 526, "254": 526, "791": 526, "shufflenet": 526, "2298": 526, "55": 526, "1480": 526, "55x": 526, "1951": 526, "1490": 526, "squeezenet": 526, "2588": 526, "1605": 526, "61x": 526, "2566": 526, "1936": 526, "725": 526, "570": 526, "27x": 526, "666": 526, "539": 526, "641": 526, "519": 526, "633": 526, "492": 526, "542": 526, "401": 526, "68x": 526, "tini": 526, "yolov3": 526, "648": 526, "518": 526, "221": 526, "319": 526, "307": 526, "30x": 526, "yolov4": 526, "zfnet": 526, "459": 526, "261": 526, "460": 526, "264": 526, "74x": 526, "441": 526, "337": 526, "272": 526, "211": 526, "152": 526, "423": 526, "180": 526, "311": 526, "69x": 526, "taskdataset": 526, "accuracyspars": 526, "ratiospars": 526, "commentsbalanc": 526, "unbalanc": 526, "classificationimagenet": 526, "76top": 526, "13top": 526, "magnitudepost": 526, "magnitudequant": 526, "answeringsquad": 526, "34f1": 526, "2x1": 526, "lassounbalanc": 526, "classificationmnli": 526, "mm": 526, "lockbalanc": 526, "classificationsst": 526, "32accuraci": 526, "sensitivitybalanc": 526, "classificationqqp": 526, "classificationqnli": 526, "54accuraci": 526, "em": 526, "87f1": 526, "momentumunbalanc": 526, "momentumbalanc": 526, "classificationmrpc": 526, "52f1": 526, "61accuraci": 526, "7965": 526, "wideresnet40": 526, "9522": 526, "8178": 526, "0213": 526, "8235": 526, "027": 526, "5494": 526, "7153": 526, "5540": 526, "0046": 526, "5523": 526, "0029": 526, "vgg": 526, "7022": 526, "7415": 526, "7025": 526, "0003": 526, "6739": 526, "7399": 526, "6845": 526, "0106": 526, "7034": 526, "8382": 526, "bilstm": 526, "sst": 526, "8314": 526, "9403": 526, "9048": 526, "0734": 526, "7323": 526, "8256": 526, "8084": 526, "8814": 526, "7442": 526, "8371": 526, "0119": 526, "0115": 526, "tinybert": 526, "8018": 526, "8044": 526, "8363": 526, "8411": 526, "8025": 526, "8074": 526, "0007": 526, "0030": 526, "8626": 526, "8213": 526, "9091": 526, "8782": 526, "8684": 526, "8259": 526, "0058": 526, "distilroberta": 526, "6057": 526, "6455": 526, "6187": 526, "0130": 526, "c6i": 526, "2xlarg": 526, "c6a": 526, "c6g": 526, "a100cuda": 526}, "objects": {"": [[31, 0, 0, "-", "6ece06672ed3_v1_14"], [32, 0, 0, "-", "6f0d0f71d92e_v1_13"], [33, 0, 0, "-", "9e89549a08c8_v1_11"], [34, 0, 0, "-", "block_mask"], [35, 0, 0, "-", "env"], [268, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[31, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [31, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[35, 1, 1, "", "run_migrations_offline"], [35, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[268, 2, 1, "", "Benchmark"], [268, 2, 1, "", "DistillationConfig"], [268, 2, 1, "", "Pruning"], [268, 2, 1, "", "Quantization"], [37, 0, 0, "-", "adaptor"], [171, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "benchmark"], [176, 0, 0, "-", "conf"], [178, 0, 0, "-", "config"], [179, 0, 0, "-", "contrib"], [187, 0, 0, "-", "data"], [232, 0, 0, "-", "experimental"], [269, 0, 0, "-", "metric"], [270, 0, 0, "-", "mix_precision"], [272, 0, 0, "-", "model"], [277, 0, 0, "-", "objective"], [280, 0, 0, "-", "pruners"], [284, 0, 0, "-", "pruning"], [285, 0, 0, "-", "quantization"], [292, 0, 0, "-", "strategy"], [302, 0, 0, "-", "training"], [306, 0, 0, "-", "utils"], [442, 0, 0, "-", "ux"], [487, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[268, 3, 1, "", "on_epoch_begin"], [268, 3, 1, "", "on_epoch_end"], [268, 3, 1, "", "on_step_begin"], [268, 3, 1, "", "on_step_end"]], "neural_compressor.adaptor": [[36, 0, 0, "-", "adaptor"], [38, 0, 0, "-", "mxnet"], [39, 0, 0, "-", "mxnet_utils"], [41, 0, 0, "-", "onnxrt"], [43, 0, 0, "-", "ox_utils"], [66, 0, 0, "-", "pytorch"], [67, 0, 0, "-", "query"], [68, 0, 0, "-", "tensorflow"], [128, 0, 0, "-", "tf_utils"], [165, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[36, 2, 1, "", "Adaptor"], [36, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[36, 3, 1, "", "convert"], [36, 3, 1, "", "evaluate"], [36, 3, 1, "", "inspect_tensor"], [36, 3, 1, "", "quantize"], [36, 3, 1, "", "quantize_input"], [36, 3, 1, "", "query_fused_patterns"], [36, 3, 1, "", "query_fw_capability"], [36, 3, 1, "", "save"], [36, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet": [[38, 2, 1, "", "MXNetQuery"], [38, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[38, 3, 1, "", "get_fuse_patterns"], [38, 3, 1, "", "get_mixed_precision_combination"], [38, 3, 1, "", "get_op_types"], [38, 3, 1, "", "get_precisions"], [38, 3, 1, "", "get_quantization_capability"], [38, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[38, 3, 1, "", "evaluate"], [38, 3, 1, "", "inspect_tensor"], [38, 3, 1, "", "quantize"], [38, 3, 1, "", "query_fw_capability"], [38, 3, 1, "", "recover_tuned_model"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[40, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, 2, 1, "", "CalibCollector"], [40, 2, 1, "", "OpType"], [40, 2, 1, "", "TensorCollector"], [40, 1, 1, "", "calib_model"], [40, 1, 1, "", "check_mx_version"], [40, 1, 1, "", "distribute_calib_tensors"], [40, 1, 1, "", "ensure_list"], [40, 1, 1, "", "fuse"], [40, 1, 1, "", "is_model_quantized"], [40, 1, 1, "", "isiterable"], [40, 1, 1, "", "make_module"], [40, 1, 1, "", "make_nc_model"], [40, 1, 1, "", "make_symbol_block"], [40, 1, 1, "", "parse_tune_config"], [40, 1, 1, "", "prepare_model_data"], [40, 1, 1, "", "quantize_sym_model"], [40, 1, 1, "", "query_quantizable_nodes"], [40, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[41, 2, 1, "", "ONNXRTQuery"], [41, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [41, 2, 1, "", "ONNXRT_QDQAdaptor"], [41, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [41, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[41, 3, 1, "", "get_graph_optimization"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_precisions"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[41, 3, 1, "", "evaluate"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[42, 0, 0, "-", "calibration"], [55, 0, 0, "-", "operators"], [64, 0, 0, "-", "quantizer"], [65, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[42, 3, 1, "", "augment_graph"], [42, 3, 1, "", "calculate_quantization_params"], [42, 3, 1, "", "calculate_scale_zeropoint"], [42, 3, 1, "", "dump_calibration"], [42, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[44, 0, 0, "-", "activation"], [45, 0, 0, "-", "argmax"], [46, 0, 0, "-", "attention"], [47, 0, 0, "-", "binary_op"], [48, 0, 0, "-", "concat"], [49, 0, 0, "-", "conv"], [50, 0, 0, "-", "direct_q8"], [51, 0, 0, "-", "embed_layernorm"], [52, 0, 0, "-", "gather"], [53, 0, 0, "-", "gavgpool"], [54, 0, 0, "-", "gemm"], [56, 0, 0, "-", "lstm"], [57, 0, 0, "-", "matmul"], [58, 0, 0, "-", "maxpool"], [59, 0, 0, "-", "ops"], [60, 0, 0, "-", "pad"], [61, 0, 0, "-", "pooling"], [62, 0, 0, "-", "resize"], [63, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, 1, 1, "", "op_registry"]], "neural_compressor.adaptor.ox_utils.util": [[65, 2, 1, "", "QuantFormat"], [65, 2, 1, "", "QuantType"], [65, 2, 1, "", "QuantizationMode"], [65, 2, 1, "", "QuantizedInitializer"], [65, 2, 1, "", "QuantizedValue"], [65, 2, 1, "", "QuantizedValueType"], [65, 1, 1, "", "attribute_to_kwarg"], [65, 1, 1, "", "cast_tensor"], [65, 1, 1, "", "find_by_name"], [65, 1, 1, "", "quantize_data"], [65, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[66, 2, 1, "", "PyTorchAdaptor"], [66, 2, 1, "", "PyTorchQuery"], [66, 2, 1, "", "PyTorch_FXAdaptor"], [66, 2, 1, "", "PyTorch_IPEXAdaptor"], [66, 2, 1, "", "TemplateAdaptor"], [66, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "get_non_quant_modules"], [66, 3, 1, "", "inspect_tensor"], [66, 3, 1, "", "is_fused_child"], [66, 3, 1, "", "is_fused_op"], [66, 3, 1, "", "is_last_fused_child"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "save"], [66, 3, 1, "", "set_tensor"], [66, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[66, 3, 1, "", "get_op_types"], [66, 3, 1, "", "get_op_types_by_precision"], [66, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[66, 3, 1, "", "calculate_op_sensitivity"], [66, 3, 1, "", "convert_sub_graph"], [66, 3, 1, "", "evaluate"], [66, 3, 1, "", "fuse_fx_model"], [66, 3, 1, "", "prepare_sub_graph"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "inspect_tensor"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "query_fw_capability"], [66, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[66, 3, 1, "", "calculate_hessian_trace"], [66, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[67, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[67, 3, 1, "", "get_fuse_patterns"], [67, 3, 1, "", "get_mixed_precision_combination"], [67, 3, 1, "", "get_op_types"], [67, 3, 1, "", "get_precisions"], [67, 3, 1, "", "get_quantization_capability"], [67, 3, 1, "", "get_version"], [67, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[68, 2, 1, "", "TensorFlowAdaptor"], [68, 2, 1, "", "TensorflowQuery"], [68, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[68, 3, 1, "", "calculate_op_sensitivity"], [68, 3, 1, "", "convert"], [68, 3, 1, "", "evaluate"], [68, 3, 1, "", "fused_node_mapping"], [68, 3, 1, "", "get_optype_wise_ability"], [68, 3, 1, "", "inspect_activation"], [68, 3, 1, "", "inspect_tensor"], [68, 3, 1, "", "inspect_weight_and_bias"], [68, 3, 1, "", "qat_convert"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "quantize_input"], [68, 3, 1, "", "query_fw_capability"], [68, 3, 1, "", "recover_tuned_model"], [68, 3, 1, "", "save"], [68, 3, 1, "", "set_tensor"], [68, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[68, 3, 1, "", "generate_internal_patterns"], [68, 3, 1, "", "get_eightbit_patterns"], [68, 3, 1, "", "get_fuse_patterns"], [68, 3, 1, "", "get_mixed_precision_combination"], [68, 3, 1, "", "get_op_types"], [68, 3, 1, "", "get_op_types_by_precision"], [68, 3, 1, "", "get_precisions"], [68, 3, 1, "", "get_quantization_capability"], [68, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[68, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[69, 0, 0, "-", "graph_converter"], [70, 0, 0, "-", "graph_converter_without_calib"], [109, 0, 0, "-", "graph_rewriter"], [127, 0, 0, "-", "graph_util"], [129, 0, 0, "-", "quantize_graph"], [156, 0, 0, "-", "quantize_graph_common"], [159, 0, 0, "-", "transform_graph"], [162, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[72, 0, 0, "-", "bf16"], [97, 0, 0, "-", "generic"], [108, 0, 0, "-", "graph_base"], [117, 0, 0, "-", "int8"], [123, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[71, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[73, 0, 0, "-", "convert_add_to_biasadd"], [74, 0, 0, "-", "convert_layout"], [75, 0, 0, "-", "convert_leakyrelu"], [76, 0, 0, "-", "convert_nan_to_random"], [77, 0, 0, "-", "convert_placeholder_to_const"], [78, 0, 0, "-", "dequantize_cast_optimizer"], [79, 0, 0, "-", "dilated_contraction"], [80, 0, 0, "-", "dummy_biasadd"], [81, 0, 0, "-", "expanddims_optimizer"], [82, 0, 0, "-", "fetch_weight_from_reshape"], [83, 0, 0, "-", "fold_batch_norm"], [84, 0, 0, "-", "fold_constant"], [85, 0, 0, "-", "fuse_biasadd_add"], [86, 0, 0, "-", "fuse_column_wise_mul"], [87, 0, 0, "-", "fuse_conv_with_math"], [88, 0, 0, "-", "fuse_decomposed_bn"], [89, 0, 0, "-", "fuse_decomposed_in"], [90, 0, 0, "-", "fuse_gelu"], [91, 0, 0, "-", "fuse_layer_norm"], [92, 0, 0, "-", "fuse_pad_with_conv"], [93, 0, 0, "-", "fuse_pad_with_fp32_conv"], [94, 0, 0, "-", "fuse_reshape_transpose"], [95, 0, 0, "-", "graph_cse_optimizer"], [96, 0, 0, "-", "grappler_pass"], [98, 0, 0, "-", "insert_print_node"], [99, 0, 0, "-", "move_squeeze_after_relu"], [100, 0, 0, "-", "pre_optimize"], [101, 0, 0, "-", "remove_training_nodes"], [102, 0, 0, "-", "rename_batch_norm"], [103, 0, 0, "-", "split_shared_input"], [104, 0, 0, "-", "strip_equivalent_nodes"], [105, 0, 0, "-", "strip_unused_nodes"], [106, 0, 0, "-", "switch_optimizer"], [107, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[73, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[77, 3, 1, "", "do_transformation"], [77, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[83, 3, 1, "", "do_transformation"], [83, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[84, 3, 1, "", "check_all_folded"], [84, 3, 1, "", "check_const_inputs"], [84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, 1, 1, "", "get_const_dim_count"], [88, 1, 1, "", "node_from_map"], [88, 1, 1, "", "node_name_from_input"], [88, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, 1, 1, "", "get_const_dim_count"], [89, 1, 1, "", "node_from_map"], [89, 1, 1, "", "node_name_from_input"], [89, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, 2, 1, "", "FuseLayerNormOptimizer"], [91, 1, 1, "", "node_from_map"], [91, 1, 1, "", "node_name_from_input"], [91, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[110, 0, 0, "-", "freeze_fake_quant"], [111, 0, 0, "-", "freeze_value"], [112, 0, 0, "-", "freeze_value_without_calib"], [113, 0, 0, "-", "fuse_conv_redundant_dequantize"], [114, 0, 0, "-", "fuse_conv_requantize"], [115, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [116, 0, 0, "-", "fuse_matmul_requantize"], [118, 0, 0, "-", "meta_op_optimizer"], [119, 0, 0, "-", "post_hostconst_converter"], [120, 0, 0, "-", "post_quantized_op_cse"], [121, 0, 0, "-", "rnn_convert"], [122, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[111, 3, 1, "", "do_transformation"], [111, 3, 1, "", "generate_output_graph"], [111, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[112, 3, 1, "", "generate_output_graph"], [112, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [116, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [116, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [116, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[124, 0, 0, "-", "insert_qdq_pattern"], [125, 0, 0, "-", "merge_duplicated_qdq"], [126, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, 2, 1, "", "GraphAnalyzer"], [127, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[127, 3, 1, "", "add_node"], [127, 3, 1, "", "dump_graph"], [127, 3, 1, "", "get_graph_input_output"], [127, 4, 1, "", "graph"], [127, 3, 1, "", "has_positive_input"], [127, 3, 1, "", "parse_graph"], [127, 3, 1, "", "query_fusion_pattern_nodes"], [127, 3, 1, "", "remove_node"], [127, 3, 1, "", "remove_node_with_single_input_output"], [127, 3, 1, "", "replace_const_node"], [127, 3, 1, "", "replace_constant_graph_with_constant_node"], [127, 3, 1, "", "replace_node"], [127, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[127, 3, 1, "", "compare_node_attr"], [127, 3, 1, "", "create_constant_node"], [127, 3, 1, "", "create_node"], [127, 3, 1, "", "node_name_from_input"], [127, 3, 1, "", "set_attr_bool"], [127, 3, 1, "", "set_attr_dtype"], [127, 3, 1, "", "set_attr_float"], [127, 3, 1, "", "set_attr_int"], [127, 3, 1, "", "set_attr_int_list"], [127, 3, 1, "", "set_attr_string"], [127, 3, 1, "", "set_attr_string_list"], [127, 3, 1, "", "set_attr_tensor"], [127, 3, 1, "", "set_attr_type_list"], [127, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[131, 0, 0, "-", "qat"], [147, 0, 0, "-", "qdq"], [149, 0, 0, "-", "quantize_graph_base"], [150, 0, 0, "-", "quantize_graph_bn"], [151, 0, 0, "-", "quantize_graph_concatv2"], [152, 0, 0, "-", "quantize_graph_conv"], [153, 0, 0, "-", "quantize_graph_for_intel_cpu"], [154, 0, 0, "-", "quantize_graph_matmul"], [155, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[130, 0, 0, "-", "fake_quantize"], [132, 0, 0, "-", "quantize_config"], [133, 0, 0, "-", "quantize_helper"], [134, 0, 0, "-", "quantize_layers"], [139, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[130, 2, 1, "", "FakeQuantize"], [130, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[130, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[130, 3, 1, "", "from_config"], [130, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[132, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[132, 3, 1, "", "add_quantize_recipe"], [132, 3, 1, "", "clear_quantize_recipe"], [132, 3, 1, "", "get_quantize_recipe"], [132, 3, 1, "", "is_empty"], [132, 3, 1, "", "query_layer"], [132, 3, 1, "", "remove_layer"], [132, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[133, 1, 1, "", "init_quantize_config"], [133, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[135, 0, 0, "-", "optimize_layer"], [136, 0, 0, "-", "quantize_layer_add"], [137, 0, 0, "-", "quantize_layer_base"], [138, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[136, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[138, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[139, 2, 1, "", "QuantizeWrapper"], [139, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[139, 3, 1, "", "build"], [139, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[139, 3, 1, "", "build"], [139, 3, 1, "", "call"], [139, 3, 1, "", "compute_output_shape"], [139, 3, 1, "", "from_config"], [139, 3, 1, "", "get_config"], [139, 4, 1, "", "losses"], [139, 4, 1, "", "non_trainable_weights"], [139, 3, 1, "", "query_input_index"], [139, 4, 1, "", "trainable"], [139, 4, 1, "", "trainable_weights"], [139, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[140, 0, 0, "-", "fuse_qdq_bn"], [141, 0, 0, "-", "fuse_qdq_concatv2"], [142, 0, 0, "-", "fuse_qdq_conv"], [143, 0, 0, "-", "fuse_qdq_deconv"], [144, 0, 0, "-", "fuse_qdq_in"], [145, 0, 0, "-", "fuse_qdq_matmul"], [146, 0, 0, "-", "fuse_qdq_pooling"], [148, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[140, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[140, 3, 1, "", "apply_the_transform"], [140, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[141, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[141, 3, 1, "", "apply_the_transform"], [141, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[142, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[142, 3, 1, "", "apply_the_transform"], [142, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[143, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[143, 3, 1, "", "apply_the_transform"], [143, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[144, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[144, 3, 1, "", "apply_the_transform"], [144, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[145, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[145, 3, 1, "", "apply_batchmatmulv2_fusion"], [145, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [145, 3, 1, "", "apply_matmul_biasadd_fusion"], [145, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [145, 3, 1, "", "apply_the_transform"], [145, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[146, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[148, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[148, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[149, 2, 1, "", "QuantizeGraphBase"], [149, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[149, 3, 1, "", "do_transform"], [149, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[149, 3, 1, "", "add_output_graph_node"], [149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "create_nodes_map"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[150, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[150, 3, 1, "", "apply_the_transform"], [150, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[151, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[151, 3, 1, "", "apply_the_transform"], [151, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[152, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[152, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [152, 3, 1, "", "apply_the_transform"], [152, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[153, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[153, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[154, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[154, 3, 1, "", "apply_the_transform"], [154, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[155, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[156, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[156, 3, 1, "", "copy_attr"], [156, 3, 1, "", "create_constant_node"], [156, 3, 1, "", "create_node"], [156, 3, 1, "", "ensure_tensor_name_has_port"], [156, 3, 1, "", "get_sorted_graph"], [156, 3, 1, "", "node_name_from_input"], [156, 3, 1, "", "remove_training_nodes"], [156, 3, 1, "", "set_attr_bool"], [156, 3, 1, "", "set_attr_dtype"], [156, 3, 1, "", "set_attr_float"], [156, 3, 1, "", "set_attr_int"], [156, 3, 1, "", "set_attr_string"], [156, 3, 1, "", "set_attr_string_list"], [156, 3, 1, "", "set_attr_tensor"], [156, 3, 1, "", "set_attr_type_list"], [156, 3, 1, "", "split_shared_inputs"], [156, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[157, 0, 0, "-", "bias_correction"], [158, 0, 0, "-", "graph_transform_base"], [160, 0, 0, "-", "insert_logging"], [161, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[157, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[157, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[160, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[160, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[161, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[161, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[162, 1, 1, "", "disable_random"], [162, 1, 1, "", "get_tensor_by_name"], [162, 1, 1, "", "get_tensor_val_from_graph_node"], [162, 1, 1, "", "is_ckpt_format"], [162, 1, 1, "", "is_saved_model_format"], [162, 1, 1, "", "iterator_sess_run"], [162, 1, 1, "", "read_graph"], [162, 1, 1, "", "strip_equivalent_nodes"], [162, 1, 1, "", "strip_unused_nodes"], [162, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[163, 0, 0, "-", "bf16_convert"], [164, 0, 0, "-", "hawq_metric"], [166, 0, 0, "-", "onnx"], [167, 0, 0, "-", "symbolic_trace"], [168, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[164, 2, 1, "", "HessianTrace"], [164, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[164, 3, 1, "", "get_act_gap"], [164, 3, 1, "", "get_avg_traces"], [164, 3, 1, "", "is_fused_module"], [164, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[168, 1, 1, "", "append_attr"], [168, 1, 1, "", "get_embedding_contiguous"], [168, 1, 1, "", "get_mse_order_per_fp32"], [168, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[171, 2, 1, "", "Algorithm"], [171, 2, 1, "", "AlgorithmScheduler"], [169, 0, 0, "-", "algorithm"], [171, 1, 1, "", "algorithm_registry"], [170, 0, 0, "-", "fast_bias_correction"], [172, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[169, 2, 1, "", "Algorithm"], [169, 2, 1, "", "AlgorithmScheduler"], [169, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[170, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[172, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[173, 2, 1, "", "Benchmark"], [173, 1, 1, "", "fit"]], "neural_compressor.conf": [[174, 0, 0, "-", "config"], [175, 0, 0, "-", "dotdict"], [177, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[174, 2, 1, "", "Benchmark_Conf"], [174, 2, 1, "", "Conf"], [174, 2, 1, "", "DefaultConf"], [174, 2, 1, "", "Distillation_Conf"], [174, 2, 1, "", "Graph_Optimization_Conf"], [174, 2, 1, "", "MixedPrecision_Conf"], [174, 2, 1, "", "NASConfig"], [174, 2, 1, "", "Pruning_Conf"], [174, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[175, 2, 1, "", "DotDict"], [175, 1, 1, "", "deep_get"], [175, 1, 1, "", "deep_set"]], "neural_compressor.config": [[178, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[180, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[181, 0, 0, "-", "sigopt"], [182, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[181, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[181, 3, 1, "", "next_tune_cfg"], [181, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[182, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[182, 3, 1, "", "stop"], [182, 3, 1, "", "traverse"]], "neural_compressor.data": [[187, 2, 1, "", "BaseTransform"], [187, 2, 1, "", "DATASETS"], [187, 2, 1, "", "DataLoader"], [187, 2, 1, "", "Dataset"], [187, 2, 1, "", "FILTERS"], [187, 2, 1, "", "Filter"], [187, 2, 1, "", "IterableDataset"], [187, 2, 1, "", "TRANSFORMS"], [184, 0, 0, "-", "dataloaders"], [187, 1, 1, "", "dataset_registry"], [186, 0, 0, "-", "datasets"], [187, 1, 1, "", "filter_registry"], [187, 1, 1, "", "transform_registry"], [190, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[187, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[184, 2, 1, "", "DataLoader"], [183, 0, 0, "-", "dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[183, 2, 1, "", "DataLoader"]], "neural_compressor.data.datasets": [[185, 0, 0, "-", "imagenet_dataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[185, 2, 1, "", "ONNXRTImagenetDataset"], [185, 2, 1, "", "TensorflowImagenetDataset"]], "neural_compressor.data.transforms": [[188, 0, 0, "-", "coco_transform"], [189, 0, 0, "-", "imagenet_transform"]], "neural_compressor.data.transforms.coco_transform": [[188, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[189, 2, 1, "", "BilinearImagenetTransform"], [189, 2, 1, "", "ONNXResizeCropImagenetTransform"], [189, 2, 1, "", "OnnxBilinearImagenetTransform"], [189, 2, 1, "", "ParseDecodeImagenetTransform"], [189, 2, 1, "", "ResizeWithAspectRatio"], [189, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental": [[232, 2, 1, "", "Benchmark"], [232, 2, 1, "", "Component"], [232, 2, 1, "", "Distillation"], [232, 2, 1, "", "Graph_Optimization"], [232, 2, 1, "", "MixedPrecision"], [232, 2, 1, "", "ModelConversion"], [232, 2, 1, "", "NAS"], [232, 2, 1, "", "Pruning"], [232, 2, 1, "", "Quantization"], [191, 0, 0, "-", "benchmark"], [194, 0, 0, "-", "common"], [200, 0, 0, "-", "component"], [222, 0, 0, "-", "data"], [227, 0, 0, "-", "distillation"], [228, 0, 0, "-", "export"], [231, 0, 0, "-", "graph_optimization"], [239, 0, 0, "-", "metric"], [241, 0, 0, "-", "mixed_precision"], [242, 0, 0, "-", "model_conversion"], [250, 0, 0, "-", "nas"], [254, 0, 0, "-", "pruning"], [255, 0, 0, "-", "pruning_recipes"], [259, 0, 0, "-", "pytorch_pruner"], [266, 0, 0, "-", "quantization"], [267, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[232, 4, 1, "", "b_dataloader"], [232, 4, 1, "", "b_func"], [232, 3, 1, "", "config_instance"], [232, 3, 1, "", "generate_prefix"], [232, 4, 1, "", "metric"], [232, 4, 1, "", "model"], [232, 4, 1, "", "postprocess"], [232, 4, 1, "", "results"], [232, 3, 1, "", "run_instance"], [232, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[232, 4, 1, "", "eval_dataloader"], [232, 4, 1, "", "eval_func"], [232, 3, 1, "", "execute"], [232, 4, 1, "", "model"], [232, 3, 1, "", "on_after_compute_loss"], [232, 3, 1, "", "on_batch_begin"], [232, 3, 1, "", "on_batch_end"], [232, 3, 1, "", "on_before_optimizer_step"], [232, 3, 1, "", "on_epoch_begin"], [232, 3, 1, "", "on_epoch_end"], [232, 3, 1, "", "on_post_grad"], [232, 3, 1, "", "on_step_begin"], [232, 3, 1, "", "on_step_end"], [232, 3, 1, "", "on_train_begin"], [232, 3, 1, "", "on_train_end"], [232, 3, 1, "", "post_epoch_end"], [232, 3, 1, "", "post_process"], [232, 3, 1, "", "pre_epoch_begin"], [232, 3, 1, "", "pre_process"], [232, 3, 1, "", "prepare"], [232, 3, 1, "", "prepare_qat"], [232, 3, 1, "", "register_hook"], [232, 4, 1, "", "train_dataloader"], [232, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[232, 5, 1, "", "_epoch_ran"], [232, 5, 1, "", "best_model"], [232, 5, 1, "", "best_score"], [232, 3, 1, "", "create_criterion"], [232, 3, 1, "", "create_optimizer"], [232, 4, 1, "", "criterion"], [232, 5, 1, "", "eval_frequency"], [232, 4, 1, "", "evaluation_distributed"], [232, 3, 1, "", "execute"], [232, 3, 1, "", "generate_hooks"], [232, 3, 1, "", "init_train_cfg"], [232, 3, 1, "", "on_post_forward"], [232, 4, 1, "", "optimizer"], [232, 3, 1, "", "pre_process"], [232, 3, 1, "", "prepare"], [232, 4, 1, "", "student_model"], [232, 4, 1, "", "teacher_model"], [232, 4, 1, "", "train_cfg"], [232, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[232, 3, 1, "", "dataset"], [232, 4, 1, "", "eval_dataloader"], [232, 4, 1, "", "eval_func"], [232, 4, 1, "", "input"], [232, 4, 1, "", "metric"], [232, 4, 1, "", "model"], [232, 4, 1, "", "output"], [232, 4, 1, "", "postprocess"], [232, 4, 1, "", "precisions"], [232, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[232, 4, 1, "", "precisions"], [232, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[232, 3, 1, "", "dataset"], [232, 4, 1, "", "destination"], [232, 4, 1, "", "eval_dataloader"], [232, 4, 1, "", "eval_func"], [232, 4, 1, "", "metric"], [232, 4, 1, "", "model"], [232, 4, 1, "", "postprocess"], [232, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[232, 5, 1, "", "conf"], [232, 4, 1, "", "evaluation_distributed"], [232, 3, 1, "", "execute"], [232, 3, 1, "", "generate_hooks"], [232, 3, 1, "", "generate_pruners"], [232, 3, 1, "", "pre_process"], [232, 3, 1, "", "prepare"], [232, 5, 1, "", "pruners"], [232, 4, 1, "", "pruning_func"], [232, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[232, 4, 1, "", "calib_dataloader"], [232, 3, 1, "", "dataset"], [232, 3, 1, "", "execute"], [232, 4, 1, "", "metric"], [232, 4, 1, "", "model"], [232, 4, 1, "", "objective"], [232, 4, 1, "", "postprocess"], [232, 3, 1, "", "pre_process"], [232, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[191, 2, 1, "", "Benchmark"], [191, 1, 1, "", "get_architecture"], [191, 1, 1, "", "get_bounded_threads"], [191, 1, 1, "", "get_core_ids"], [191, 1, 1, "", "get_physical_ids"], [191, 1, 1, "", "get_threads"], [191, 1, 1, "", "get_threads_per_core"], [191, 1, 1, "", "set_all_env_var"], [191, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[191, 4, 1, "", "b_dataloader"], [191, 4, 1, "", "b_func"], [191, 3, 1, "", "config_instance"], [191, 3, 1, "", "generate_prefix"], [191, 4, 1, "", "metric"], [191, 4, 1, "", "model"], [191, 4, 1, "", "postprocess"], [191, 4, 1, "", "results"], [191, 3, 1, "", "run_instance"], [191, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[194, 2, 1, "", "DataLoader"], [194, 2, 1, "", "Metric"], [194, 2, 1, "", "Model"], [194, 2, 1, "", "Postprocess"], [192, 0, 0, "-", "criterion"], [193, 0, 0, "-", "dataloader"], [195, 0, 0, "-", "metric"], [196, 0, 0, "-", "model"], [197, 0, 0, "-", "optimizer"], [198, 0, 0, "-", "postprocess"], [199, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[192, 2, 1, "", "Criterions"], [192, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [192, 2, 1, "", "KnowledgeDistillationFramework"], [192, 2, 1, "", "KnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchCriterions"], [192, 2, 1, "", "PyTorchCrossEntropyLoss"], [192, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "SelfKnowledgeDistillationLoss"], [192, 2, 1, "", "TensorFlowCrossEntropyLoss"], [192, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [192, 2, 1, "", "TensorflowCriterions"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [192, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[192, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[192, 3, 1, "", "clear_features"], [192, 3, 1, "", "init_feature_matcher"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[192, 4, 1, "", "student_model"], [192, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[192, 3, 1, "", "init_feature_matcher"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "register_hooks_for_models"], [192, 3, 1, "", "remove_all_hooks"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[192, 3, 1, "", "KullbackLeiblerDivergence"], [192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[192, 3, 1, "", "KullbackLeiblerDivergence"], [192, 3, 1, "", "L2Divergence"], [192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[193, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[195, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[196, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[197, 2, 1, "", "Optimizers"], [197, 2, 1, "", "PyTorchOptimizers"], [197, 2, 1, "", "PyTorchSGD"], [197, 2, 1, "", "TensorFlowAdam"], [197, 2, 1, "", "TensorFlowAdamW"], [197, 2, 1, "", "TensorFlowSGD"], [197, 2, 1, "", "TensorflowOptimizers"], [197, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[197, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[198, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[199, 1, 1, "", "get_activation"], [199, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[200, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[200, 4, 1, "", "eval_dataloader"], [200, 4, 1, "", "eval_func"], [200, 3, 1, "", "execute"], [200, 4, 1, "", "model"], [200, 3, 1, "", "on_after_compute_loss"], [200, 3, 1, "", "on_batch_begin"], [200, 3, 1, "", "on_batch_end"], [200, 3, 1, "", "on_before_optimizer_step"], [200, 3, 1, "", "on_epoch_begin"], [200, 3, 1, "", "on_epoch_end"], [200, 3, 1, "", "on_post_grad"], [200, 3, 1, "", "on_step_begin"], [200, 3, 1, "", "on_step_end"], [200, 3, 1, "", "on_train_begin"], [200, 3, 1, "", "on_train_end"], [200, 3, 1, "", "post_epoch_end"], [200, 3, 1, "", "post_process"], [200, 3, 1, "", "pre_epoch_begin"], [200, 3, 1, "", "pre_process"], [200, 3, 1, "", "prepare"], [200, 3, 1, "", "prepare_qat"], [200, 3, 1, "", "register_hook"], [200, 4, 1, "", "train_dataloader"], [200, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[222, 2, 1, "", "BaseTransform"], [222, 2, 1, "", "DATASETS"], [222, 2, 1, "", "Dataset"], [222, 2, 1, "", "FILTERS"], [222, 2, 1, "", "Filter"], [222, 2, 1, "", "IterableDataset"], [222, 2, 1, "", "TRANSFORMS"], [205, 0, 0, "-", "dataloaders"], [222, 1, 1, "", "dataset_registry"], [217, 0, 0, "-", "datasets"], [222, 1, 1, "", "filter_registry"], [221, 0, 0, "-", "filters"], [222, 1, 1, "", "transform_registry"], [224, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[222, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[201, 0, 0, "-", "base_dataloader"], [202, 0, 0, "-", "dataloader"], [203, 0, 0, "-", "default_dataloader"], [204, 0, 0, "-", "fetcher"], [206, 0, 0, "-", "mxnet_dataloader"], [207, 0, 0, "-", "onnxrt_dataloader"], [208, 0, 0, "-", "pytorch_dataloader"], [209, 0, 0, "-", "sampler"], [210, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[201, 3, 1, "", "batch"], [201, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, 2, 1, "", "DefaultDataLoader"], [203, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[203, 3, 1, "", "batch"], [203, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, 2, 1, "", "Fetcher"], [204, 2, 1, "", "IndexFetcher"], [204, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, 2, 1, "", "ONNXRTBertDataLoader"], [207, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, 2, 1, "", "BatchSampler"], [209, 2, 1, "", "IterableSampler"], [209, 2, 1, "", "Sampler"], [209, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, 2, 1, "", "TFDataDataLoader"], [210, 2, 1, "", "TensorflowBertDataLoader"], [210, 2, 1, "", "TensorflowDataLoader"], [210, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[210, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[217, 2, 1, "", "DATASETS"], [217, 2, 1, "", "Dataset"], [217, 2, 1, "", "IterableDataset"], [211, 0, 0, "-", "bert_dataset"], [212, 0, 0, "-", "coco_dataset"], [213, 0, 0, "-", "dataset"], [217, 1, 1, "", "dataset_registry"], [214, 0, 0, "-", "dummy_dataset"], [215, 0, 0, "-", "dummy_dataset_v2"], [216, 0, 0, "-", "imagenet_dataset"], [218, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, 2, 1, "", "InputFeatures"], [211, 2, 1, "", "ONNXRTBertDataset"], [211, 2, 1, "", "ParseDecodeBert"], [211, 2, 1, "", "PytorchBertDataset"], [211, 2, 1, "", "TensorflowBertDataset"], [211, 2, 1, "", "TensorflowModelZooBertDataset"], [211, 1, 1, "", "convert_examples_to_features"], [211, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[211, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, 2, 1, "", "COCONpy"], [212, 2, 1, "", "COCORaw"], [212, 2, 1, "", "COCORecordDataset"], [212, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[213, 2, 1, "", "CIFAR10"], [213, 2, 1, "", "CIFAR100"], [213, 2, 1, "", "DATASETS"], [213, 2, 1, "", "Dataset"], [213, 2, 1, "", "FashionMNIST"], [213, 2, 1, "", "ImageFolder"], [213, 2, 1, "", "IterableDataset"], [213, 2, 1, "", "MNIST"], [213, 2, 1, "", "MXNetCIFAR10"], [213, 2, 1, "", "MXNetCIFAR100"], [213, 2, 1, "", "MXNetDatasets"], [213, 2, 1, "", "MXNetFashionMNIST"], [213, 2, 1, "", "MXNetImageFolder"], [213, 2, 1, "", "MXNetMNIST"], [213, 2, 1, "", "ONNXRTITDatasets"], [213, 2, 1, "", "ONNXRTQLDatasets"], [213, 2, 1, "", "PyTorchDatasets"], [213, 2, 1, "", "PytorchCIFAR10"], [213, 2, 1, "", "PytorchCIFAR100"], [213, 2, 1, "", "PytorchFashionMNIST"], [213, 2, 1, "", "PytorchMNIST"], [213, 2, 1, "", "PytorchMxnetWrapDataset"], [213, 2, 1, "", "PytorchMxnetWrapFunction"], [213, 2, 1, "", "TensorflowCIFAR10"], [213, 2, 1, "", "TensorflowCIFAR100"], [213, 2, 1, "", "TensorflowDatasets"], [213, 2, 1, "", "TensorflowFashionMNIST"], [213, 2, 1, "", "TensorflowImageFolder"], [213, 2, 1, "", "TensorflowImageRecord"], [213, 2, 1, "", "TensorflowMNIST"], [213, 2, 1, "", "TensorflowTFRecordDataset"], [213, 2, 1, "", "TensorflowVOCRecord"], [213, 1, 1, "", "calculate_md5"], [213, 1, 1, "", "check_integrity"], [213, 1, 1, "", "dataset_registry"], [213, 1, 1, "", "download_url"], [213, 6, 1, "", "framework_datasets"], [213, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[213, 3, 1, "", "download"], [213, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[213, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[213, 4, 1, "", "class_to_idx"], [213, 3, 1, "", "download"], [213, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, 2, 1, "", "DummyDataset"], [215, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, 2, 1, "", "ImagenetRaw"], [216, 2, 1, "", "MXNetImagenetRaw"], [216, 2, 1, "", "PytorchImagenetRaw"], [216, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[221, 2, 1, "", "FILTERS"], [221, 2, 1, "", "Filter"], [219, 0, 0, "-", "coco_filter"], [220, 0, 0, "-", "filter"], [221, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, 2, 1, "", "LabelBalanceCOCORawFilter"], [219, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[220, 2, 1, "", "FILTERS"], [220, 2, 1, "", "Filter"], [220, 2, 1, "", "MXNetFilters"], [220, 2, 1, "", "ONNXRTITFilters"], [220, 2, 1, "", "ONNXRTQLFilters"], [220, 2, 1, "", "PyTorchFilters"], [220, 2, 1, "", "TensorflowFilters"], [220, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[224, 2, 1, "", "BaseTransform"], [224, 2, 1, "", "TRANSFORMS"], [223, 0, 0, "-", "imagenet_transform"], [225, 0, 0, "-", "tokenization"], [226, 0, 0, "-", "transform"], [224, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[224, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, 2, 1, "", "LabelShift"], [223, 2, 1, "", "ParseDecodeImagenet"], [223, 2, 1, "", "QuantizedInput"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, 2, 1, "", "BasicTokenizer"], [225, 2, 1, "", "FullTokenizer"], [225, 2, 1, "", "WordpieceTokenizer"], [225, 1, 1, "", "convert_by_vocab"], [225, 1, 1, "", "convert_to_unicode"], [225, 1, 1, "", "load_vocab"], [225, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[225, 3, 1, "", "convert_ids_to_tokens"], [225, 3, 1, "", "convert_tokens_to_ids"], [225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[226, 2, 1, "", "AlignImageChannelTransform"], [226, 2, 1, "", "BaseTransform"], [226, 2, 1, "", "CastONNXTransform"], [226, 2, 1, "", "CastPyTorchTransform"], [226, 2, 1, "", "CastTFTransform"], [226, 2, 1, "", "CenterCropTFTransform"], [226, 2, 1, "", "CenterCropTransform"], [226, 2, 1, "", "CollectTransform"], [226, 2, 1, "", "ComposeTransform"], [226, 2, 1, "", "CropResizeTFTransform"], [226, 2, 1, "", "CropResizeTransform"], [226, 2, 1, "", "CropToBoundingBox"], [226, 2, 1, "", "InputFeatures"], [226, 2, 1, "", "MXNetCropResizeTransform"], [226, 2, 1, "", "MXNetCropToBoundingBox"], [226, 2, 1, "", "MXNetNormalizeTransform"], [226, 2, 1, "", "MXNetTransforms"], [226, 2, 1, "", "MXNetTranspose"], [226, 2, 1, "", "NormalizeTFTransform"], [226, 2, 1, "", "NormalizeTransform"], [226, 2, 1, "", "ONNXRTCropToBoundingBox"], [226, 2, 1, "", "ONNXRTITTransforms"], [226, 2, 1, "", "ONNXRTQLTransforms"], [226, 2, 1, "", "PaddedCenterCropTransform"], [226, 2, 1, "", "ParseDecodeVocTransform"], [226, 2, 1, "", "PyTorchAlignImageChannel"], [226, 2, 1, "", "PyTorchCropResizeTransform"], [226, 2, 1, "", "PyTorchNormalizeTransform"], [226, 2, 1, "", "PyTorchTransforms"], [226, 2, 1, "", "PyTorchTranspose"], [226, 2, 1, "", "PytorchMxnetTransform"], [226, 2, 1, "", "PytorchMxnetWrapFunction"], [226, 2, 1, "", "RandomCropTFTransform"], [226, 2, 1, "", "RandomCropTransform"], [226, 2, 1, "", "RandomHorizontalFlip"], [226, 2, 1, "", "RandomResizedCropMXNetTransform"], [226, 2, 1, "", "RandomResizedCropPytorchTransform"], [226, 2, 1, "", "RandomResizedCropTFTransform"], [226, 2, 1, "", "RandomResizedCropTransform"], [226, 2, 1, "", "RandomVerticalFlip"], [226, 2, 1, "", "RescaleKerasPretrainTransform"], [226, 2, 1, "", "RescaleTFTransform"], [226, 2, 1, "", "RescaleTransform"], [226, 2, 1, "", "ResizeMXNetTransform"], [226, 2, 1, "", "ResizePytorchTransform"], [226, 2, 1, "", "ResizeTFTransform"], [226, 2, 1, "", "ResizeTransform"], [226, 2, 1, "", "ResizeWithRatio"], [226, 2, 1, "", "SquadExample"], [226, 2, 1, "", "TFModelZooCollectTransform"], [226, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [226, 2, 1, "", "TFSquadV1PostTransform"], [226, 2, 1, "", "TRANSFORMS"], [226, 2, 1, "", "TensorflowCropToBoundingBox"], [226, 2, 1, "", "TensorflowRandomHorizontalFlip"], [226, 2, 1, "", "TensorflowRandomVerticalFlip"], [226, 2, 1, "", "TensorflowResizeWithRatio"], [226, 2, 1, "", "TensorflowTransform"], [226, 2, 1, "", "TensorflowTransforms"], [226, 2, 1, "", "TensorflowTranspose"], [226, 2, 1, "", "TensorflowWrapFunction"], [226, 2, 1, "", "ToArray"], [226, 2, 1, "", "ToNDArrayTransform"], [226, 2, 1, "", "Transforms"], [226, 2, 1, "", "Transpose"], [226, 1, 1, "", "convert_examples_to_features"], [226, 1, 1, "", "get_final_text"], [226, 1, 1, "", "get_torchvision_map"], [226, 1, 1, "", "read_squad_examples"], [226, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[226, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[226, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[226, 3, 1, "", "get_postprocess_result"], [226, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[226, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[227, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[227, 5, 1, "", "_epoch_ran"], [227, 5, 1, "", "best_model"], [227, 5, 1, "", "best_score"], [227, 3, 1, "", "create_criterion"], [227, 3, 1, "", "create_optimizer"], [227, 4, 1, "", "criterion"], [227, 5, 1, "", "eval_frequency"], [227, 4, 1, "", "evaluation_distributed"], [227, 3, 1, "", "execute"], [227, 3, 1, "", "generate_hooks"], [227, 3, 1, "", "init_train_cfg"], [227, 3, 1, "", "on_post_forward"], [227, 4, 1, "", "optimizer"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 4, 1, "", "student_model"], [227, 4, 1, "", "teacher_model"], [227, 4, 1, "", "train_cfg"], [227, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[229, 0, 0, "-", "torch2onnx"], [228, 1, 1, "", "torch_to_fp32_onnx"], [228, 1, 1, "", "torch_to_int8_onnx"], [230, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.torch2onnx": [[229, 1, 1, "", "build_scale_mapping"], [229, 1, 1, "", "get_node_mapping"], [229, 1, 1, "", "get_quantizable_onnx_ops"], [229, 1, 1, "", "qdq_fp32_bias"], [229, 1, 1, "", "qdq_fp32_bias_qdq"], [229, 1, 1, "", "qdq_int32_bias"], [229, 1, 1, "", "recalculate_bias"], [229, 1, 1, "", "remove_nodes_by_name"], [229, 1, 1, "", "set_data_type"], [229, 1, 1, "", "set_scale_info"], [229, 1, 1, "", "sub_graph_with_int32_bias"], [229, 1, 1, "", "torch_to_fp32_onnx"], [229, 1, 1, "", "torch_to_int8_onnx"], [229, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[230, 2, 1, "", "DummyDataReader"], [230, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[230, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[231, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[231, 3, 1, "", "dataset"], [231, 4, 1, "", "eval_dataloader"], [231, 4, 1, "", "eval_func"], [231, 4, 1, "", "input"], [231, 4, 1, "", "metric"], [231, 4, 1, "", "model"], [231, 4, 1, "", "output"], [231, 4, 1, "", "postprocess"], [231, 4, 1, "", "precisions"], [231, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[239, 2, 1, "", "BaseMetric"], [239, 2, 1, "", "METRICS"], [233, 0, 0, "-", "bleu"], [234, 0, 0, "-", "bleu_util"], [235, 0, 0, "-", "coco_label_map"], [236, 0, 0, "-", "coco_tools"], [237, 0, 0, "-", "evaluate_squad"], [238, 0, 0, "-", "f1"], [240, 0, 0, "-", "metric"], [239, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[239, 4, 1, "", "hvd"], [239, 4, 1, "", "metric"], [239, 3, 1, "", "reset"], [239, 3, 1, "", "result"], [239, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[239, 5, 1, "", "metrics"], [239, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[233, 2, 1, "", "BLEU"], [233, 2, 1, "", "UnicodeRegex"], [233, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[233, 5, 1, "", "labels"], [233, 5, 1, "", "predictions"], [233, 3, 1, "", "reset"], [233, 3, 1, "", "result"], [233, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[233, 5, 1, "", "nondigit_punct_re"], [233, 3, 1, "", "property_chars"], [233, 5, 1, "", "punct_nondigit_re"], [233, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[234, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[236, 2, 1, "", "COCOEvalWrapper"], [236, 2, 1, "", "COCOWrapper"], [236, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [236, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [236, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[236, 3, 1, "", "ComputeMetrics"], [236, 3, 1, "", "GetAgnosticMode"], [236, 3, 1, "", "GetCategory"], [236, 3, 1, "", "GetCategoryIdList"], [236, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[236, 3, 1, "", "LoadAnnotations"], [236, 5, 1, "", "dataset"], [236, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[237, 1, 1, "", "evaluate"], [237, 1, 1, "", "exact_match_score"], [237, 1, 1, "", "f1_score"], [237, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[238, 1, 1, "", "evaluate"], [238, 1, 1, "", "f1_score"], [238, 1, 1, "", "metric_max_over_ground_truths"], [238, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[240, 2, 1, "", "Accuracy"], [240, 2, 1, "", "BaseMetric"], [240, 2, 1, "", "COCOmAPv2"], [240, 2, 1, "", "F1"], [240, 2, 1, "", "GeneralTopK"], [240, 2, 1, "", "Loss"], [240, 2, 1, "", "MAE"], [240, 2, 1, "", "METRICS"], [240, 2, 1, "", "MSE"], [240, 2, 1, "", "MXNetMetrics"], [240, 2, 1, "", "ONNXRTGLUE"], [240, 2, 1, "", "ONNXRTITMetrics"], [240, 2, 1, "", "ONNXRTQLMetrics"], [240, 2, 1, "", "PyTorchLoss"], [240, 2, 1, "", "PyTorchMetrics"], [240, 2, 1, "", "RMSE"], [240, 2, 1, "", "ROC"], [240, 2, 1, "", "SquadF1"], [240, 2, 1, "", "TensorflowCOCOMAP"], [240, 2, 1, "", "TensorflowMAP"], [240, 2, 1, "", "TensorflowMetrics"], [240, 2, 1, "", "TensorflowTopK"], [240, 2, 1, "", "TensorflowVOCMAP"], [240, 2, 1, "", "WrapMXNetMetric"], [240, 2, 1, "", "WrapONNXRTMetric"], [240, 2, 1, "", "WrapPyTorchMetric"], [240, 2, 1, "", "mIOU"], [240, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[240, 5, 1, "", "label_list"], [240, 5, 1, "", "pred_list"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 5, 1, "", "sample"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[240, 4, 1, "", "hvd"], [240, 4, 1, "", "metric"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[240, 5, 1, "", "k"], [240, 5, 1, "", "num_correct"], [240, 5, 1, "", "num_sample"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 5, 1, "", "sample"], [240, 5, 1, "", "sum"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[240, 5, 1, "", "compare_label"], [240, 5, 1, "", "label_list"], [240, 5, 1, "", "pred_list"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[240, 5, 1, "", "metrics"], [240, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[240, 5, 1, "", "compare_label"], [240, 5, 1, "", "label_list"], [240, 5, 1, "", "pred_list"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[240, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[240, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[240, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[240, 3, 1, "", "compute"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[240, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[240, 5, 1, "", "mse"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[240, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[240, 5, 1, "", "k"], [240, 5, 1, "", "num_correct"], [240, 5, 1, "", "num_sample"], [240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[240, 3, 1, "", "reset"], [240, 3, 1, "", "result"], [240, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[241, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[241, 4, 1, "", "precisions"], [241, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[242, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[242, 3, 1, "", "dataset"], [242, 4, 1, "", "destination"], [242, 4, 1, "", "eval_dataloader"], [242, 4, 1, "", "eval_func"], [242, 4, 1, "", "metric"], [242, 4, 1, "", "model"], [242, 4, 1, "", "postprocess"], [242, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[250, 2, 1, "", "BasicNAS"], [250, 2, 1, "", "DyNAS"], [250, 2, 1, "", "NAS"], [243, 0, 0, "-", "basic_nas"], [244, 0, 0, "-", "dynas"], [249, 0, 0, "-", "dynast"], [251, 0, 0, "-", "nas"], [252, 0, 0, "-", "nas_utils"], [253, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[250, 3, 1, "", "estimate"], [250, 3, 1, "", "execute"], [250, 3, 1, "", "init_by_cfg"], [250, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[250, 3, 1, "", "create_acc_predictor"], [250, 3, 1, "", "create_latency_predictor"], [250, 3, 1, "", "create_macs_predictor"], [250, 3, 1, "", "estimate"], [250, 3, 1, "", "init_cfg"], [250, 3, 1, "", "init_for_search"], [250, 3, 1, "", "search"], [250, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[243, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[243, 3, 1, "", "estimate"], [243, 3, 1, "", "execute"], [243, 3, 1, "", "init_by_cfg"], [243, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[244, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[244, 3, 1, "", "create_acc_predictor"], [244, 3, 1, "", "create_latency_predictor"], [244, 3, 1, "", "create_macs_predictor"], [244, 3, 1, "", "estimate"], [244, 3, 1, "", "init_cfg"], [244, 3, 1, "", "init_for_search"], [244, 3, 1, "", "search"], [244, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[245, 0, 0, "-", "dynas_manager"], [246, 0, 0, "-", "dynas_predictor"], [247, 0, 0, "-", "dynas_search"], [248, 0, 0, "-", "dynas_utils"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[245, 2, 1, "", "ParameterManager"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[245, 3, 1, "", "create_training_set"], [245, 3, 1, "", "import_csv"], [245, 3, 1, "", "onehot_generic"], [245, 3, 1, "", "process_param_dict"], [245, 3, 1, "", "random_sample"], [245, 3, 1, "", "random_samples"], [245, 3, 1, "", "set_seed"], [245, 3, 1, "", "translate2param"], [245, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[246, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[246, 3, 1, "", "get_metrics"], [246, 3, 1, "", "get_parameters"], [246, 3, 1, "", "load"], [246, 3, 1, "", "predict"], [246, 3, 1, "", "save"], [246, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[247, 2, 1, "", "ProblemMultiObjective"], [247, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[247, 3, 1, "", "configure_age"], [247, 3, 1, "", "configure_nsga2"], [247, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[248, 2, 1, "", "EvaluationInterface"], [248, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [248, 2, 1, "", "EvaluationInterfaceResNet50"], [248, 2, 1, "", "OFARunner"], [248, 2, 1, "", "Runner"], [248, 2, 1, "", "TorchVisionReference"], [248, 1, 1, "", "get_macs"], [248, 1, 1, "", "get_torchvision_model"], [248, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[248, 3, 1, "", "clear_csv"], [248, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[248, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[248, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[248, 3, 1, "", "estimate_accuracy_top1"], [248, 3, 1, "", "estimate_latency"], [248, 3, 1, "", "estimate_macs"], [248, 3, 1, "", "get_subnet"], [248, 3, 1, "", "measure_latency"], [248, 3, 1, "", "validate_macs"], [248, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[248, 3, 1, "", "measure_latency"], [248, 3, 1, "", "validate_macs"], [248, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.nas": [[251, 2, 1, "", "NAS"], [251, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[251, 3, 1, "", "count_model_parameters"], [251, 3, 1, "", "dump_search_results"], [251, 3, 1, "", "estimate"], [251, 3, 1, "", "find_best_model_archs"], [251, 3, 1, "", "init_search_cfg"], [251, 3, 1, "", "load_search_results"], [251, 3, 1, "", "metrics_conversion"], [251, 4, 1, "", "model_builder"], [251, 3, 1, "", "params_vec2params_dict"], [251, 3, 1, "", "search"], [251, 4, 1, "", "search_algorithm"], [251, 4, 1, "", "search_space"], [251, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[252, 1, 1, "", "create_search_space_pool"], [252, 1, 1, "", "find_pareto_front"], [252, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[253, 2, 1, "", "BayesianOptimizationSearcher"], [253, 2, 1, "", "GridSearcher"], [253, 2, 1, "", "RandomSearcher"], [253, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[253, 3, 1, "", "get_feedback"], [253, 3, 1, "", "indices2params_vec"], [253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[253, 3, 1, "", "get_feedback"], [253, 3, 1, "", "params_vec2params_dict"], [253, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[254, 2, 1, "", "Pruning"], [254, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[254, 5, 1, "", "conf"], [254, 4, 1, "", "evaluation_distributed"], [254, 3, 1, "", "execute"], [254, 3, 1, "", "generate_hooks"], [254, 3, 1, "", "generate_pruners"], [254, 3, 1, "", "pre_process"], [254, 3, 1, "", "prepare"], [254, 5, 1, "", "pruners"], [254, 4, 1, "", "pruning_func"], [254, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[254, 3, 1, "", "on_after_compute_loss"], [254, 3, 1, "", "on_batch_begin"], [254, 3, 1, "", "on_batch_end"], [254, 3, 1, "", "on_epoch_begin"], [254, 3, 1, "", "on_epoch_end"], [254, 3, 1, "", "on_step_begin"], [254, 3, 1, "", "on_step_end"], [254, 3, 1, "", "on_train_begin"], [254, 3, 1, "", "on_train_end"], [254, 3, 1, "", "post_epoch_end"], [254, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[255, 2, 1, "", "PATTERNS"], [256, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[255, 5, 1, "", "patterns"], [255, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, 2, 1, "", "PATTERNS"], [257, 0, 0, "-", "pattern"], [258, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[256, 5, 1, "", "patterns"], [256, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, 2, 1, "", "PATTERNS"], [257, 2, 1, "", "PatternBase"], [257, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[257, 5, 1, "", "patterns"], [257, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[257, 3, 1, "", "compute_sparsity"], [257, 3, 1, "", "reduce"], [257, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, 2, 1, "", "TilePatternBase"], [258, 2, 1, "", "TilePattern_1x1"], [258, 2, 1, "", "TilePattern_1x16"], [258, 2, 1, "", "TilePattern_1x2"], [258, 2, 1, "", "TilePattern_2x2"], [258, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[258, 3, 1, "", "compute_sparsity"], [258, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[260, 0, 0, "-", "logger"], [261, 0, 0, "-", "patterns"], [262, 0, 0, "-", "prune_utils"], [263, 0, 0, "-", "pruner"], [264, 0, 0, "-", "pruning"], [265, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, 2, 1, "", "Pattern"], [261, 2, 1, "", "PatternNInM"], [261, 2, 1, "", "PatternNxM"], [261, 1, 1, "", "get_pattern"], [261, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[261, 3, 1, "", "get_block_size_dict"], [261, 3, 1, "", "get_mask_single"], [261, 3, 1, "", "get_masks"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_masks_local"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"], [261, 5, 1, "", "is_global"], [261, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[261, 5, 1, "", "M"], [261, 5, 1, "", "N"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[261, 5, 1, "", "block_size"], [261, 3, 1, "", "get_block_size_dict"], [261, 3, 1, "", "get_masks_global"], [261, 3, 1, "", "get_pattern_lock_masks"], [261, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, 1, 1, "", "check_config"], [262, 1, 1, "", "parse_not_to_prune"], [262, 1, 1, "", "parse_to_prune"], [262, 1, 1, "", "process_and_check_config"], [262, 1, 1, "", "process_config"], [262, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, 2, 1, "", "MagnitudePruner"], [263, 2, 1, "", "PatternLockPruner"], [263, 2, 1, "", "Pruner"], [263, 2, 1, "", "SnipMomentumPruner"], [263, 2, 1, "", "SnipPruner"], [263, 1, 1, "", "get_pruner"], [263, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[263, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[263, 3, 1, "", "on_after_optimizer_step"], [263, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[263, 3, 1, "", "check_is_pruned_step"], [263, 5, 1, "", "config"], [263, 5, 1, "", "current_sparsity_ratio"], [263, 5, 1, "", "end_step"], [263, 5, 1, "", "global_step"], [263, 3, 1, "", "mask_weights"], [263, 5, 1, "", "masks"], [263, 5, 1, "", "max_sparsity_ratio_per_layer"], [263, 5, 1, "", "modules"], [263, 3, 1, "", "on_after_eval"], [263, 3, 1, "", "on_after_optimizer_step"], [263, 3, 1, "", "on_before_eval"], [263, 3, 1, "", "on_before_optimizer_step"], [263, 3, 1, "", "on_epoch_begin"], [263, 3, 1, "", "on_epoch_end"], [263, 3, 1, "", "on_step_begin"], [263, 3, 1, "", "on_step_end"], [263, 3, 1, "", "on_train_begin"], [263, 3, 1, "", "on_train_end"], [263, 5, 1, "", "pattern"], [263, 5, 1, "", "scheduler"], [263, 5, 1, "", "scores"], [263, 5, 1, "", "start_step"], [263, 5, 1, "", "target_sparsity_ratio"], [263, 5, 1, "", "update_frequency_on_step"], [263, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[263, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[263, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[264, 5, 1, "", "config_file_path"], [264, 3, 1, "", "get_sparsity_ratio"], [264, 5, 1, "", "model"], [264, 3, 1, "", "on_after_eval"], [264, 3, 1, "", "on_after_optimizer_step"], [264, 3, 1, "", "on_before_eval"], [264, 3, 1, "", "on_before_optimizer_step"], [264, 3, 1, "", "on_epoch_begin"], [264, 3, 1, "", "on_epoch_end"], [264, 3, 1, "", "on_step_begin"], [264, 3, 1, "", "on_step_end"], [264, 3, 1, "", "on_train_begin"], [264, 3, 1, "", "on_train_end"], [264, 5, 1, "", "pruner_info"], [264, 5, 1, "", "pruners"], [264, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, 2, 1, "", "IterativeScheduler"], [265, 2, 1, "", "OneshotScheduler"], [265, 2, 1, "", "Scheduler"], [265, 1, 1, "", "get_scheduler"], [265, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[265, 5, 1, "", "config"], [265, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[266, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[266, 4, 1, "", "calib_dataloader"], [266, 3, 1, "", "dataset"], [266, 3, 1, "", "execute"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "objective"], [266, 4, 1, "", "postprocess"], [266, 3, 1, "", "pre_process"], [266, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[267, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[267, 3, 1, "", "append"], [267, 3, 1, "", "combine"], [267, 4, 1, "", "eval_func"], [267, 4, 1, "", "model"], [267, 4, 1, "", "train_func"]], "neural_compressor.metric": [[269, 2, 1, "", "BaseMetric"], [269, 2, 1, "", "METRICS"], [269, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[269, 4, 1, "", "hvd"], [269, 4, 1, "", "metric"], [269, 3, 1, "", "reset"], [269, 3, 1, "", "result"], [269, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[269, 5, 1, "", "metrics"], [269, 3, 1, "", "register"]], "neural_compressor.model": [[272, 2, 1, "", "BaseModel"], [271, 0, 0, "-", "base_model"], [273, 0, 0, "-", "model"], [274, 0, 0, "-", "nets_factory"], [275, 0, 0, "-", "onnx_model"], [276, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[272, 3, 1, "", "export"], [272, 3, 1, "", "framework"], [272, 4, 1, "", "graph_info"], [272, 4, 1, "", "model"], [272, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[271, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[271, 3, 1, "", "export"], [271, 3, 1, "", "framework"], [271, 4, 1, "", "graph_info"], [271, 4, 1, "", "model"], [271, 3, 1, "", "save"]], "neural_compressor.model.model": [[273, 2, 1, "", "MXNetModel"], [273, 2, 1, "", "TensorflowBaseModel"], [273, 2, 1, "", "TensorflowCheckpointModel"], [273, 2, 1, "", "TensorflowQATModel"], [273, 2, 1, "", "TensorflowSavedModelModel"], [273, 1, 1, "", "checkpoint_session"], [273, 1, 1, "", "estimator_session"], [273, 1, 1, "", "frozen_pb_session"], [273, 1, 1, "", "get_model_fwk_name"], [273, 1, 1, "", "get_model_type"], [273, 1, 1, "", "graph_def_session"], [273, 1, 1, "", "graph_session"], [273, 1, 1, "", "keras_session"], [273, 1, 1, "", "load_saved_model"], [273, 1, 1, "", "saved_model_session"], [273, 1, 1, "", "slim_session"], [273, 1, 1, "", "validate_and_inference_input_output"], [273, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.model.MXNetModel": [[273, 3, 1, "", "framework"], [273, 4, 1, "", "model"], [273, 3, 1, "", "save"]], "neural_compressor.model.model.TensorflowBaseModel": [[273, 3, 1, "", "framework"], [273, 4, 1, "", "graph_info"], [273, 4, 1, "", "model"], [273, 3, 1, "", "save"], [273, 4, 1, "", "weights"]], "neural_compressor.model.model.TensorflowQATModel": [[273, 4, 1, "", "model"], [273, 3, 1, "", "save"]], "neural_compressor.model.model.TensorflowSavedModelModel": [[273, 4, 1, "", "model"], [273, 3, 1, "", "report_sparsity"], [273, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[275, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[275, 3, 1, "", "find_node_by_name"], [275, 3, 1, "", "find_nodes_by_initializer"], [275, 3, 1, "", "framework"], [275, 3, 1, "", "get_scale_zero"], [275, 4, 1, "", "graph_info"], [275, 4, 1, "", "model"], [275, 3, 1, "", "save"], [275, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.torch_model": [[276, 2, 1, "", "PyTorchBaseModel"], [276, 2, 1, "", "PyTorchFXModel"], [276, 2, 1, "", "PyTorchIpexModel"], [276, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[276, 3, 1, "", "framework"], [276, 3, 1, "", "get_all_weight_names"], [276, 3, 1, "", "get_gradient"], [276, 3, 1, "", "get_inputs"], [276, 3, 1, "", "get_weight"], [276, 4, 1, "", "model"], [276, 3, 1, "", "prune_weights_"], [276, 3, 1, "", "report_sparsity"], [276, 3, 1, "", "update_gradient"], [276, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchIpexModel": [[276, 4, 1, "", "graph_info"], [276, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchModel": [[276, 3, 1, "", "export"], [276, 4, 1, "", "graph_info"], [276, 3, 1, "", "save"]], "neural_compressor.objective": [[277, 2, 1, "", "Accuracy"], [277, 2, 1, "", "Footprint"], [277, 2, 1, "", "ModelSize"], [277, 2, 1, "", "Objective"], [277, 2, 1, "", "Performance"], [277, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[277, 3, 1, "", "end"], [277, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[277, 3, 1, "", "end"], [277, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[277, 3, 1, "", "end"], [277, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[277, 3, 1, "", "end"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "result_list"], [277, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[277, 3, 1, "", "end"], [277, 3, 1, "", "start"]], "neural_compressor.pruners": [[278, 0, 0, "-", "gradient_sensitivity"], [279, 0, 0, "-", "group_lasso"], [281, 0, 0, "-", "magnitude"], [282, 0, 0, "-", "pattern_lock"], [283, 0, 0, "-", "pruner"]], "neural_compressor.pruners.pruner": [[283, 1, 1, "", "pruner_registry"]], "neural_compressor.pruning": [[284, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[284, 3, 1, "", "on_epoch_begin"], [284, 3, 1, "", "on_epoch_end"], [284, 3, 1, "", "on_step_begin"], [284, 3, 1, "", "on_step_end"]], "neural_compressor.quantization": [[285, 2, 1, "", "Quantization"], [285, 1, 1, "", "fit"]], "neural_compressor.strategy": [[286, 0, 0, "-", "auto_mixed_precision"], [287, 0, 0, "-", "basic"], [288, 0, 0, "-", "bayesian"], [289, 0, 0, "-", "conservative"], [290, 0, 0, "-", "exhaustive"], [291, 0, 0, "-", "hawq_v2"], [293, 0, 0, "-", "mse"], [294, 0, 0, "-", "mse_v2"], [295, 0, 0, "-", "random"], [296, 0, 0, "-", "strategy"], [298, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[286, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[286, 3, 1, "", "next_tune_cfg"], [286, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[287, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[287, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[288, 2, 1, "", "BayesianTuneStrategy"], [288, 2, 1, "", "TargetSpace"], [288, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[288, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[288, 3, 1, "", "get_target"], [288, 3, 1, "", "max"], [288, 3, 1, "", "random_sample"], [288, 3, 1, "", "register"], [288, 3, 1, "", "res"]], "neural_compressor.strategy.conservative": [[289, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[289, 3, 1, "", "next_tune_cfg"], [289, 3, 1, "", "stop"], [289, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[290, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[290, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[291, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[291, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[293, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[293, 3, 1, "", "mse_impact_lst"], [293, 3, 1, "", "mse_metric_gap"], [293, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[294, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[294, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[295, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[295, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[296, 2, 1, "", "TuneStrategy"], [296, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[296, 3, 1, "", "next_tune_cfg"], [296, 3, 1, "", "stop"], [296, 3, 1, "", "traverse"]], "neural_compressor.strategy.utils": [[297, 0, 0, "-", "helper"], [299, 0, 0, "-", "tuning_sampler"], [300, 0, 0, "-", "tuning_space"], [301, 0, 0, "-", "tuning_structs"]], "neural_compressor.training": [[302, 2, 1, "", "CompressionManager"], [302, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[302, 3, 1, "", "export"], [302, 3, 1, "", "save"]], "neural_compressor.utils": [[306, 2, 1, "", "KL_Divergence"], [306, 2, 1, "", "LayerHistogramCollector"], [303, 0, 0, "-", "collect_layer_histogram"], [304, 0, 0, "-", "constant"], [305, 0, 0, "-", "create_obj_from_config"], [307, 0, 0, "-", "kl_divergence"], [308, 0, 0, "-", "load_huggingface"], [309, 0, 0, "-", "logger"], [310, 0, 0, "-", "options"], [311, 0, 0, "-", "pytorch"], [312, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[306, 3, 1, "", "expand_quantized_bins"], [306, 3, 1, "", "get_threshold"], [306, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[306, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[303, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[303, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[305, 1, 1, "", "create_eval_func"], [305, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[307, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[307, 3, 1, "", "expand_quantized_bins"], [307, 3, 1, "", "get_threshold"], [307, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[311, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[312, 2, 1, "", "LazyImport"], [312, 2, 1, "", "MODE"], [312, 1, 1, "", "combine_histogram"], [312, 1, 1, "", "dump_data_to_local"], [312, 1, 1, "", "dump_elapsed_time"], [312, 1, 1, "", "equal_dicts"], [312, 1, 1, "", "get_size"], [312, 1, 1, "", "get_tuning_history"], [312, 1, 1, "", "load_data_from_pkl"], [312, 1, 1, "", "recover"]], "neural_compressor.ux": [[385, 0, 0, "-", "components"], [441, 0, 0, "-", "inc_bench"], [450, 0, 0, "-", "utils"], [475, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[316, 0, 0, "-", "benchmark"], [320, 0, 0, "-", "config_generator"], [327, 0, 0, "-", "configuration_wizard"], [361, 0, 0, "-", "db_manager"], [366, 0, 0, "-", "diagnosis"], [374, 0, 0, "-", "file_browser"], [380, 0, 0, "-", "graph"], [386, 0, 0, "-", "jobs_management"], [390, 0, 0, "-", "manage_workspace"], [392, 0, 0, "-", "model"], [411, 0, 0, "-", "model_zoo"], [413, 0, 0, "-", "names_mapper"], [420, 0, 0, "-", "optimization"], [433, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[316, 2, 1, "", "Benchmarks"], [313, 0, 0, "-", "benchmark"], [314, 0, 0, "-", "benchmark_model"], [315, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[313, 2, 1, "", "Benchmark"], [313, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[313, 4, 1, "", "config_filename"], [313, 4, 1, "", "configuration_data"], [313, 3, 1, "", "execute"], [313, 3, 1, "", "generate_config"], [313, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[314, 1, 1, "", "benchmark_model"], [314, 1, 1, "", "parse_args"], [314, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[315, 1, 1, "", "benchmark_result_update"], [315, 1, 1, "", "benchmark_result_update_pytorch_script"], [315, 1, 1, "", "execute_benchmark"], [315, 1, 1, "", "execute_real_benchmark"], [315, 1, 1, "", "pytorch_script_bench_optimizations"], [315, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[317, 0, 0, "-", "benchmark_config_generator"], [318, 0, 0, "-", "config_generator"], [319, 0, 0, "-", "graph_optimization_config_generator"], [321, 0, 0, "-", "mixed_precision_config_generator"], [322, 0, 0, "-", "profiling_config_generator"], [323, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[317, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[317, 3, 1, "", "generate"], [317, 3, 1, "", "generate_accuracy_config"], [317, 3, 1, "", "generate_evaluation_config"], [317, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[318, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[318, 3, 1, "", "generate"], [318, 3, 1, "", "generate_dataloader_config"], [318, 3, 1, "", "generate_model_config"], [318, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[319, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[319, 3, 1, "", "generate"], [319, 3, 1, "", "generate_evaluation_config"], [319, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[321, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[321, 3, 1, "", "generate"], [321, 3, 1, "", "generate_evaluation_config"], [321, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[322, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[322, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[323, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[323, 3, 1, "", "generate"], [323, 3, 1, "", "generate_evaluation_config"], [323, 3, 1, "", "generate_quantization_config"], [323, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[324, 0, 0, "-", "configuration_parser"], [325, 0, 0, "-", "get_boundary_nodes"], [326, 0, 0, "-", "get_configuration"], [328, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[324, 2, 1, "", "ConfigurationParser"], [324, 1, 1, "", "normalize_string_list"], [324, 1, 1, "", "parse_list_value"], [324, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[324, 3, 1, "", "get_param_type"], [324, 3, 1, "", "parse"], [324, 3, 1, "", "parse_dataloader"], [324, 3, 1, "", "parse_evaluation_data"], [324, 3, 1, "", "parse_metric"], [324, 3, 1, "", "parse_transforms"], [324, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[325, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[326, 1, 1, "", "get_predefined_configuration"], [326, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[328, 2, 1, "", "Feeder"], [328, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[328, 3, 1, "", "feed"], [328, 3, 1, "", "get_dataloaders"], [328, 3, 1, "", "get_domains"], [328, 3, 1, "", "get_frameworks"], [328, 3, 1, "", "get_metrics"], [328, 3, 1, "", "get_models"], [328, 3, 1, "", "get_objectives"], [328, 3, 1, "", "get_precisions"], [328, 3, 1, "", "get_quantization_approaches"], [328, 3, 1, "", "get_strategies"], [328, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[361, 2, 1, "", "DBManager"], [329, 0, 0, "-", "db_manager"], [338, 0, 0, "-", "db_models"], [356, 0, 0, "-", "db_operations"], [362, 0, 0, "-", "params_interfaces"], [363, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[361, 3, 1, "", "create_all"], [361, 3, 1, "", "create_sqlalchemy_engine"], [361, 4, 1, "", "engine"], [361, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[329, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[329, 3, 1, "", "create_all"], [329, 3, 1, "", "create_sqlalchemy_engine"], [329, 4, 1, "", "engine"], [329, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[330, 0, 0, "-", "benchmark"], [331, 0, 0, "-", "benchmark_result"], [332, 0, 0, "-", "dataloader"], [333, 0, 0, "-", "dataset"], [334, 0, 0, "-", "domain"], [335, 0, 0, "-", "domain_flavour"], [336, 0, 0, "-", "example"], [337, 0, 0, "-", "framework"], [339, 0, 0, "-", "metric"], [340, 0, 0, "-", "model"], [341, 0, 0, "-", "optimization"], [342, 0, 0, "-", "optimization_type"], [343, 0, 0, "-", "precision"], [344, 0, 0, "-", "profiling"], [345, 0, 0, "-", "profiling_result"], [346, 0, 0, "-", "project"], [347, 0, 0, "-", "transform"], [348, 0, 0, "-", "tuning_details"], [349, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[330, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[330, 3, 1, "", "add"], [330, 3, 1, "", "build_info"], [330, 3, 1, "", "clean_status"], [330, 3, 1, "", "delete_benchmark"], [330, 3, 1, "", "details"], [330, 3, 1, "", "list"], [330, 3, 1, "", "update_batch_size"], [330, 3, 1, "", "update_config_path"], [330, 3, 1, "", "update_cores_per_instance"], [330, 3, 1, "", "update_dataset"], [330, 3, 1, "", "update_duration"], [330, 3, 1, "", "update_execution_command"], [330, 3, 1, "", "update_log_path"], [330, 3, 1, "", "update_mode"], [330, 3, 1, "", "update_number_of_instance"], [330, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[331, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[331, 3, 1, "", "add"], [331, 3, 1, "", "build_info"], [331, 3, 1, "", "update_accuracy"], [331, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[332, 2, 1, "", "Dataloader"], [332, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[332, 3, 1, "", "list"], [332, 3, 1, "", "list_by_framework"], [332, 3, 1, "", "query_to_list"], [332, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[333, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[333, 3, 1, "", "add"], [333, 3, 1, "", "build_info"], [333, 3, 1, "", "delete_dataset"], [333, 3, 1, "", "details"], [333, 3, 1, "", "list"], [333, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[334, 2, 1, "", "Domain"], [334, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[334, 3, 1, "", "get_domain_id"], [334, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[335, 2, 1, "", "DomainFlavour"], [335, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[335, 3, 1, "", "get_domain_flavour_id"], [335, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[336, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[337, 2, 1, "", "Framework"], [337, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[337, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[339, 2, 1, "", "Metric"], [339, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[339, 3, 1, "", "list"], [339, 3, 1, "", "list_by_framework"], [339, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[340, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[340, 3, 1, "", "add"], [340, 3, 1, "", "build_info"], [340, 3, 1, "", "delete_model"], [340, 3, 1, "", "details"], [340, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[341, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[341, 3, 1, "", "add"], [341, 3, 1, "", "build_info"], [341, 3, 1, "", "clean_status"], [341, 3, 1, "", "delete_optimization"], [341, 3, 1, "", "details"], [341, 3, 1, "", "get_optimization_by_project_and_model"], [341, 3, 1, "", "get_pinned_benchmarks"], [341, 3, 1, "", "list"], [341, 3, 1, "", "pin_accuracy_benchmark"], [341, 3, 1, "", "pin_performance_benchmark"], [341, 3, 1, "", "unpin_benchmark"], [341, 3, 1, "", "update_batch_size"], [341, 3, 1, "", "update_config_path"], [341, 3, 1, "", "update_dataset"], [341, 3, 1, "", "update_duration"], [341, 3, 1, "", "update_execution_command"], [341, 3, 1, "", "update_log_path"], [341, 3, 1, "", "update_optimized_model"], [341, 3, 1, "", "update_precision"], [341, 3, 1, "", "update_sampling_size"], [341, 3, 1, "", "update_status"], [341, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[342, 2, 1, "", "OptimizationType"], [342, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[342, 3, 1, "", "add"], [342, 3, 1, "", "get_optimization_type_by_id"], [342, 3, 1, "", "get_optimization_type_by_name"], [342, 3, 1, "", "get_optimization_type_for_precision"], [342, 3, 1, "", "get_optimization_type_id"], [342, 3, 1, "", "list"], [342, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[343, 2, 1, "", "Precision"], [343, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[343, 3, 1, "", "add"], [343, 3, 1, "", "get_precision_by_id"], [343, 3, 1, "", "get_precision_by_name"], [343, 3, 1, "", "get_precision_id"], [343, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[344, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[344, 3, 1, "", "add"], [344, 3, 1, "", "build_info"], [344, 3, 1, "", "clean_status"], [344, 3, 1, "", "delete_profiling"], [344, 3, 1, "", "details"], [344, 3, 1, "", "list"], [344, 3, 1, "", "update_dataset"], [344, 3, 1, "", "update_duration"], [344, 3, 1, "", "update_execution_command"], [344, 3, 1, "", "update_log_path"], [344, 3, 1, "", "update_num_threads"], [344, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[345, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[345, 3, 1, "", "add"], [345, 3, 1, "", "build_info"], [345, 3, 1, "", "bulk_add"], [345, 3, 1, "", "delete_results"], [345, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[346, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[346, 3, 1, "", "create_project"], [346, 3, 1, "", "delete_project"], [346, 3, 1, "", "get_model_by_name"], [346, 3, 1, "", "list_projects"], [346, 3, 1, "", "project_details"], [346, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[347, 2, 1, "", "Transform"], [347, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[347, 3, 1, "", "list"], [347, 3, 1, "", "list_by_domain"], [347, 3, 1, "", "list_by_framework"], [347, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[348, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[348, 3, 1, "", "add"], [348, 3, 1, "", "delete_tuning_details"], [348, 3, 1, "", "update"], [348, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[349, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[349, 3, 1, "", "add"], [349, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[356, 2, 1, "", "BenchmarkAPIInterface"], [356, 2, 1, "", "DatasetAPIInterface"], [356, 2, 1, "", "DiagnosisAPIInterface"], [356, 2, 1, "", "DictionariesAPIInterface"], [356, 2, 1, "", "ExamplesAPIInterface"], [356, 2, 1, "", "ModelAPIInterface"], [356, 2, 1, "", "OptimizationAPIInterface"], [356, 2, 1, "", "ProfilingAPIInterface"], [356, 2, 1, "", "ProjectAPIInterface"], [350, 0, 0, "-", "benchmark_api_interface"], [351, 0, 0, "-", "dataset_api_interface"], [352, 0, 0, "-", "db_operations"], [353, 0, 0, "-", "diagnosis_api_interface"], [354, 0, 0, "-", "dictionaries_api_interface"], [355, 0, 0, "-", "examples_api_interface"], [357, 0, 0, "-", "model_api_interface"], [358, 0, 0, "-", "optimization_api_interface"], [359, 0, 0, "-", "profiling_api_interface"], [360, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[356, 3, 1, "", "add_benchmark"], [356, 3, 1, "", "add_result"], [356, 3, 1, "", "clean_status"], [356, 3, 1, "", "delete_benchmark"], [356, 3, 1, "", "edit_benchmark"], [356, 3, 1, "", "get_benchmark_details"], [356, 3, 1, "", "list_benchmarks"], [356, 3, 1, "", "parse_benchmark_data"], [356, 3, 1, "", "parse_benchmark_edit_data"], [356, 3, 1, "", "update_benchmark_accuracy"], [356, 3, 1, "", "update_benchmark_duration"], [356, 3, 1, "", "update_benchmark_performance"], [356, 3, 1, "", "update_benchmark_status"], [356, 3, 1, "", "update_execution_command"], [356, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[356, 3, 1, "", "add_dataset"], [356, 3, 1, "", "check_if_custom_metric_or_dataloader"], [356, 3, 1, "", "dataloader_path"], [356, 3, 1, "", "delete_dataset"], [356, 3, 1, "", "generate_custom_template"], [356, 3, 1, "", "generate_template"], [356, 3, 1, "", "get_dataset_details"], [356, 3, 1, "", "get_predefined_dataset"], [356, 3, 1, "", "list_datasets"], [356, 3, 1, "", "parse_dataset_data"], [356, 3, 1, "", "prepare_predefined_dataloader"], [356, 3, 1, "", "prepare_predefined_transform"], [356, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[356, 3, 1, "", "generate_optimization"], [356, 3, 1, "", "get_op_details"], [356, 3, 1, "", "get_op_list"], [356, 3, 1, "", "histogram"], [356, 3, 1, "", "model_wise_params"], [356, 3, 1, "", "parse_model_wise_config"], [356, 3, 1, "", "parse_op_wise_config"], [356, 3, 1, "", "parse_optimization_data"], [356, 3, 1, "", "parse_wise_parameters"], [356, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[356, 3, 1, "", "list_dataloaders"], [356, 3, 1, "", "list_dataloaders_by_framework"], [356, 3, 1, "", "list_domain_flavours"], [356, 3, 1, "", "list_domains"], [356, 3, 1, "", "list_metrics"], [356, 3, 1, "", "list_metrics_by_framework"], [356, 3, 1, "", "list_optimization_types"], [356, 3, 1, "", "list_optimization_types_for_precision"], [356, 3, 1, "", "list_precisions"], [356, 3, 1, "", "list_transforms"], [356, 3, 1, "", "list_transforms_by_domain"], [356, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[356, 3, 1, "", "create_project"], [356, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[356, 3, 1, "", "add_model"], [356, 3, 1, "", "delete_model"], [356, 3, 1, "", "get_model_details"], [356, 3, 1, "", "list_models"], [356, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[356, 3, 1, "", "add_optimization"], [356, 3, 1, "", "add_quantization_optimization"], [356, 3, 1, "", "add_standard_optimization"], [356, 3, 1, "", "add_tuning_history"], [356, 3, 1, "", "clean_status"], [356, 3, 1, "", "delete_optimization"], [356, 3, 1, "", "edit_optimization"], [356, 3, 1, "", "get_optimization_details"], [356, 3, 1, "", "list_optimizations"], [356, 3, 1, "", "parse_optimization_data"], [356, 3, 1, "", "parse_optimization_edit_data"], [356, 3, 1, "", "parse_tuning_history"], [356, 3, 1, "", "pin_accuracy_benchmark"], [356, 3, 1, "", "pin_performance_benchmark"], [356, 3, 1, "", "update_execution_command"], [356, 3, 1, "", "update_optimization_duration"], [356, 3, 1, "", "update_optimization_status"], [356, 3, 1, "", "update_optimized_model"], [356, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[356, 3, 1, "", "add_profiling"], [356, 3, 1, "", "add_result"], [356, 3, 1, "", "bulk_add_results"], [356, 3, 1, "", "clean_status"], [356, 3, 1, "", "delete_profiling"], [356, 3, 1, "", "edit_profiling"], [356, 3, 1, "", "get_profiling_details"], [356, 3, 1, "", "list_profilings"], [356, 3, 1, "", "parse_profiling_data"], [356, 3, 1, "", "parse_profiling_edit_data"], [356, 3, 1, "", "parse_profiling_result_data"], [356, 3, 1, "", "update_execution_command"], [356, 3, 1, "", "update_log_path"], [356, 3, 1, "", "update_profiling_duration"], [356, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[356, 3, 1, "", "add_dummy_dataset"], [356, 3, 1, "", "add_model"], [356, 3, 1, "", "create_project"], [356, 3, 1, "", "delete_project"], [356, 3, 1, "", "get_project_details"], [356, 3, 1, "", "list_projects"], [356, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[350, 2, 1, "", "BenchmarkAPIInterface"], [350, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[350, 3, 1, "", "add_benchmark"], [350, 3, 1, "", "add_result"], [350, 3, 1, "", "clean_status"], [350, 3, 1, "", "delete_benchmark"], [350, 3, 1, "", "edit_benchmark"], [350, 3, 1, "", "get_benchmark_details"], [350, 3, 1, "", "list_benchmarks"], [350, 3, 1, "", "parse_benchmark_data"], [350, 3, 1, "", "parse_benchmark_edit_data"], [350, 3, 1, "", "update_benchmark_accuracy"], [350, 3, 1, "", "update_benchmark_duration"], [350, 3, 1, "", "update_benchmark_performance"], [350, 3, 1, "", "update_benchmark_status"], [350, 3, 1, "", "update_execution_command"], [350, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[351, 2, 1, "", "DatasetAPIInterface"], [351, 1, 1, "", "initialize_associations"], [351, 1, 1, "", "initialize_precision_optimization_types_association"], [351, 1, 1, "", "search_in_list_of_dict"], [351, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [351, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[351, 3, 1, "", "add_dataset"], [351, 3, 1, "", "check_if_custom_metric_or_dataloader"], [351, 3, 1, "", "dataloader_path"], [351, 3, 1, "", "delete_dataset"], [351, 3, 1, "", "generate_custom_template"], [351, 3, 1, "", "generate_template"], [351, 3, 1, "", "get_dataset_details"], [351, 3, 1, "", "get_predefined_dataset"], [351, 3, 1, "", "list_datasets"], [351, 3, 1, "", "parse_dataset_data"], [351, 3, 1, "", "prepare_predefined_dataloader"], [351, 3, 1, "", "prepare_predefined_transform"], [351, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[352, 1, 1, "", "initialize_associations"], [352, 1, 1, "", "initialize_precision_optimization_types_association"], [352, 1, 1, "", "search_in_list_of_dict"], [352, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [352, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[353, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[353, 3, 1, "", "generate_optimization"], [353, 3, 1, "", "get_op_details"], [353, 3, 1, "", "get_op_list"], [353, 3, 1, "", "histogram"], [353, 3, 1, "", "model_wise_params"], [353, 3, 1, "", "parse_model_wise_config"], [353, 3, 1, "", "parse_op_wise_config"], [353, 3, 1, "", "parse_optimization_data"], [353, 3, 1, "", "parse_wise_parameters"], [353, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[354, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[354, 3, 1, "", "list_dataloaders"], [354, 3, 1, "", "list_dataloaders_by_framework"], [354, 3, 1, "", "list_domain_flavours"], [354, 3, 1, "", "list_domains"], [354, 3, 1, "", "list_metrics"], [354, 3, 1, "", "list_metrics_by_framework"], [354, 3, 1, "", "list_optimization_types"], [354, 3, 1, "", "list_optimization_types_for_precision"], [354, 3, 1, "", "list_precisions"], [354, 3, 1, "", "list_transforms"], [354, 3, 1, "", "list_transforms_by_domain"], [354, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[355, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[355, 3, 1, "", "create_project"], [355, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[357, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[357, 3, 1, "", "add_model"], [357, 3, 1, "", "delete_model"], [357, 3, 1, "", "get_model_details"], [357, 3, 1, "", "list_models"], [357, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[358, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[358, 3, 1, "", "add_optimization"], [358, 3, 1, "", "add_quantization_optimization"], [358, 3, 1, "", "add_standard_optimization"], [358, 3, 1, "", "add_tuning_history"], [358, 3, 1, "", "clean_status"], [358, 3, 1, "", "delete_optimization"], [358, 3, 1, "", "edit_optimization"], [358, 3, 1, "", "get_optimization_details"], [358, 3, 1, "", "list_optimizations"], [358, 3, 1, "", "parse_optimization_data"], [358, 3, 1, "", "parse_optimization_edit_data"], [358, 3, 1, "", "parse_tuning_history"], [358, 3, 1, "", "pin_accuracy_benchmark"], [358, 3, 1, "", "pin_performance_benchmark"], [358, 3, 1, "", "update_execution_command"], [358, 3, 1, "", "update_optimization_duration"], [358, 3, 1, "", "update_optimization_status"], [358, 3, 1, "", "update_optimized_model"], [358, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[359, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[359, 3, 1, "", "add_profiling"], [359, 3, 1, "", "add_result"], [359, 3, 1, "", "bulk_add_results"], [359, 3, 1, "", "clean_status"], [359, 3, 1, "", "delete_profiling"], [359, 3, 1, "", "edit_profiling"], [359, 3, 1, "", "get_profiling_details"], [359, 3, 1, "", "list_profilings"], [359, 3, 1, "", "parse_profiling_data"], [359, 3, 1, "", "parse_profiling_edit_data"], [359, 3, 1, "", "parse_profiling_result_data"], [359, 3, 1, "", "update_execution_command"], [359, 3, 1, "", "update_log_path"], [359, 3, 1, "", "update_profiling_duration"], [359, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[360, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[360, 3, 1, "", "add_dummy_dataset"], [360, 3, 1, "", "add_model"], [360, 3, 1, "", "create_project"], [360, 3, 1, "", "delete_project"], [360, 3, 1, "", "get_project_details"], [360, 3, 1, "", "list_projects"], [360, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[362, 2, 1, "", "BenchmarkAddParamsInterface"], [362, 2, 1, "", "BenchmarkEditParamsInterface"], [362, 2, 1, "", "DatasetAddParamsInterface"], [362, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [362, 2, 1, "", "ModelAddParamsInterface"], [362, 2, 1, "", "OptimizationAddParamsInterface"], [362, 2, 1, "", "OptimizationEditParamsInterface"], [362, 2, 1, "", "ProfilingAddParamsInterface"], [362, 2, 1, "", "ProfilingEditParamsInterface"], [362, 2, 1, "", "ProfilingResultAddParamsInterface"], [362, 2, 1, "", "TuningHistoryInterface"], [362, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[362, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[362, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[362, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[363, 1, 1, "", "get_framework_dataloaders_config"], [363, 1, 1, "", "get_framework_transforms_config"], [363, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[364, 0, 0, "-", "diagnosis"], [365, 0, 0, "-", "factory"], [367, 0, 0, "-", "onnx_diagnosis"], [369, 0, 0, "-", "op_details"], [370, 0, 0, "-", "op_entry"], [371, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[364, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[364, 3, 1, "", "calculate_mse"], [364, 3, 1, "", "get_histogram_data"], [364, 3, 1, "", "get_op_details"], [364, 3, 1, "", "get_op_list"], [364, 3, 1, "", "get_tensors_info"], [364, 3, 1, "", "load_quantization_config"], [364, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[365, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[365, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[368, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[368, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[368, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[369, 2, 1, "", "OpActivation"], [369, 2, 1, "", "OpDetails"], [369, 2, 1, "", "OpPattern"], [369, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[369, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[370, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[370, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[372, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[372, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[372, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[373, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[373, 1, 1, "", "create_dir_entry"], [373, 1, 1, "", "create_entry"], [373, 1, 1, "", "create_file_entry"], [373, 1, 1, "", "filter_requested_entries"], [373, 1, 1, "", "get_directory_entries"], [373, 1, 1, "", "get_filter_value"], [373, 1, 1, "", "get_non_hidden_directory_entries"], [373, 1, 1, "", "get_requested_path"], [373, 1, 1, "", "get_setting_value"], [373, 1, 1, "", "is_dataset_or_directory_entry"], [373, 1, 1, "", "is_directory_entry"], [373, 1, 1, "", "is_model_or_directory_entry"], [373, 1, 1, "", "should_show_files"], [373, 1, 1, "", "should_show_only_model_files"], [373, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[375, 0, 0, "-", "attribute"], [376, 0, 0, "-", "collapser"], [377, 0, 0, "-", "edge"], [378, 0, 0, "-", "graph"], [379, 0, 0, "-", "graph_reader"], [381, 0, 0, "-", "node"], [382, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[375, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[376, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[376, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[377, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[377, 4, 1, "", "source"], [377, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[378, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[378, 3, 1, "", "add_edge"], [378, 3, 1, "", "add_node"], [378, 4, 1, "", "edges"], [378, 3, 1, "", "get_node"], [378, 3, 1, "", "get_target_nodes"], [378, 3, 1, "", "highlight_pattern"], [378, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[379, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[379, 3, 1, "", "find_pattern_in_graph"], [379, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[381, 2, 1, "", "GroupNode"], [381, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[383, 0, 0, "-", "onnxrt_reader"], [384, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[383, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[383, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[384, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[384, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[387, 0, 0, "-", "jobs_control_queue"], [388, 0, 0, "-", "jobs_manager"], [389, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[390, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[391, 0, 0, "-", "domain"], [393, 0, 0, "-", "model"], [394, 0, 0, "-", "model_type_getter"], [395, 0, 0, "-", "onnxrt"], [397, 0, 0, "-", "pytorch"], [399, 0, 0, "-", "repository"], [400, 0, 0, "-", "shape"], [402, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[391, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[393, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[393, 4, 1, "", "domain"], [393, 3, 1, "", "ensure_supported_path"], [393, 3, 1, "", "get_framework_name"], [393, 3, 1, "", "get_input_nodes"], [393, 3, 1, "", "get_model_graph"], [393, 3, 1, "", "get_output_nodes"], [393, 3, 1, "", "get_tensors_info"], [393, 3, 1, "", "guard_requirements_installed"], [393, 4, 1, "", "input_shape"], [393, 4, 1, "", "shape_elements_order"], [393, 4, 1, "", "supports_graph"], [393, 3, 1, "", "supports_path"], [393, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[394, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[396, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[396, 2, 1, "", "OnnxrtModel"], [396, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[396, 4, 1, "", "domain"], [396, 4, 1, "", "filtered_input_nodes"], [396, 3, 1, "", "get_framework_name"], [396, 3, 1, "", "get_model_graph"], [396, 3, 1, "", "guard_requirements_installed"], [396, 4, 1, "", "input_shape"], [396, 4, 1, "", "nc_model_instance"], [396, 4, 1, "", "shape_elements_order"], [396, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[398, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[398, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[398, 3, 1, "", "get_framework_name"], [398, 3, 1, "", "guard_requirements_installed"], [398, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[399, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[399, 3, 1, "", "get_framework_from_path"], [399, 3, 1, "", "get_frameworks"], [399, 3, 1, "", "get_model"], [399, 3, 1, "", "get_supported_frameworks"], [399, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[400, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[400, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[401, 0, 0, "-", "frozen_pb"], [403, 0, 0, "-", "keras"], [404, 0, 0, "-", "meta_graph"], [405, 0, 0, "-", "model"], [406, 0, 0, "-", "saved_model"], [407, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[401, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[401, 3, 1, "", "supports_path"], [401, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[403, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[403, 3, 1, "", "get_input_nodes"], [403, 3, 1, "", "get_output_nodes"], [403, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[404, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[404, 3, 1, "", "get_input_nodes"], [404, 3, 1, "", "get_model_graph"], [404, 3, 1, "", "get_output_nodes"], [404, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[405, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[405, 3, 1, "", "get_framework_name"], [405, 3, 1, "", "get_input_nodes"], [405, 3, 1, "", "get_model_graph"], [405, 3, 1, "", "get_output_nodes"], [405, 3, 1, "", "guard_requirements_installed"], [405, 4, 1, "", "input_shape"], [405, 4, 1, "", "nc_model_instance"], [405, 4, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[406, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[406, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[407, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[408, 0, 0, "-", "download_config"], [409, 0, 0, "-", "download_model"], [410, 0, 0, "-", "downloader"], [412, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[408, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[409, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[410, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[410, 3, 1, "", "download"], [410, 3, 1, "", "download_config"], [410, 3, 1, "", "download_file"], [410, 3, 1, "", "download_model"], [410, 3, 1, "", "download_yaml_config"], [410, 3, 1, "", "get_yaml_url"], [410, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[412, 1, 1, "", "check_version"], [412, 1, 1, "", "get_available_models"], [412, 1, 1, "", "get_framework_module_name"], [412, 1, 1, "", "get_installed_frameworks"], [412, 1, 1, "", "list_models"], [412, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[414, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[414, 2, 1, "", "MappingDirection"], [414, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[414, 4, 1, "", "domain_flavour_mappings"], [414, 4, 1, "", "domain_mappings"], [414, 4, 1, "", "framework_mappings"], [414, 3, 1, "", "map_name"], [414, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[420, 2, 1, "", "Optimizations"], [415, 0, 0, "-", "execute_optimization"], [416, 0, 0, "-", "factory"], [418, 0, 0, "-", "graph_optimizer"], [421, 0, 0, "-", "mixed_precision"], [424, 0, 0, "-", "neural_coder_optimization"], [426, 0, 0, "-", "optimization"], [427, 0, 0, "-", "tune"], [430, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[415, 1, 1, "", "check_if_collect_tuning_history"], [415, 1, 1, "", "execute_optimization"], [415, 1, 1, "", "execute_optimization_pytorch_script"], [415, 1, 1, "", "execute_optimization_regular"], [415, 1, 1, "", "parse_logs"], [415, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[416, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[416, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[417, 0, 0, "-", "graph_optimization"], [419, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[417, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[417, 4, 1, "", "configuration_data"], [417, 3, 1, "", "execute"], [417, 3, 1, "", "generate_config"], [417, 4, 1, "", "optimization_script"], [417, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[419, 1, 1, "", "optimize_graph"], [419, 1, 1, "", "optimize_graph_config"], [419, 1, 1, "", "parse_args"], [419, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[422, 0, 0, "-", "mixed_precision"], [423, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[422, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[422, 4, 1, "", "configuration_data"], [422, 3, 1, "", "execute"], [422, 3, 1, "", "generate_config"], [422, 4, 1, "", "optimization_script"], [422, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[423, 1, 1, "", "optimize_graph"], [423, 1, 1, "", "optimize_graph_config"], [423, 1, 1, "", "parse_args"], [423, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[425, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[425, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[426, 2, 1, "", "DataloaderInterface"], [426, 2, 1, "", "Optimization"], [426, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[426, 4, 1, "", "command"], [426, 4, 1, "", "config_filename"], [426, 4, 1, "", "configuration_data"], [426, 3, 1, "", "execute"], [426, 3, 1, "", "generate_config"], [426, 4, 1, "", "optimization_script"], [426, 4, 1, "", "output_model_dir"], [426, 4, 1, "", "output_model_name"], [426, 4, 1, "", "parameters"], [426, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[428, 0, 0, "-", "tune_model"], [429, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[428, 1, 1, "", "parse_args"], [428, 1, 1, "", "set_eager_execution"], [428, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[429, 2, 1, "", "AccuracyCriterion"], [429, 2, 1, "", "Tuning"], [429, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[429, 4, 1, "", "configuration_data"], [429, 3, 1, "", "execute"], [429, 3, 1, "", "generate_config"], [429, 4, 1, "", "optimization_script"], [429, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[430, 2, 1, "", "TuningHistory"], [430, 2, 1, "", "Watcher"], [430, 1, 1, "", "tuning_history"], [430, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[430, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[430, 3, 1, "", "history_file_modification_time"], [430, 3, 1, "", "stop"], [430, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[431, 0, 0, "-", "execute_profiling"], [432, 0, 0, "-", "factory"], [434, 0, 0, "-", "profile_model"], [435, 0, 0, "-", "profiler"], [436, 0, 0, "-", "profiling"], [438, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[431, 1, 1, "", "execute_profiling"], [431, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[432, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[432, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[434, 1, 1, "", "load_profiling_details"], [434, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[435, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[435, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[436, 2, 1, "", "DataloaderInterface"], [436, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[436, 4, 1, "", "config_filename"], [436, 4, 1, "", "config_path"], [436, 3, 1, "", "execute"], [436, 3, 1, "", "generate_config"], [436, 4, 1, "", "profiling_data"], [436, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[437, 0, 0, "-", "factory"], [439, 0, 0, "-", "profiler"], [440, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[437, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[437, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[439, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[439, 3, 1, "", "build_dataloader"], [439, 3, 1, "", "convert_nodes_to_list"], [439, 3, 1, "", "create_tf_config"], [439, 3, 1, "", "get_node_by_name"], [439, 3, 1, "", "initialize_graph"], [439, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[440, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[441, 1, 1, "", "main"], [441, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[443, 0, 0, "-", "consts"], [444, 0, 0, "-", "environment"], [445, 0, 0, "-", "exceptions"], [446, 0, 0, "-", "executor"], [447, 0, 0, "-", "expiring_dict"], [448, 0, 0, "-", "github_info"], [449, 0, 0, "-", "hw_info"], [451, 0, 0, "-", "json_serializer"], [452, 0, 0, "-", "logger"], [453, 0, 0, "-", "parser"], [454, 0, 0, "-", "proc"], [455, 0, 0, "-", "processes"], [456, 0, 0, "-", "singleton"], [457, 0, 0, "-", "templates"], [460, 0, 0, "-", "utils"], [465, 0, 0, "-", "workload"], [471, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[443, 2, 1, "", "DomainFlavours"], [443, 2, 1, "", "Domains"], [443, 2, 1, "", "ExecutionStatus"], [443, 2, 1, "", "Frameworks"], [443, 2, 1, "", "OptimizationTypes"], [443, 2, 1, "", "Precisions"], [443, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[444, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[444, 3, 1, "", "clean_workloads_wip_status"], [444, 3, 1, "", "ensure_workdir_exists_and_writeable"], [444, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[445, 7, 1, "", "AccessDeniedException"], [445, 7, 1, "", "ClientErrorException"], [445, 7, 1, "", "InternalException"], [445, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[446, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[446, 4, 1, "", "additional_log_names"], [446, 3, 1, "", "call"], [446, 3, 1, "", "call_one"], [446, 3, 1, "", "is_multi_commands"], [446, 4, 1, "", "log_name"], [446, 4, 1, "", "process_duration"], [446, 3, 1, "", "refresh_workdir"], [446, 4, 1, "", "request_id"], [446, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[447, 2, 1, "", "ExpiringDict"], [447, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[447, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[448, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[448, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[449, 2, 1, "", "HWInfo"], [449, 1, 1, "", "get_bios_version"], [449, 1, 1, "", "get_distribution"], [449, 1, 1, "", "get_framework_dependency_info"], [449, 1, 1, "", "get_framework_info"], [449, 1, 1, "", "get_kernel_version"], [449, 1, 1, "", "get_number_of_sockets"], [449, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[449, 3, 1, "", "initialize"], [449, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[451, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[451, 3, 1, "", "serialize"], [451, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[452, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[453, 2, 1, "", "AccuracyParser"], [453, 2, 1, "", "BenchmarkParserFactory"], [453, 2, 1, "", "OptimizationParser"], [453, 2, 1, "", "Parser"], [453, 2, 1, "", "PerformanceParser"], [453, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[453, 4, 1, "", "patterns"], [453, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[453, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[453, 4, 1, "", "patterns"], [453, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[453, 4, 1, "", "patterns"], [453, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[453, 4, 1, "", "patterns"], [453, 3, 1, "", "process"], [453, 3, 1, "", "summarize_partial"], [453, 3, 1, "", "summarize_value"], [453, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[453, 4, 1, "", "patterns"], [453, 3, 1, "", "process"], [453, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[454, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[454, 4, 1, "", "info"], [454, 4, 1, "", "info_path"], [454, 4, 1, "", "is_ok"], [454, 4, 1, "", "output"], [454, 4, 1, "", "output_path"], [454, 3, 1, "", "remove_logs"], [454, 3, 1, "", "run"], [454, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[455, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[455, 4, 1, "", "is_ok"], [455, 3, 1, "", "remove_successful_logs"], [455, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[456, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[458, 0, 0, "-", "metric"], [459, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[458, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[458, 4, 1, "", "acc_input_model"], [458, 4, 1, "", "acc_optimized_model"], [458, 4, 1, "", "accuracy"], [458, 3, 1, "", "calculate_throughput"], [458, 3, 1, "", "insert_data"], [458, 4, 1, "", "latency"], [458, 4, 1, "", "optimization_time"], [458, 4, 1, "", "path_optimized_model"], [458, 4, 1, "", "profiling_data"], [458, 4, 1, "", "size_input_model"], [458, 4, 1, "", "size_optimized_model"], [458, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[459, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[459, 3, 1, "", "clean_logs"], [459, 3, 1, "", "clean_status"], [459, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[460, 1, 1, "", "check_module"], [460, 1, 1, "", "deprecated"], [460, 1, 1, "", "determine_ip"], [460, 1, 1, "", "export_to_csv"], [460, 1, 1, "", "filter_transforms"], [460, 1, 1, "", "get_dataset_path"], [460, 1, 1, "", "get_file_extension"], [460, 1, 1, "", "get_framework_from_path"], [460, 1, 1, "", "get_height_width_from_size"], [460, 1, 1, "", "get_metrics_dict"], [460, 1, 1, "", "get_model_zoo_config_path"], [460, 1, 1, "", "get_model_zoo_model_path"], [460, 1, 1, "", "get_module_version"], [460, 1, 1, "", "get_predefined_config_path"], [460, 1, 1, "", "get_shape_from_transforms"], [460, 1, 1, "", "get_size"], [460, 1, 1, "", "is_dataset_file"], [460, 1, 1, "", "is_development_env"], [460, 1, 1, "", "is_hidden"], [460, 1, 1, "", "load_dataloader_config"], [460, 1, 1, "", "load_help_nc_params"], [460, 1, 1, "", "load_metrics_config"], [460, 1, 1, "", "load_model_config"], [460, 1, 1, "", "load_model_wise_params"], [460, 1, 1, "", "load_precisions_config"], [460, 1, 1, "", "load_transforms_config"], [460, 1, 1, "", "load_transforms_filter_config"], [460, 1, 1, "", "normalize_domain"], [460, 1, 1, "", "normalize_framework"], [460, 1, 1, "", "normalize_string"], [460, 1, 1, "", "parse_bool_value"], [460, 1, 1, "", "parse_to_float_list"], [460, 1, 1, "", "parse_to_string_list"], [460, 1, 1, "", "parse_version"], [460, 1, 1, "", "release_tag"], [460, 1, 1, "", "replace_with_values"], [460, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[461, 0, 0, "-", "config"], [462, 0, 0, "-", "dataloader"], [463, 0, 0, "-", "evaluation"], [464, 0, 0, "-", "graph_optimization"], [466, 0, 0, "-", "mixed_precision"], [467, 0, 0, "-", "model"], [468, 0, 0, "-", "pruning"], [469, 0, 0, "-", "quantization"], [470, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[461, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[461, 3, 1, "", "dump"], [461, 3, 1, "", "get_performance_configs"], [461, 3, 1, "", "get_performance_cores_per_instance"], [461, 3, 1, "", "get_performance_num_of_instance"], [461, 3, 1, "", "initialize"], [461, 3, 1, "", "load"], [461, 3, 1, "", "process_transform"], [461, 3, 1, "", "remove_accuracy_metric"], [461, 3, 1, "", "remove_dataloader"], [461, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [461, 3, 1, "", "set_accuracy_goal"], [461, 3, 1, "", "set_accuracy_metric"], [461, 3, 1, "", "set_evaluation_dataloader"], [461, 3, 1, "", "set_evaluation_dataset_path"], [461, 3, 1, "", "set_inputs"], [461, 3, 1, "", "set_optimization_precision"], [461, 3, 1, "", "set_outputs"], [461, 3, 1, "", "set_performance_cores_per_instance"], [461, 3, 1, "", "set_performance_iterations"], [461, 3, 1, "", "set_performance_num_of_instance"], [461, 3, 1, "", "set_performance_warmup"], [461, 3, 1, "", "set_quantization_approach"], [461, 3, 1, "", "set_quantization_batch_size"], [461, 3, 1, "", "set_quantization_dataloader"], [461, 3, 1, "", "set_quantization_dataset_path"], [461, 3, 1, "", "set_quantization_sampling_size"], [461, 3, 1, "", "set_transform"], [461, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[462, 2, 1, "", "Dataloader"], [462, 2, 1, "", "Dataset"], [462, 2, 1, "", "Filter"], [462, 2, 1, "", "LabelBalance"], [462, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[462, 3, 1, "", "serialize"], [462, 3, 1, "", "set_dataset"], [462, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[462, 3, 1, "", "is_dummy"], [462, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[462, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[463, 2, 1, "", "Accuracy"], [463, 2, 1, "", "Configs"], [463, 2, 1, "", "Evaluation"], [463, 2, 1, "", "Metric"], [463, 2, 1, "", "Performance"], [463, 2, 1, "", "Postprocess"], [463, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[463, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[463, 4, 1, "", "name"], [463, 4, 1, "", "param"], [463, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[464, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[464, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[466, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[466, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[467, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[467, 4, 1, "", "inputs"], [467, 4, 1, "", "outputs"], [467, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[468, 2, 1, "", "AdamOptimizer"], [468, 2, 1, "", "AdamWOptimizer"], [468, 2, 1, "", "Approach"], [468, 2, 1, "", "Criterion"], [468, 2, 1, "", "CrossEntropyLossCriterion"], [468, 2, 1, "", "KnowledgeDistillationLossCriterion"], [468, 2, 1, "", "Optimizer"], [468, 2, 1, "", "Pruning"], [468, 2, 1, "", "SGDOptimizer"], [468, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [468, 2, 1, "", "Train"], [468, 2, 1, "", "WeightCompressionApproach"], [468, 1, 1, "", "parse_dict_value_to_float"], [468, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[468, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[469, 2, 1, "", "Advance"], [469, 2, 1, "", "Calibration"], [469, 2, 1, "", "Quantization"], [469, 2, 1, "", "WiseConfig"], [469, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[470, 2, 1, "", "AccCriterion"], [470, 2, 1, "", "Diagnosis"], [470, 2, 1, "", "ExitPolicy"], [470, 2, 1, "", "MultiObjectives"], [470, 2, 1, "", "Strategy"], [470, 2, 1, "", "Tuning"], [470, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[470, 4, 1, "", "objective"], [470, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[470, 3, 1, "", "set_max_trials"], [470, 3, 1, "", "set_performance_only"], [470, 3, 1, "", "set_random_seed"], [470, 3, 1, "", "set_timeout"], [470, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[471, 1, 1, "", "float_representer"], [471, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[472, 0, 0, "-", "communication"], [473, 0, 0, "-", "configuration"], [474, 0, 0, "-", "exceptions"], [476, 0, 0, "-", "router"], [477, 0, 0, "-", "server"], [480, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[472, 2, 1, "", "Message"], [472, 2, 1, "", "MessageQueue"], [472, 2, 1, "", "Request"], [472, 2, 1, "", "Response"], [472, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[472, 4, 1, "", "data"], [472, 4, 1, "", "status"], [472, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[472, 3, 1, "", "get"], [472, 3, 1, "", "post_error"], [472, 3, 1, "", "post_failure"], [472, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[473, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[473, 3, 1, "", "determine_gui_port"], [473, 3, 1, "", "determine_log_level"], [473, 3, 1, "", "determine_server_port"], [473, 3, 1, "", "determine_url_prefix"], [473, 3, 1, "", "determine_values_from_environment"], [473, 3, 1, "", "dump_token_to_file"], [473, 3, 1, "", "get_command_line_args"], [473, 3, 1, "", "get_url"], [473, 4, 1, "", "global_config_directory"], [473, 3, 1, "", "is_port_taken"], [473, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[474, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[476, 2, 1, "", "DeferredRoutingDefinition"], [476, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [476, 2, 1, "", "RealtimeRoutingDefinition"], [476, 2, 1, "", "Router"], [476, 2, 1, "", "RoutingDefinition"], [476, 1, 1, "", "find_pattern_in_graph"], [476, 1, 1, "", "get_model_graph"], [476, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[476, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[477, 1, 1, "", "allow_api_call"], [477, 1, 1, "", "block_iframe"], [477, 1, 1, "", "block_sniffing"], [477, 1, 1, "", "build_parameters"], [477, 1, 1, "", "disable_cache"], [477, 1, 1, "", "get_tls_args"], [477, 1, 1, "", "handle_api_call"], [477, 1, 1, "", "page_not_found"], [477, 1, 1, "", "require_api_token"], [477, 1, 1, "", "root"], [477, 1, 1, "", "run_server"], [477, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[478, 0, 0, "-", "benchmark"], [479, 0, 0, "-", "history_snapshot_parser"], [481, 0, 0, "-", "model"], [482, 0, 0, "-", "optimization"], [483, 0, 0, "-", "profiling"], [484, 0, 0, "-", "request_data_processor"], [485, 0, 0, "-", "response_generator"], [486, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[478, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[479, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[479, 3, 1, "", "extract_accuracy"], [479, 3, 1, "", "extract_performance"], [479, 3, 1, "", "parse_history_item"], [479, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[481, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[481, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[482, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[483, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[483, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[484, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[484, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[485, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[485, 3, 1, "", "add_refresh"], [485, 3, 1, "", "from_exception"], [485, 3, 1, "", "get_status_code_for_exception"], [485, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[486, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[486, 3, 1, "", "get_code_template"], [486, 3, 1, "", "get_config"], [486, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 491], "coven": [0, 491], "code": [0, 2, 491], "conduct": [0, 491], "our": [0, 491], "pledg": [0, 491], "standard": [0, 491], "respons": [0, 491], "scope": [0, 491], "enforc": [0, 491], "attribut": [0, 187, 213, 222, 232, 255, 272, 375, 491], "fx": 1, "overview": 1, "usag": [1, 2, 3, 4, 522, 524], "note": 1, "detail": [1, 489], "common": [1, 10, 192, 193, 194, 195, 196, 197, 198, 199, 500], "problem": 1, "dynam": [1, 2, 498, 518], "quantiz": [1, 4, 6, 27, 64, 266, 285, 469, 488, 496, 498, 517, 518, 519, 526], "static": [1, 518], "awar": [1, 4, 518], "train": [1, 4, 302, 497, 518], "neural": [2, 6, 25, 489, 504, 505, 515, 521], "architectur": [2, 3, 6, 25, 494, 505], "search": [2, 25], "introduct": [2, 7, 489, 495, 496, 497, 501, 502, 505, 508, 509, 510, 511, 512, 513, 515, 517, 518, 521, 522, 524, 525], "na": [2, 25, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 517], "api": [2, 6, 7, 9, 21, 495, 503, 508, 509, 512, 513, 515, 517], "basic": [2, 287, 524], "1": [2, 489, 497, 500, 503, 506, 526], "python": [2, 6, 29, 508, 517], "yaml": [2, 490, 492, 496, 497, 501, 525], "2": [2, 21, 489, 500, 503, 506, 526], "onli": 2, "advanc": 2, "custom": [2, 489, 508, 512, 524], "exampl": [2, 3, 4, 7, 336, 490, 495, 496, 497, 499, 502, 509, 510, 512, 513, 515, 518, 522, 526], "ptq": [3, 526], "design": [3, 4, 494, 522, 524], "pytorch": [3, 66, 311, 397, 398, 488, 493, 508, 519, 522, 523, 526], "mobilenetv2": 3, "model": [3, 6, 19, 196, 271, 272, 273, 274, 275, 276, 340, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 467, 481, 489, 510, 511, 524, 526], "helper": [3, 297], "function": [3, 31, 35, 36, 40, 59, 65, 66, 88, 89, 91, 133, 162, 164, 168, 169, 171, 173, 175, 187, 191, 192, 194, 197, 199, 203, 211, 213, 217, 220, 221, 222, 224, 225, 226, 228, 229, 230, 233, 234, 236, 237, 238, 239, 240, 248, 252, 257, 261, 262, 263, 265, 269, 273, 277, 283, 285, 288, 296, 302, 305, 311, 312, 314, 315, 324, 325, 326, 328, 332, 334, 335, 337, 339, 342, 343, 347, 350, 351, 352, 363, 373, 390, 394, 396, 407, 408, 409, 412, 415, 419, 423, 425, 428, 430, 431, 434, 440, 441, 449, 452, 460, 468, 471, 472, 476, 477, 497], "secur": [5, 489, 497], "polici": 5, "report": 5, "vulner": 5, "intel": [6, 489, 504, 505, 526], "compressor": [6, 489, 504, 505, 521], "instal": [6, 489, 497, 506], "prerequisit": [6, 506], "linux": [6, 506], "get": [6, 7, 288, 495, 501, 508, 509, 512, 513, 515, 517, 518, 525], "start": [6, 7, 489, 495, 501, 508, 509, 512, 513, 515, 517, 518, 525], "jupyterlab": 6, "extens": [6, 526], "gui": 6, "system": [6, 489, 514], "requir": 6, "valid": [6, 526], "hardwar": [6, 526], "environ": [6, 444], "support": [6, 7, 488, 491, 493, 495, 497, 501, 505, 508, 509, 510, 512, 513, 515, 517, 518, 523, 525], "cpu": [6, 526], "base": 6, "64": 6, "compat": 6, "processor": 6, "gpu": 6, "built": [6, 493, 503, 508], "": 6, "xe": 6, "onnx": [6, 166, 488, 526], "multipl": [6, 512, 526], "vendor": 6, "through": [6, 526], "runtim": [6, 488, 526], "softwar": 6, "document": [6, 504], "select": 6, "public": [6, 516], "event": [6, 516], "addit": 6, "content": [6, 12, 25, 31, 35, 36, 37, 38, 40, 41, 42, 55, 59, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 168, 169, 170, 171, 172, 173, 174, 175, 178, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 303, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 390, 391, 393, 394, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489], "hire": 6, "adaptor": [7, 8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "matrix": [7, 488, 495, 501, 505, 508, 509, 510, 512, 513, 515, 517, 518, 525], "work": [7, 518], "flow": [7, 518], "queri": [7, 67], "background": 7, "ad": 7, "new": [7, 489, 524], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 12, 25, 36, 38, 40, 41, 42, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 164, 169, 170, 171, 172, 173, 174, 175, 178, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 306, 307, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 368, 369, 370, 372, 375, 376, 377, 378, 379, 381, 383, 384, 391, 393, 396, 398, 399, 400, 401, 403, 404, 405, 406, 410, 414, 416, 417, 420, 422, 426, 429, 430, 432, 435, 436, 437, 439, 443, 444, 446, 447, 448, 449, 451, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 476, 478, 479, 481, 482, 483, 484, 485, 486], "benchmark": [11, 173, 191, 313, 314, 315, 316, 330, 478, 489, 490, 517], "bleu": [12, 233], "modul": [12, 31, 35, 36, 38, 40, 41, 42, 59, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 168, 169, 170, 172, 173, 174, 175, 178, 181, 182, 183, 185, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 223, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 273, 275, 276, 277, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 302, 303, 305, 307, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 390, 391, 393, 394, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486], "criterion": [13, 192], "data": [14, 183, 184, 185, 186, 187, 188, 189, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "dataload": [15, 183, 184, 193, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 332, 462, 490, 492], "basedataload": 15, "dataset": [16, 185, 186, 211, 212, 213, 214, 215, 216, 217, 218, 333, 489, 493, 503], "transform": [17, 188, 189, 190, 223, 224, 225, 226, 347, 503, 523], "metric": [18, 195, 233, 234, 235, 236, 237, 238, 239, 240, 269, 339, 458, 503, 508], "optim": [20, 197, 341, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 482, 489, 502, 513], "compon": [21, 200, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], "experiement": 21, "deprec": 21, "0": [21, 526], "distil": [22, 227, 495, 496, 517, 526], "mixedprecis": 23, "modelconvers": 24, "packag": [25, 37, 55, 171, 184, 187, 194, 205, 217, 221, 222, 224, 228, 232, 239, 250, 255, 256, 268, 269, 272, 280, 292, 306, 316, 356, 361, 420], "prune": [26, 254, 264, 284, 468, 515, 517, 526], "schedul": [28, 265, 267, 515], "strategi": [30, 180, 181, 182, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 521, 524], "6ece06672ed3_v1_14": 31, "6f0d0f71d92e_v1_13": 32, "9e89549a08c8_v1_11": 33, "block_mask": 34, "env": 35, "neural_compressor": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "mxnet": [38, 488, 493, 508, 523, 526], "mxnet_util": [39, 40], "util": [40, 65, 162, 168, 230, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 363, 407, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "onnxrt": [41, 395, 396, 493, 508, 523], "ox_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "calibr": 42, "oper": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "activ": 44, "argmax": 45, "attent": 46, "binary_op": 47, "concat": 48, "conv": 49, "direct_q8": 50, "embed_layernorm": 51, "gather": 52, "gavgpool": 53, "gemm": 54, "lstm": 56, "matmul": 57, "maxpool": 58, "op": 59, "pad": 60, "pool": 61, "resiz": 62, "split": 63, "tensorflow": [68, 401, 402, 403, 404, 405, 406, 407, 488, 493, 508, 519, 522, 523, 526], "tf_util": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "graph_convert": 69, "graph_converter_without_calib": 70, "graph_rewrit": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "bf16": [71, 72], "bf16_convert": [71, 163], "gener": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "convert_add_to_biasadd": 73, "convert_layout": 74, "convert_leakyrelu": 75, "convert_nan_to_random": 76, "convert_placeholder_to_const": 77, "dequantize_cast_optim": 78, "dilated_contract": 79, "dummy_biasadd": 80, "expanddims_optim": 81, "fetch_weight_from_reshap": 82, "fold_batch_norm": 83, "fold_const": 84, "fuse_biasadd_add": 85, "fuse_column_wise_mul": 86, "fuse_conv_with_math": 87, "fuse_decomposed_bn": 88, "fuse_decomposed_in": 89, "fuse_gelu": 90, "fuse_layer_norm": 91, "fuse_pad_with_conv": 92, "fuse_pad_with_fp32_conv": 93, "fuse_reshape_transpos": 94, "graph_cse_optim": 95, "grappler_pass": 96, "insert_print_nod": 98, "move_squeeze_after_relu": 99, "pre_optim": 100, "remove_training_nod": 101, "rename_batch_norm": 102, "split_shared_input": 103, "strip_equivalent_nod": 104, "strip_unused_nod": 105, "switch_optim": 106, "update_ent": 107, "graph_bas": 108, "int8": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 526], "freeze_fake_qu": 110, "freeze_valu": 111, "freeze_value_without_calib": 112, "fuse_conv_redundant_dequant": 113, "fuse_conv_requant": 114, "fuse_matmul_redundant_dequant": 115, "fuse_matmul_requant": 116, "meta_op_optim": 118, "post_hostconst_convert": 119, "post_quantized_op_cs": 120, "rnn_convert": 121, "scale_propag": 122, "qdq": [123, 124, 125, 126, 140, 141, 142, 143, 144, 145, 146, 147, 148, 526], "insert_qdq_pattern": 124, "merge_duplicated_qdq": 125, "share_qdq_y_pattern": 126, "graph_util": 127, "quantize_graph": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "qat": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 526], "fake_quant": 130, "quantize_config": 132, "quantize_help": 133, "quantize_lay": [134, 135, 136, 137, 138], "optimize_lay": 135, "quantize_layer_add": 136, "quantize_layer_bas": 137, "quantize_layer_bn": 138, "quantize_wrapp": 139, "fuse_qdq_bn": 140, "fuse_qdq_concatv2": 141, "fuse_qdq_conv": 142, "fuse_qdq_deconv": 143, "fuse_qdq_in": 144, "fuse_qdq_matmul": 145, "fuse_qdq_pool": 146, "optimize_qdq": 148, "quantize_graph_bas": 149, "quantize_graph_bn": 150, "quantize_graph_concatv2": 151, "quantize_graph_conv": 152, "quantize_graph_for_intel_cpu": 153, "quantize_graph_matmul": 154, "quantize_graph_pool": 155, "quantize_graph_common": 156, "transform_graph": [157, 158, 159, 160, 161], "bias_correct": 157, "graph_transform_bas": 158, "insert_log": 160, "rerange_quantized_concat": 161, "torch_util": [163, 164, 165, 166, 167, 168, 199], "hawq_metr": 164, "symbolic_trac": 167, "algorithm": [169, 170, 171, 172], "fast_bias_correct": 170, "weight_correct": 172, "conf": [174, 175, 176, 177], "config": [174, 178, 461, 490, 492, 512], "dotdict": 175, "pythonic_config": 177, "contrib": [179, 180, 181, 182], "sigopt": [181, 521, 524], "tpe": [182, 524], "imagenet_dataset": [185, 216], "coco_transform": 188, "imagenet_transform": [189, 223], "experiment": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "submodul": [194, 205, 217, 221, 224, 228, 232, 239, 249, 250, 256, 259, 306, 316, 320, 327, 338, 356, 361, 366, 367, 371, 374, 380, 382, 385, 386, 392, 395, 397, 402, 411, 413, 418, 420, 421, 424, 427, 433, 438, 442, 450, 457, 465, 475, 480], "postprocess": 198, "base_dataload": 201, "default_dataload": 203, "fetcher": 204, "mxnet_dataload": 206, "onnxrt_dataload": 207, "pytorch_dataload": 208, "sampler": 209, "tensorflow_dataload": 210, "bert_dataset": 211, "coco_dataset": 212, "dummy_dataset": 214, "dummy_dataset_v2": 215, "style_transfer_dataset": 218, "filter": [219, 220, 221], "coco_filt": 219, "subpackag": [222, 232, 250, 255, 268, 361, 366, 380, 385, 392, 420, 433, 442, 450, 475], "token": 225, "export": [228, 229, 230], "torch2onnx": 229, "graph_optim": [231, 417, 418, 419, 464], "bleu_util": 234, "coco_label_map": 235, "coco_tool": 236, "evaluate_squad": 237, "f1": 238, "mixed_precis": [241, 421, 422, 423, 466], "model_convers": 242, "basic_na": 243, "dyna": 244, "dynast": [245, 246, 247, 248, 249], "dynas_manag": 245, "dynas_predictor": 246, "dynas_search": 247, "dynas_util": 248, "nas_util": 252, "search_algorithm": 253, "pruning_recip": [255, 256, 257, 258], "pattern": [256, 257, 258, 261, 515], "tile_pattern": 258, "pytorch_prun": [259, 260, 261, 262, 263, 264, 265], "logger": [260, 309, 452], "prune_util": 262, "pruner": [263, 278, 279, 280, 281, 282, 283], "mix_precis": 270, "base_model": 271, "nets_factori": 274, "onnx_model": 275, "torch_model": 276, "object": [277, 512], "gradient_sensit": 278, "group_lasso": 279, "magnitud": 281, "pattern_lock": 282, "auto_mixed_precis": 286, "bayesian": [288, 524], "target": 288, "valu": 288, "param": 288, "conserv": 289, "exhaust": [290, 524], "hawq_v2": 291, "mse": [293, 524], "mse_v2": [294, 524], "random": [295, 524], "tuning_sampl": 299, "tuning_spac": 300, "tuning_struct": 301, "collect_layer_histogram": 303, "constant": 304, "create_obj_from_config": 305, "kl_diverg": 307, "load_huggingfac": 308, "option": [310, 489, 497, 506], "ux": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "benchmark_model": 314, "execute_benchmark": 315, "config_gener": [317, 318, 319, 320, 321, 322, 323], "benchmark_config_gener": 317, "graph_optimization_config_gener": 319, "mixed_precision_config_gener": 321, "profiling_config_gener": 322, "quantization_config_gener": 323, "configuration_wizard": [324, 325, 326, 327, 328], "configuration_pars": 324, "get_boundary_nod": 325, "get_configur": 326, "params_feed": 328, "db_manag": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "db_model": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "benchmark_result": 331, "domain": [334, 391], "domain_flavour": 335, "framework": [337, 501, 510, 517], "optimization_typ": 342, "precis": [343, 502, 509, 519], "profil": [344, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 483, 489], "profiling_result": 345, "project": [346, 489], "tuning_detail": 348, "tuning_histori": [349, 430], "db_oper": [350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360], "benchmark_api_interfac": 350, "dataset_api_interfac": 351, "diagnosis_api_interfac": 353, "dictionaries_api_interfac": 354, "examples_api_interfac": 355, "model_api_interfac": 357, "optimization_api_interfac": 358, "profiling_api_interfac": 359, "project_api_interfac": 360, "params_interfac": 362, "diagnosi": [364, 365, 366, 367, 368, 369, 370, 371, 372, 489], "factori": [365, 416, 432, 437], "onnx_diagnosi": [367, 368], "onnxrt_diagnosi": 368, "op_detail": 369, "op_entri": 370, "tensorflow_diagnosi": [371, 372], "file_brows": [373, 374], "graph": [375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 489, 502], "collaps": 376, "edg": 377, "graph_read": 379, "node": 381, "reader": [382, 383, 384], "onnxrt_read": 383, "tensorflow_read": 384, "jobs_manag": [386, 387, 388, 389], "jobs_control_queu": 387, "request": [389, 491], "manage_workspac": 390, "model_type_gett": 394, "repositori": 399, "shape": 400, "frozen_pb": 401, "kera": 403, "meta_graph": 404, "saved_model": 406, "model_zoo": [408, 409, 410, 411, 412], "download_config": 408, "download_model": 409, "download": 410, "list_model": 412, "names_mapp": [413, 414], "execute_optim": 415, "optimize_model": [419, 423, 425], "neural_coder_optim": [424, 425], "tune": [427, 428, 429, 470, 502, 518, 524], "tune_model": 428, "execute_profil": 431, "profile_model": 434, "tensorflow_profil": [437, 438, 439, 440], "inc_bench": 441, "const": 443, "except": [445, 474], "executor": 446, "expiring_dict": 447, "github_info": 448, "hw_info": 449, "json_seri": 451, "parser": 453, "proc": 454, "process": 455, "singleton": 456, "templat": [457, 458, 459, 491], "workdir": 459, "workload": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 486], "evalu": [463, 490, 497], "yaml_util": 471, "web": [472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "commun": 472, "configur": [473, 497, 501, 514, 517, 521, 524, 525], "router": 476, "server": 477, "servic": [478, 479, 480, 481, 482, 483, 484, 485, 486], "history_snapshot_pars": 479, "request_data_processor": 484, "response_gener": 485, "version": 487, "ipex": 488, "refer": 488, "bench": 489, "tabl": 489, "from": [489, 506], "binari": [489, 506], "sourc": [489, 506], "home": 489, "screen": 489, "creat": [489, 492], "predefin": 489, "displai": 489, "list": [489, 493, 523], "remov": 489, "develop": 489, "tab": 489, "wizard": 489, "edit": 489, "entri": 489, "inform": [489, 507], "file": [490, 492, 501, 525], "us": [490, 492, 502, 511], "user": [490, 492, 493, 496, 497, 503, 517, 525], "specif": [490, 492, 493, 524], "run": 490, "contribut": 491, "guidelin": 491, "pull": 491, "checklist": 491, "how": [492, 502, 511], "workflow": 494, "knowledg": [495, 526], "intermedi": 495, "layer": 495, "self": 495, "defin": [496, 497], "distribut": 497, "infer": 497, "horovod": 497, "pure": 497, "option2": 497, "horovodrun": 497, "follow": 497, "ar": 497, "frequent": 500, "ask": 500, "question": 500, "build": [500, 508], "issu": [500, 520], "3": [500, 506], "featur": [501, 505, 517, 518, 525], "fp32": 502, "auto": [502, 519], "mix": [502, 509, 519], "default": 502, "incompat": [503, 520], "chang": [503, 520], "between": 503, "v1": 503, "face": 503, "section": 504, "infrastructur": 505, "ai": 506, "kit": 506, "window": 506, "legal": 507, "licens": 507, "citat": 507, "trademark": 507, "singl": [508, 512], "multi": [508, 513], "convers": 511, "orchestr": 513, "One": 513, "shot": 513, "network": 515, "criteria": 515, "full": 516, "49": 516, "2022": 516, "31": 516, "2021": 516, "14": 516, "2018": 516, "2020": 516, "4": 516, "style": 517, "access": 517, "fundament": 518, "approach": 518, "post": 518, "accuraci": 518, "turn": 519, "ON": 519, "dure": 519, "releas": 520, "known": 520, "prepar": 521, "perform": 521, "benefit": 521, "comparison": 521, "differ": 521, "tensorboard": 522, "part": 524, "relat": 524, "mlperf": 526, "10": 526, "torch": 526, "12": 526, "mode": 526, "11": 526, "7": 526}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [491, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [491, "our-pledge"]], "Our Standards": [[0, "our-standards"], [491, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [491, "our-responsibilities"]], "Scope": [[0, "scope"], [491, "scope"]], "Enforcement": [[0, "enforcement"], [491, "enforcement"]], "Attribution": [[0, "attribution"], [491, "attribution"]], "FX": [[1, "fx"]], "Overview": [[1, "overview"]], "Usage": [[1, "usage"], [4, "usage"], [522, "usage"], [522, "id2"], [524, "usage"], [524, "id2"], [524, "id4"], [524, "id6"], [524, "id8"], [524, "id10"], [524, "id12"], [524, "id14"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [498, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Introduction": [[2, "introduction"], [7, "introduction"], [489, "introduction"], [495, "introduction"], [496, "introduction"], [497, "introduction"], [501, "introduction"], [502, "introduction"], [505, "introduction"], [508, "introduction"], [509, "introduction"], [510, "introduction"], [511, "introduction"], [512, "introduction"], [513, "introduction"], [515, "introduction"], [517, "introduction"], [522, "introduction"], [524, "introduction"], [525, "introduction"]], "NAS API": [[2, "nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "Examples": [[2, "examples"], [4, "examples"], [490, "examples"], [495, "examples"], [496, "examples"], [499, "examples"], [502, "examples"], [509, "examples"], [510, "examples"], [513, "examples"], [515, "examples"], [518, "examples"], [522, "examples"], [522, "id3"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [494, "design"], [522, "design"], [522, "id1"], [524, "design"], [524, "id1"], [524, "id3"], [524, "id5"], [524, "id7"], [524, "id9"], [524, "id11"], [524, "id13"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [512, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Security Policy": [[5, "security-policy"]], "Report a Vulnerability": [[5, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[6, "intel-neural-compressor"]], "Installation": [[6, "installation"], [506, "installation"]], "Prerequisites": [[6, "prerequisites"], [506, "prerequisites"], [506, "id1"]], "Install on Linux": [[6, "install-on-linux"]], "Getting Started": [[6, "getting-started"]], "Quantization with Python API": [[6, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[6, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[6, "quantization-with-gui"]], "System Requirements": [[6, "system-requirements"]], "Validated Hardware Environment": [[6, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[6, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[6, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[6, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[6, "validated-software-environment"]], "Validated Models": [[6, "validated-models"], [526, "validated-models"]], "Documentation": [[6, "documentation"]], "Selected Publications/Events": [[6, "selected-publications-events"]], "Additional Content": [[6, "additional-content"]], "Hiring": [[6, "hiring"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [518, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "APIs": [[9, "apis"]], "Common": [[10, "common"]], "Benchmark": [[11, "benchmark"], [517, "benchmark"]], "BLEU": [[12, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[12, "module-contents"], [31, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [59, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [257, "module-contents"], [258, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [271, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [307, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [422, "module-contents"], [423, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"]], "Classes": [[12, "classes"], [25, "classes"], [36, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [130, "classes"], [132, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [160, "classes"], [161, "classes"], [164, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [178, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [200, "classes"], [201, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [236, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [250, "classes"], [251, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [261, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [302, "classes"], [303, "classes"], [306, "classes"], [307, "classes"], [312, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [365, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [391, "classes"], [393, "classes"], [396, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [410, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [420, "classes"], [422, "classes"], [426, "classes"], [429, "classes"], [430, "classes"], [432, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [439, "classes"], [443, "classes"], [444, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [451, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [458, "classes"], [459, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [473, "classes"], [476, "classes"], [478, "classes"], [479, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"]], "Criterion": [[13, "criterion"]], "Data": [[14, "data"]], "Dataloader": [[15, "dataloader"]], "BaseDataLoader": [[15, "basedataloader"]], "dataloaders": [[15, "dataloaders"]], "Datasets": [[16, "datasets"]], "Transforms": [[17, "transforms"]], "Metric": [[18, "metric"]], "Model": [[19, "model"], [510, "model"]], "Optimizer": [[20, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[21, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[22, "distillation"], [495, "distillation"], [517, "distillation"]], "MixedPrecision": [[23, "mixedprecision"]], "ModelConversion": [[24, "modelconversion"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [37, "package-contents"], [55, "package-contents"], [171, "package-contents"], [184, "package-contents"], [187, "package-contents"], [194, "package-contents"], [205, "package-contents"], [217, "package-contents"], [221, "package-contents"], [222, "package-contents"], [224, "package-contents"], [228, "package-contents"], [232, "package-contents"], [239, "package-contents"], [250, "package-contents"], [255, "package-contents"], [256, "package-contents"], [268, "package-contents"], [269, "package-contents"], [272, "package-contents"], [280, "package-contents"], [292, "package-contents"], [306, "package-contents"], [316, "package-contents"], [356, "package-contents"], [361, "package-contents"], [420, "package-contents"]], "Pruning": [[26, "pruning"], [515, "pruning"], [517, "pruning"]], "Quantization": [[27, "quantization"], [517, "quantization"], [518, "quantization"]], "Scheduler": [[28, "scheduler"]], "Pythonic": [[29, "pythonic"]], "Strategy": [[30, "strategy"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "Functions": [[31, "functions"], [35, "functions"], [36, "functions"], [40, "functions"], [59, "functions"], [65, "functions"], [66, "functions"], [88, "functions"], [89, "functions"], [91, "functions"], [133, "functions"], [162, "functions"], [164, "functions"], [168, "functions"], [169, "functions"], [171, "functions"], [173, "functions"], [175, "functions"], [187, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [197, "functions"], [199, "functions"], [203, "functions"], [211, "functions"], [213, "functions"], [217, "functions"], [220, "functions"], [221, "functions"], [222, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [228, "functions"], [229, "functions"], [230, "functions"], [233, "functions"], [234, "functions"], [236, "functions"], [237, "functions"], [238, "functions"], [239, "functions"], [240, "functions"], [248, "functions"], [252, "functions"], [257, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [269, "functions"], [273, "functions"], [277, "functions"], [283, "functions"], [285, "functions"], [288, "functions"], [296, "functions"], [302, "functions"], [305, "functions"], [311, "functions"], [312, "functions"], [314, "functions"], [315, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [328, "functions"], [332, "functions"], [334, "functions"], [335, "functions"], [337, "functions"], [339, "functions"], [342, "functions"], [343, "functions"], [347, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [363, "functions"], [373, "functions"], [390, "functions"], [394, "functions"], [396, "functions"], [407, "functions"], [408, "functions"], [409, "functions"], [412, "functions"], [415, "functions"], [419, "functions"], [423, "functions"], [425, "functions"], [428, "functions"], [430, "functions"], [431, "functions"], [434, "functions"], [440, "functions"], [441, "functions"], [449, "functions"], [452, "functions"], [460, "functions"], [468, "functions"], [471, "functions"], [472, "functions"], [476, "functions"], [477, "functions"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.mxnet": [[38, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[39, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[41, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[43, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[44, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[46, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[48, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[49, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[52, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[55, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[60, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[62, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[63, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[64, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[65, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[66, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[67, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[68, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[69, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[128, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[157, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[158, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[159, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[162, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[163, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[164, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[165, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[166, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[167, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[169, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[170, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[171, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[172, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[173, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.dataloader": [[183, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.datasets.imagenet_dataset": [[185, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[186, "module-neural_compressor.data.datasets"]], "neural_compressor.data": [[187, "module-neural_compressor.data"]], "Attributes": [[187, "attributes"], [213, "attributes"], [222, "attributes"], [232, "attributes"], [255, "attributes"], [272, "attributes"]], "neural_compressor.data.transforms.coco_transform": [[188, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[189, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[190, "module-neural_compressor.data.transforms"]], "neural_compressor.experimental.benchmark": [[191, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[192, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[193, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[194, "module-neural_compressor.experimental.common"]], "Submodules": [[194, "submodules"], [205, "submodules"], [217, "submodules"], [221, "submodules"], [224, "submodules"], [228, "submodules"], [232, "submodules"], [239, "submodules"], [249, "submodules"], [250, "submodules"], [256, "submodules"], [259, "submodules"], [306, "submodules"], [316, "submodules"], [320, "submodules"], [327, "submodules"], [338, "submodules"], [356, "submodules"], [361, "submodules"], [366, "submodules"], [367, "submodules"], [371, "submodules"], [374, "submodules"], [380, "submodules"], [382, "submodules"], [385, "submodules"], [386, "submodules"], [392, "submodules"], [395, "submodules"], [397, "submodules"], [402, "submodules"], [411, "submodules"], [413, "submodules"], [418, "submodules"], [420, "submodules"], [421, "submodules"], [424, "submodules"], [427, "submodules"], [433, "submodules"], [438, "submodules"], [442, "submodules"], [450, "submodules"], [457, "submodules"], [465, "submodules"], [475, "submodules"], [480, "submodules"]], "neural_compressor.experimental.common.metric": [[195, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[196, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[197, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[198, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[199, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[200, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[205, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[213, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[217, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[220, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[221, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[222, "module-neural_compressor.experimental.data"]], "Subpackages": [[222, "subpackages"], [232, "subpackages"], [250, "subpackages"], [255, "subpackages"], [268, "subpackages"], [361, "subpackages"], [366, "subpackages"], [380, "subpackages"], [385, "subpackages"], [392, "subpackages"], [420, "subpackages"], [433, "subpackages"], [442, "subpackages"], [450, "subpackages"], [475, "subpackages"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[224, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[226, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[227, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[228, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.torch2onnx": [[229, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[230, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[231, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[232, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[233, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[234, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[235, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[236, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[237, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[238, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[239, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[240, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[241, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[242, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[243, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[244, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[245, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[246, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[247, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[248, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[249, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas": [[250, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[251, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[252, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[253, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[254, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[255, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[259, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[260, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[266, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[267, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[268, "module-neural_compressor"]], "neural_compressor.metric": [[269, "module-neural_compressor.metric"]], "neural_compressor.mix_precision": [[270, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[271, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[272, "module-neural_compressor.model"]], "neural_compressor.model.model": [[273, "module-neural_compressor.model.model"]], "neural_compressor.model.nets_factory": [[274, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[275, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.torch_model": [[276, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[277, "module-neural_compressor.objective"]], "neural_compressor.pruners.gradient_sensitivity": [[278, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[279, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[280, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[281, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[282, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[283, "module-neural_compressor.pruners.pruner"]], "neural_compressor.pruning": [[284, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[285, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[286, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[287, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[288, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[288, "get-the-target-value-of-params"]], "neural_compressor.strategy.conservative": [[289, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[290, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[291, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[292, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[293, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[294, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[295, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[296, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.helper": [[297, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[298, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[299, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[300, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[301, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[302, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[303, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[304, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[305, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[306, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[307, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[308, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[309, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[310, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[311, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[312, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[313, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[314, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[315, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[316, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[317, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[318, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[319, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[320, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[321, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[322, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[323, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[324, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[325, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[326, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[327, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[328, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[329, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[330, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[331, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[332, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[333, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[334, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[335, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[336, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[337, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[338, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[339, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[340, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[341, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[342, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[343, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[344, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[345, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[346, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[347, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[348, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[349, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[350, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[351, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[352, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[353, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[354, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[355, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[356, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[357, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[358, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[359, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[360, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[361, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[362, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[363, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[364, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[365, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[366, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[367, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[368, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[369, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[370, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[371, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[372, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[373, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[374, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[375, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[376, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[377, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[378, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[379, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[380, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[381, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[382, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[383, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[384, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[385, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[386, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[387, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[388, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[389, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[390, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[391, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[392, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[393, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[394, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[395, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[396, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[397, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[398, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[399, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[400, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[401, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[402, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[403, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[404, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[405, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[406, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[407, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[408, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[409, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[410, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[411, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[412, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[413, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[414, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[415, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[416, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[417, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[418, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[419, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[420, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[421, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[422, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[423, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[424, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[425, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[426, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[427, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[428, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[429, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[430, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[431, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[432, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[433, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[434, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[435, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[436, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[437, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[438, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[439, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[440, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[441, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[442, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[443, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[444, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[445, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[446, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[447, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[448, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[449, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[450, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[451, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[452, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[453, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[454, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[455, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[456, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[457, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[458, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[459, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[460, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[461, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[462, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[463, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[464, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[465, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[466, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[467, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[468, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[469, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[470, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[471, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[472, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[473, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[474, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[475, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[476, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[477, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[478, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[479, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[480, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[481, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[482, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[483, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[484, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[485, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[486, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[487, "module-neural_compressor.version"]], "Quantization Support Matrix": [[488, "quantization-support-matrix"]], "TensorFlow": [[488, "tensorflow"], [493, "tensorflow"], [508, "tensorflow"], [523, "tensorflow"]], "PyTorch": [[488, "pytorch"], [493, "pytorch"], [508, "pytorch"], [519, "pytorch"]], "PyTorch IPEX": [[488, "pytorch-ipex"]], "MXNet": [[488, "mxnet"], [493, "mxnet"], [508, "mxnet"], [523, "mxnet"]], "ONNX Runtime": [[488, "onnx-runtime"]], "Reference": [[488, "reference"]], "Intel\u00ae Neural Compressor Bench": [[489, "intel-neural-compressor-bench"]], "Table of Contents": [[489, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[489, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[489, "option-1-install-from-binary"], [506, "option-1-install-from-binary"], [506, "id2"]], "Option 2 Install from source": [[489, "option-2-install-from-source"], [506, "option-2-install-from-source"], [506, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[489, "start-the-intel-neural-compressor-bench"]], "Home screen": [[489, "home-screen"]], "Create new project": [[489, "create-new-project"]], "Predefined model": [[489, "predefined-model"]], "Custom model": [[489, "custom-model"]], "Display model graph": [[489, "display-model-graph"]], "Project list": [[489, "project-list"]], "Remove project": [[489, "remove-project"]], "Develop the project": [[489, "develop-the-project"]], "Optimization tab": [[489, "optimization-tab"]], "Optimization table": [[489, "optimization-table"]], "Optimization wizard": [[489, "optimization-wizard"]], "Editing optimization entries": [[489, "editing-optimization-entries"]], "Optimization details": [[489, "optimization-details"]], "Benchmark tab": [[489, "benchmark-tab"]], "Benchmark table": [[489, "benchmark-table"]], "Benchmark wizard": [[489, "benchmark-wizard"]], "Editing benchmark entries": [[489, "editing-benchmark-entries"]], "Benchmark details": [[489, "benchmark-details"]], "Profiling tab": [[489, "profiling-tab"]], "Profiling table": [[489, "profiling-table"]], "Profiling wizard": [[489, "profiling-wizard"]], "Editing profiling entries": [[489, "editing-profiling-entries"]], "Profiling details": [[489, "profiling-details"]], "Diagnosis tab": [[489, "diagnosis-tab"]], "Dataset tab": [[489, "dataset-tab"]], "Dataset list": [[489, "dataset-list"]], "Dataset wizard": [[489, "dataset-wizard"]], "Dataset details": [[489, "dataset-details"]], "Custom dataset": [[489, "custom-dataset"]], "Project information": [[489, "project-information"]], "System information": [[489, "system-information"]], "Security": [[489, "security"]], "Benchmarking": [[490, "benchmarking"]], "Config evaluation filed in a yaml file": [[490, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[490, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[491, "contribution-guidelines"]], "Pull Request Checklist": [[491, "pull-request-checklist"]], "Pull Request Template": [[491, "pull-request-template"]], "Support": [[491, "support"]], "DataLoader": [[492, "dataloader"]], "How to use it": [[492, "how-to-use-it"], [502, "how-to-use-it"], [511, "how-to-use-it"]], "Config dataloader in a yaml file": [[492, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[492, "create-a-user-specific-dataloader"]], "Dataset": [[493, "dataset"]], "Built-in dataset support list": [[493, "built-in-dataset-support-list"]], "ONNXRT": [[493, "onnxrt"], [508, "onnxrt"], [523, "onnxrt"]], "User-specific dataset": [[493, "user-specific-dataset"]], "Architecture": [[494, "architecture"], [505, "architecture"]], "Workflow": [[494, "workflow"]], "Knowledge Distillation": [[495, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[495, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[495, "self-distillation"]], "Distillation Support Matrix": [[495, "distillation-support-matrix"]], "Get Started with Distillation API": [[495, "get-started-with-distillation-api"]], "Distillation for Quantization": [[496, "distillation-for-quantization"]], "User-defined yaml": [[496, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[497, "distributed-training-and-inference-evaluation"]], "horovod installation": [[497, "horovod-installation"]], "Distributed training and inference (evaluation)": [[497, "id1"]], "Option 1: pure yaml configuration": [[497, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[497, "option2-user-defined-training-function"]], "horovodrun": [[497, "horovodrun"]], "security": [[497, "security"]], "Following examples are supported": [[497, "following-examples-are-supported"]], "Frequently Asked Questions": [[500, "frequently-asked-questions"]], "Common Build Issues": [[500, "common-build-issues"]], "Issue 1:": [[500, "issue-1"]], "Issue 2:": [[500, "issue-2"]], "Issue 3:": [[500, "issue-3"]], "Framework YAML Configuration Files": [[501, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[501, "supported-feature-matrix"], [505, "supported-feature-matrix"], [517, "supported-feature-matrix"], [518, "supported-feature-matrix"], [525, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[501, "get-started-with-framework-yaml-files"]], "Graph Optimization": [[502, "graph-optimization"]], "FP32 Optimization": [[502, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[502, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[502, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[502, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[502, "id1"]], "Incompatible changes between v1.2 and v1.1": [[503, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[503, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[503, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[504, "intel-neural-compressor-documentation"]], "Sections": [[504, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[505, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[506, "linux-installation"]], "Option 3 Install from AI Kit": [[506, "option-3-install-from-ai-kit"]], "Windows Installation": [[506, "windows-installation"]], "Legal Information": [[507, "legal-information"]], "License": [[507, "license"]], "Citation": [[507, "citation"]], "Trademarks": [[507, "trademarks"]], "Metrics": [[508, "metrics"]], "Supported Built-in Metric Matrix": [[508, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[508, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[508, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[508, "build-custom-metric-with-python-api"]], "Mixed Precision": [[509, "mixed-precision"]], "Mixed Precision Support Matrix": [[509, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[509, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[510, "supported-framework-model-matrix"]], "Model Conversion": [[511, "model-conversion"]], "Objective": [[512, "objective"]], "Single Objective": [[512, "single-objective"]], "Multiple Objectives": [[512, "multiple-objectives"]], "Objective Support Matrix": [[512, "objective-support-matrix"]], "Get Start with Objective API": [[512, "get-start-with-objective-api"]], "Config Single Objective": [[512, "config-single-objective"]], "Config Multiple Objectives": [[512, "config-multiple-objectives"]], "Config Custom Objective": [[512, "config-custom-objective"]], "Optimization Orchestration": [[513, "optimization-orchestration"]], "One-shot": [[513, "one-shot"]], "Multi-shot": [[513, "multi-shot"]], "Orchestration Support Matrix": [[513, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[513, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[514, "system-configuration"]], "Neural Network Pruning": [[515, "neural-network-pruning"]], "Pruning Patterns": [[515, "pruning-patterns"]], "Pruning Criteria": [[515, "pruning-criteria"]], "Pruning Schedule": [[515, "pruning-schedule"]], "Pruning Support Matrix": [[515, "pruning-support-matrix"]], "Get Started with Pruning API": [[515, "get-started-with-pruning-api"]], "Full Publications/Events (49)": [[516, "full-publications-events-49"]], "2022 (31)": [[516, "id1"]], "2021 (14)": [[516, "id2"]], "2018 - 2020 (4)": [[516, "id3"]], "Pythonic Style Access for Configurations": [[517, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[517, "pythonic-api-for-user-configurations"], [517, "id1"]], "Pythonic API for Framework Configurations": [[517, "pythonic-api-for-framework-configurations"], [517, "id2"]], "Get Started with Pythonic API for Configurations": [[517, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[517, "nas"]], "Quantization Introduction": [[518, "quantization-introduction"]], "Quantization Fundamentals": [[518, "quantization-fundamentals"]], "Quantization Approaches": [[518, "quantization-approaches"]], "Post Training Dynamic Quantization": [[518, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[518, "post-training-static-quantization"]], "Quantization Aware Training": [[518, "quantization-aware-training"]], "Accuracy Aware Tuning": [[518, "accuracy-aware-tuning"]], "Get Started": [[518, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[519, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[519, "tensorflow"]], "Release": [[520, "release"]], "Known Issues": [[520, "known-issues"]], "Incompatible Changes": [[520, "incompatible-changes"]], "SigOpt Strategy": [[521, "sigopt-strategy"]], "Preparation": [[521, "preparation"]], "SigOpt introduction": [[521, "sigopt-introduction"]], "Neural Compressor configuration": [[521, "neural-compressor-configuration"]], "Performance": [[521, "performance"]], "Benefit for Sigopt strategy": [[521, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[521, "performance-comparison-of-different-strategies"]], "TensorBoard": [[522, "tensorboard"]], "PyTorch TensorBoard": [[522, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[522, "tensorflow-tensorboard"]], "Transform": [[523, "transform"]], "Transform support list": [[523, "transform-support-list"]], "Pytorch": [[523, "pytorch"]], "Tuning Strategies": [[524, "tuning-strategies"]], "Strategy Design": [[524, "strategy-design"]], "Configurations": [[524, "configurations"]], "Model-specific configurations": [[524, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[524, "strategy-tuning-part-related-configurations"]], "Basic": [[524, "basic"]], "Bayesian": [[524, "bayesian"]], "MSE": [[524, "mse"]], "MSE_v2": [[524, "mse-v2"]], "TPE": [[524, "tpe"]], "Exhaustive": [[524, "exhaustive"]], "Random": [[524, "random"]], "SigOpt": [[524, "sigopt"]], "Customize a New Tuning Strategy": [[524, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[525, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[525, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[526, "validated-mlperf-models"]], "Validated Quantization Examples": [[526, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[526, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[526, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[526, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[526, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[526, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[526, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[526, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[526, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[526, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[12, "neural_compressor.experimental.metric.bleu.BLEU"], [233, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [233, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[12, "module-neural_compressor.experimental.metric.bleu"], [31, "module-6ece06672ed3_v1_14"], [32, "module-6f0d0f71d92e_v1_13"], [33, "module-9e89549a08c8_v1_11"], [34, "module-block_mask"], [35, "module-env"], [36, "module-neural_compressor.adaptor.adaptor"], [37, "module-neural_compressor.adaptor"], [38, "module-neural_compressor.adaptor.mxnet"], [39, "module-neural_compressor.adaptor.mxnet_utils"], [40, "module-neural_compressor.adaptor.mxnet_utils.util"], [41, "module-neural_compressor.adaptor.onnxrt"], [42, "module-neural_compressor.adaptor.ox_utils.calibration"], [43, "module-neural_compressor.adaptor.ox_utils"], [44, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [46, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [48, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [49, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [52, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [55, "module-neural_compressor.adaptor.ox_utils.operators"], [56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [59, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [60, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [62, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [63, "module-neural_compressor.adaptor.ox_utils.operators.split"], [64, "module-neural_compressor.adaptor.ox_utils.quantizer"], [65, "module-neural_compressor.adaptor.ox_utils.util"], [66, "module-neural_compressor.adaptor.pytorch"], [67, "module-neural_compressor.adaptor.query"], [68, "module-neural_compressor.adaptor.tensorflow"], [69, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [127, "module-neural_compressor.adaptor.tf_utils.graph_util"], [128, "module-neural_compressor.adaptor.tf_utils"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [157, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [158, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [159, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [160, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [161, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [162, "module-neural_compressor.adaptor.tf_utils.util"], [163, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [164, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [165, "module-neural_compressor.adaptor.torch_utils"], [166, "module-neural_compressor.adaptor.torch_utils.onnx"], [167, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [168, "module-neural_compressor.adaptor.torch_utils.util"], [169, "module-neural_compressor.algorithm.algorithm"], [170, "module-neural_compressor.algorithm.fast_bias_correction"], [171, "module-neural_compressor.algorithm"], [172, "module-neural_compressor.algorithm.weight_correction"], [173, "module-neural_compressor.benchmark"], [174, "module-neural_compressor.conf.config"], [175, "module-neural_compressor.conf.dotdict"], [176, "module-neural_compressor.conf"], [177, "module-neural_compressor.conf.pythonic_config"], [178, "module-neural_compressor.config"], [179, "module-neural_compressor.contrib"], [180, "module-neural_compressor.contrib.strategy"], [181, "module-neural_compressor.contrib.strategy.sigopt"], [182, "module-neural_compressor.contrib.strategy.tpe"], [183, "module-neural_compressor.data.dataloaders.dataloader"], [184, "module-neural_compressor.data.dataloaders"], [185, "module-neural_compressor.data.datasets.imagenet_dataset"], [186, "module-neural_compressor.data.datasets"], [187, "module-neural_compressor.data"], [188, "module-neural_compressor.data.transforms.coco_transform"], [189, "module-neural_compressor.data.transforms.imagenet_transform"], [190, "module-neural_compressor.data.transforms"], [191, "module-neural_compressor.experimental.benchmark"], [192, "module-neural_compressor.experimental.common.criterion"], [193, "module-neural_compressor.experimental.common.dataloader"], [194, "module-neural_compressor.experimental.common"], [195, "module-neural_compressor.experimental.common.metric"], [196, "module-neural_compressor.experimental.common.model"], [197, "module-neural_compressor.experimental.common.optimizer"], [198, "module-neural_compressor.experimental.common.postprocess"], [199, "module-neural_compressor.experimental.common.torch_utils"], [200, "module-neural_compressor.experimental.component"], [201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [202, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [204, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [205, "module-neural_compressor.experimental.data.dataloaders"], [206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [209, "module-neural_compressor.experimental.data.dataloaders.sampler"], [210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [211, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [212, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [213, "module-neural_compressor.experimental.data.datasets.dataset"], [214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [217, "module-neural_compressor.experimental.data.datasets"], [218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [219, "module-neural_compressor.experimental.data.filters.coco_filter"], [220, "module-neural_compressor.experimental.data.filters.filter"], [221, "module-neural_compressor.experimental.data.filters"], [222, "module-neural_compressor.experimental.data"], [223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [224, "module-neural_compressor.experimental.data.transforms"], [225, "module-neural_compressor.experimental.data.transforms.tokenization"], [226, "module-neural_compressor.experimental.data.transforms.transform"], [227, "module-neural_compressor.experimental.distillation"], [228, "module-neural_compressor.experimental.export"], [229, "module-neural_compressor.experimental.export.torch2onnx"], [230, "module-neural_compressor.experimental.export.utils"], [231, "module-neural_compressor.experimental.graph_optimization"], [232, "module-neural_compressor.experimental"], [233, "module-neural_compressor.experimental.metric.bleu"], [234, "module-neural_compressor.experimental.metric.bleu_util"], [235, "module-neural_compressor.experimental.metric.coco_label_map"], [236, "module-neural_compressor.experimental.metric.coco_tools"], [237, "module-neural_compressor.experimental.metric.evaluate_squad"], [238, "module-neural_compressor.experimental.metric.f1"], [239, "module-neural_compressor.experimental.metric"], [240, "module-neural_compressor.experimental.metric.metric"], [241, "module-neural_compressor.experimental.mixed_precision"], [242, "module-neural_compressor.experimental.model_conversion"], [243, "module-neural_compressor.experimental.nas.basic_nas"], [244, "module-neural_compressor.experimental.nas.dynas"], [245, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [246, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [247, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [248, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [249, "module-neural_compressor.experimental.nas.dynast"], [250, "module-neural_compressor.experimental.nas"], [251, "module-neural_compressor.experimental.nas.nas"], [252, "module-neural_compressor.experimental.nas.nas_utils"], [253, "module-neural_compressor.experimental.nas.search_algorithms"], [254, "module-neural_compressor.experimental.pruning"], [255, "module-neural_compressor.experimental.pruning_recipes"], [256, "module-neural_compressor.experimental.pruning_recipes.patterns"], [257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [259, "module-neural_compressor.experimental.pytorch_pruner"], [260, "module-neural_compressor.experimental.pytorch_pruner.logger"], [261, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [263, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [264, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [266, "module-neural_compressor.experimental.quantization"], [267, "module-neural_compressor.experimental.scheduler"], [268, "module-neural_compressor"], [269, "module-neural_compressor.metric"], [270, "module-neural_compressor.mix_precision"], [271, "module-neural_compressor.model.base_model"], [272, "module-neural_compressor.model"], [273, "module-neural_compressor.model.model"], [274, "module-neural_compressor.model.nets_factory"], [275, "module-neural_compressor.model.onnx_model"], [276, "module-neural_compressor.model.torch_model"], [277, "module-neural_compressor.objective"], [278, "module-neural_compressor.pruners.gradient_sensitivity"], [279, "module-neural_compressor.pruners.group_lasso"], [280, "module-neural_compressor.pruners"], [281, "module-neural_compressor.pruners.magnitude"], [282, "module-neural_compressor.pruners.pattern_lock"], [283, "module-neural_compressor.pruners.pruner"], [284, "module-neural_compressor.pruning"], [285, "module-neural_compressor.quantization"], [286, "module-neural_compressor.strategy.auto_mixed_precision"], [287, "module-neural_compressor.strategy.basic"], [288, "module-neural_compressor.strategy.bayesian"], [289, "module-neural_compressor.strategy.conservative"], [290, "module-neural_compressor.strategy.exhaustive"], [291, "module-neural_compressor.strategy.hawq_v2"], [292, "module-neural_compressor.strategy"], [293, "module-neural_compressor.strategy.mse"], [294, "module-neural_compressor.strategy.mse_v2"], [295, "module-neural_compressor.strategy.random"], [296, "module-neural_compressor.strategy.strategy"], [297, "module-neural_compressor.strategy.utils.helper"], [298, "module-neural_compressor.strategy.utils"], [299, "module-neural_compressor.strategy.utils.tuning_sampler"], [300, "module-neural_compressor.strategy.utils.tuning_space"], [301, "module-neural_compressor.strategy.utils.tuning_structs"], [302, "module-neural_compressor.training"], [303, "module-neural_compressor.utils.collect_layer_histogram"], [304, "module-neural_compressor.utils.constant"], [305, "module-neural_compressor.utils.create_obj_from_config"], [306, "module-neural_compressor.utils"], [307, "module-neural_compressor.utils.kl_divergence"], [308, "module-neural_compressor.utils.load_huggingface"], [309, "module-neural_compressor.utils.logger"], [310, "module-neural_compressor.utils.options"], [311, "module-neural_compressor.utils.pytorch"], [312, "module-neural_compressor.utils.utility"], [313, "module-neural_compressor.ux.components.benchmark.benchmark"], [314, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [315, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [316, "module-neural_compressor.ux.components.benchmark"], [317, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [318, "module-neural_compressor.ux.components.config_generator.config_generator"], [319, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [320, "module-neural_compressor.ux.components.config_generator"], [321, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [322, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [323, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [324, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [325, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [326, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [327, "module-neural_compressor.ux.components.configuration_wizard"], [328, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [329, "module-neural_compressor.ux.components.db_manager.db_manager"], [330, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [331, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [332, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [333, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [334, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [335, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [336, "module-neural_compressor.ux.components.db_manager.db_models.example"], [337, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [338, "module-neural_compressor.ux.components.db_manager.db_models"], [339, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [340, "module-neural_compressor.ux.components.db_manager.db_models.model"], [341, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [342, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [343, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [344, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [345, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [346, "module-neural_compressor.ux.components.db_manager.db_models.project"], [347, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [348, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [349, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [350, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [351, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [352, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [353, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [354, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [355, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [356, "module-neural_compressor.ux.components.db_manager.db_operations"], [357, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [358, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [359, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [360, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [361, "module-neural_compressor.ux.components.db_manager"], [362, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [363, "module-neural_compressor.ux.components.db_manager.utils"], [364, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [365, "module-neural_compressor.ux.components.diagnosis.factory"], [366, "module-neural_compressor.ux.components.diagnosis"], [367, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [368, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [369, "module-neural_compressor.ux.components.diagnosis.op_details"], [370, "module-neural_compressor.ux.components.diagnosis.op_entry"], [371, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [372, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [373, "module-neural_compressor.ux.components.file_browser.file_browser"], [374, "module-neural_compressor.ux.components.file_browser"], [375, "module-neural_compressor.ux.components.graph.attribute"], [376, "module-neural_compressor.ux.components.graph.collapser"], [377, "module-neural_compressor.ux.components.graph.edge"], [378, "module-neural_compressor.ux.components.graph.graph"], [379, "module-neural_compressor.ux.components.graph.graph_reader"], [380, "module-neural_compressor.ux.components.graph"], [381, "module-neural_compressor.ux.components.graph.node"], [382, "module-neural_compressor.ux.components.graph.reader"], [383, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [384, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [385, "module-neural_compressor.ux.components"], [386, "module-neural_compressor.ux.components.jobs_management"], [387, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [388, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [389, "module-neural_compressor.ux.components.jobs_management.request"], [390, "module-neural_compressor.ux.components.manage_workspace"], [391, "module-neural_compressor.ux.components.model.domain"], [392, "module-neural_compressor.ux.components.model"], [393, "module-neural_compressor.ux.components.model.model"], [394, "module-neural_compressor.ux.components.model.model_type_getter"], [395, "module-neural_compressor.ux.components.model.onnxrt"], [396, "module-neural_compressor.ux.components.model.onnxrt.model"], [397, "module-neural_compressor.ux.components.model.pytorch"], [398, "module-neural_compressor.ux.components.model.pytorch.model"], [399, "module-neural_compressor.ux.components.model.repository"], [400, "module-neural_compressor.ux.components.model.shape"], [401, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [402, "module-neural_compressor.ux.components.model.tensorflow"], [403, "module-neural_compressor.ux.components.model.tensorflow.keras"], [404, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [405, "module-neural_compressor.ux.components.model.tensorflow.model"], [406, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [407, "module-neural_compressor.ux.components.model.tensorflow.utils"], [408, "module-neural_compressor.ux.components.model_zoo.download_config"], [409, "module-neural_compressor.ux.components.model_zoo.download_model"], [410, "module-neural_compressor.ux.components.model_zoo.downloader"], [411, "module-neural_compressor.ux.components.model_zoo"], [412, "module-neural_compressor.ux.components.model_zoo.list_models"], [413, "module-neural_compressor.ux.components.names_mapper"], [414, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [415, "module-neural_compressor.ux.components.optimization.execute_optimization"], [416, "module-neural_compressor.ux.components.optimization.factory"], [417, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [418, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [419, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [420, "module-neural_compressor.ux.components.optimization"], [421, "module-neural_compressor.ux.components.optimization.mixed_precision"], [422, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [423, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [424, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [425, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [426, "module-neural_compressor.ux.components.optimization.optimization"], [427, "module-neural_compressor.ux.components.optimization.tune"], [428, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [429, "module-neural_compressor.ux.components.optimization.tune.tuning"], [430, "module-neural_compressor.ux.components.optimization.tuning_history"], [431, "module-neural_compressor.ux.components.profiling.execute_profiling"], [432, "module-neural_compressor.ux.components.profiling.factory"], [433, "module-neural_compressor.ux.components.profiling"], [434, "module-neural_compressor.ux.components.profiling.profile_model"], [435, "module-neural_compressor.ux.components.profiling.profiler"], [436, "module-neural_compressor.ux.components.profiling.profiling"], [437, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [438, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [439, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [440, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [441, "module-neural_compressor.ux.inc_bench"], [442, "module-neural_compressor.ux"], [443, "module-neural_compressor.ux.utils.consts"], [444, "module-neural_compressor.ux.utils.environment"], [445, "module-neural_compressor.ux.utils.exceptions"], [446, "module-neural_compressor.ux.utils.executor"], [447, "module-neural_compressor.ux.utils.expiring_dict"], [448, "module-neural_compressor.ux.utils.github_info"], [449, "module-neural_compressor.ux.utils.hw_info"], [450, "module-neural_compressor.ux.utils"], [451, "module-neural_compressor.ux.utils.json_serializer"], [452, "module-neural_compressor.ux.utils.logger"], [453, "module-neural_compressor.ux.utils.parser"], [454, "module-neural_compressor.ux.utils.proc"], [455, "module-neural_compressor.ux.utils.processes"], [456, "module-neural_compressor.ux.utils.singleton"], [457, "module-neural_compressor.ux.utils.templates"], [458, "module-neural_compressor.ux.utils.templates.metric"], [459, "module-neural_compressor.ux.utils.templates.workdir"], [460, "module-neural_compressor.ux.utils.utils"], [461, "module-neural_compressor.ux.utils.workload.config"], [462, "module-neural_compressor.ux.utils.workload.dataloader"], [463, "module-neural_compressor.ux.utils.workload.evaluation"], [464, "module-neural_compressor.ux.utils.workload.graph_optimization"], [465, "module-neural_compressor.ux.utils.workload"], [466, "module-neural_compressor.ux.utils.workload.mixed_precision"], [467, "module-neural_compressor.ux.utils.workload.model"], [468, "module-neural_compressor.ux.utils.workload.pruning"], [469, "module-neural_compressor.ux.utils.workload.quantization"], [470, "module-neural_compressor.ux.utils.workload.tuning"], [471, "module-neural_compressor.ux.utils.yaml_utils"], [472, "module-neural_compressor.ux.web.communication"], [473, "module-neural_compressor.ux.web.configuration"], [474, "module-neural_compressor.ux.web.exceptions"], [475, "module-neural_compressor.ux.web"], [476, "module-neural_compressor.ux.web.router"], [477, "module-neural_compressor.ux.web.server"], [478, "module-neural_compressor.ux.web.service.benchmark"], [479, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [480, "module-neural_compressor.ux.web.service"], [481, "module-neural_compressor.ux.web.service.model"], [482, "module-neural_compressor.ux.web.service.optimization"], [483, "module-neural_compressor.ux.web.service.profiling"], [484, "module-neural_compressor.ux.web.service.request_data_processor"], [485, "module-neural_compressor.ux.web.service.response_generator"], [486, "module-neural_compressor.ux.web.service.workload"], [487, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[12, "module-neural_compressor.experimental.metric.bleu"], [233, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [233, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [233, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.result"], [233, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.update"], [233, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "6ece06672ed3_v1_14": [[31, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[31, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[32, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[33, "module-9e89549a08c8_v1_11"]], "block_mask": [[34, "module-block_mask"]], "env": [[35, "module-env"]], "run_migrations_offline() (in module env)": [[35, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[35, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[36, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[36, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[36, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[37, "module-neural_compressor.adaptor"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[38, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[38, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[38, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[39, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[40, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[40, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[41, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[41, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[42, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[42, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[43, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[44, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[45, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[46, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[47, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[48, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[49, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[50, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[51, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[52, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[53, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[55, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[57, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[59, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[59, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[60, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[61, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[62, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[63, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[64, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[65, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[65, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[66, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[66, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[66, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[66, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[66, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[67, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[67, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[68, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[68, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[68, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[68, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[69, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[70, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[127, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[127, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[128, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[157, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[157, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[157, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[158, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[159, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[160, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[160, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[161, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[161, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[162, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[162, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[163, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[164, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[164, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[165, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[166, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[167, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[169, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[169, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[169, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[169, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[170, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[170, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[171, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[171, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[171, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[171, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[172, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[172, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[173, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[173, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[173, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[183, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[183, "module-neural_compressor.data.dataloaders.dataloader"]], "dataloader (class in neural_compressor.data.dataloaders)": [[184, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[185, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[185, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[185, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[186, "module-neural_compressor.data.datasets"]], "basetransform (class in neural_compressor.data)": [[187, "neural_compressor.data.BaseTransform"]], "datasets (class in neural_compressor.data)": [[187, "neural_compressor.data.DATASETS"]], "dataloader (class in neural_compressor.data)": [[187, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[187, "neural_compressor.data.Dataset"]], "filters (class in neural_compressor.data)": [[187, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[187, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[187, "neural_compressor.data.IterableDataset"]], "transforms (class in neural_compressor.data)": [[187, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[187, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[187, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[187, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[187, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[187, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[188, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[188, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[189, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[189, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[190, "module-neural_compressor.data.transforms"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[191, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[192, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[192, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[193, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[193, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[194, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[195, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[195, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[196, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[196, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[197, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[197, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[198, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[198, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[199, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[199, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[199, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[200, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[200, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[205, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[206, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[207, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[207, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[208, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[213, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[214, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[215, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[215, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.Dataset"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[217, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[218, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[219, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[219, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[220, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[221, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.BaseTransform"]], "datasets (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.DATASETS"]], "dataset (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.Dataset"]], "filters (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[222, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[222, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.transform_registry"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[224, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[224, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [226, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[226, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[226, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[227, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[227, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[228, "module-neural_compressor.experimental.export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[229, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[229, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[230, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[230, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[230, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[230, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[231, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[231, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[232, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[232, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[232, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[232, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[232, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[232, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[232, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[232, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[232, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[232, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[232, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[232, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[232, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[232, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[232, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[232, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[232, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[232, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[232, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[232, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[232, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[232, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[232, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[232, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[232, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[232, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[232, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[232, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[232, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[232, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[232, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[232, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[232, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[232, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[232, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[232, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[232, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[232, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[232, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[232, "neural_compressor.experimental.Component.train_func"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[233, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[233, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[233, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[233, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[233, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[233, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[234, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[234, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[235, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[236, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[236, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[236, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[236, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[236, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[237, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[237, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[237, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[237, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[237, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[238, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[238, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[238, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[238, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[238, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[239, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[239, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[239, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[239, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[239, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[239, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[239, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[239, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[239, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[239, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[239, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[240, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[240, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[240, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[240, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[240, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[240, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[240, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[240, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[240, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[240, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[240, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[240, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[240, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[240, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[240, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[240, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[240, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[240, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[240, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[240, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[240, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[240, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[240, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[240, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[240, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[240, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[240, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[240, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[240, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[240, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[240, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[240, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[240, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[240, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[240, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[240, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[240, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[240, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[240, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[240, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[240, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[240, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[240, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[240, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[240, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[240, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[240, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[240, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[240, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[240, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[240, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[241, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[241, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[241, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[241, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[242, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[242, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[243, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[243, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[243, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[243, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[243, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[243, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[244, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[244, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[245, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[245, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[246, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[246, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[247, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[247, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[247, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[248, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[249, "module-neural_compressor.experimental.nas.dynast"]], "basicnas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[250, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[251, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[251, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[251, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[252, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[253, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[254, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[254, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[254, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[254, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[255, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[259, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[260, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[261, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[261, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[262, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[262, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[263, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[263, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[265, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[265, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[266, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[266, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[266, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[266, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[267, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[267, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[267, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[267, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[267, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[268, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[268, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[268, "neural_compressor.Pruning"]], "quantization (class in neural_compressor)": [[268, "neural_compressor.Quantization"]], "neural_compressor": [[268, "module-neural_compressor"]], "on_epoch_begin() (neural_compressor.pruning method)": [[268, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[268, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[268, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[268, "neural_compressor.Pruning.on_step_end"]], "basemetric (class in neural_compressor.metric)": [[269, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[269, "neural_compressor.metric.METRICS"]], "hvd (neural_compressor.metric.basemetric property)": [[269, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[269, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[269, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[269, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[269, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[269, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[269, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[269, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[269, "neural_compressor.metric.BaseMetric.update"]], "neural_compressor.mix_precision": [[270, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[271, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[271, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[271, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[271, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[271, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[271, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[271, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[272, "neural_compressor.model.BaseModel"]], "export() (neural_compressor.model.basemodel method)": [[272, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[272, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[272, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[272, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[272, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[272, "neural_compressor.model.BaseModel.save"]], "mxnetmodel (class in neural_compressor.model.model)": [[273, "neural_compressor.model.model.MXNetModel"]], "tensorflowbasemodel (class in neural_compressor.model.model)": [[273, "neural_compressor.model.model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.model)": [[273, "neural_compressor.model.model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.model)": [[273, "neural_compressor.model.model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.model)": [[273, "neural_compressor.model.model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.estimator_session"]], "framework() (neural_compressor.model.model.mxnetmodel method)": [[273, "neural_compressor.model.model.MXNetModel.framework"]], "framework() (neural_compressor.model.model.tensorflowbasemodel method)": [[273, "neural_compressor.model.model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.frozen_pb_session"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.get_model_fwk_name"]], "get_model_type() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.graph_def_session"]], "graph_info (neural_compressor.model.model.tensorflowbasemodel property)": [[273, "neural_compressor.model.model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.graph_session"]], "keras_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.keras_session"]], "load_saved_model() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.load_saved_model"]], "model (neural_compressor.model.model.mxnetmodel property)": [[273, "neural_compressor.model.model.MXNetModel.model"]], "model (neural_compressor.model.model.tensorflowbasemodel property)": [[273, "neural_compressor.model.model.TensorflowBaseModel.model"]], "model (neural_compressor.model.model.tensorflowqatmodel property)": [[273, "neural_compressor.model.model.TensorflowQATModel.model"]], "model (neural_compressor.model.model.tensorflowsavedmodelmodel property)": [[273, "neural_compressor.model.model.TensorflowSavedModelModel.model"]], "neural_compressor.model.model": [[273, "module-neural_compressor.model.model"]], "report_sparsity() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[273, "neural_compressor.model.model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.model.mxnetmodel method)": [[273, "neural_compressor.model.model.MXNetModel.save"]], "save() (neural_compressor.model.model.tensorflowbasemodel method)": [[273, "neural_compressor.model.model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.model.tensorflowqatmodel method)": [[273, "neural_compressor.model.model.TensorflowQATModel.save"]], "save() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[273, "neural_compressor.model.model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.saved_model_session"]], "slim_session() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.model)": [[273, "neural_compressor.model.model.validate_graph_node"]], "weights (neural_compressor.model.model.tensorflowbasemodel property)": [[273, "neural_compressor.model.model.TensorflowBaseModel.weights"]], "neural_compressor.model.nets_factory": [[274, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[275, "neural_compressor.model.onnx_model.ONNXModel"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[275, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[275, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[275, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[275, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[276, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchipexmodel (class in neural_compressor.model.torch_model)": [[276, "neural_compressor.model.torch_model.PyTorchIpexModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[276, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[276, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchipexmodel property)": [[276, "neural_compressor.model.torch_model.PyTorchIpexModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[276, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[276, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.pytorchipexmodel method)": [[276, "neural_compressor.model.torch_model.PyTorchIpexModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[276, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[276, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[277, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[277, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[277, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[277, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[277, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[277, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[277, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[277, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[277, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[277, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[277, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[277, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[277, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[277, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[277, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[277, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[277, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[277, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[277, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[277, "neural_compressor.objective.Performance.start"]], "neural_compressor.pruners.gradient_sensitivity": [[278, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[279, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[280, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[281, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[282, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[283, "module-neural_compressor.pruners.pruner"]], "pruner_registry() (in module neural_compressor.pruners.pruner)": [[283, "neural_compressor.pruners.pruner.pruner_registry"]], "pruning (class in neural_compressor.pruning)": [[284, "neural_compressor.pruning.Pruning"]], "neural_compressor.pruning": [[284, "module-neural_compressor.pruning"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[284, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[284, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[284, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[284, "neural_compressor.pruning.Pruning.on_step_end"]], "quantization (class in neural_compressor.quantization)": [[285, "neural_compressor.quantization.Quantization"]], "fit() (in module neural_compressor.quantization)": [[285, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[285, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[286, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[286, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[286, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[286, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[287, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[287, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[287, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[288, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[288, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[288, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[288, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[288, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[288, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[288, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[288, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[288, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[288, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[289, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[289, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[289, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[289, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[289, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[290, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[290, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[290, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[291, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[291, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[291, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[292, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[293, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[293, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[293, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[293, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[293, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[294, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[294, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[294, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[295, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[295, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[295, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[296, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[296, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[296, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[296, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[296, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[296, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "neural_compressor.strategy.utils.helper": [[297, "module-neural_compressor.strategy.utils.helper"]], "neural_compressor.strategy.utils": [[298, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[299, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[300, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[301, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[302, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[302, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[302, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[302, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[302, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[303, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[303, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[303, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[304, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[305, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[305, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[305, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[306, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[306, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[306, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[306, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[306, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[306, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[306, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[307, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[307, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[307, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[307, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[307, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[308, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[309, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[310, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[311, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[311, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[312, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[312, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[313, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[313, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[313, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[314, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[314, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[314, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[314, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[315, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[315, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[316, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[316, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[317, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[317, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[317, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[317, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[317, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[317, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[318, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[318, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[318, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[318, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[318, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[318, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[319, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[319, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[319, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[319, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[319, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[320, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[321, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[321, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[321, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[321, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[321, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[322, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[322, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[322, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[323, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[323, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[323, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[323, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[323, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[323, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[324, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[324, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[325, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[325, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[326, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[326, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[326, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[327, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[328, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[328, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[329, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[329, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[329, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[329, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[329, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[329, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[330, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[331, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[331, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[332, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[333, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[334, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[334, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[334, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[334, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[334, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[335, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[335, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[335, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[335, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[335, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[336, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[336, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[337, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[337, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[337, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[337, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[338, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[339, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[339, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[339, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[339, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[339, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[339, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[340, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[340, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[341, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[341, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[342, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[342, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[343, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[343, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[344, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[344, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[345, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[345, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[346, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[346, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[347, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[347, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[348, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[348, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[348, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[348, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[348, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[348, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[349, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[349, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[349, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[350, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[350, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[351, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[351, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[352, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[352, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[352, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[352, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[352, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[352, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[353, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[353, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[354, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[354, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[355, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[355, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[355, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[355, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[356, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[356, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[357, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[357, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[358, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[358, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[359, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[359, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[360, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[360, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[361, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[361, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[361, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[361, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[361, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[361, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[362, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[362, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[363, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[363, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[363, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[363, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[364, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[364, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[365, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[365, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[365, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[366, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[367, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[368, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[368, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[368, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[369, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[369, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[369, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[369, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[369, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[369, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[370, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[370, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[370, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[371, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[372, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[372, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[372, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[373, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[373, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[374, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[375, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[375, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[376, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[376, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[376, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[377, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[377, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[377, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[377, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[378, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[378, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[378, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[378, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[378, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[378, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[378, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[378, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[378, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[379, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[379, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[379, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[379, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[380, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[381, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[381, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[381, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[382, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[383, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[383, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[383, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[384, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[384, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[384, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[385, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[386, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[387, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[388, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[389, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[390, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[390, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[391, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[391, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[392, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[393, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[393, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[393, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[393, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[393, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[393, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[393, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[393, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[393, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[393, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[394, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[394, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[395, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[396, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[396, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[396, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[397, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[398, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[398, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[398, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[398, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[398, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[399, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[399, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[400, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[400, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[400, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[401, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[401, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[401, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[401, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[402, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[403, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[403, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[403, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[403, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[403, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[404, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[404, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[404, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[404, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[404, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[404, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[405, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[405, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[406, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[406, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[406, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[407, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[407, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[408, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[408, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[409, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[409, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[410, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[410, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[411, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[412, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[412, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[413, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[414, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[414, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[415, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[415, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[416, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[416, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[416, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[417, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[417, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[418, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[419, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[419, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[419, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[419, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[419, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[420, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[420, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[421, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[422, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[422, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[423, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[423, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[423, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[423, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[423, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[424, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[425, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[425, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[426, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[426, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[426, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[426, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[427, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[428, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[428, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[428, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[428, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[429, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[429, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[430, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[430, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[430, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[430, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[430, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[430, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[430, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[430, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[430, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[431, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[431, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[431, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[432, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[432, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[432, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[433, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[434, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[434, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[434, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[435, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[435, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[435, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[436, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[436, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[436, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[437, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[437, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[437, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[438, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[439, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[439, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[440, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[440, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[441, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[441, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[441, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[442, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[443, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[443, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[444, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[444, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[444, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[444, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[444, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[445, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[445, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[445, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[445, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[445, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[446, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[446, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[446, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[446, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[446, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[446, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[446, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[446, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[446, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[446, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[446, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[447, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[447, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[447, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[447, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[448, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[448, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[448, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[449, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[449, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[449, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[449, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[450, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[451, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[451, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[451, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[451, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[452, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[452, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[453, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[453, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[453, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[453, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[453, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[453, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[453, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[453, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[453, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[453, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[453, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[453, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[453, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[454, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[454, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[454, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[454, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[454, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[455, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[455, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[455, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[455, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[455, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[456, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[456, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[457, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[458, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[458, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[458, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[459, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[459, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[459, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[459, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[459, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[460, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[460, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[461, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[461, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[461, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[461, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[462, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[462, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[462, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[462, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[462, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[463, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[463, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[463, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[463, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[463, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[463, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[464, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[464, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[464, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[465, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[466, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[466, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[466, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[467, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[467, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[467, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[467, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[467, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[468, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[468, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[468, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[469, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[469, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[469, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[469, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[469, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[469, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[470, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[470, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[470, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[470, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[470, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[471, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[471, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[471, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[472, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[472, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[472, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[472, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[472, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[472, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[472, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[472, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[472, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[472, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[472, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[472, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[472, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[473, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[473, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[473, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[473, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[473, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[474, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[474, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[475, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[476, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[476, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[476, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[477, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[477, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[478, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[478, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[479, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[479, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[479, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[479, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[479, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[479, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[480, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[481, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[481, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[481, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[482, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[482, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[483, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[483, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[483, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[484, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[484, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[484, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[485, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[485, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[485, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[485, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[485, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[485, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[486, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[486, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[486, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[486, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[486, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[487, "module-neural_compressor.version"]]}})