Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "README", "SECURITY", "adaptor", "api-documentation/adaptor", "api-documentation/api-introduction", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "api-introduction", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruners/gradient_sensitivity/index", "autoapi/neural_compressor/pruners/group_lasso/index", "autoapi/neural_compressor/pruners/index", "autoapi/neural_compressor/pruners/magnitude/index", "autoapi/neural_compressor/pruners/pattern_lock/index", "autoapi/neural_compressor/pruners/pruner/index", "autoapi/neural_compressor/pruning/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/st_utils/index", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "doclist", "dynamic_quantization", "examples_readme", "faq", "framework_yaml", "getting_started", "graph_optimization", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "model_conversion", "objective", "orchestration", "platform_configuration", "pruning", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "reference_examples", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list", "welcome"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "README.md", "SECURITY.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/api-introduction.md", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-introduction.md", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruners/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruners/group_lasso/index.rst", "autoapi/neural_compressor/pruners/index.rst", "autoapi/neural_compressor/pruners/magnitude/index.rst", "autoapi/neural_compressor/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/pruners/pruner/index.rst", "autoapi/neural_compressor/pruning/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/st_utils/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/st_utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "doclist.rst", "dynamic_quantization.md", "examples_readme.md", "faq.md", "framework_yaml.md", "getting_started.md", "graph_optimization.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "model_conversion.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "reference_examples.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md", "welcome.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Intel\u00ae Neural Compressor", "Security Policy", "Adaptor", "Adaptor", "API Documentation", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "API Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruners.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.st_utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Developer Documentation", "Dynamic Quantization", "Examples", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Graph Optimization", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Model Conversion", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (45)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Reference Examples", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models", "Introduction to Intel\u00ae Neural Compressor"], "terms": {"In": [0, 1, 2, 3, 7, 9, 32, 37, 79, 191, 201, 220, 224, 249, 251, 473, 474, 475, 476, 477, 479, 481, 488, 494, 497, 498, 499, 501, 504, 505, 508, 509, 510, 511], "interest": [0, 5, 475, 509], "foster": [0, 475], "an": [0, 2, 3, 4, 5, 7, 9, 13, 32, 37, 42, 85, 90, 91, 93, 148, 149, 163, 178, 185, 190, 191, 195, 200, 204, 208, 213, 217, 220, 221, 224, 225, 226, 233, 238, 239, 240, 255, 263, 357, 362, 435, 474, 475, 476, 478, 483, 488, 494, 495, 498, 502, 508, 509, 510, 511, 514], "open": [0, 5, 9, 32, 185, 220, 438, 473, 475, 485, 502, 514], "welcom": [0, 475, 490], "environ": [0, 182, 256, 396, 425, 426, 434, 457, 473, 475, 511, 514], "we": [0, 1, 3, 4, 5, 7, 9, 13, 32, 37, 67, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 96, 97, 101, 103, 104, 105, 106, 107, 110, 113, 114, 123, 124, 127, 128, 129, 148, 149, 163, 182, 184, 185, 201, 221, 224, 231, 238, 475, 476, 481, 486, 487, 488, 494, 497, 498, 499, 501, 503, 504, 508, 509, 511], "maintain": [0, 5, 228, 475, 496, 501, 507], "make": [0, 1, 3, 7, 148, 149, 163, 200, 249, 251, 253, 313, 345, 377, 473, 475, 476, 486, 494, 504, 505, 511], "particip": [0, 475], "project": [0, 217, 314, 317, 322, 324, 325, 328, 334, 335, 339, 340, 341, 342, 343, 344, 345, 369, 475, 490, 502, 508, 511], "commun": [0, 256, 426, 459, 460, 461, 473, 475], "harass": [0, 475], "free": [0, 9, 32, 172, 173, 273, 275, 276, 277, 279, 280, 285, 475, 494, 498, 508], "experi": [0, 9, 32, 475, 508, 511], "everyon": [0, 475], "regardless": [0, 224, 475], "ag": [0, 235, 475], "bodi": [0, 475], "size": [0, 3, 122, 178, 180, 192, 194, 195, 201, 204, 208, 210, 213, 217, 224, 233, 236, 249, 263, 296, 314, 324, 325, 442, 444, 445, 473, 474, 475, 476, 477, 481, 485, 488, 498, 501, 506, 510, 511, 512, 513], "disabl": [0, 154, 433, 461, 475], "ethnic": [0, 475], "sex": [0, 166, 475], "characterist": [0, 475], "gender": [0, 475], "ident": [0, 3, 97, 103, 129, 148, 249, 475, 479, 488], "express": [0, 70, 221, 475], "level": [0, 3, 40, 43, 436, 457, 475, 511], "educ": [0, 475], "socio": [0, 475], "econom": [0, 475], "statu": [0, 129, 314, 325, 328, 332, 334, 340, 342, 343, 428, 456, 469, 475, 498], "nation": [0, 204, 475], "person": [0, 5, 166, 475, 502], "appear": [0, 473, 475], "race": [0, 475], "religion": [0, 475], "sexual": [0, 475], "orient": [0, 475], "exampl": [0, 1, 5, 9, 32, 44, 202, 203, 204, 214, 216, 217, 224, 225, 226, 228, 234, 252, 286, 322, 339, 345, 369, 393, 394, 395, 396, 438, 444, 473, 475, 477, 482, 483, 489, 490, 491, 497, 505, 507, 510, 511, 514], "behavior": [0, 7, 9, 32, 224, 475, 479, 486, 496, 509, 511, 512], "contribut": [0, 5, 490], "creat": [0, 2, 7, 9, 32, 33, 34, 35, 37, 70, 129, 148, 184, 185, 192, 202, 204, 218, 220, 224, 232, 233, 238, 239, 240, 255, 263, 276, 289, 313, 330, 339, 340, 344, 345, 423, 443, 456, 469, 475, 477, 483, 487, 488, 496, 497, 504, 508, 509, 511], "posit": [0, 129, 217, 473, 475, 494], "includ": [0, 5, 7, 40, 178, 183, 202, 204, 208, 211, 212, 213, 215, 217, 219, 220, 224, 229, 249, 253, 254, 256, 273, 290, 291, 473, 475, 477, 482, 487, 492, 493, 494, 501, 504, 505, 509, 511, 514], "us": [0, 1, 2, 3, 4, 5, 7, 9, 13, 32, 38, 40, 42, 43, 61, 67, 68, 70, 93, 160, 162, 164, 165, 166, 172, 173, 178, 182, 183, 188, 200, 201, 202, 203, 204, 205, 206, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 228, 229, 230, 231, 234, 236, 238, 240, 242, 245, 249, 251, 252, 253, 254, 255, 256, 265, 271, 272, 273, 275, 276, 277, 279, 280, 285, 287, 290, 291, 296, 340, 345, 350, 351, 355, 357, 369, 376, 378, 403, 407, 428, 444, 446, 456, 457, 473, 475, 477, 479, 480, 481, 482, 483, 486, 487, 489, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513], "inclus": [0, 475], "languag": [0, 13, 221, 475, 502], "Being": [0, 475], "respect": [0, 475, 480, 486, 501, 512], "differ": [0, 1, 2, 3, 5, 9, 13, 32, 149, 160, 162, 163, 183, 195, 204, 217, 219, 220, 221, 227, 228, 235, 238, 239, 241, 244, 249, 254, 255, 256, 257, 273, 473, 475, 476, 477, 479, 481, 484, 487, 488, 489, 491, 494, 496, 497, 498, 501, 504, 509, 510, 511, 514], "viewpoint": [0, 475], "gracefulli": [0, 475], "accept": [0, 37, 473, 475, 495], "construct": [0, 184, 185, 186, 187, 189, 202, 205, 206, 209, 289, 474, 475, 477, 481, 511], "critic": [0, 5, 475], "focus": [0, 7, 475, 488], "what": [0, 164, 200, 256, 286, 473, 475], "i": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 22, 30, 31, 32, 37, 38, 40, 42, 43, 44, 68, 70, 76, 77, 83, 85, 87, 93, 104, 108, 109, 115, 116, 117, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 159, 163, 172, 173, 174, 175, 178, 180, 182, 184, 185, 188, 190, 191, 192, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 217, 220, 221, 224, 226, 227, 228, 230, 233, 236, 240, 242, 250, 251, 252, 255, 256, 257, 263, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 295, 313, 345, 357, 377, 380, 382, 383, 385, 387, 388, 390, 396, 431, 433, 435, 437, 438, 442, 444, 446, 452, 457, 459, 473, 474, 475, 476, 477, 479, 481, 482, 483, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514], "best": [0, 2, 4, 5, 9, 32, 68, 217, 218, 219, 220, 231, 232, 238, 239, 254, 256, 273, 475, 487, 492, 498, 504, 510, 511, 514], "show": [0, 3, 473, 474, 475, 479, 481, 487, 501, 511], "empathi": [0, 475], "toward": [0, 4, 475, 479], "other": [0, 1, 9, 32, 68, 90, 91, 93, 148, 201, 226, 255, 261, 435, 439, 461, 473, 475, 483, 486, 488, 491, 493, 496, 498, 500, 501, 504, 510, 511, 513], "member": [0, 7, 220, 229, 475], "unaccept": [0, 475], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 15, 22, 30, 31, 32, 38, 40, 43, 44, 61, 68, 70, 76, 93, 97, 115, 116, 117, 129, 154, 159, 160, 161, 162, 164, 165, 166, 172, 173, 178, 179, 180, 183, 185, 186, 188, 191, 192, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 265, 271, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 289, 290, 291, 295, 296, 314, 315, 317, 320, 324, 325, 328, 329, 332, 333, 340, 345, 348, 350, 351, 352, 353, 354, 355, 356, 369, 376, 377, 426, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 489, 491, 492, 494, 495, 496, 498, 499, 501, 503, 504, 505, 507, 509, 510, 511, 512, 513], "imageri": [0, 475], "unwelcom": [0, 475], "attent": [0, 202, 475, 479], "advanc": [0, 5, 453, 475, 476, 487, 504, 511, 512], "troll": [0, 475], "insult": [0, 475], "derogatori": [0, 475], "comment": [0, 475, 477, 494, 510], "polit": [0, 475], "attack": [0, 475], "public": [0, 129, 475], "privat": [0, 220, 229, 475], "publish": [0, 475, 493, 495], "inform": [0, 5, 6, 7, 8, 10, 11, 15, 22, 30, 31, 42, 70, 172, 173, 184, 185, 186, 187, 224, 249, 251, 252, 253, 255, 274, 275, 276, 277, 279, 280, 285, 312, 348, 377, 432, 433, 438, 439, 475, 479, 483, 486, 490, 496, 501, 505, 507, 509, 512, 513], "physic": [0, 182, 475], "electron": [0, 475], "address": [0, 204, 461, 473, 475, 495, 502], "without": [0, 1, 9, 32, 129, 154, 217, 224, 251, 444, 473, 475, 476, 479, 481, 488, 494, 501, 502, 503, 504, 511], "explicit": [0, 148, 475], "permiss": [0, 475], "which": [0, 2, 4, 5, 7, 9, 13, 32, 42, 43, 68, 70, 78, 129, 148, 172, 180, 182, 202, 203, 204, 220, 221, 224, 226, 234, 236, 239, 240, 243, 244, 245, 249, 250, 251, 252, 253, 261, 263, 274, 275, 285, 442, 473, 474, 475, 476, 477, 479, 481, 483, 486, 487, 488, 491, 494, 495, 496, 497, 499, 501, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514], "could": [0, 9, 32, 70, 172, 173, 204, 255, 273, 274, 275, 276, 277, 279, 280, 285, 475, 480, 488, 497, 499, 501, 504, 511], "reason": [0, 104, 184, 185, 475, 476, 509, 511], "consid": [0, 1, 154, 228, 475, 476, 479, 511], "inappropri": [0, 475], "profession": [0, 475], "set": [0, 2, 3, 4, 5, 9, 32, 38, 40, 42, 43, 44, 68, 69, 70, 120, 129, 148, 154, 164, 166, 172, 173, 182, 188, 192, 194, 202, 204, 207, 217, 218, 219, 220, 224, 229, 230, 231, 233, 238, 242, 250, 255, 256, 261, 263, 265, 273, 274, 275, 276, 277, 279, 280, 285, 298, 335, 336, 337, 340, 357, 403, 407, 412, 433, 437, 442, 443, 445, 446, 447, 456, 457, 461, 473, 474, 475, 476, 477, 481, 486, 488, 489, 491, 494, 495, 503, 504, 508, 511, 512, 514], "ar": [0, 2, 3, 4, 5, 7, 9, 13, 32, 38, 44, 68, 85, 97, 141, 169, 191, 202, 217, 220, 221, 224, 228, 234, 236, 240, 249, 250, 251, 252, 255, 256, 276, 289, 295, 296, 377, 380, 382, 389, 430, 439, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 486, 487, 489, 491, 493, 494, 495, 498, 499, 500, 501, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514], "clarifi": [0, 475], "expect": [0, 9, 32, 204, 299, 415, 438, 475, 482, 485, 504, 511], "take": [0, 2, 9, 32, 38, 70, 172, 173, 185, 186, 195, 217, 249, 273, 274, 275, 276, 277, 279, 280, 285, 475, 476, 479, 486, 501, 504, 505, 510, 511, 512], "appropri": [0, 475], "fair": [0, 475], "correct": [0, 3, 149, 163, 224, 225, 226, 228, 250, 398, 473, 475], "action": [0, 475, 488], "ani": [0, 1, 93, 148, 218, 220, 224, 226, 298, 299, 301, 303, 305, 306, 307, 308, 309, 310, 312, 314, 315, 317, 324, 325, 326, 327, 328, 329, 333, 335, 336, 346, 348, 353, 354, 357, 359, 365, 374, 377, 380, 384, 387, 388, 389, 391, 394, 396, 399, 403, 407, 409, 412, 415, 418, 423, 424, 430, 431, 433, 435, 437, 438, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 460, 461, 468, 469, 473, 475, 476, 481], "instanc": [0, 1, 2, 7, 172, 173, 182, 202, 220, 225, 226, 228, 231, 238, 239, 273, 274, 275, 276, 277, 279, 280, 285, 286, 314, 352, 356, 380, 389, 473, 475, 487, 506, 511, 512, 513], "have": [0, 3, 9, 13, 32, 97, 129, 154, 184, 185, 200, 216, 221, 224, 228, 235, 249, 251, 473, 475, 476, 481, 486, 493, 494, 495, 498, 501, 504], "right": [0, 1, 180, 224, 442, 473, 475, 476, 510], "remov": [0, 3, 70, 85, 97, 108, 120, 122, 129, 141, 148, 183, 226, 314, 317, 324, 325, 328, 330, 332, 334, 380, 438, 439, 445, 474, 475, 488, 501, 509], "edit": [0, 1, 334, 340, 342, 343, 346, 475], "reject": [0, 475], "commit": [0, 475], "wiki": [0, 475], "issu": [0, 6, 473, 475, 492, 504, 509], "align": [0, 217, 475, 510], "thi": [0, 2, 3, 4, 5, 7, 9, 13, 32, 37, 42, 67, 68, 70, 79, 80, 81, 82, 83, 84, 85, 86, 96, 101, 103, 104, 105, 106, 107, 109, 110, 113, 114, 123, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 159, 163, 172, 173, 184, 185, 190, 191, 201, 202, 203, 204, 205, 206, 207, 209, 216, 217, 220, 221, 224, 225, 226, 228, 233, 241, 242, 249, 251, 252, 253, 254, 255, 256, 265, 272, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 472, 473, 474, 475, 476, 477, 479, 481, 483, 486, 488, 491, 493, 494, 495, 496, 497, 501, 504, 505, 507, 508, 509, 510, 511, 514], "ban": [0, 475], "temporarili": [0, 475], "perman": [0, 475], "thei": [0, 164, 182, 220, 256, 474, 475, 479, 486, 494, 498, 501], "deem": [0, 475], "threaten": [0, 475], "offens": [0, 475], "harm": [0, 475], "appli": [0, 4, 137, 191, 220, 222, 249, 251, 473, 475, 499, 501, 504, 505, 508, 511, 512], "both": [0, 2, 4, 7, 154, 239, 241, 475, 476, 480, 503, 504], "within": [0, 1, 219, 220, 224, 254, 256, 261, 273, 276, 475, 495, 502], "space": [0, 2, 7, 164, 172, 173, 219, 220, 226, 231, 233, 235, 238, 239, 240, 241, 254, 256, 273, 276, 277, 279, 280, 285, 444, 475, 476, 501, 504, 511, 512], "when": [0, 2, 4, 9, 13, 32, 67, 76, 87, 93, 154, 178, 202, 203, 211, 212, 213, 217, 221, 222, 234, 249, 250, 251, 442, 444, 457, 461, 473, 475, 476, 477, 483, 488, 501, 504, 510, 511], "individu": [0, 2, 93, 232, 233, 238, 249, 475], "repres": [0, 67, 204, 209, 224, 226, 228, 316, 318, 319, 321, 323, 326, 327, 330, 331, 442, 475, 477, 504, 511], "its": [0, 2, 70, 120, 129, 198, 204, 216, 217, 222, 223, 227, 228, 251, 255, 257, 276, 473, 475, 476, 479, 493, 494, 495, 500, 501, 508, 510, 511], "offici": [0, 154, 221, 225, 226, 473, 475, 487, 494, 514], "e": [0, 40, 43, 69, 93, 233, 235, 255, 435, 437, 461, 475, 479, 481, 488, 511], "mail": [0, 475], "post": [0, 3, 4, 7, 9, 32, 38, 40, 43, 172, 173, 191, 217, 220, 255, 273, 275, 276, 277, 279, 280, 285, 456, 475, 480, 481, 482, 487, 491, 492, 499, 509, 511], "via": [0, 219, 220, 242, 254, 256, 272, 273, 461, 475, 481, 488, 491, 508], "social": [0, 475], "media": [0, 475], "account": [0, 233, 475, 508, 511], "act": [0, 200, 475], "appoint": [0, 475], "onlin": [0, 5, 37, 475, 508], "offlin": [0, 37, 296, 475, 504], "event": [0, 475, 509], "represent": [0, 79, 233, 314, 315, 317, 320, 324, 325, 328, 329, 332, 333, 455, 475, 480, 498, 504], "mai": [0, 9, 32, 129, 148, 154, 265, 475, 476, 485, 493, 495, 500, 502, 504], "further": [0, 93, 475, 495, 496], "defin": [0, 2, 3, 4, 7, 40, 42, 43, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 96, 101, 103, 104, 105, 106, 107, 110, 113, 114, 116, 123, 124, 127, 128, 129, 148, 172, 173, 183, 231, 232, 235, 238, 239, 240, 241, 242, 249, 250, 251, 252, 253, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 371, 372, 373, 456, 473, 475, 477, 479, 486, 491, 494, 498, 499, 501, 504, 508, 509, 511, 512], "abus": [0, 475], "otherwis": [0, 173, 204, 217, 285, 475, 477, 503, 510], "report": [0, 473, 475, 508], "contact": [0, 475, 507, 508], "mlp": [0, 475], "mlpc": [0, 475], "dl": [0, 9, 32, 219, 220, 229, 242, 254, 256, 272, 273, 475, 487, 489, 502], "intel": [0, 2, 6, 7, 9, 32, 68, 185, 188, 220, 227, 228, 249, 252, 257, 425, 438, 475, 478, 479, 480, 482, 484, 486, 487, 488, 492, 493, 495, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 512], "com": [0, 3, 5, 202, 221, 222, 225, 226, 249, 252, 438, 473, 475, 477, 487, 488, 492, 493, 507, 508, 513, 514], "all": [0, 1, 3, 4, 5, 7, 9, 32, 38, 43, 44, 61, 68, 70, 83, 86, 108, 109, 121, 160, 162, 174, 175, 178, 182, 183, 188, 191, 192, 200, 204, 208, 211, 212, 213, 215, 217, 220, 221, 224, 226, 227, 228, 240, 243, 244, 245, 246, 249, 252, 255, 257, 259, 260, 263, 264, 265, 271, 274, 275, 276, 279, 285, 290, 291, 300, 311, 313, 322, 338, 340, 345, 350, 351, 364, 366, 369, 370, 376, 377, 380, 382, 389, 395, 402, 404, 408, 409, 411, 417, 422, 426, 435, 439, 461, 473, 475, 476, 477, 481, 486, 487, 488, 492, 499, 500, 501, 502, 504, 505, 510, 511], "complaint": [0, 475], "review": [0, 475], "investig": [0, 475], "result": [0, 2, 3, 9, 13, 32, 38, 40, 43, 68, 70, 154, 172, 180, 182, 183, 217, 220, 221, 224, 225, 226, 227, 228, 233, 235, 239, 257, 265, 274, 275, 276, 277, 279, 280, 285, 297, 299, 314, 315, 328, 329, 334, 340, 343, 346, 420, 460, 463, 473, 474, 475, 476, 479, 481, 483, 488, 491, 493, 494, 498, 501, 502, 504, 508, 509, 510, 511, 513], "necessari": [0, 2, 9, 32, 67, 218, 220, 475, 496, 508, 511], "circumst": [0, 475, 503], "team": [0, 226, 475, 505], "oblig": [0, 475], "confidenti": [0, 473, 475], "regard": [0, 475, 505], "incid": [0, 475], "detail": [0, 5, 70, 217, 314, 317, 324, 325, 328, 330, 332, 334, 335, 337, 340, 341, 342, 343, 344, 348, 353, 413, 418, 432, 475, 486, 489, 494, 495, 501, 507, 508, 509, 511, 513], "specif": [0, 2, 3, 7, 40, 43, 68, 69, 70, 174, 175, 178, 182, 188, 202, 203, 204, 205, 209, 211, 212, 213, 220, 221, 224, 230, 231, 238, 239, 264, 325, 335, 336, 337, 340, 348, 363, 473, 475, 479, 483, 486, 487, 489, 494, 495, 496, 498, 503, 512], "polici": [0, 5, 279, 475, 488, 500, 512], "separ": [0, 9, 32, 216, 460, 473, 475, 489, 493, 499, 503], "who": [0, 475], "do": [0, 9, 13, 32, 38, 40, 43, 68, 201, 202, 218, 220, 221, 224, 252, 255, 295, 473, 475, 477, 481, 486, 488, 491, 494, 498, 505, 507, 511], "follow": [0, 2, 3, 4, 7, 9, 10, 32, 44, 93, 109, 112, 115, 116, 117, 118, 129, 204, 220, 221, 224, 242, 472, 473, 474, 475, 477, 479, 482, 483, 486, 487, 488, 492, 493, 494, 496, 497, 499, 501, 503, 504, 509, 511], "good": [0, 475, 483, 504, 511], "faith": [0, 475], "face": [0, 5, 475, 502, 507], "temporari": [0, 475], "repercuss": [0, 475], "determin": [0, 3, 457, 475, 483], "": [0, 2, 3, 40, 67, 69, 79, 85, 93, 129, 148, 149, 163, 166, 182, 184, 185, 186, 192, 201, 204, 216, 217, 220, 226, 234, 236, 249, 251, 261, 273, 274, 275, 277, 279, 285, 290, 291, 346, 377, 430, 431, 474, 475, 479, 481, 482, 483, 486, 487, 488, 491, 492, 495, 499, 500, 501, 502, 503, 504, 507, 508, 512], "leadership": [0, 475], "adapt": [0, 40, 43, 68, 69, 70, 475], "from": [0, 1, 2, 3, 4, 5, 7, 9, 13, 32, 38, 40, 42, 67, 68, 70, 84, 90, 91, 93, 129, 141, 148, 154, 172, 173, 183, 184, 185, 191, 192, 195, 199, 202, 203, 204, 205, 206, 207, 209, 218, 220, 221, 224, 225, 226, 230, 233, 234, 235, 236, 240, 242, 249, 250, 251, 252, 253, 255, 261, 265, 274, 275, 276, 277, 279, 280, 285, 289, 295, 296, 314, 317, 318, 319, 321, 324, 325, 326, 327, 328, 330, 332, 334, 335, 337, 340, 341, 342, 343, 344, 346, 357, 362, 380, 383, 392, 393, 394, 396, 418, 423, 437, 438, 442, 444, 445, 446, 461, 463, 468, 469, 474, 475, 476, 477, 479, 480, 481, 484, 485, 488, 491, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 514], "version": [0, 1, 5, 7, 40, 42, 43, 69, 70, 76, 172, 396, 428, 433, 444, 473, 475, 486, 487, 492, 493, 500, 502, 511], "1": [0, 1, 3, 4, 5, 7, 9, 32, 38, 40, 43, 44, 67, 68, 70, 77, 97, 113, 152, 154, 161, 163, 180, 182, 183, 184, 185, 192, 194, 197, 198, 199, 201, 202, 203, 205, 206, 209, 210, 217, 219, 220, 224, 225, 226, 228, 233, 236, 242, 249, 251, 254, 255, 256, 272, 273, 289, 299, 415, 423, 472, 474, 475, 476, 477, 479, 483, 486, 487, 488, 494, 495, 498, 499, 500, 501, 503, 504, 506, 507, 509, 510, 511, 512, 514], "4": [0, 3, 5, 7, 13, 70, 76, 178, 211, 212, 213, 215, 217, 221, 222, 224, 435, 474, 475, 476, 485, 486, 487, 491, 492, 494, 500, 501, 506, 510, 511, 513, 514], "avail": [0, 5, 8, 10, 11, 15, 22, 30, 31, 37, 261, 312, 316, 318, 319, 323, 326, 327, 331, 396, 473, 487, 491, 500, 508, 511], "http": [0, 3, 5, 202, 204, 221, 222, 224, 225, 226, 249, 251, 252, 469, 473, 477, 487, 488, 492, 493, 507, 514], "www": [0, 204, 477, 513], "org": [0, 5, 224, 251, 473, 492], "html": [0, 482], "For": [0, 1, 3, 4, 6, 7, 191, 204, 216, 217, 220, 224, 225, 226, 228, 233, 249, 252, 273, 435, 473, 475, 480, 481, 486, 488, 491, 501, 505, 509, 511, 512, 513], "answer": [0, 217, 225, 226, 475, 510, 513], "common": [0, 4, 5, 9, 10, 32, 220, 230, 236, 239, 240, 241, 249, 255, 256, 289, 438, 439, 444, 474, 475, 476, 477, 479, 481, 482, 487, 488, 489, 492, 496, 497, 501, 504], "question": [0, 7, 217, 225, 226, 475, 492, 510, 513], "about": [0, 348, 377, 430, 432, 433, 438, 439, 473, 475, 476, 483, 505, 513], "see": [0, 1, 3, 6, 217, 221, 224, 473, 475, 488, 493, 497, 501, 509, 513], "faq": [0, 5, 475], "pytorch": [1, 5, 7, 9, 32, 178, 183, 188, 190, 201, 202, 204, 207, 208, 211, 212, 213, 215, 217, 219, 220, 227, 228, 229, 247, 249, 252, 254, 256, 257, 264, 273, 299, 369, 376, 399, 409, 426, 479, 481, 483, 484, 486, 487, 491, 492, 495, 496, 501, 502, 503, 504, 507, 511, 512, 514], "toolkit": [1, 5, 482, 487, 492, 502], "develop": [1, 5, 9, 32, 444, 475, 490, 492, 495, 502, 504, 505, 508, 514], "transform": [1, 5, 9, 15, 32, 33, 43, 67, 73, 85, 113, 114, 116, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 149, 152, 153, 176, 178, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 220, 256, 308, 312, 317, 322, 335, 338, 340, 345, 347, 369, 444, 445, 446, 447, 474, 476, 477, 479, 480, 481, 482, 501, 502, 505, 509, 511, 512], "nn": [1, 3, 4, 9, 32, 159, 183, 236, 273, 496, 501, 509], "modul": [1, 3, 4, 237, 238, 247, 248, 434, 441, 449, 473, 474, 479, 491, 494, 496, 503, 505, 509], "With": [1, 4, 7, 120, 476, 498, 501, 502, 504, 513], "convert": [1, 3, 4, 9, 32, 38, 42, 67, 68, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 96, 97, 101, 103, 104, 105, 106, 107, 110, 113, 114, 123, 124, 126, 127, 128, 202, 214, 216, 217, 220, 224, 228, 230, 239, 241, 250, 259, 260, 264, 286, 316, 323, 331, 423, 435, 482, 488, 495, 497, 504, 505, 510], "torch": [1, 3, 4, 9, 32, 68, 159, 183, 228, 236, 264, 273, 481, 495, 496, 501, 504, 509], "graphmodul": [1, 68, 159, 505], "can": [1, 2, 3, 4, 5, 7, 9, 32, 79, 149, 163, 164, 172, 173, 182, 184, 185, 201, 204, 217, 220, 224, 226, 228, 249, 251, 252, 253, 256, 265, 273, 274, 275, 276, 277, 279, 280, 285, 399, 428, 435, 444, 473, 474, 476, 477, 479, 481, 482, 483, 486, 487, 488, 491, 492, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505, 508, 509, 510, 511, 512], "automat": [1, 5, 9, 32, 204, 207, 219, 220, 229, 236, 254, 256, 273, 473, 477, 482, 491, 495, 499, 510, 511, 514], "insert": [1, 3, 126, 129, 141, 152, 491, 504, 505, 509], "quant": [1, 3, 504], "dequant": [1, 3, 112, 115, 117, 118, 120, 137, 279, 348, 509], "oper": [1, 3, 67, 129, 154, 180, 249, 456, 460, 473, 498, 504, 510, 511], "symbolic_trac": 1, "fake": [1, 4, 504], "valu": [1, 3, 4, 38, 40, 43, 44, 67, 68, 70, 78, 79, 85, 90, 91, 93, 113, 114, 129, 148, 149, 154, 163, 165, 166, 172, 173, 180, 182, 183, 202, 205, 206, 217, 224, 228, 234, 235, 249, 250, 252, 264, 265, 273, 274, 275, 277, 279, 280, 285, 287, 289, 290, 296, 308, 310, 312, 316, 318, 319, 321, 323, 326, 327, 331, 335, 336, 357, 359, 398, 427, 430, 431, 435, 437, 442, 444, 452, 454, 455, 457, 468, 473, 476, 477, 483, 486, 494, 498, 501, 503, 504, 510, 511, 512], "call": [1, 2, 7, 9, 32, 37, 42, 191, 220, 224, 235, 236, 242, 249, 251, 252, 256, 272, 313, 345, 430, 438, 439, 473, 476, 489, 501, 504, 509, 510, 511], "proxi": 1, "fed": 1, "model": [1, 2, 4, 7, 9, 11, 32, 38, 40, 42, 43, 44, 68, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 148, 154, 159, 164, 169, 172, 173, 182, 183, 185, 186, 191, 198, 201, 202, 204, 217, 218, 219, 220, 228, 229, 230, 231, 232, 234, 236, 238, 239, 241, 242, 249, 250, 251, 252, 253, 254, 255, 256, 273, 274, 275, 276, 277, 279, 280, 285, 286, 289, 295, 296, 298, 299, 300, 302, 312, 314, 322, 325, 328, 330, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 352, 356, 357, 362, 363, 364, 367, 368, 369, 393, 394, 396, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 417, 419, 422, 423, 426, 427, 434, 442, 444, 449, 459, 460, 464, 474, 476, 477, 479, 480, 481, 482, 483, 488, 489, 491, 493, 494, 495, 498, 499, 500, 501, 502, 504, 507, 508, 509, 510, 512, 514], "record": [1, 3, 183, 190, 202, 203, 204, 210, 477, 508, 509, 511], "Then": [1, 9, 32, 224, 473, 488], "get": [1, 40, 43, 68, 69, 70, 90, 91, 93, 129, 148, 154, 159, 164, 166, 178, 182, 188, 190, 191, 192, 195, 213, 215, 217, 219, 220, 229, 236, 241, 242, 249, 251, 253, 254, 255, 256, 261, 263, 264, 265, 279, 290, 291, 296, 297, 302, 308, 309, 310, 312, 314, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 334, 335, 337, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 356, 357, 362, 374, 377, 378, 380, 382, 383, 387, 388, 389, 391, 394, 396, 398, 399, 400, 401, 406, 410, 413, 414, 416, 420, 421, 423, 425, 432, 433, 437, 442, 444, 445, 447, 451, 454, 456, 457, 460, 461, 465, 467, 468, 469, 470, 473, 474, 476, 477, 491, 492, 509, 511, 514], "sure": [1, 3, 148, 249, 251, 253, 377, 473], "replac": [1, 3, 43, 108, 109, 129, 226, 444, 481, 488, 507], "backend": [1, 9, 32, 40, 43, 68, 69, 70, 188, 193, 194, 196, 198, 202, 203, 205, 206, 207, 208, 209, 213, 215, 217, 229, 472, 481, 483, 489, 491, 503, 504, 510, 512], "pytorch_fx": [1, 178, 204, 208, 211, 212, 213, 503], "conf": [1, 2, 4, 9, 32, 160, 162, 172, 173, 182, 220, 229, 230, 242, 255, 259, 260, 264, 273, 274, 275, 276, 277, 279, 280, 285, 286, 455, 474, 476, 479, 488, 489, 511], "yaml": [1, 4, 7, 9, 32, 68, 69, 70, 164, 165, 166, 172, 173, 182, 191, 202, 204, 218, 219, 220, 230, 231, 232, 238, 239, 242, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 297, 301, 302, 303, 304, 305, 307, 309, 310, 392, 394, 401, 406, 410, 413, 455, 477, 479, 483, 488, 489, 494, 497, 498, 501, 503, 509, 510, 511], "you": [1, 4, 5, 9, 32, 200, 202, 224, 251, 473, 474, 475, 476, 477, 481, 482, 487, 492, 493, 494, 507, 508, 509, 511], "usual": [1, 4, 38, 40, 43, 68, 70, 202, 220, 242, 476, 479, 499, 504], "neural": [1, 7, 9, 22, 32, 42, 68, 182, 185, 188, 191, 214, 215, 217, 220, 227, 228, 230, 242, 249, 252, 254, 255, 257, 261, 352, 356, 380, 389, 425, 432, 444, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 498, 499, 502, 504, 507, 509, 510, 511, 512], "_": [1, 3, 4, 7, 9, 32, 172, 173, 273, 275, 276, 277, 279, 280, 285, 472, 479, 481, 483, 486, 488, 494, 495, 496, 498, 501, 504, 505, 507, 508, 509, 511, 512, 514], "compressor": [1, 2, 7, 9, 32, 42, 68, 182, 185, 188, 191, 214, 215, 217, 220, 227, 228, 230, 249, 252, 254, 255, 257, 261, 352, 356, 380, 389, 425, 432, 444, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 498, 499, 501, 502, 504, 507, 509, 510, 511, 512], "sourc": [1, 5, 9, 32, 38, 44, 70, 185, 220, 222, 230, 361, 493, 497, 502, 514], "code": [1, 5, 7, 9, 32, 172, 173, 182, 220, 230, 252, 255, 273, 274, 275, 276, 277, 279, 280, 285, 335, 340, 358, 376, 438, 439, 469, 470, 476, 477, 479, 481, 482, 487, 489, 491, 493, 494, 498, 499, 501, 502, 503, 504, 508, 509, 510, 511], "shown": [1, 2, 357, 473, 479, 488, 494, 498, 499, 511], "below": [1, 2, 4, 7, 9, 32, 77, 89, 97, 255, 274, 275, 472, 475, 479, 481, 488, 489, 494, 498, 499, 501, 503, 504, 509, 511], "arg": [1, 2, 3, 9, 32, 42, 68, 76, 126, 202, 203, 204, 219, 220, 230, 249, 254, 255, 259, 260, 261, 264, 265, 276, 286, 301, 303, 305, 306, 307, 316, 318, 319, 321, 323, 326, 327, 331, 430, 438, 457, 476, 477, 479, 481, 496, 501, 504, 509, 510], "tune": [1, 4, 5, 7, 9, 32, 38, 40, 42, 43, 68, 70, 164, 172, 173, 202, 204, 219, 220, 254, 256, 273, 274, 275, 276, 277, 279, 280, 285, 296, 307, 325, 332, 333, 340, 342, 346, 369, 399, 404, 414, 426, 434, 445, 449, 473, 476, 477, 481, 482, 483, 487, 491, 493, 495, 498, 501, 502, 505, 507, 508, 509, 512, 514], "neural_compressor": [1, 2, 4, 5, 9, 13, 32, 474, 476, 477, 479, 481, 488, 489, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 507, 510, 511, 512], "experiment": [1, 2, 4, 5, 13, 176, 179, 180, 256, 423, 474, 477, 479, 481, 488, 495, 496, 497, 498, 499, 501, 503, 505, 507, 510], "import": [1, 2, 3, 4, 5, 9, 32, 154, 220, 230, 233, 286, 296, 474, 476, 477, 479, 481, 488, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 509, 510], "eval": [1, 3, 4, 43, 191, 220, 224, 230, 509], "q_model": [1, 4, 9, 32, 220, 230, 476, 477, 481, 489, 494, 496, 497, 498, 504], "fit": [1, 4, 5, 9, 32, 273, 276, 476, 477, 479, 481, 489, 494, 496, 498, 499, 501, 504], "save": [1, 2, 3, 7, 9, 32, 38, 40, 43, 68, 70, 129, 178, 204, 208, 213, 234, 239, 255, 259, 260, 261, 263, 264, 286, 287, 290, 296, 488, 489, 495, 496, 497, 501, 504], "tuned_checkpoint": 1, "return": [1, 2, 3, 4, 9, 13, 32, 38, 40, 42, 43, 44, 67, 68, 70, 73, 76, 79, 80, 83, 84, 85, 86, 90, 91, 93, 97, 104, 108, 109, 113, 114, 115, 116, 117, 118, 126, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 159, 160, 162, 166, 172, 173, 178, 180, 182, 183, 188, 192, 194, 201, 204, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 245, 249, 250, 251, 252, 253, 255, 257, 259, 260, 261, 263, 264, 265, 271, 273, 274, 275, 276, 277, 279, 280, 285, 286, 289, 290, 291, 295, 296, 314, 315, 317, 324, 325, 326, 327, 328, 330, 332, 333, 357, 360, 361, 362, 363, 394, 430, 433, 435, 437, 438, 439, 444, 447, 456, 457, 460, 477, 481, 494, 495, 496, 498, 504, 509, 511], "now": [1, 2, 217, 442, 477, 481, 488, 497, 503, 510, 511], "support": [1, 2, 3, 9, 32, 40, 43, 67, 68, 69, 70, 97, 104, 121, 172, 173, 178, 182, 183, 184, 185, 188, 191, 192, 201, 202, 204, 208, 211, 212, 213, 214, 215, 217, 220, 227, 228, 230, 235, 236, 240, 242, 243, 244, 245, 249, 251, 255, 257, 261, 265, 273, 274, 275, 276, 277, 279, 280, 285, 289, 290, 291, 312, 377, 380, 382, 383, 385, 387, 388, 390, 396, 427, 435, 444, 473, 474, 482, 483, 487, 488, 497, 502, 505, 508, 511, 513, 514], "auto": [1, 274, 296, 482], "method": [1, 2, 3, 4, 5, 68, 129, 148, 149, 159, 178, 184, 185, 195, 200, 201, 202, 204, 208, 211, 212, 213, 215, 217, 227, 228, 233, 236, 239, 240, 241, 245, 257, 259, 260, 261, 263, 264, 430, 435, 439, 456, 474, 476, 479, 480, 482, 483, 494, 499, 501, 504, 505, 510, 511], "avoid": [1, 202, 509], "user": [1, 2, 3, 5, 7, 40, 69, 129, 164, 172, 173, 174, 175, 178, 182, 188, 191, 204, 207, 211, 212, 213, 217, 219, 220, 233, 235, 242, 252, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 296, 429, 479, 483, 486, 488, 491, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 507, 509, 510, 511, 514], "log": [1, 152, 242, 299, 314, 325, 328, 334, 340, 342, 343, 399, 430, 436, 437, 438, 439, 443, 457, 473, 508, 509, 511], "output": [1, 3, 4, 7, 9, 13, 32, 37, 44, 68, 70, 76, 82, 83, 93, 97, 108, 109, 115, 117, 122, 129, 148, 154, 166, 172, 173, 183, 185, 186, 190, 216, 218, 219, 220, 221, 224, 228, 233, 234, 249, 261, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 290, 314, 325, 328, 334, 340, 342, 343, 377, 387, 388, 389, 403, 407, 410, 430, 438, 445, 451, 473, 476, 479, 481, 486, 488, 489, 494, 496, 501, 503, 504, 509, 510, 511, 512], "fail": [1, 129, 439], "symbol": [1, 9, 32, 42, 159, 221, 273, 496], "trace": [1, 159, 273], "info": [1, 38, 40, 43, 68, 129, 184, 185, 189, 249, 255, 261, 314, 315, 317, 324, 325, 328, 329, 333, 430, 433, 438, 444, 460, 473, 475, 488, 496], "entir": [1, 3, 4, 9, 32, 273, 501], "conduct": 1, "combin": [1, 7, 40, 69, 172, 173, 180, 191, 220, 255, 273, 274, 275, 276, 277, 279, 280, 285, 296, 483, 491, 499, 502, 505, 510, 511], "imper": 1, "control": [1, 9, 32, 38, 40, 70, 109, 160, 162, 236, 340, 345, 473, 500, 511], "flow": [1, 2, 220, 225, 226, 242], "therefor": [1, 4, 504, 507], "int8": [1, 4, 7, 38, 40, 43, 67, 68, 69, 70, 149, 163, 214, 279, 290, 291, 348, 472, 473, 477, 480, 482, 486, 487, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "consist": [1, 9, 32, 78, 86, 473, 475, 511], "lot": [1, 483], "9": [1, 3, 4, 5, 235, 487, 492, 501, 503, 512, 513], "higher": [1, 4, 9, 32, 172, 173, 240, 273, 274, 275, 276, 277, 279, 280, 285, 479, 494, 495, 501, 504, 508], "between": [1, 3, 7, 9, 32, 70, 149, 163, 183, 217, 225, 227, 228, 233, 235, 236, 257, 279, 348, 456, 460, 474, 479, 482, 488, 491, 494, 504, 507, 508, 510, 511], "don": [1, 37, 149, 163, 435, 473, 511], "t": [1, 3, 7, 37, 90, 91, 93, 129, 148, 149, 163, 184, 185, 217, 226, 235, 236, 255, 435, 443, 473, 474, 476, 479, 481, 495, 501, 511, 512, 513], "need": [1, 4, 7, 9, 32, 37, 38, 40, 42, 43, 68, 70, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 92, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 107, 110, 112, 113, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 140, 141, 145, 148, 172, 173, 178, 184, 185, 186, 187, 192, 200, 201, 204, 211, 212, 213, 217, 218, 220, 227, 228, 233, 242, 255, 257, 263, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 463, 473, 474, 476, 477, 479, 481, 491, 495, 498, 501, 503, 504, 505, 507, 510, 511, 512], "becaus": [1, 217, 224, 249, 501, 504, 510, 511], "modifi": [1, 9, 32, 79, 85, 93, 104, 204, 252, 424, 473, 474, 481, 486, 512], "8": [1, 3, 4, 5, 216, 435, 486, 487, 492, 498, 502, 513, 514], "As": [1, 104, 224, 473, 476, 479, 483, 501, 511], "cannot": [1, 224, 433, 485, 509], "handl": [1, 6, 9, 32, 83, 85, 154, 233, 234, 235, 435, 460, 461, 476], "tensor": [1, 3, 38, 40, 42, 43, 44, 67, 68, 70, 93, 129, 148, 154, 183, 217, 245, 246, 249, 251, 253, 261, 263, 264, 279, 290, 291, 337, 340, 348, 377, 477, 482, 501, 504, 507, 509, 510, 511, 513], "iter": [1, 2, 4, 7, 38, 40, 42, 43, 44, 68, 70, 154, 172, 173, 178, 184, 185, 195, 200, 204, 205, 208, 213, 239, 251, 253, 273, 274, 275, 276, 277, 279, 280, 285, 289, 290, 291, 314, 438, 445, 476, 479, 501, 503, 509, 511, 512], "so": [1, 7, 217, 251, 286, 483, 485, 491, 494, 504, 505, 509, 510, 511], "might": [1, 473, 475, 511], "meet": [1, 5, 255, 488, 498, 502, 503, 504, 509, 511], "failur": [1, 456], "sometim": [1, 129, 148, 501, 504], "order": [1, 9, 13, 32, 221, 222, 255, 274, 275, 279, 377, 380, 389, 446, 494, 501, 503, 509, 511], "successfulli": [1, 5, 481, 502], "suggest": [1, 241, 508], "two": [1, 2, 9, 32, 116, 129, 178, 182, 204, 208, 209, 213, 224, 249, 253, 255, 296, 473, 474, 477, 479, 481, 486, 488, 494, 495, 499, 501, 504, 505, 508, 511, 512], "approach": [1, 2, 5, 68, 165, 220, 231, 232, 233, 238, 239, 312, 445, 452, 479, 483, 491, 502, 503, 511, 512], "preprocess": [1, 178, 202, 213, 215, 217, 218, 220, 476, 481, 510], "here": [1, 3, 4, 5, 9, 32, 37, 93, 224, 231, 238, 473, 477, 481, 486, 487, 494, 498, 501, 504, 507, 508, 511], "non": [1, 3, 188, 250, 500, 501, 511], "traceabl": [1, 68], "class": [1, 2, 3, 9, 32, 61, 240, 271, 371, 372, 474, 476, 477, 479, 483, 488, 494, 498, 499, 509, 511, 512], "name": [1, 3, 5, 38, 43, 44, 67, 68, 70, 76, 85, 86, 90, 91, 93, 129, 141, 148, 154, 160, 162, 166, 178, 182, 183, 185, 186, 188, 189, 190, 202, 203, 204, 207, 208, 211, 212, 213, 215, 217, 223, 224, 227, 228, 233, 234, 236, 242, 245, 249, 251, 253, 255, 257, 261, 264, 287, 290, 296, 314, 318, 319, 321, 324, 325, 326, 327, 328, 330, 348, 357, 359, 377, 380, 382, 383, 389, 396, 397, 398, 399, 410, 423, 430, 433, 444, 446, 447, 468, 473, 474, 477, 481, 483, 486, 487, 488, 493, 494, 496, 500, 507, 508, 509, 511, 512, 513], "select": [1, 2, 202, 232, 236, 238, 473, 487, 491, 492, 504, 509, 511], "object": [1, 2, 3, 5, 9, 13, 32, 38, 40, 42, 43, 67, 68, 70, 79, 80, 81, 82, 83, 84, 85, 86, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 123, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 159, 160, 162, 164, 165, 166, 172, 173, 174, 175, 178, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 195, 200, 202, 203, 204, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 224, 227, 228, 229, 232, 233, 235, 238, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 264, 272, 273, 274, 275, 276, 277, 279, 280, 285, 287, 289, 290, 291, 295, 296, 312, 326, 327, 330, 332, 373, 435, 438, 444, 454, 456, 457, 461, 473, 474, 476, 477, 482, 485, 494, 495, 496, 499, 503, 504, 510, 511], "pass": [1, 3, 4, 7, 9, 32, 100, 104, 154, 216, 252, 255, 296, 391, 443, 456, 457, 474, 476, 477, 479, 481, 489, 494, 498, 501, 503, 504, 505, 511, 512], "them": [1, 9, 32, 85, 129, 202, 476, 486, 489, 499, 501, 511], "dict": [1, 38, 40, 42, 43, 68, 70, 154, 165, 166, 172, 173, 182, 183, 188, 201, 204, 220, 223, 224, 225, 226, 228, 231, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 261, 273, 274, 275, 276, 277, 279, 280, 285, 287, 289, 290, 295, 296, 297, 299, 302, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 353, 354, 357, 365, 374, 377, 384, 392, 393, 394, 396, 398, 399, 400, 401, 406, 410, 413, 414, 415, 416, 418, 420, 421, 423, 430, 431, 433, 435, 437, 438, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 460, 461, 463, 465, 467, 468, 470, 494, 503, 509, 511], "These": [1, 3, 9, 32, 491], "function": [1, 2, 4, 7, 9, 32, 40, 43, 70, 85, 129, 148, 172, 173, 191, 203, 219, 220, 231, 238, 239, 242, 252, 255, 263, 274, 275, 277, 279, 280, 287, 290, 473, 474, 476, 479, 489, 491, 492, 494, 495, 501, 504, 508, 509, 511], "If": [1, 9, 32, 85, 90, 91, 93, 97, 104, 129, 172, 173, 204, 217, 224, 236, 249, 250, 251, 273, 274, 275, 276, 277, 279, 280, 285, 473, 475, 477, 481, 488, 492, 493, 494, 495, 498, 499, 504, 508, 509, 510, 511], "conv2d": [1, 3, 40, 69, 83, 84, 88, 89, 94, 95, 149, 259, 260, 261, 263, 264, 486, 509], "won": 1, "detect": [1, 68, 224, 228, 261, 377, 380, 389, 444, 473], "maskrcnn": 1, "tool": [1, 5, 7, 154, 296, 476, 488, 493, 502, 504, 514], "test": [1, 5, 44, 217, 233, 473, 475, 492, 513], "net": [1, 3], "py": [1, 2, 3, 7, 129, 154, 222, 224, 225, 226, 251, 460, 473, 481, 487, 492, 497, 504, 507, 509], "prepare_custom_config_dict": 1, "non_traceable_module_class": 1, "anchorgener": 1, "rpnpostprocessor": 1, "pooler": 1, "postprocessor": 1, "maskrcnnfpnfeatureextractor": 1, "maskpostprocessor": 1, "fpn": 1, "rpnhead": 1, "decor": [1, 2, 7, 38, 61, 90, 91, 93, 154, 160, 162, 178, 188, 213, 215, 217, 227, 228, 240, 245, 249, 251, 253, 257, 265, 271, 285, 296, 440, 511], "wrap": [1, 70, 183, 224, 308, 481], "untrac": 1, "part": [1, 44, 218, 220, 224, 249, 251, 476, 479, 487, 488, 492, 495, 501], "like": [1, 2, 7, 38, 40, 43, 68, 70, 97, 120, 122, 129, 148, 154, 172, 173, 178, 192, 204, 208, 213, 219, 220, 228, 234, 251, 254, 255, 256, 259, 260, 261, 263, 264, 273, 274, 275, 276, 277, 279, 280, 285, 286, 473, 475, 479, 482, 483, 488, 491, 497, 499, 501, 504, 511], "global": [1, 249, 457, 503, 511], "want": [1, 7, 9, 32, 90, 91, 93, 129, 200, 202, 251, 286, 473, 474, 477, 481, 494, 498, 499, 508, 509, 511], "move": [1, 70, 503, 507], "out": [1, 5, 9, 32, 148, 202, 203, 204, 219, 220, 249, 254, 256, 263, 273, 475, 477, 503, 504, 514], "keep": [1, 7, 249, 250, 507], "should": [1, 2, 3, 7, 9, 32, 40, 43, 44, 68, 69, 70, 77, 97, 149, 153, 172, 173, 178, 185, 186, 200, 202, 204, 208, 213, 216, 217, 222, 227, 228, 251, 255, 257, 273, 274, 275, 276, 277, 279, 280, 285, 296, 357, 435, 473, 477, 481, 494, 498, 504, 510, 511, 512], "try": [1, 200, 377, 380, 389, 457, 504], "must": [1, 9, 32, 217, 224, 228, 487, 488, 492, 510, 511], "ssd": [1, 513], "resnet34": [1, 513], "ptq": [1, 481, 482, 491, 504, 509], "python": [1, 9, 10, 32, 98, 154, 185, 204, 220, 224, 296, 396, 473, 475, 477, 481, 487, 492, 502, 505, 510, 514], "r34": 1, "def": [1, 2, 3, 4, 7, 9, 32, 90, 91, 93, 141, 172, 173, 273, 274, 275, 276, 277, 279, 280, 285, 477, 479, 481, 494, 498, 501, 504, 509, 511], "bboxes_labels_scor": 1, "bbox": [1, 224, 494], "prob": 1, "criteria": [1, 9, 32, 219, 220, 242, 249, 251, 254, 256, 272, 273, 482, 511], "0": [1, 3, 4, 5, 9, 10, 32, 38, 40, 44, 67, 68, 69, 76, 114, 148, 154, 161, 169, 180, 183, 184, 185, 192, 194, 197, 198, 199, 201, 202, 205, 206, 209, 214, 217, 219, 220, 228, 233, 235, 236, 240, 242, 249, 254, 256, 272, 273, 430, 438, 473, 474, 476, 477, 479, 481, 483, 486, 487, 493, 494, 495, 498, 500, 501, 503, 504, 506, 508, 509, 510, 511, 512, 514], "45": [1, 235, 487, 506, 513], "max_output": 1, "200": [1, 216, 511, 513], "box": [1, 9, 32, 217, 224, 228, 473, 494, 509, 510, 511], "label": [1, 9, 13, 32, 38, 70, 172, 173, 180, 183, 185, 186, 202, 204, 205, 206, 207, 210, 214, 217, 221, 223, 227, 228, 233, 234, 257, 273, 274, 275, 276, 277, 279, 280, 285, 365, 477, 494, 501, 510], "score": [1, 13, 221, 222, 224, 225, 226, 228, 249, 251, 494, 498, 501, 508, 511], "zip": 1, "split": [1, 148, 216, 217, 233, 510], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 159, 255, 276, 498, 499], "process": [2, 4, 7, 9, 32, 38, 40, 43, 68, 70, 172, 173, 178, 180, 182, 191, 202, 203, 204, 213, 214, 215, 217, 218, 220, 231, 232, 235, 238, 239, 242, 249, 251, 252, 253, 255, 256, 273, 274, 275, 276, 277, 279, 280, 285, 295, 311, 392, 393, 396, 426, 430, 434, 437, 438, 445, 473, 474, 476, 477, 479, 480, 481, 482, 488, 499, 501, 504, 509, 510, 511, 512, 514], "autom": 2, "design": [2, 9, 32, 185, 186, 191, 201, 220, 235, 254, 501, 504], "artifici": 2, "network": [2, 3, 5, 233, 236, 251, 473, 479, 480, 502, 504, 514], "ann": 2, "ha": [2, 7, 13, 38, 40, 43, 68, 70, 85, 86, 90, 91, 93, 97, 116, 129, 148, 182, 220, 221, 235, 249, 251, 274, 275, 473, 476, 482, 488, 491, 495, 503, 504, 505, 508, 514], "been": [2, 9, 13, 32, 86, 216, 221, 235, 249, 251, 473, 479, 488, 495, 514], "par": 2, "outperform": 2, "hand": [2, 224, 473], "simplest": [2, 479], "launcher": [2, 9, 32, 479, 501], "configur": [2, 3, 7, 9, 32, 37, 38, 40, 42, 43, 68, 69, 70, 129, 164, 165, 169, 172, 173, 174, 175, 176, 178, 182, 204, 207, 218, 219, 220, 224, 230, 231, 232, 233, 235, 238, 239, 242, 250, 252, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 295, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 325, 335, 337, 340, 399, 401, 406, 410, 413, 426, 428, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 459, 461, 473, 474, 477, 480, 482, 494, 498, 507, 510, 513], "agent": 2, "path": [2, 3, 7, 9, 32, 38, 40, 43, 68, 70, 148, 154, 164, 165, 202, 203, 204, 217, 218, 219, 220, 230, 231, 232, 233, 236, 238, 239, 242, 250, 252, 254, 255, 256, 261, 264, 272, 273, 286, 296, 297, 302, 314, 317, 324, 325, 328, 334, 335, 340, 342, 343, 357, 363, 374, 377, 380, 382, 383, 385, 387, 388, 389, 390, 394, 401, 406, 410, 413, 414, 420, 430, 438, 442, 444, 445, 454, 469, 473, 474, 476, 477, 479, 481, 488, 489, 494, 496, 497, 501, 510, 511, 512], "syntax": [2, 9, 32, 486], "note": [2, 3, 5, 9, 32, 38, 40, 43, 68, 70, 77, 224, 252, 276, 330, 340, 344, 473, 474, 481, 482, 483, 486, 487, 488, 501, 504, 506, 509, 511, 512, 513, 514], "dyna": [2, 220, 233, 234, 235, 236, 237, 238, 256, 491, 503], "section": [2, 473, 479, 501, 503, 512], "option": [2, 9, 32, 38, 40, 43, 68, 70, 129, 148, 169, 172, 173, 183, 192, 202, 217, 220, 224, 230, 235, 236, 249, 255, 256, 273, 274, 275, 276, 277, 279, 280, 285, 286, 296, 302, 313, 314, 315, 317, 324, 325, 328, 330, 332, 333, 335, 340, 345, 348, 377, 384, 387, 388, 389, 394, 403, 407, 413, 414, 416, 421, 430, 431, 435, 438, 442, 444, 445, 447, 450, 452, 454, 463, 469, 474, 476, 477, 483, 486, 488, 495, 510, 511, 512], "requir": [2, 3, 4, 7, 9, 32, 191, 220, 224, 236, 255, 261, 298, 300, 308, 311, 364, 370, 377, 380, 382, 389, 395, 402, 403, 404, 405, 407, 408, 409, 411, 412, 417, 422, 426, 473, 474, 476, 480, 481, 486, 488, 492, 495, 496, 500, 504, 507, 509, 511, 512, 514], "search_algorithm": [2, 165, 220, 238, 239, 256], "nsga2": [2, 235], "seed": [2, 154, 233, 235, 241, 454, 476, 483, 511, 512], "42": [2, 241, 500, 513], "supernet": [2, 235, 236], "ofa_mbv3_d234_e346_k357_w1": 2, "metric": [2, 5, 7, 9, 11, 13, 32, 38, 40, 43, 68, 70, 172, 173, 182, 185, 218, 219, 220, 230, 231, 232, 234, 236, 238, 239, 240, 241, 242, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 289, 308, 312, 317, 322, 335, 338, 340, 345, 369, 426, 434, 437, 441, 444, 445, 447, 463, 473, 474, 476, 481, 482, 488, 495, 508, 509, 511, 512, 513], "acc": [2, 3, 40, 43, 228, 236, 265, 487, 506, 509, 513], "mac": [2, 232, 234, 236, 238], "popul": [2, 235], "50": [2, 224, 226, 235, 487, 488, 513], "num_ev": [2, 235], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 233, 236, 444, 473], "batch_siz": [2, 3, 9, 32, 184, 185, 192, 194, 197, 198, 199, 200, 201, 202, 203, 236, 302, 314, 325, 423, 445, 474, 476, 477, 481, 488, 489, 504], "64": [2, 3, 217, 487, 510, 513], "dataset_path": [2, 236, 445], "dataset": [2, 4, 5, 7, 9, 15, 32, 38, 40, 43, 68, 70, 172, 173, 178, 184, 185, 192, 194, 195, 197, 198, 199, 200, 201, 213, 219, 220, 224, 225, 226, 228, 230, 236, 254, 255, 256, 273, 274, 275, 276, 277, 279, 280, 285, 314, 322, 325, 328, 335, 340, 344, 345, 346, 357, 369, 442, 444, 445, 446, 474, 476, 481, 482, 483, 487, 488, 494, 504, 511, 512, 513], "imagenet": [2, 4, 176, 180, 204, 207, 214, 236, 487, 509, 510, 512, 513], "ilsvrc2012": [2, 236], "also": [2, 3, 5, 7, 13, 178, 201, 204, 208, 213, 217, 221, 273, 473, 474, 475, 476, 479, 487, 488, 491, 494, 498, 499, 501, 504, 505, 511, 514], "nasconfig": [2, 165, 220, 232, 238, 239], "argument": [2, 252, 255, 298, 403, 407, 412, 418, 430, 438, 457, 474, 479, 488], "config": [2, 40, 42, 43, 68, 69, 172, 173, 182, 191, 202, 219, 220, 233, 239, 242, 249, 250, 251, 252, 253, 256, 274, 275, 276, 277, 279, 280, 285, 286, 289, 295, 296, 297, 298, 301, 302, 303, 305, 307, 310, 334, 340, 342, 343, 347, 348, 392, 394, 401, 403, 406, 407, 410, 412, 413, 420, 423, 426, 434, 444, 447, 448, 449, 450, 454, 455, 457, 465, 467, 470, 473, 477, 479, 481, 488, 491, 496, 501, 503, 505, 509, 511], "under": [2, 3, 129, 204, 295, 473, 477, 488, 493, 494, 499, 501, 504, 509, 511, 514], "file": [2, 7, 9, 32, 68, 148, 154, 164, 165, 172, 173, 190, 202, 203, 204, 207, 216, 217, 218, 219, 220, 224, 230, 231, 232, 233, 234, 236, 238, 239, 242, 250, 252, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 301, 302, 303, 304, 305, 306, 307, 357, 394, 403, 407, 414, 430, 437, 438, 443, 444, 445, 457, 461, 465, 467, 469, 470, 473, 477, 481, 485, 488, 489, 493, 494, 496, 498, 501, 503, 509, 510, 511], "input": [2, 7, 9, 32, 38, 42, 44, 67, 68, 70, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 95, 96, 97, 101, 103, 104, 105, 106, 107, 108, 110, 113, 114, 123, 124, 126, 127, 128, 129, 148, 154, 159, 172, 173, 183, 185, 186, 191, 202, 203, 204, 206, 214, 216, 217, 218, 219, 220, 224, 229, 236, 242, 255, 261, 263, 264, 273, 274, 275, 276, 277, 279, 280, 285, 286, 296, 298, 308, 330, 334, 335, 337, 340, 341, 342, 343, 344, 377, 380, 387, 388, 389, 391, 403, 407, 412, 418, 442, 445, 451, 473, 476, 477, 479, 481, 486, 488, 489, 494, 495, 496, 501, 503, 504, 509, 510, 512], "aim": [2, 476, 511], "accord": [2, 7, 42, 172, 178, 202, 203, 204, 213, 215, 217, 220, 253, 254, 264, 274, 275, 276, 277, 279, 280, 285, 443, 477, 481, 501, 505, 510, 511], "pleas": [2, 4, 5, 6, 7, 129, 202, 203, 204, 207, 249, 251, 252, 473, 477, 480, 481, 492, 494, 495, 498, 501, 505, 507, 508], "regist": [2, 7, 9, 32, 38, 61, 160, 162, 178, 183, 188, 191, 204, 208, 211, 212, 213, 215, 217, 218, 220, 227, 228, 240, 241, 242, 243, 244, 245, 249, 251, 253, 257, 265, 271, 276, 285, 474, 477, 481, 494, 498, 511], "__new__": 2, "self": [2, 3, 7, 9, 32, 86, 116, 220, 224, 242, 251, 276, 457, 473, 477, 491, 494, 498, 508, 509, 511], "conf_fname_or_obj": [2, 9, 32, 164, 182, 191, 218, 219, 220, 229, 230, 231, 232, 238, 239, 242, 254, 255, 256, 272, 273], "kwarg": [2, 67, 68, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 185, 186, 189, 204, 217, 219, 220, 230, 252, 254, 255, 259, 260, 261, 263, 264, 273, 286, 295, 296, 301, 303, 305, 306, 307, 316, 318, 319, 321, 323, 326, 327, 331], "current": [2, 3, 7, 9, 32, 40, 43, 69, 70, 85, 93, 97, 129, 220, 230, 236, 249, 251, 252, 253, 276, 473, 481, 482, 483, 486, 494, 498, 501, 504, 511], "built": [2, 7, 9, 32, 98, 185, 186, 188, 193, 196, 198, 202, 203, 208, 210, 212, 213, 214, 215, 217, 255, 474, 481, 482, 498, 510, 511, 512], "inherit": [2, 7, 40, 43, 68, 69, 70, 183, 191, 199, 217, 220, 251, 253, 476], "base": [2, 7, 13, 38, 40, 42, 43, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 153, 160, 161, 162, 163, 164, 165, 166, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 224, 227, 228, 229, 231, 232, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 285, 287, 290, 291, 296, 301, 302, 303, 305, 306, 307, 310, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 352, 353, 354, 356, 359, 361, 362, 365, 375, 377, 380, 382, 384, 385, 387, 388, 389, 390, 398, 401, 406, 410, 413, 423, 427, 429, 431, 433, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 458, 460, 462, 466, 467, 477, 480, 481, 482, 483, 486, 487, 500, 508, 509, 511, 513], "nasbas": [2, 231, 232, 238, 239], "interfac": [2, 5, 9, 32, 40, 43, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 107, 110, 112, 113, 114, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 174, 175, 178, 219, 220, 235, 236, 242, 254, 255, 256, 265, 272, 273, 289, 290, 291, 297, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 410, 413, 420, 432, 482, 491, 504, 507, 514], "own": [2, 40, 43, 68, 69, 70, 97, 200, 217, 473, 476, 477, 491, 494, 498, 508, 511], "just": [2, 3, 4, 37, 184, 185, 186, 187, 189, 192, 217, 487, 488, 499, 504, 510, 511], "nas_registri": [2, 240], "well": [2, 3, 37, 172, 173, 273, 274, 275, 276, 277, 279, 280, 285, 477, 504, 507, 512], "wai": [2, 203, 204, 207, 473, 476, 477, 494, 499, 501, 504, 511, 512], "__init__": [2, 3, 7, 9, 32, 477, 494, 498, 511], "search_spac": [2, 165, 231, 238, 239, 240, 241], "none": [2, 3, 7, 9, 13, 32, 38, 40, 42, 43, 44, 67, 68, 70, 86, 113, 129, 148, 154, 159, 165, 166, 169, 172, 173, 176, 182, 183, 184, 185, 191, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 214, 217, 218, 219, 220, 221, 224, 227, 228, 229, 230, 231, 233, 235, 236, 238, 239, 242, 246, 250, 254, 255, 256, 257, 261, 264, 265, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 289, 290, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 321, 323, 325, 326, 327, 329, 331, 334, 335, 336, 339, 340, 343, 345, 346, 347, 362, 377, 380, 382, 389, 394, 396, 401, 403, 406, 407, 410, 412, 413, 414, 415, 419, 420, 423, 425, 428, 430, 431, 433, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 456, 457, 461, 469, 477, 494, 504, 509, 510, 511], "model_build": [2, 231, 238, 239], "initi": [2, 3, 9, 32, 67, 154, 172, 173, 183, 191, 199, 202, 218, 220, 231, 232, 238, 239, 250, 251, 255, 263, 274, 275, 276, 277, 279, 280, 285, 313, 335, 336, 345, 394, 423, 425, 433, 445, 476, 477, 488, 494, 495, 501, 511], "select_model_arch": [2, 232, 238, 239], "propos": [2, 7, 239, 479, 495, 501], "algorithm": [2, 5, 7, 13, 42, 165, 216, 221, 228, 231, 235, 238, 239, 241, 279, 290, 291, 479, 486, 491, 501, 504, 509, 511, 512, 514], "next": [2, 172, 195, 239, 253, 274, 275, 276, 277, 279, 280, 285, 473, 495, 503, 511], "res_save_path": [2, 239], "estim": [2, 3, 4, 228, 231, 232, 236, 238, 239, 261, 511], "pragma": 2, "cover": [2, 5, 9, 32, 475, 489, 502], "perform": [2, 4, 5, 7, 9, 32, 85, 120, 164, 182, 202, 216, 219, 220, 231, 232, 234, 236, 238, 239, 242, 254, 256, 265, 272, 273, 301, 315, 325, 334, 340, 342, 428, 437, 445, 447, 454, 463, 473, 474, 476, 478, 480, 482, 487, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 511, 512, 513], "depend": [2, 38, 42, 70, 85, 172, 173, 182, 220, 231, 238, 239, 273, 274, 275, 276, 277, 279, 280, 285, 475, 485, 486, 488, 503, 511], "load_search_result": [2, 239], "load": [2, 3, 38, 202, 204, 216, 217, 224, 234, 239, 261, 273, 295, 296, 418, 444, 445, 476, 503, 504], "exist": [2, 9, 32, 33, 76, 148, 166, 182, 183, 224, 239, 261, 263, 315, 334, 340, 342, 343, 380, 428, 443, 444, 488, 494, 501, 511], "dump_search_result": [2, 239], "find_best_model_arch": [2, 239], "find": [2, 5, 7, 9, 32, 67, 90, 91, 93, 154, 228, 239, 240, 263, 276, 296, 394, 460, 473, 501, 508, 509, 511, 514], "pareto": [2, 239, 240], "front": [2, 239, 240], "setter": [2, 184, 185], "A": [2, 3, 5, 43, 68, 70, 77, 79, 93, 97, 98, 129, 148, 154, 178, 184, 185, 186, 187, 204, 208, 213, 216, 217, 218, 220, 221, 224, 225, 226, 228, 231, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 276, 476, 484, 486, 487, 494, 496, 501, 502, 510, 511, 512], "callabl": [2, 169, 226, 256, 286, 444, 460, 461], "our": [2, 3, 5, 149], "leverag": [2, 98, 479, 488, 499, 504], "grid": [2, 241], "random": [2, 78, 148, 154, 180, 217, 233, 241, 276, 454, 483, 503, 510, 512], "bayesian": [2, 241, 493, 503], "optim": [2, 3, 4, 5, 9, 11, 32, 43, 68, 76, 80, 83, 84, 86, 97, 98, 108, 109, 115, 116, 117, 118, 148, 169, 185, 191, 218, 219, 220, 234, 241, 251, 252, 254, 256, 273, 286, 287, 290, 297, 299, 303, 305, 322, 326, 327, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 348, 349, 350, 351, 352, 355, 356, 369, 420, 426, 427, 437, 442, 445, 448, 452, 459, 464, 479, 481, 482, 486, 487, 491, 492, 493, 496, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 514], "given": [2, 37, 42, 43, 44, 70, 90, 91, 93, 154, 216, 217, 224, 263, 273, 357, 363, 377, 380, 382, 383, 385, 387, 388, 390, 431, 444, 457, 476, 501, 510], "train": [2, 3, 5, 7, 9, 32, 38, 40, 43, 68, 70, 85, 172, 173, 191, 202, 204, 217, 218, 220, 230, 231, 233, 234, 238, 242, 251, 252, 255, 273, 275, 276, 277, 279, 280, 285, 289, 452, 472, 477, 479, 480, 482, 488, 491, 495, 497, 499, 501, 502, 511, 512, 513], "evalu": [2, 3, 4, 7, 9, 13, 32, 38, 40, 43, 68, 70, 164, 172, 173, 182, 202, 218, 219, 220, 221, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 238, 239, 242, 251, 252, 255, 256, 257, 273, 274, 275, 276, 277, 279, 280, 285, 289, 301, 303, 305, 307, 308, 426, 434, 445, 449, 476, 477, 479, 488, 489, 491, 494, 495, 497, 498, 501, 504, 508, 509, 511, 512], "potenti": 2, "after": [2, 3, 4, 9, 32, 42, 44, 68, 180, 184, 185, 191, 202, 217, 218, 220, 233, 249, 251, 252, 253, 279, 431, 473, 474, 476, 477, 479, 491, 494, 497, 498, 499, 501, 504, 505, 508, 509, 510, 511], "sever": [2, 3, 148, 217, 253, 473, 479, 491, 495, 501, 503, 510, 512], "procedur": [2, 165], "lie": [2, 239], "through": [2, 3, 9, 32, 172, 173, 216, 273, 274, 275, 276, 277, 279, 280, 285, 486, 487, 489, 491, 492, 494, 498, 499, 503, 508], "basic_na": [2, 220, 238, 256], "basicna": [2, 231, 238], "compon": [2, 5, 9, 10, 32, 218, 220, 231, 238, 242, 254, 255, 256, 286, 426, 460, 463, 475, 476, 481, 482, 493, 499, 500], "super": [2, 3, 4, 226, 233, 236, 498], "predictor": [2, 232, 233, 234, 236, 238], "predict": [2, 3, 9, 13, 32, 154, 185, 186, 217, 221, 225, 226, 227, 228, 234, 236, 257, 479, 494, 509, 510], "4x": [2, 3, 504], "more": [2, 3, 4, 5, 6, 85, 148, 154, 172, 217, 224, 249, 274, 285, 473, 477, 479, 481, 487, 488, 491, 492, 494, 495, 498, 499, 501, 505, 511, 513, 514], "sampl": [2, 5, 9, 32, 100, 126, 178, 192, 195, 200, 202, 203, 204, 208, 213, 217, 227, 228, 240, 257, 276, 325, 380, 445, 476, 477, 482, 491, 504, 510, 511, 512, 513], "effici": [2, 476, 479, 499, 502], "than": [2, 3, 4, 9, 32, 77, 85, 202, 217, 224, 477, 489, 494, 498, 499, 501, 504, 508, 510], "typic": [2, 9, 32, 85, 220, 230, 255, 480, 501], "one": [2, 5, 7, 9, 13, 32, 129, 141, 174, 175, 178, 191, 217, 220, 221, 224, 227, 228, 230, 233, 249, 252, 253, 257, 286, 439, 473, 476, 479, 480, 481, 486, 487, 488, 491, 492, 494, 495, 498, 499, 501, 503, 504, 507, 510, 511], "shot": [2, 5, 191, 220, 251, 253, 491, 501, 502], "figur": [2, 501], "first": [2, 3, 4, 7, 44, 70, 116, 149, 163, 166, 202, 216, 218, 220, 224, 357, 473, 477, 488, 492, 495, 503, 504, 505, 508, 509, 511, 512], "phase": [2, 160, 162, 255, 501, 504, 505, 511], "small": [2, 4, 224, 473, 511], "sub": [2, 68, 75, 76, 77, 78, 81, 82, 87, 88, 89, 92, 94, 95, 96, 98, 100, 101, 103, 105, 106, 107, 110, 112, 113, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 182, 220, 236, 474], "randomli": [2, 217, 241, 276, 510, 511], "valid": [2, 7, 38, 40, 68, 69, 70, 77, 129, 148, 204, 224, 236, 250, 251, 261, 396, 461, 477, 479, 486, 491, 493, 501, 504, 507], "measur": [2, 7, 9, 32, 38, 40, 43, 68, 70, 154, 182, 235, 236, 265, 463, 474, 479, 488, 494, 497, 506, 509, 511], "provid": [2, 7, 9, 32, 129, 172, 173, 178, 191, 213, 215, 217, 219, 220, 224, 233, 242, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 357, 377, 383, 430, 439, 463, 472, 473, 474, 475, 476, 480, 481, 482, 483, 484, 487, 491, 492, 495, 496, 503, 504, 509, 512, 513], "inner": 2, "loop": [2, 4, 265, 286, 486, 508, 511], "multi": [2, 97, 182, 220, 224, 235, 308, 476, 477, 491, 498, 501], "evolutionari": 2, "extens": [2, 7, 68, 255, 383, 444, 482, 486, 491, 495, 496, 502, 511, 512], "cycl": [2, 476], "continu": [2, 9, 32, 224, 249, 501], "until": [2, 488, 511], "conclud": 2, "count": [2, 3, 42, 239, 477], "met": [2, 173, 285, 486, 495, 504, 509, 511], "create_acc_predictor": [2, 232, 238], "accuraci": [2, 3, 4, 5, 9, 32, 68, 164, 172, 173, 182, 218, 219, 220, 228, 232, 233, 234, 236, 238, 242, 254, 256, 265, 272, 273, 274, 275, 276, 277, 279, 280, 285, 301, 315, 325, 334, 340, 342, 413, 437, 442, 445, 447, 463, 473, 474, 476, 480, 481, 482, 483, 487, 488, 494, 495, 497, 498, 499, 501, 502, 503, 506, 507, 508, 509, 511, 512, 513, 514], "create_macs_predictor": [2, 232, 238], "create_latency_predictor": [2, 232, 238], "latenc": [2, 232, 233, 234, 236, 238, 442, 487, 488, 508, 511], "mobilenetv3": [2, 235, 236], "static": [3, 4, 7, 68, 129, 148, 233, 255, 273, 308, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 377, 380, 382, 383, 385, 387, 388, 389, 390, 400, 414, 416, 421, 423, 428, 430, 435, 437, 442, 443, 445, 457, 461, 468, 469, 491, 511, 513], "quantiz": [3, 7, 22, 38, 40, 42, 43, 44, 67, 68, 69, 70, 112, 116, 118, 120, 126, 141, 164, 172, 173, 184, 185, 191, 214, 219, 220, 230, 255, 256, 263, 275, 276, 277, 279, 280, 285, 286, 287, 290, 291, 295, 296, 307, 312, 340, 342, 348, 426, 434, 445, 449, 473, 474, 476, 477, 481, 482, 486, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 499, 502, 507, 509, 510, 511, 512, 514], "involv": 3, "weight": [3, 4, 5, 7, 9, 32, 38, 67, 68, 70, 83, 84, 85, 148, 149, 163, 227, 228, 246, 249, 251, 253, 257, 261, 264, 353, 454, 472, 473, 480, 482, 486, 489, 494, 498, 501, 503, 504, 509, 511, 512, 513, 514], "float": [3, 4, 13, 38, 40, 43, 67, 68, 70, 129, 148, 180, 202, 214, 221, 222, 224, 225, 226, 233, 235, 236, 249, 251, 252, 253, 261, 264, 276, 299, 315, 324, 332, 333, 348, 354, 409, 414, 430, 431, 435, 437, 442, 444, 445, 452, 454, 455, 463, 472, 477, 483, 494, 503, 504, 510], "int": [3, 38, 40, 42, 43, 68, 70, 129, 148, 154, 180, 192, 201, 202, 203, 214, 217, 222, 224, 228, 233, 235, 236, 240, 265, 286, 302, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 339, 340, 341, 342, 343, 344, 345, 347, 391, 423, 430, 431, 433, 435, 436, 437, 438, 439, 444, 445, 447, 452, 454, 457, 469, 477, 494, 501, 503, 510], "feed": [3, 38, 68, 154, 201, 312, 479], "batch": [3, 4, 9, 32, 38, 40, 42, 70, 85, 184, 185, 191, 192, 194, 195, 200, 201, 220, 236, 242, 256, 272, 286, 314, 325, 442, 473, 476, 479, 488, 501, 506, 510, 513], "data": [3, 5, 7, 11, 38, 40, 42, 43, 44, 67, 70, 78, 126, 129, 148, 154, 164, 172, 173, 182, 183, 184, 185, 220, 236, 249, 255, 256, 263, 273, 274, 275, 276, 277, 279, 280, 285, 296, 297, 299, 302, 308, 309, 310, 312, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 357, 373, 374, 377, 380, 384, 389, 392, 393, 394, 396, 399, 401, 406, 410, 413, 415, 420, 423, 430, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 460, 465, 467, 468, 470, 473, 476, 477, 481, 482, 483, 486, 487, 488, 492, 494, 495, 504, 505, 508, 509, 510, 511], "comput": [3, 4, 13, 67, 85, 191, 218, 220, 221, 222, 224, 225, 226, 228, 234, 480, 482, 494, 495, 501, 504, 511], "distribut": [3, 5, 42, 149, 163, 184, 185, 192, 194, 195, 197, 198, 199, 200, 201, 218, 220, 242, 433, 479, 487, 492, 504, 507, 511], "activ": [3, 4, 5, 7, 38, 40, 43, 44, 68, 70, 137, 190, 279, 353, 472, 473, 480, 482, 483, 486, 487, 500, 503, 504, 509, 511, 512], "done": [3, 4, 479, 497, 501, 504], "observ": [3, 483, 508, 509, 511], "point": [3, 4, 44, 67, 214, 225, 226, 240, 265, 276, 472, 482, 483, 494, 504, 510, 511], "how": [3, 6, 7, 9, 32, 217, 218, 220, 235, 236, 249, 473, 474, 475, 477, 479, 481, 482, 489, 501, 504, 510, 511, 512], "infer": [3, 4, 5, 7, 9, 32, 42, 44, 141, 148, 219, 220, 254, 256, 261, 273, 472, 476, 479, 482, 488, 495, 498, 501, 502, 504, 509, 511], "time": [3, 4, 154, 217, 228, 265, 276, 296, 431, 437, 438, 442, 457, 481, 485, 498, 501, 502, 504, 508, 509, 510, 511], "simpl": [3, 5, 217, 473, 492, 508, 511], "techniqu": [3, 4, 5, 220, 491, 499, 501, 503, 504, 512], "would": [3, 129, 475, 488, 495, 504], "simpli": [3, 251, 481, 496], "divid": [3, 511], "rang": [3, 4, 7, 205, 206, 217, 224, 233, 286, 477, 479, 481, 483, 501, 504, 510], "256": [3, 180, 209, 474, 476, 477, 481, 510, 511, 513], "sophist": 3, "addit": [3, 85, 93, 159, 172, 286, 430, 473, 479, 488, 507], "step": [3, 4, 38, 40, 70, 116, 191, 220, 249, 251, 252, 253, 265, 286, 473, 475, 479, 480, 481, 495, 501, 503, 505, 508, 509, 511], "allow": [3, 4, 188, 276, 461, 473, 474, 479, 481, 483, 488, 494, 495, 503, 511, 512], "u": [3, 93, 149, 163], "instead": [3, 165, 166, 201, 296], "back": [3, 38, 40, 43, 68, 70, 217, 233], "everi": [3, 7, 40, 69, 90, 91, 93, 249, 251, 252, 501, 511], "signific": [3, 5, 502, 504], "speed": [3, 5, 487, 488, 502, 504], "up": [3, 5, 9, 32, 42, 93, 124, 217, 220, 236, 242, 250, 265, 334, 473, 481, 486, 487, 488, 491, 502, 503, 504, 508, 510, 512], "pre": [3, 172, 173, 202, 273, 274, 275, 276, 277, 279, 280, 285, 477, 479, 488, 495, 501, 502, 504, 509, 511, 513], "notabl": 3, "modif": [3, 7, 414, 476, 486], "enabl": [3, 5, 70, 251, 433, 473, 481, 482, 488, 495, 500, 501, 502, 505, 514], "floatfunct": 3, "quantstub": 3, "dequantstub": 3, "begin": [3, 191, 220, 242, 251, 252, 256, 272, 479, 501, 511], "end": [3, 4, 7, 129, 154, 191, 202, 216, 217, 220, 233, 251, 252, 256, 265, 272, 479, 486, 487, 488, 492, 498, 501, 509, 510, 511], "relu6": [3, 97, 486], "relu": [3, 38, 97, 144, 486, 509], "_make_divis": 3, "v": [3, 93, 488, 512], "divisor": 3, "min_valu": 3, "taken": [3, 172, 173, 273, 274, 275, 276, 277, 279, 280, 285], "origin": [3, 67, 159, 182, 202, 217, 220, 233, 249, 250, 251, 252, 299, 477, 488, 501, 504, 510, 512], "tf": [3, 5, 70, 154, 201, 202, 203, 204, 217, 261, 299, 473, 481, 496, 505, 510, 514], "repo": [3, 202, 477, 484, 514], "It": [3, 5, 7, 9, 32, 68, 76, 85, 172, 173, 190, 220, 226, 228, 233, 234, 240, 249, 254, 255, 273, 274, 275, 276, 277, 279, 280, 285, 473, 474, 479, 488, 501, 504, 508, 511, 512, 514], "ensur": [3, 42, 44, 217, 252, 276, 313, 345, 377, 380, 382, 389, 428, 473, 481, 483, 504, 510], "layer": [3, 7, 38, 40, 43, 68, 69, 70, 93, 183, 190, 249, 250, 252, 287, 289, 290, 296, 456, 476, 480, 491, 501, 507, 511], "channel": [3, 7, 149, 163, 180, 217, 236, 249, 377, 380, 389, 487, 491, 492, 501, 510, 513], "number": [3, 4, 68, 90, 91, 192, 200, 203, 214, 217, 225, 226, 228, 235, 239, 249, 276, 290, 291, 380, 433, 442, 445, 473, 477, 481, 483, 494, 501, 504, 508, 510, 511], "divis": 3, "seen": [3, 7, 296], "github": [3, 5, 202, 221, 222, 225, 226, 249, 252, 392, 394, 432, 473, 475, 477, 484, 487, 492, 493, 507, 514], "tensorflow": [3, 5, 7, 9, 32, 76, 98, 100, 104, 129, 154, 178, 183, 188, 201, 202, 203, 204, 207, 208, 209, 211, 212, 213, 215, 217, 219, 220, 222, 224, 227, 228, 229, 230, 254, 256, 257, 261, 273, 355, 356, 368, 369, 376, 422, 423, 424, 426, 473, 479, 481, 482, 484, 486, 487, 488, 491, 492, 493, 495, 496, 497, 501, 502, 503, 504, 508, 511, 512, 514], "blob": [3, 221, 222, 225, 226, 249], "master": [3, 221, 222, 225, 226, 249, 252], "research": [3, 493], "slim": [3, 224, 261, 496], "mobilenet": [3, 508, 513], "param": [3, 7, 44, 67, 68, 69, 70, 84, 90, 91, 93, 113, 114, 129, 148, 154, 182, 188, 192, 224, 227, 228, 257, 296, 316, 347, 444, 447, 496, 511], "new_v": 3, "max": [3, 43, 44, 67, 70, 149, 163, 217, 225, 226, 276, 454, 472, 473, 504, 510, 511], "2": [3, 4, 5, 7, 10, 67, 69, 70, 76, 97, 161, 182, 203, 224, 226, 228, 236, 245, 246, 251, 274, 275, 472, 477, 479, 481, 486, 487, 488, 491, 493, 494, 495, 498, 499, 500, 501, 504, 506, 507, 510, 511, 514], "round": [3, 4, 149, 163, 472, 483, 504], "down": [3, 85], "doe": [3, 4, 13, 221, 224, 233, 477, 483, 494, 507, 510, 511], "go": [3, 486, 503, 510], "10": [3, 5, 204, 224, 276, 423, 473, 477, 487, 492, 503, 506, 510], "convbnrelu": 3, "sequenti": [3, 200, 255, 499, 511], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "3": [3, 4, 5, 44, 69, 70, 93, 154, 178, 204, 208, 213, 215, 217, 224, 236, 435, 477, 479, 481, 486, 487, 488, 494, 495, 498, 501, 503, 504, 506, 510, 511, 513, 514], "stride": [3, 217, 510], "group": [3, 365, 491, 501, 509, 510, 511, 513], "pad": [3, 94, 95, 202, 217, 477, 510], "bia": [3, 70, 148, 149, 509], "fals": [3, 4, 7, 9, 32, 38, 40, 42, 43, 44, 68, 70, 86, 94, 95, 113, 116, 123, 129, 133, 140, 145, 149, 152, 153, 154, 173, 180, 182, 183, 184, 185, 190, 192, 194, 197, 198, 199, 201, 202, 204, 217, 224, 227, 228, 233, 234, 235, 236, 249, 257, 263, 285, 289, 365, 384, 430, 433, 438, 439, 444, 463, 469, 476, 477, 486, 494, 498, 503, 504, 509, 510, 511, 512], "batchnorm2d": 3, "momentum": [3, 251, 491, 501, 512], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 498], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 85], "dw": 3, "linear": [3, 67, 249, 479], "conv": [3, 38, 44, 116, 144, 503], "add": [3, 13, 44, 67, 75, 87, 129, 137, 154, 188, 202, 204, 221, 228, 250, 252, 255, 308, 314, 315, 317, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 346, 362, 444, 469, 473, 475, 477, 481, 486, 488, 494, 497, 498, 508, 509, 511], "skip_add": 3, "forward": [3, 4, 42, 183, 503, 504, 509], "x": [3, 42, 201, 217, 236, 276, 479, 481, 496, 501, 504, 509, 510], "els": [3, 42, 85, 86, 154, 200, 430, 444, 509], "num_class": [3, 228], "1000": [3, 235, 442, 488, 511, 512], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 5, 481, 513], "main": [3, 5, 172, 188, 252, 274, 285, 425, 461, 481, 504], "width": [3, 180, 217, 236, 249, 481, 504, 510, 512], "multipli": [3, 483], "adjust": [3, 4, 236, 504], "each": [3, 4, 7, 9, 32, 40, 43, 44, 68, 69, 70, 75, 76, 77, 78, 81, 82, 87, 88, 89, 92, 94, 95, 96, 98, 100, 101, 103, 105, 106, 107, 110, 112, 113, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 149, 153, 180, 200, 204, 207, 214, 217, 222, 224, 225, 226, 235, 236, 251, 261, 264, 265, 279, 290, 291, 473, 476, 477, 479, 483, 486, 498, 499, 501, 508, 509, 510, 511], "amount": 3, "structur": [3, 129, 251, 373, 491, 501, 504, 509, 513], "multipl": [3, 9, 32, 85, 188, 193, 194, 196, 202, 203, 205, 206, 207, 208, 209, 213, 215, 217, 229, 251, 274, 275, 430, 477, 499, 508, 511, 514], "turn": [3, 494], "off": [3, 90, 91, 93, 505], "block": [3, 233, 249, 252, 461, 491, 498, 501], "input_channel": 3, "32": [3, 9, 32, 224, 481, 489, 501, 506, 513], "last_channel": 3, "1280": 3, "c": [3, 93, 97, 204, 473, 477, 485, 487, 492], "n": [3, 93, 203, 217, 222, 249, 433, 477, 479, 487, 501, 510], "16": [3, 33, 488, 501, 506, 513], "6": [3, 5, 40, 473, 486, 487, 504, 513, 514], "24": [3, 33, 487, 506, 511, 513], "96": [3, 224, 487, 513], "160": 3, "320": 3, "onli": [3, 7, 9, 32, 40, 43, 44, 68, 70, 76, 79, 80, 81, 82, 83, 84, 85, 86, 93, 96, 97, 101, 103, 104, 105, 106, 107, 110, 113, 114, 123, 124, 127, 128, 149, 163, 182, 184, 185, 188, 202, 220, 230, 249, 251, 444, 454, 456, 457, 474, 476, 481, 486, 488, 492, 495, 503, 509, 511, 512], "check": [3, 4, 5, 42, 68, 85, 86, 129, 154, 173, 204, 220, 230, 250, 255, 285, 296, 335, 340, 377, 380, 382, 383, 385, 387, 388, 390, 396, 399, 414, 430, 431, 433, 438, 444, 446, 473, 475, 481, 488, 492], "element": [3, 44, 200, 224, 249, 252, 477, 491, 494, 501], "assum": [3, 7, 216, 224, 240, 486], "know": [3, 129, 184, 185, 218, 220, 242, 431, 481, 507], "len": [3, 9, 32, 217, 276, 477, 481, 501, 510], "rais": [3, 13, 85, 90, 91, 93, 104, 129, 183, 221, 224, 227, 228, 249, 250, 251, 257, 276, 444, 457, 501], "valueerror": [3, 13, 85, 90, 91, 93, 104, 129, 221, 224, 228, 485], "empti": [3, 224], "list": [3, 5, 7, 13, 38, 40, 42, 43, 44, 67, 68, 70, 76, 79, 129, 148, 154, 172, 173, 180, 182, 183, 195, 202, 216, 217, 220, 221, 222, 224, 225, 226, 228, 233, 235, 236, 240, 242, 249, 252, 261, 264, 265, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 290, 291, 308, 310, 312, 314, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 357, 360, 362, 363, 365, 377, 380, 383, 384, 387, 388, 389, 391, 396, 399, 401, 403, 406, 407, 410, 413, 423, 430, 435, 437, 438, 439, 442, 444, 445, 446, 447, 448, 450, 451, 452, 454, 456, 463, 472, 486, 487, 498, 503, 505, 509, 511], "got": [3, 154, 274, 275, 485, 488, 509], "format": [3, 9, 32, 38, 40, 43, 44, 67, 68, 70, 76, 154, 178, 202, 203, 204, 208, 213, 220, 224, 230, 233, 239, 399, 435, 477, 479, 481, 494, 495, 496, 497, 504, 514], "build": [3, 7, 42, 141, 231, 233, 238, 239, 261, 264, 314, 315, 317, 328, 329, 333, 357, 414, 423, 444, 461, 473, 482, 492, 496, 511], "featur": [3, 129, 169, 183, 202, 203, 214, 217, 256, 474, 475, 476, 478, 479, 488, 495, 496, 502, 507, 510], "invert": 3, "residu": 3, "output_channel": 3, "last": [3, 68, 70, 116, 172, 192, 249, 274, 275, 276, 277, 279, 280, 285, 414, 473, 495, 504, 511], "classifi": [3, 202, 228, 477, 479], "dropout": 3, "m": [3, 67, 93, 249, 479, 488, 513], "isinst": 3, "init": [3, 183, 477, 494, 498], "kaiming_normal_": 3, "mode": [3, 7, 37, 38, 40, 43, 67, 68, 70, 129, 182, 211, 220, 224, 261, 296, 314, 437, 473, 474, 488, 491, 504, 505], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 483, 503, 508, 511, 512, 513], "mean": [3, 4, 9, 32, 85, 93, 180, 192, 217, 224, 226, 228, 234, 236, 249, 265, 474, 476, 481, 483, 486, 494, 501, 504, 510, 511, 512], "fuse": [3, 4, 38, 42, 68, 70, 87, 88, 92, 93, 94, 95, 115, 116, 117, 118, 120, 144, 509], "bn": [3, 38, 85, 104, 513], "prior": [3, 42, 112, 511], "chang": [3, 104, 120, 149, 163, 251, 253, 296, 310, 315, 414, 436, 442, 475, 476, 481, 485, 494, 509, 510, 511], "numer": [3, 4, 228, 472, 487, 495, 502], "fuse_model": [3, 4], "type": [3, 7, 13, 38, 40, 42, 43, 44, 67, 68, 69, 70, 80, 83, 84, 85, 86, 93, 97, 108, 109, 115, 116, 117, 120, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 154, 159, 160, 162, 166, 173, 178, 183, 188, 192, 200, 202, 204, 208, 211, 212, 213, 215, 217, 220, 221, 222, 224, 227, 228, 230, 233, 235, 240, 243, 244, 245, 249, 251, 253, 255, 257, 259, 260, 261, 263, 264, 265, 271, 276, 285, 286, 289, 295, 308, 326, 327, 335, 336, 338, 340, 378, 430, 433, 435, 437, 440, 473, 477, 482, 486, 491, 495, 501, 504, 510, 512], "fuse_modul": 3, "true": [3, 4, 42, 85, 86, 108, 129, 152, 154, 173, 182, 192, 200, 202, 204, 205, 216, 217, 222, 224, 228, 233, 245, 249, 285, 394, 430, 433, 438, 439, 444, 477, 481, 486, 494, 498, 503, 504, 505, 509, 510, 511, 512], "idx": [3, 9, 32, 240, 477], "str": [3, 13, 38, 42, 43, 68, 129, 148, 160, 162, 178, 183, 188, 192, 202, 203, 204, 208, 211, 212, 213, 214, 215, 217, 221, 222, 224, 226, 227, 228, 233, 235, 236, 240, 245, 257, 259, 260, 264, 286, 289, 297, 298, 299, 302, 308, 309, 310, 312, 313, 314, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 339, 340, 345, 346, 347, 348, 353, 354, 357, 359, 360, 361, 362, 363, 365, 374, 375, 377, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 396, 398, 399, 401, 403, 406, 407, 410, 412, 413, 414, 415, 418, 419, 420, 423, 430, 432, 433, 435, 437, 438, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 460, 461, 468, 469, 477, 494, 503, 509, 510], "help": [3, 5, 9, 32, 79, 190, 230, 263, 312, 444, 476, 487, 496, 511, 514], "averagemet": 3, "store": [3, 9, 32, 44, 204, 224, 243, 244, 245, 249, 251, 489], "averag": [3, 224, 225, 226, 228, 479, 494, 498, 501, 511], "fmt": 3, "f": [3, 93, 479, 481, 504], "reset": [3, 13, 221, 227, 228, 257, 265, 457, 494], "val": [3, 70, 154, 176, 204, 250, 498], "avg": [3, 4, 504], "sum": [3, 228, 479], "updat": [3, 9, 13, 32, 33, 85, 97, 129, 221, 227, 228, 236, 249, 251, 257, 264, 299, 314, 315, 316, 317, 325, 328, 330, 332, 334, 340, 342, 343, 344, 347, 414, 437, 445, 448, 450, 454, 473, 476, 494, 500, 501, 511], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 42, 67, 113, 114, 129, 148, 183, 233, 250, 253, 361, 362, 476, 477, 479, 481, 495, 501, 509, 510, 512], "topk": [3, 474, 476, 481, 494], "over": [3, 4, 5, 178, 204, 208, 213, 224, 228, 491, 494, 503, 511], "k": [3, 228, 494, 501], "top": [3, 129, 217, 219, 220, 228, 242, 254, 256, 272, 273, 274, 275, 494, 510, 513], "specifi": [3, 40, 43, 44, 68, 69, 70, 129, 148, 172, 173, 182, 217, 219, 220, 224, 227, 228, 231, 234, 236, 238, 239, 242, 254, 255, 256, 257, 272, 273, 274, 275, 276, 277, 279, 280, 285, 295, 296, 312, 314, 317, 324, 325, 326, 328, 329, 330, 334, 335, 337, 338, 340, 342, 343, 347, 348, 349, 362, 394, 398, 399, 400, 416, 421, 437, 444, 457, 461, 473, 480, 481, 483, 486, 494, 498, 503, 504, 510, 511, 512], "no_grad": 3, "maxk": 3, "pred": [3, 154, 227, 228, 257, 494], "eq": 3, "view": [3, 5, 9, 32, 473, 475, 484, 487, 507, 514], "expand_a": 3, "re": [3, 276, 488, 511], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 204, 224, 233, 476, 477, 481, 488, 489, 503, 504, 510, 511, 512, 513], "criterion": [3, 4, 11, 68, 169, 185, 188, 218, 220, 256, 413, 452, 479, 488, 501, 504, 511, 512], "data_load": [3, 4, 7, 43, 70], "neval_batch": [3, 4], "top1": [3, 4, 236, 504], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 44, 180, 183, 206, 224, 228, 477, 486, 487, 494, 500, 503, 510, 512, 513, 514], "cnt": [3, 4, 479], "imag": [3, 4, 180, 203, 204, 207, 209, 214, 217, 224, 236, 442, 473, 477, 481, 488, 503, 509, 510, 513], "loss": [3, 4, 5, 169, 183, 191, 219, 220, 228, 242, 254, 256, 272, 273, 286, 479, 480, 481, 483, 487, 494, 495, 501, 504, 511, 512], "acc1": 3, "acc5": 3, "print": [3, 4, 228, 473, 479, 481, 494, 511], "load_model": 3, "model_fil": 3, "state_dict": [3, 481, 509], "load_state_dict": 3, "cpu": [3, 4, 115, 116, 117, 118, 126, 129, 148, 236, 475, 487, 491, 495, 500, 502, 503, 505, 509, 514], "print_size_of_model": 3, "temp": 3, "p": [3, 224, 473], "mb": [3, 444], "o": [3, 5, 93, 357, 475, 487, 500], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 261], "float_model_fil": 3, "start": [3, 70, 217, 221, 224, 235, 265, 438, 457, 492, 509, 510, 514], "min": [3, 44, 70, 149, 163, 472, 473, 504, 510], "per": [3, 7, 9, 32, 40, 43, 68, 69, 70, 182, 192, 201, 224, 236, 290, 291, 314, 473, 488, 500, 505, 513], "qconfig": [3, 4, 42, 509], "default_qconfig": 3, "prepar": [3, 4, 5, 42, 68, 191, 218, 220, 242, 254, 335, 340, 425, 477, 481, 504], "calibr": [3, 7, 9, 32, 38, 40, 42, 43, 68, 164, 172, 173, 219, 220, 254, 255, 256, 273, 275, 276, 277, 279, 280, 285, 290, 291, 453, 476, 489, 491, 504, 511, 512], "fusion": [3, 7, 40, 69, 93, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 486], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 93, 97, 233, 479, 489], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 437, 504], "minmaxobserv": 3, "reduce_rang": [3, 503], "dtype": [3, 67, 129, 148, 205, 206, 214, 217, 476, 477, 486, 503, 509, 510, 511, 512], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 509], "min_val": [3, 290, 291], "max_val": [3, 290, 291], "quantizedconvrelu2d": 3, "scale": [3, 4, 38, 44, 67, 70, 85, 149, 163, 180, 214, 217, 263, 472, 483, 504, 510], "15583468973636627": 3, "zero_point": [3, 44, 67, 263], "quantizedconv2d": [3, 70], "19358506798744202": 3, "74": [3, 487, 506, 513], "631847": 3, "300": [3, 476], "67": [3, 513], "significantli": [3, 495, 501], "lower": [3, 216, 217, 226, 444, 472, 480, 501, 502, 504, 510], "62": [3, 506, 513], "same": [3, 7, 70, 79, 154, 202, 217, 224, 242, 296, 474, 476, 477, 479, 481, 486, 500, 503, 504, 509, 510, 511], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 9, 32, 85, 245, 476, 480, 495, 502, 504, 505, 511, 512], "almost": 3, "decreas": [3, 122], "improv": [3, 9, 32, 475, 488, 501, 504, 505, 511, 513], "repeat": [3, 246, 511], "exercis": 3, "recommend": [3, 7, 9, 32, 185, 186, 476, 486, 501, 503, 511], "x86": [3, 495], "basi": 3, "histogram": [3, 287, 290, 296, 337, 340, 348, 482, 509], "collect": [3, 42, 70, 178, 184, 185, 186, 187, 189, 213, 215, 217, 221, 226, 227, 228, 257, 287, 290, 296, 297, 399, 420, 431, 433, 444, 445, 504, 509, 511], "pick": 3, "paramet": [3, 4, 9, 13, 32, 38, 40, 42, 43, 44, 61, 67, 68, 70, 79, 80, 81, 82, 83, 84, 85, 86, 93, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 123, 124, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 154, 159, 160, 162, 164, 165, 166, 169, 172, 173, 178, 180, 182, 183, 188, 192, 201, 202, 204, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 264, 265, 271, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 289, 290, 291, 295, 296, 308, 312, 316, 317, 335, 336, 337, 340, 346, 348, 357, 383, 401, 406, 410, 413, 425, 430, 435, 437, 438, 443, 444, 446, 456, 457, 473, 476, 477, 481, 483, 491, 494, 501, 504, 508, 510, 511, 512], "manner": [3, 479, 496], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 472], "jit": [3, 509], "script": [3, 37, 221, 222, 225, 226, 298, 299, 382, 399, 401, 403, 406, 407, 409, 410, 412, 413, 418, 481, 491, 502], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 487, 513], "increas": [3, 478, 491], "resnet50": [3, 5, 236, 481, 487, 488, 504, 508, 513], "qat": [4, 68, 220, 230, 480, 481, 482, 491, 497, 504], "simul": 4, "low": [4, 5, 7, 9, 32, 40, 69, 70, 172, 173, 205, 206, 219, 220, 229, 254, 256, 273, 274, 275, 276, 277, 279, 280, 285, 474, 477, 481, 482, 495, 502, 504, 511, 514], "precis": [4, 5, 7, 9, 32, 38, 40, 43, 68, 69, 70, 172, 173, 219, 220, 224, 226, 228, 229, 254, 256, 265, 273, 274, 275, 276, 277, 279, 280, 285, 312, 322, 325, 326, 335, 336, 337, 338, 339, 340, 345, 369, 398, 403, 405, 406, 407, 427, 445, 448, 450, 472, 473, 474, 480, 481, 482, 486, 491, 502, 503, 504, 511, 514], "dure": [4, 42, 70, 85, 233, 236, 249, 253, 255, 263, 439, 482, 495, 496, 498, 499, 501, 504, 509, 512], "backward": [4, 9, 32, 224, 286, 479, 481, 501, 504, 507], "mimic": [4, 504], "still": [4, 252, 504, 505], "thu": [4, 224, 504], "made": [4, 7, 93, 234, 236, 504, 507], "while": [4, 5, 7, 70, 251, 276, 473, 476, 488, 491, 495, 503, 504], "fact": [4, 504], "ultim": [4, 504], "yield": [4, 172, 173, 184, 185, 200, 273, 274, 275, 276, 277, 279, 280, 285, 504, 511], "either": [4, 173, 224, 285, 495, 499, 503, 504], "dynam": [4, 7, 85, 192, 255, 304, 476, 479, 482, 491, 502, 513], "training_func_for_nc": 4, "epoch": [4, 9, 32, 191, 218, 220, 242, 251, 252, 256, 272, 286, 479, 481, 501, 512], "30": [4, 5, 217, 474, 476, 487, 491, 506, 510, 513], "sgd": [4, 169, 188, 256, 503, 512], "lr": [4, 481], "0001": [4, 169, 256, 503], "nepoch": [4, 479], "train_load": [4, 481], "zero_grad": [4, 479, 481, 501], "break": [4, 479, 481], "freez": [4, 112, 501], "disable_observ": 4, "norm": 4, "varianc": [4, 149, 163], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 9, 32, 85, 251, 279, 437, 498, 501, 504, 507, 511], "alreadi": [4, 7, 182, 204, 216, 431, 457, 473, 477, 491], "implement": [4, 5, 9, 13, 32, 40, 43, 68, 69, 70, 75, 76, 77, 78, 81, 82, 87, 88, 89, 92, 94, 95, 96, 98, 100, 101, 103, 105, 106, 107, 110, 112, 113, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 172, 173, 178, 197, 200, 201, 202, 204, 208, 213, 221, 227, 228, 245, 249, 253, 257, 273, 274, 275, 276, 277, 279, 280, 285, 474, 476, 477, 507, 509, 511, 512, 514], "hook": [4, 68, 172, 183, 190, 191, 218, 220, 242, 274, 285, 289, 479, 501, 509], "prepare_qat": [4, 191, 220], "high": [4, 205, 206, 477, 487, 492, 502, 511], "accur": 4, "inc": [4, 5, 217, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 502, 503, 507], "switch": [4, 108, 509], "run": [4, 5, 7, 37, 38, 40, 42, 44, 68, 129, 154, 172, 173, 182, 201, 216, 220, 233, 236, 250, 251, 273, 274, 275, 276, 277, 279, 280, 285, 395, 438, 459, 460, 461, 473, 475, 481, 482, 485, 486, 488, 495, 501, 502, 504, 507, 508, 509, 511, 512, 514], "better": [4, 9, 32, 70, 120, 172, 173, 240, 273, 274, 275, 276, 277, 279, 280, 285, 480, 494, 495, 501, 502, 504, 508, 511], "match": [4, 129, 216, 224, 225, 479, 483], "zero": [4, 44, 67, 217, 228, 249, 251, 252, 472, 501, 510, 511], "fine": [4, 5, 202, 477, 501, 502, 504], "num_train_batch": 4, "20": [4, 5, 217, 235, 487, 500, 506, 510, 512, 513], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 113, 114, 115, 116, 117, 118, 121, 126, 129, 140, 145, 148, 153, 183, 236, 479, 501, 503, 514], "quantized_model": 4, "api": [4, 8, 11, 15, 30, 31, 43, 68, 93, 98, 129, 219, 220, 224, 254, 256, 273, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 460, 461, 476, 488, 490, 491, 497, 507, 508, 511], "q_func": [4, 7, 9, 32, 38, 40, 43, 68, 70, 172, 173, 220, 254, 255, 274, 275, 276, 277, 279, 280, 285, 511], "eval_dataload": [4, 9, 32, 172, 173, 191, 219, 220, 230, 255, 273, 274, 275, 276, 277, 279, 280, 285, 476, 489, 511], "val_load": [4, 504], "timeout": [4, 173, 285, 454, 483, 503, 508, 511, 512], "constrain": 4, "71": [4, 487, 513], "close": [4, 149, 163], "debug": [4, 350, 351, 355, 473, 482, 511], "analyz": [4, 129, 148, 261, 501, 508, 509], "limit": [4, 276, 475, 479, 482, 501, 509], "sinc": [4, 13, 219, 220, 221, 242, 254, 256, 272, 273, 414, 479, 483, 494, 499], "actual": [4, 70, 228, 481], "arithmet": [4, 486], "easili": [4, 7, 498, 501], "relat": [4, 218, 220, 224, 242, 249, 256, 272, 289, 376, 379, 381, 386, 462, 465, 466, 467, 470, 512], "refer": [4, 5, 7, 9, 13, 32, 202, 221, 222, 227, 228, 249, 251, 252, 257, 474, 477, 480, 481, 487, 489, 493, 494, 495, 498, 501, 503, 504, 507, 510, 511], "librari": [5, 9, 32, 185, 220, 472, 482, 487, 492, 502, 514], "popular": [5, 7, 9, 32, 220, 477, 479, 501, 504, 511, 514], "compress": [5, 191, 220, 242, 286, 479, 491, 498, 499, 501, 502, 504, 514], "mainstream": 5, "deep": [5, 7, 9, 32, 166, 472, 476, 487, 491, 492, 495, 502, 504, 511, 514], "learn": [5, 7, 9, 32, 472, 476, 477, 482, 487, 489, 491, 492, 495, 501, 502, 504, 509, 511, 514], "framework": [5, 7, 9, 32, 38, 40, 43, 68, 70, 174, 175, 178, 183, 184, 185, 188, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 219, 220, 227, 228, 229, 236, 254, 255, 256, 257, 259, 260, 261, 263, 264, 273, 289, 298, 312, 322, 338, 340, 345, 347, 349, 369, 377, 380, 382, 383, 389, 396, 398, 403, 407, 412, 416, 427, 433, 444, 445, 472, 473, 476, 477, 481, 482, 483, 484, 487, 488, 489, 491, 492, 494, 495, 501, 502, 504, 510, 511, 512, 513, 514], "mxnet": [5, 7, 9, 32, 42, 178, 197, 201, 204, 207, 208, 211, 212, 213, 215, 217, 219, 220, 227, 228, 254, 256, 257, 261, 273, 484, 486, 487, 491, 495, 496, 503, 511, 512, 514], "formerli": [5, 487, 514], "known": [5, 184, 185, 276, 501, 509, 511, 514], "deliv": [5, 502, 514], "unifi": [5, 7, 9, 32, 174, 175, 178, 219, 220, 254, 256, 273, 437, 476, 489, 491, 496, 514], "across": [5, 9, 32, 44, 219, 220, 229, 254, 256, 273, 478, 501, 514], "technologi": [5, 204, 500, 514], "prune": [5, 22, 148, 191, 220, 243, 244, 245, 247, 249, 250, 251, 253, 255, 256, 264, 286, 426, 434, 449, 481, 482, 486, 491, 499, 502, 504, 512, 514], "knowledg": [5, 183, 218, 220, 480, 491, 496, 512, 514], "distil": [5, 22, 169, 183, 190, 191, 220, 256, 286, 491, 499, 512, 514], "driven": [5, 9, 32, 495, 498, 509, 514], "strategi": [5, 7, 10, 38, 40, 42, 43, 68, 70, 204, 220, 254, 312, 332, 427, 444, 454, 481, 482, 491, 502, 503, 504, 505, 507, 512, 514], "quickli": [5, 9, 32, 511, 514], "gener": [5, 7, 38, 42, 67, 70, 113, 114, 172, 173, 178, 182, 192, 201, 204, 205, 206, 207, 213, 215, 217, 220, 221, 229, 233, 242, 249, 252, 255, 273, 274, 275, 276, 277, 279, 280, 285, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 335, 340, 346, 401, 406, 410, 412, 413, 418, 419, 420, 429, 438, 469, 473, 476, 479, 488, 494, 495, 498, 500, 501, 502, 504, 505, 509, 510, 511, 514], "predefin": [5, 302, 335, 339, 340, 444, 514], "sparsiti": [5, 9, 32, 246, 249, 251, 252, 253, 261, 264, 477, 482, 491, 501, 513, 514], "goal": [5, 164, 173, 218, 219, 220, 242, 254, 256, 272, 273, 285, 445, 499, 504, 511, 514], "teacher": [5, 169, 183, 218, 220, 256, 479, 480, 513, 514], "student": [5, 183, 190, 202, 218, 220, 477, 479, 480, 513, 514], "ai": [5, 482, 502, 505], "oneapi": [5, 482, 487, 492, 502], "analyt": [5, 482, 487, 492, 502], "visit": [5, 513], "websit": [5, 487, 492], "io": [5, 476], "7": [5, 474, 476, 485, 486, 487, 488, 492, 504, 507, 511, 514], "releas": [5, 9, 32, 432, 444, 487, 490, 492], "binari": [5, 154, 228, 485, 494, 514], "stabl": [5, 473, 492, 502], "basic": [5, 216, 231, 238, 249, 491, 492, 503, 508], "pip": [5, 473, 481, 485, 487, 492, 507], "Or": [5, 251], "full": [5, 9, 32, 67, 182, 202, 203, 204, 220, 473, 477, 485, 487, 492, 493], "nightli": [5, 473, 492], "git": [5, 473, 487, 492], "clone": [5, 473, 487, 492], "cd": [5, 473, 481, 487, 492], "r": [5, 67, 93, 149, 163, 236, 473, 487, 492, 500, 504, 513], "txt": [5, 207, 438, 473, 477, 487, 492], "pypi": [5, 473, 492], "found": [5, 9, 32, 218, 220, 231, 232, 238, 239, 263, 276, 429, 444, 461, 495, 511], "guid": [5, 202, 477, 479, 482, 487, 492], "fp32": [5, 7, 38, 40, 68, 69, 70, 115, 117, 149, 163, 172, 173, 228, 274, 275, 276, 277, 279, 280, 285, 295, 348, 482, 486, 487, 494, 495, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513], "wget": [5, 488], "storag": [5, 224, 488, 494], "googleapi": [5, 488], "v1_6": [5, 488], "mobilenet_v1_1": 5, "0_224_frozen": 5, "pb": [5, 9, 32, 70, 261, 273, 385, 388, 399, 481, 488, 496, 509, 513], "dummi": [5, 205, 206, 228, 340, 344, 446, 473, 477, 488, 494], "shape": [5, 129, 148, 180, 205, 206, 217, 224, 249, 369, 376, 377, 380, 389, 391, 426, 473, 477, 486, 488, 510], "224": [5, 180, 236, 474, 476, 477, 481, 488, 510, 511, 512], "calib_dataload": [5, 9, 32, 184, 185, 220, 254, 255, 273, 476, 477, 489, 494, 504], "dataload": [5, 7, 9, 15, 32, 33, 38, 40, 42, 43, 44, 68, 70, 172, 173, 178, 182, 185, 191, 202, 213, 218, 220, 230, 242, 254, 255, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 289, 297, 302, 308, 312, 322, 335, 338, 340, 345, 347, 369, 410, 420, 423, 426, 434, 444, 445, 449, 473, 477, 481, 488, 489, 494, 495, 497, 504, 509, 510, 511, 512], "search": [5, 13, 22, 93, 165, 172, 173, 219, 220, 221, 231, 232, 233, 235, 236, 238, 239, 240, 241, 254, 256, 273, 276, 277, 280, 335, 336, 363, 491, 494, 502, 509, 511], "jupyt": 5, "lab": 5, "manag": [5, 233, 234, 235, 236, 313, 345, 347, 370, 428, 443], "click": [5, 473, 491, 502, 509], "12": [5, 473, 487, 506], "onnxruntim": [5, 7, 43, 198, 220, 229, 352, 356, 483, 491, 503], "raw": [5, 203, 207, 210, 494, 511], "vision": 5, "classif": [5, 202, 217, 228, 252, 479, 494, 502], "resnet": [5, 481, 488, 513], "v1": [5, 9, 32, 33, 34, 35, 70, 154, 225, 226, 228, 261, 481, 494, 496, 507, 508, 513], "inc_bench": [5, 256, 426, 473], "xeon": [5, 487, 488, 493, 495, 500, 502, 504, 505, 506, 513], "scalabl": [5, 487, 488, 495, 500, 502, 504, 505, 506, 513], "skylak": [5, 487], "cascad": [5, 487, 488], "lake": [5, 487, 488, 495, 502], "cooper": [5, 487, 495], "icelak": [5, 487], "futur": [5, 85, 172, 173, 184, 185, 275, 276, 277, 279, 280, 285, 487, 491, 495, 497], "sapphir": [5, 487], "rapid": [5, 487], "center": [5, 6, 217, 510, 511], "flex": 5, "seri": [5, 180, 510], "amd": [5, 491, 513], "arm": [5, 491, 513], "nvidia": [5, 491, 501, 504, 513], "cento": [5, 438, 487], "ubuntu": [5, 500], "04": [5, 435, 487, 500, 513], "11": [5, 35, 435, 473, 488, 494, 495, 506], "variabl": [5, 182, 204, 220, 229, 235, 276, 433, 457, 473, 514], "tf_enable_onednn_opt": [5, 473], "onednn": [5, 472, 514], "default": [5, 7, 13, 38, 68, 70, 121, 129, 148, 154, 166, 169, 172, 173, 180, 183, 191, 192, 194, 202, 203, 204, 214, 217, 220, 221, 224, 227, 228, 230, 250, 256, 257, 261, 274, 275, 276, 277, 279, 280, 285, 296, 316, 318, 319, 321, 323, 326, 327, 331, 353, 354, 357, 374, 384, 433, 435, 446, 447, 451, 452, 473, 474, 476, 477, 483, 486, 491, 494, 497, 498, 503, 505, 508, 510, 511, 512], "420": [5, 491], "speedup": [5, 491, 504], "geomean": [5, 491], "2x": [5, 491, 500], "vnni": [5, 491, 503, 504], "minim": [5, 149, 163, 276, 479, 494, 501, 504, 511], "overview": 5, "dive": [5, 486, 487], "mix": [5, 7, 70, 274, 405, 406, 407, 450, 482, 491], "orchestr": [5, 286, 491], "benchmark": [5, 11, 38, 40, 70, 184, 185, 220, 255, 256, 265, 315, 322, 325, 334, 340, 342, 345, 346, 369, 426, 427, 437, 442, 459, 464, 476, 482, 488, 496, 497, 511, 512, 513], "convers": [5, 7, 77, 104, 220, 230, 482, 495, 504, 505], "tensorboard": [5, 7, 38, 40, 43, 68, 70, 286, 289, 482, 511], "coder": [5, 491, 502], "topic": 5, "adaptor": [5, 10, 191, 220, 289, 482, 491, 505, 507, 509, 511], "nov": [5, 502], "2022": [5, 33, 34, 35, 513], "fast": [5, 502], "achiev": [5, 9, 32, 219, 220, 254, 256, 273, 482, 494, 499, 501, 502, 504, 509, 511], "sota": [5, 502], "diffus": [5, 502], "few": [5, 473, 502, 511], "innov": [5, 502], "oct": [5, 502], "acceler": [5, 479, 501, 502, 505, 511], "new": [5, 9, 32, 42, 67, 79, 129, 141, 154, 178, 182, 192, 204, 213, 215, 217, 249, 250, 253, 255, 263, 296, 339, 340, 344, 456, 474, 475, 481, 482, 495, 502, 504, 507, 508, 510, 512], "plug": [5, 502], "wa": [5, 7, 148, 414, 473, 502, 511], "twitter": [5, 502], "linkedin": [5, 502], "zone": [5, 502], "hug": [5, 502], "land": [5, 502], "gcp": [5, 502], "aw": [5, 502, 513], "azur": [5, 502], "marketplac": [5, 502], "guidelin": [5, 6, 490], "legal": [5, 490], "secur": [5, 500, 502], "send": [5, 414, 456, 461, 475], "your": [5, 200, 202, 224, 473, 474, 475, 477, 481, 493, 508, 509, 511], "resum": [5, 172, 173, 274, 275, 276, 277, 279, 280, 285, 286], "work": [6, 9, 32, 219, 220, 242, 254, 256, 273, 476, 479, 501, 505, 507, 509], "resolv": 6, "solut": [7, 9, 32, 149, 163, 233, 485, 502, 511], "onnx": [7, 9, 32, 43, 44, 67, 198, 259, 260, 264, 286, 299, 399, 482, 484, 486, 487, 491, 495, 496, 502, 503, 504, 514], "runtim": [7, 9, 32, 438, 482, 483, 484, 486, 487, 491, 503, 504, 514], "bridg": [7, 491], "vanilla": [7, 491], "10004": [7, 479, 486, 491, 495, 499, 503, 512], "complet": [7, 86, 473, 511, 512, 513], "subclass": [7, 38, 61, 160, 162, 178, 188, 197, 201, 204, 208, 211, 212, 213, 215, 217, 227, 228, 240, 243, 244, 245, 249, 251, 253, 257, 265, 271, 285, 511], "packag": [7, 9, 32, 304, 311, 316, 318, 319, 321, 322, 323, 326, 327, 330, 331, 350, 351, 355, 358, 364, 366, 369, 370, 376, 395, 397, 402, 405, 408, 409, 411, 417, 422, 426, 459, 473, 485, 487, 492, 507, 511], "adaptor_registri": [7, 38], "abc": [7, 226, 377, 437, 509, 511], "abcadaptor": 7, "framework_specific_info": [7, 38, 40, 43, 68, 70], "tune_cfg": [7, 38, 40, 42, 43, 68, 70], "postprocess": [7, 9, 32, 38, 40, 43, 68, 70, 178, 182, 185, 213, 215, 217, 219, 220, 230, 254, 255, 256, 447, 474, 476, 509, 510], "query_fw_cap": [7, 38, 40, 43, 68, 70, 511], "query_fused_pattern": [7, 38], "awar": [7, 9, 32, 38, 40, 43, 68, 70, 174, 175, 178, 191, 220, 230, 249, 255, 480, 481, 482, 491, 495, 497, 499, 513], "he": 7, "intersect": [7, 228, 494], "graph": [7, 9, 32, 43, 44, 68, 70, 73, 79, 80, 81, 82, 83, 84, 85, 86, 93, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 123, 124, 127, 128, 129, 141, 148, 149, 152, 153, 154, 201, 219, 256, 259, 260, 261, 263, 264, 303, 305, 369, 377, 380, 388, 389, 391, 401, 402, 403, 408, 409, 423, 424, 426, 445, 448, 460, 477, 479, 481, 482, 489, 494, 496, 504, 505, 509], "decid": [7, 222, 251, 274, 275, 279, 357, 483, 507, 511], "besid": [7, 475, 479, 499], "introduc": [7, 97, 482, 486, 501, 504, 507], "describ": [7, 43, 68, 70, 236, 473, 486, 509], "op": [7, 38, 40, 43, 44, 68, 69, 70, 79, 83, 85, 88, 89, 92, 93, 94, 95, 97, 104, 108, 109, 112, 115, 116, 117, 118, 120, 126, 129, 148, 149, 152, 154, 274, 275, 279, 290, 291, 337, 340, 348, 353, 354, 362, 460, 473, 486, 488, 495, 504, 505, 507, 509, 511, 512], "sequenc": [7, 13, 70, 86, 202, 216, 217, 221, 222, 226, 249, 477, 486, 510], "past": 7, "abov": [7, 76, 224, 474, 488, 501], "hidden": [7, 249, 444, 501], "corner": [7, 217, 510], "effect": [7, 501], "mainten": 7, "difficult": 7, "correspond": [7, 9, 13, 32, 70, 202, 221, 224, 228, 249, 251, 255, 276, 486, 501, 503, 504, 508, 511], "abil": [7, 476, 486], "clear": [7, 13, 200, 221, 227, 228, 236, 257, 486, 494], "fragment": 7, "field": [7, 9, 32, 129, 148, 204, 224, 255, 473, 474, 481, 483, 488, 511, 512], "enumer": [7, 42, 67, 240, 286, 296, 300, 398, 404, 427, 481, 501, 509], "scenario": [7, 9, 32, 37, 312, 473, 474, 479, 488, 501], "hardwar": [7, 40, 69, 433, 479, 488, 491, 495, 500, 501, 502, 503], "doesn": [7, 129, 217, 255, 443, 474, 476, 481, 512], "bf16": [7, 40, 69, 104, 115, 117, 486, 488, 495, 505, 511], "granular": [7, 40, 69, 486, 491, 501, 511, 512], "scheme": [7, 40, 67, 69, 461, 476, 486, 511, 512], "semant": [7, 486], "pattern": [7, 38, 40, 69, 70, 84, 85, 93, 116, 120, 126, 129, 144, 204, 220, 243, 247, 251, 256, 337, 340, 353, 362, 363, 437, 460, 477, 486, 491, 499, 503, 513], "abstract": [7, 9, 32, 38, 40, 69, 79, 80, 81, 82, 83, 84, 85, 86, 96, 101, 103, 104, 105, 106, 107, 110, 113, 114, 123, 124, 127, 128, 183, 217, 218, 219, 220, 227, 228, 239, 241, 245, 249, 253, 254, 256, 257, 259, 260, 261, 263, 264, 265, 273, 285, 302, 377, 388, 389, 410, 419, 437, 460, 489], "querybackendcap": [7, 40, 43, 68, 69, 70], "tensorflowqueri": [7, 70], "look": [7, 486, 494, 498, 512], "microsoft": 7, "mla": [7, 472], "kernel": [7, 433, 500, 501, 511], "becom": [7, 85], "integr": [7, 154, 183, 473], "explor": 7, "attribut": [7, 9, 32, 67, 85, 129, 148, 159, 165, 166, 191, 254, 364, 365, 369, 426, 442, 486, 489, 495, 503, 512], "whether": [7, 42, 43, 44, 68, 154, 180, 192, 200, 202, 217, 218, 220, 222, 224, 228, 242, 249, 251, 296, 399, 477, 494, 510], "qlinear": [7, 204, 211, 228, 513], "qdq": [7, 286, 491, 504], "integ": [7, 218, 220, 224, 228, 240, 249, 251, 253, 290, 291, 482, 504, 511], "qtype": [7, 67], "choic": [7, 202, 473, 477, 494], "float32": [7, 44, 205, 206, 217, 224, 442, 474, 477, 504, 510], "uint8": [7, 67, 214, 224, 290, 291, 472, 477, 486, 503, 504, 510, 511, 512], "node": [7, 42, 44, 67, 70, 73, 76, 77, 78, 79, 85, 86, 87, 90, 91, 93, 97, 109, 122, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 154, 259, 260, 261, 263, 264, 346, 359, 360, 361, 362, 363, 364, 369, 377, 380, 387, 388, 389, 423, 424, 426, 473, 481, 509], "exclud": [7, 109], "three": [7, 97, 202, 252, 473, 476, 488, 492, 495, 499, 504, 505, 508, 509, 511], "onnxrt": [7, 178, 202, 204, 211, 212, 213, 215, 217, 227, 228, 257, 351, 352, 367, 369, 376, 426], "onnxrt_qlinearopsadaptor": [7, 43], "dump_elapsed_tim": [7, 296], "recov": [7, 40, 43, 70, 296, 480], "q_config": [7, 40, 43, 69, 70], "inspect_tensor": [7, 38, 40, 43, 68, 70], "op_list": [7, 38, 40, 43, 68, 70, 279, 509], "iteration_list": [7, 38, 40, 43, 68, 70], "inspect_typ": [7, 38, 40, 43, 68, 70, 348], "save_to_disk": [7, 38, 40, 43, 68, 70], "save_path": [7, 40, 43, 70, 259, 260, 264, 286, 496], "quantization_cfg": [7, 40, 43, 70], "set_tensor": [7, 38, 40, 43, 68, 70], "tensor_dict": [7, 38, 40, 43, 68, 70], "input_graph": [7, 43, 140, 141, 145, 148, 149, 298, 403, 407, 412, 419], "fp32_baselin": [7, 40, 43, 68, 70, 289], "diagnosis_help": 7, "fp32_model": [7, 279, 296, 476], "int8_model": 7, "deploi": [9, 32, 479, 511, 514], "recip": [9, 32, 219, 220, 254, 256, 273, 482, 511], "product": [9, 32, 482, 491, 495, 500, 502, 504, 508, 511], "memori": [9, 32, 38, 68, 97, 219, 220, 242, 254, 256, 272, 273, 476, 480, 482, 495, 498, 501, 504, 511], "usag": [9, 32, 201, 220, 224, 230, 255, 444, 473, 477, 481, 482, 484, 487, 488, 494, 497, 498, 503, 510], "intend": [9, 32, 475], "cross": [9, 32, 188, 227, 228, 257, 489, 511], "One": [9, 32, 473, 476, 481, 491, 501, 502], "compat": [9, 32, 70, 104, 154, 224, 233, 261, 481, 487, 496, 507], "locat": [9, 32, 217, 474, 481, 504, 507, 510, 511, 512], "major": [9, 32, 489, 504], "concept": [9, 32, 489, 508], "those": [9, 32, 97, 279, 296, 479, 488, 489, 499, 501, 504, 511], "case": [9, 32, 93, 97, 182, 201, 216, 217, 219, 220, 228, 242, 254, 255, 256, 272, 273, 435, 439, 444, 473, 474, 476, 479, 481, 486, 489, 494, 498, 501, 502, 504, 510, 512], "whose": [9, 32, 83, 108, 109, 250, 489, 501, 511], "style": [9, 32, 85, 195, 209, 475, 477, 489], "rather": [9, 32, 85, 489], "refin": [9, 32, 489], "__call__": [9, 32, 178, 211, 212, 213, 476], "properti": [9, 32, 129, 182, 183, 191, 192, 194, 202, 204, 218, 219, 220, 227, 228, 229, 230, 239, 242, 254, 255, 257, 259, 260, 261, 263, 264, 297, 313, 345, 352, 356, 361, 362, 365, 377, 380, 385, 389, 398, 401, 406, 410, 413, 420, 430, 437, 438, 439, 442, 447, 451, 454, 456, 457, 493, 500], "user_postprocess": [9, 32, 185, 189], "eval_func": [9, 32, 172, 173, 191, 219, 220, 230, 255, 273, 274, 275, 276, 277, 279, 280, 285, 474, 476, 477, 481, 495, 504, 511, 512], "templat": [9, 32, 252, 256, 317, 335, 340, 426, 434, 470, 473, 511], "understand": [9, 32, 504, 509], "most": [9, 32, 228, 473, 495, 501, 504, 511], "helloworld": [9, 32, 477, 510], "__getitem__": [9, 32, 178, 200, 204, 208, 213, 215, 217, 474, 476, 477], "singl": [9, 32, 195, 202, 216, 217, 224, 233, 235, 251, 253, 276, 330, 346, 365, 430, 463, 477, 501], "tupl": [9, 32, 42, 68, 129, 172, 173, 180, 183, 214, 217, 224, 233, 236, 273, 274, 275, 276, 277, 279, 280, 285, 363, 394, 444, 463, 477, 494, 501, 510], "collat": [9, 32], "custom_metr": [9, 32, 489], "mini": [9, 32, 38, 40, 70, 513], "calcul": [9, 32, 44, 70, 183, 205, 206, 225, 226, 236, 246, 249, 251, 252, 265, 279, 287, 290, 348, 437, 442, 477, 494, 498, 501, 504, 508, 511, 512], "invok": [9, 32, 224], "onc": [9, 32, 85, 129, 154, 188, 253, 473, 476, 502], "scalar": [9, 32, 172, 173, 273, 274, 275, 276, 277, 279, 280, 285, 290, 291, 494, 495, 504], "accuracy_criterion": [9, 32, 483, 498, 503, 508, 511, 512], "higher_is_bett": [9, 32, 494, 498, 512], "line": [9, 32, 437, 438, 457, 473, 481, 491, 509], "cal_dl": [9, 32], "dir": [9, 32, 68, 159, 202, 295, 477, 485, 489], "kera": [9, 32, 93, 188, 261, 369, 376, 386, 481, 496], "frozen": [9, 32, 70, 79, 261, 273, 385, 388, 473, 496], "checkpoint": [9, 32, 295, 496], "gluon": [9, 32, 42, 273, 496], "hybirdblock": [9, 32, 273], "instanti": [9, 32, 499], "custom": [9, 32, 68, 233, 255, 295, 335, 340, 479, 482, 501, 508], "directli": [9, 32, 201, 224, 228, 250, 494, 503, 504, 509], "execut": [9, 32, 37, 40, 43, 68, 70, 73, 76, 152, 191, 218, 220, 231, 232, 238, 242, 251, 254, 255, 273, 289, 295, 297, 298, 299, 314, 325, 328, 334, 340, 342, 343, 399, 401, 403, 406, 407, 410, 412, 413, 415, 420, 423, 427, 430, 438, 439, 460, 473, 479, 481, 482, 488, 495, 499, 501, 504, 513], "contain": [9, 32, 38, 40, 43, 44, 68, 70, 79, 90, 91, 93, 97, 129, 148, 154, 164, 172, 173, 202, 203, 204, 218, 219, 220, 224, 225, 226, 230, 233, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 256, 272, 273, 274, 275, 276, 277, 279, 280, 285, 295, 300, 304, 311, 316, 318, 319, 321, 322, 323, 326, 327, 330, 331, 335, 340, 345, 350, 351, 355, 358, 364, 369, 370, 376, 395, 402, 404, 405, 408, 409, 411, 417, 422, 426, 430, 438, 476, 477, 479, 491, 494, 501, 509, 511], "hyper": [9, 32, 512], "reserv": [9, 32, 172, 173, 191, 220, 255, 275, 276, 277, 279, 280, 285], "special": [9, 32, 487, 494, 498], "had": [9, 32], "leav": [9, 32], "scaler": [9, 32], "some": [9, 32, 172, 191, 202, 220, 250, 274, 285, 444, 473, 483, 487, 492, 494, 498, 501, 504, 505, 509, 511], "effort": [9, 32], "on_epoch_begin": [9, 32, 191, 220, 242, 251, 252, 256, 272, 286, 289, 501], "on_step_begin": [9, 32, 191, 220, 242, 251, 252, 256, 272, 289, 501], "batch_id": [9, 32, 191, 220, 256, 272], "on_step_end": [9, 32, 191, 220, 242, 251, 252, 256, 272, 286, 289, 501], "on_epoch_end": [9, 32, 191, 220, 242, 251, 252, 256, 272, 286, 289, 479, 501], "proof": [9, 32], "magnitud": [9, 32, 228, 491, 501, 513], "To": [9, 32, 67, 224, 245, 249, 253, 435, 473, 475, 481, 495, 503, 505, 507, 512], "b_dataload": [9, 32, 182, 220, 474, 497], "experiement": 10, "deprec": [10, 218, 220, 444, 510], "bilingu": [13, 221], "understudi": [13, 221], "qualiti": [13, 221], "text": [13, 216, 217, 221, 226, 252, 493, 502, 510, 513], "machin": [13, 221, 310, 473, 487, 492, 502, 509], "translat": [13, 70, 221, 222, 233, 236], "natur": [13, 221], "anoth": [13, 38, 70, 129, 217, 220, 221, 230, 286, 476, 479, 497, 510, 511], "approxim": [13, 221, 222, 494], "glue": [13, 221, 228, 477, 494], "word": [13, 216, 221, 488, 494, 513], "piec": [13, 216, 221, 494], "decod": [13, 221, 494, 510], "id": [13, 33, 34, 35, 182, 216, 221, 223, 224, 225, 226, 314, 315, 317, 318, 319, 321, 324, 325, 326, 327, 328, 330, 332, 333, 361, 362, 365, 430, 494, 508, 511], "token": [13, 202, 213, 215, 217, 220, 221, 222, 457, 461, 473, 477, 494, 508, 510, 511], "By": [13, 37, 221, 494, 496], "ngram": [13, 221, 494], "breviti": [13, 221, 222, 494], "penalti": [13, 221, 222, 494], "beam": [13, 221, 494], "cach": [13, 202, 221, 378, 461, 485, 504], "error": [13, 221, 228, 234, 255, 429, 456, 494, 511], "occur": [13, 221], "length": [13, 202, 217, 221, 224, 477, 494, 504, 510], "bleu_scor": [13, 221, 222], "schedul": [22, 220, 247, 251, 256, 286, 499], "mixedprecis": [22, 220, 229, 305, 406, 450, 495], "modelconvers": [22, 220, 230, 497], "architectur": [22, 182, 231, 232, 238, 239, 241, 479, 487, 492, 501, 502, 514], "na": [22, 165, 220, 256, 261, 491], "14": [33, 34, 286, 487, 506, 513], "revis": [33, 34, 35], "6ece06672ed3": 33, "6f0d0f71d92e": [33, 34], "date": [33, 34, 35, 414], "08": [33, 217, 506, 510, 513], "31": [33, 487, 513], "07": [33, 34, 506, 512, 513], "229939": 33, "update_dataload": 33, "db_session": [33, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 342, 344, 347], "sqlalchemi": [33, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 342, 344, 345, 347, 485, 492], "orm": [33, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 342, 344, 347], "session": [33, 154, 201, 261, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 342, 344, 345, 347, 509], "databas": [33, 204, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 414, 428, 443], "update_transform": 33, "13": [34, 35, 273, 473, 487, 506, 513], "9e89549a08c8": [34, 35], "29": [34, 487, 513], "41": [34, 488, 513], "291905": 34, "03": [35, 435, 513], "22": [35, 435, 438, 506, 513], "34": [35, 506, 513], "52": [35, 487, 513], "916541": 35, "run_migrations_offlin": 37, "migrat": [37, 428], "context": [37, 503], "url": [37, 204, 394, 457, 493], "engin": [37, 235, 313, 325, 345], "though": 37, "skip": [37, 265, 509, 511], "creation": [37, 311], "even": [37, 85, 473, 501], "dbapi": 37, "emit": 37, "string": [37, 38, 40, 43, 68, 69, 70, 79, 86, 129, 148, 154, 164, 165, 183, 188, 202, 204, 218, 219, 220, 221, 224, 230, 231, 232, 235, 238, 239, 240, 242, 249, 250, 251, 252, 253, 254, 255, 256, 261, 264, 272, 273, 289, 290, 291, 296, 308, 423, 444, 468, 494, 510], "run_migrations_onlin": 37, "associ": [37, 224, 335, 336], "connect": [37, 251, 325, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 473, 501, 508], "cl": [38, 61, 68, 160, 162, 178, 183, 188, 204, 208, 211, 212, 213, 215, 217, 240, 245, 249, 251, 253, 265, 271, 285], "quanit": [38, 40, 43], "chosen": [38, 473], "categori": [38, 70, 204, 223, 224, 477], "boolean": [38, 40, 42, 70, 79, 235, 444], "inspect": [38, 40, 43, 68, 70, 473, 507, 509], "capabl": [38, 40, 43, 68, 69, 70, 486, 495, 503, 504, 511, 512], "queri": [38, 40, 42, 43, 68, 70, 129, 154, 316, 323, 331, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 504], "dump": [38, 40, 43, 44, 68, 70, 129, 296, 306, 414, 435, 445, 457, 504, 509, 511], "bool": [38, 42, 43, 44, 68, 85, 86, 129, 148, 154, 173, 180, 202, 204, 217, 222, 224, 228, 233, 235, 236, 249, 285, 324, 357, 362, 365, 377, 380, 382, 383, 384, 385, 387, 388, 390, 394, 396, 399, 414, 430, 431, 433, 438, 439, 444, 446, 447, 457, 463, 469, 477, 494, 503, 510], "disk": [38, 68, 70], "numpi": [38, 40, 43, 68, 70, 90, 91, 93, 129, 154, 217, 224, 228, 233, 235, 240, 290, 291, 485, 510], "arrai": [38, 40, 43, 68, 70, 129, 148, 154, 217, 224, 228, 233, 235, 240, 264, 276, 290, 291, 510], "node0_nam": [38, 68, 70], "weight0_nam": [38, 40, 43, 68, 70], "bias0_nam": [38, 40, 43, 68, 70], "node1_nam": [38, 68, 70], "weight1_nam": [38, 68, 70], "bias1_nam": [38, 68, 70], "output0_nam": [38, 68, 70], "output1_nam": [38, 68, 70], "respons": [38, 40, 43, 68, 70, 433, 437, 443, 456, 460, 461, 465, 467, 469, 470, 504], "int32": [38, 40, 43, 68, 70, 477], "someth": [38, 40, 43, 68, 70, 172, 173, 204, 273, 274, 275, 276, 277, 279, 280, 285], "quantize_input": [38, 70], "abl": [38, 70, 104, 172, 173, 216, 273, 274, 275, 276, 277, 279, 280, 285, 501, 504], "where": [38, 40, 44, 67, 68, 70, 224, 228, 239, 241, 249, 479, 483, 501, 509, 511], "destinatin": 38, "destin": [38, 44, 70, 220, 230, 497], "mxnetadaptor": 40, "nc_model": [40, 42, 242], "unimpl": [40, 43], "yet": [40, 43, 70, 473], "mxnetmodel": [40, 261], "data_x": [40, 42], "loader": [40, 42, 172, 173, 255, 273, 274, 275, 276, 277, 279, 280, 285], "compare_label": [40, 43, 68, 70, 228, 494], "pipelin": [40, 43, 68, 70, 218, 220, 231, 232, 238, 255, 480, 499], "modelwis": [40, 274, 275], "opwis": [40, 279], "recover_tuned_model": [40, 70], "mxnetqueri": 40, "local_config_fil": [40, 43, 68, 70], "get_vers": [40, 43, 69, 70], "get_precis": [40, 43, 69, 70, 312], "g": [40, 43, 69, 233, 235, 255, 437, 479, 488, 501, 507, 511], "get_op_typ": [40, 43, 68, 69, 70], "fully_connect": 40, "get_fuse_pattern": [40, 69, 70], "get_quantization_cap": [40, 43, 68, 69, 70], "etc": [40, 69, 164, 191, 216, 218, 219, 220, 226, 234, 235, 242, 254, 256, 272, 273, 295, 479, 491, 508], "get_mixed_precision_combin": [40, 69, 70], "optyp": 42, "enum": [42, 67, 296, 398, 427], "deriv": [42, 67, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 191, 218, 220, 249, 251, 253, 296], "isiter": 42, "obj": [42, 164, 201, 218, 219, 220, 230, 231, 232, 238, 239, 242, 250, 254, 255, 256, 272, 273, 289, 296], "ensure_list": 42, "check_mx_vers": 42, "mx": [42, 476], "__version__": 42, "make_nc_model": 42, "sym_model": 42, "ctx": [42, 476], "input_desc": 42, "symnet": 42, "aux": 42, "descript": [42, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 224, 239], "ncmodel": 42, "suppli": 42, "prepare_model_data": 42, "dataloaderwrap": 42, "is_model_quant": 42, "query_quantizable_nod": 42, "map": [42, 44, 70, 141, 217, 219, 220, 223, 224, 225, 226, 228, 233, 242, 249, 251, 254, 256, 272, 273, 398, 474, 477, 481, 494, 501, 504], "quantize_sym_model": 42, "run_forward": 42, "b_filter": 42, "collector": 42, "pre_batch": 42, "post_batch": 42, "propag": 42, "filter": [42, 176, 178, 202, 203, 204, 205, 206, 207, 209, 213, 220, 256, 317, 357, 380, 446, 477, 491, 501, 509, 511], "make_symbol_block": 42, "symbolblock": 42, "make_modul": 42, "parse_tune_config": 42, "quantizable_nod": 42, "distribute_calib_tensor": 42, "calib_tensor": 42, "calib_cfg": 42, "tensor_to_nod": 42, "kl": [42, 287, 290, 291, 486, 511, 512], "minmax": [42, 486, 511, 512], "calib_model": 42, "qsym_model": 42, "calib_data": [42, 476], "gather": [42, 44, 249, 433], "calibdata": 42, "threshold": [42, 44, 161, 224, 249, 287, 290, 291, 494], "calibcollector": 42, "include_tensors_kl": 42, "include_tensors_minmax": 42, "num_bin": [42, 287, 290, 291], "8001": [42, 287, 290], "collectorbas": 42, "tensorcollector": 42, "include_nod": 42, "qtensor_to_tensor": 42, "onnxrtadaptor": 43, "rt": 43, "todo": [43, 202, 205, 224, 290, 291, 442], "func": [43, 183, 255, 444, 461, 512], "onnxdataload": 43, "evalut": 43, "onnxtransform": 43, "onnxmetr": 43, "evaluaton": 43, "visualizaton": 43, "boolen": [43, 68, 70], "f1": [43, 220, 225, 227, 228, 256, 474, 481, 494, 508, 513], "modelproto": [43, 496], "onnxrt_qoperatoradaptor": 43, "onnxrt_integeropsadaptor": 43, "onnxrt_qdqadaptor": 43, "onnxrtqueri": 43, "infom": [43, 70, 184, 185], "compos": [43, 68, 70, 148, 217, 476, 510], "dictionari": [43, 44, 68, 70, 90, 91, 93, 165, 166, 169, 216, 224, 231, 233, 236, 238, 239, 241, 256, 316, 318, 319, 321, 323, 326, 327, 331, 335, 336, 338], "kei": [43, 68, 70, 129, 148, 154, 166, 224, 240, 250, 252, 261, 287, 289, 290, 296, 437, 452, 473, 509], "get_op_types_by_precis": [43, 68, 70], "get_graph_optim": 43, "onnxrtaug": 44, "model_wrapp": 44, "dump_op_typ": 44, "black_nod": 44, "white_nod": 44, "augment": 44, "augment_graph": 44, "activation_onli": 44, "weight_onli": 44, "quantization_candid": 44, "get_intermediate_output": 44, "calib_mod": 44, "intermedi": [44, 67, 183, 491, 501, 504], "dump_calibr": 44, "naiv": 44, "give": [44, 476, 511], "pair": [44, 126, 495], "minimum": [44, 67, 511], "second": [44, 87, 202, 357, 437, 473, 483, 498, 511, 512], "maximum": [44, 67, 77, 202, 217, 222, 249, 251, 276, 477, 504, 510], "ad": [44, 202, 221, 276, 314, 315, 317, 324, 325, 326, 327, 328, 332, 333, 473, 488, 495, 509], "reducemin": 44, "reducemax": 44, "calculate_quantization_param": 44, "quantization_threshold": 44, "matmul": [44, 69, 75, 88, 108, 109, 118, 137, 249, 486], "param_nam": [44, 308], "conv_3": 44, "np": [44, 129, 148, 217, 276, 481, 510], "conv_4": 44, "calculate_scale_zeropoint": 44, "last_nod": 44, "next_nod": 44, "rmin": [44, 67, 472], "rmax": [44, 67, 472], "op_registri": 61, "op_typ": [61, 279], "quanttyp": 67, "cast_tensor": 67, "tensorproto": 67, "tensor_target_dtyp": 67, "quantize_data_with_scale_zero": 67, "sym": [67, 486, 511, 512], "asym": [67, 486, 511, 512], "pack": [67, 84], "b": [67, 93, 97, 202, 477, 487, 494], "ab": [67, 251, 472, 504], "quantize_data": 67, "quantize_rang": 67, "trasnform": 67, "equat": [67, 226, 228, 504], "q": [67, 126], "z": [67, 479], "real": [67, 184, 185, 205, 481, 502, 504], "quantizedvalu": 67, "new_quantized_nam": 67, "scale_nam": 67, "zero_point_nam": 67, "quantized_value_typ": 67, "axi": 67, "quint8": 67, "linearli": 67, "inputoutputinti": 67, "quantizediniti": 67, "quantized_data": 67, "quantizationmod": 67, "quantizedvaluetyp": 67, "quantformat": 67, "attribute_to_kwarg": 67, "helper": [67, 68, 159, 202, 203, 204, 216, 439], "make_nod": 67, "find_by_nam": 67, "item_list": 67, "item": [67, 166, 216, 250, 346, 431, 463, 481, 508], "get_ops_recurs": 68, "prefix": [68, 154, 182, 220, 221, 457, 488, 509], "graph_info": [68, 70, 259, 260, 261, 263, 264], "templateadaptor": 68, "tampl": 68, "is_fused_modul": 68, "_propagate_qconfig_help": 68, "pytorchadaptor": 68, "objext": 68, "summari": [68, 121, 122, 182, 220, 473, 475, 500, 509], "optimizer_tupl": 68, "criterion_tupl": 68, "is_fused_child": 68, "op_nam": [68, 279, 348, 353, 354, 362, 363, 509], "_post_eval_hook": [68, 509], "is_fused_op": 68, "is_last_fused_child": 68, "q_capabl": 68, "get_non_quant_modul": 68, "model_kwarg": 68, "non_quant_modul": 68, "keyword": 68, "custom_non_quant_dict": 68, "pytorch_ipexadaptor": 68, "ipex": [68, 487, 491, 504, 513], "unspport": 68, "No": [68, 485, 500, 502], "pytorch_fxadaptor": 68, "fx": [68, 159, 273, 491, 502, 504, 505, 513], "prepare_sub_graph": 68, "sub_module_list": 68, "fx_op_cfg": 68, "is_qat": 68, "example_input": 68, "recurs": [68, 296], "qconfigmap": 68, "prepare_fx": 68, "convert_sub_graph": 68, "fuse_fx_model": 68, "fused_model": 68, "pytorchqueri": 68, "set_quantization_config": 69, "organ": [69, 473, 512], "unsupported_precis": 69, "tensorflowadaptor": 70, "graphdef": [70, 79, 80, 83, 84, 86, 93, 97, 108, 109, 115, 116, 117, 118, 129, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 154, 261, 423, 496], "graph_def": [70, 76, 154, 261, 273, 391, 423, 424], "ckpt": [70, 154, 261, 273, 513], "savedmodel": [70, 261, 273, 513], "folder": [70, 154, 204, 209, 273, 295, 477, 509], "larger": 70, "tuning_cfg_to_fw": 70, "tuning_cfg": 70, "pars": [70, 148, 202, 203, 214, 217, 298, 308, 334, 335, 337, 340, 341, 342, 343, 346, 399, 403, 407, 412, 418, 437, 444, 452, 463, 510], "wise": [70, 149, 163, 249, 276, 337, 340, 444, 473, 476, 491, 501, 509, 511, 512], "definit": [70, 129, 195, 200, 362, 375, 384, 430, 460], "inspect_weight_and_bia": 70, "node_list": 70, "graph_node_name_map": [70, 154], "fused_node_map": 70, "pattern_map": 70, "seq": 70, "fused_mapping_revers": 70, "fused_map": 70, "inspect_activ": 70, "local": [70, 249, 296, 310, 340, 345, 358, 378, 473, 508], "tensorflowbasemodel": [70, 261, 389], "quantizedv2": 70, "get_optype_wise_": 70, "union": [70, 222, 224, 228, 286, 308, 310, 325, 346, 384, 430, 433, 435, 437, 438, 444, 447, 448, 450, 452, 456, 494], "tensorflow_itexadaptor": 70, "performance_onli": [70, 126, 140, 145, 153, 454, 511], "get_eightbit_pattern": 70, "qdq_enabl": 70, "eightbit": [70, 509], "generate_internal_pattern": 70, "intern": [70, 129, 429, 476], "bf16convert": [73, 505], "fp32_op": [73, 126], "bf16_op": [73, 126, 505], "graph_bas": [73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128], "graphrewriterbas": [73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128], "do_transform": [73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 133, 140, 141, 145, 149, 152, 153], "convertaddtobiasaddoptim": 75, "addv2": [75, 92, 93, 486], "biasadd": [75, 87, 89, 137, 144, 486], "convertlayoutoptim": 76, "layout": 76, "nchw": 76, "nhwc": 76, "convertleakyreluoptim": 77, "subgraph": [77, 85, 89, 93], "leakyrelu": 77, "mul": [77, 88, 89, 92, 93, 137], "coeffici": [77, 234], "less": [77, 479, 501], "convertnantorandom": 78, "const": [78, 86, 87, 90, 91, 93, 108, 109, 122, 129, 256, 314, 325, 328, 334, 340, 342, 343, 347, 426, 434, 443], "nan": 78, "convertplaceholdertoconst": 79, "rewrit": [79, 80, 81, 82, 83, 84, 85, 86, 96, 101, 103, 104, 105, 106, 107, 110, 113, 114, 123, 124, 127, 128], "renam": [79, 104, 507], "placeholderwithdefault": 79, "constant": [79, 85, 129, 148, 276, 427, 476, 486, 510], "simplifi": [79, 482], "input_graph_def": [79, 80, 83, 84, 86, 93, 97, 108, 109, 129, 148], "nodes_to_convert": 79, "placehold": [79, 200], "strtobool": 79, "val_str": 79, "equival": [79, 233], "dequantizecastoptim": 80, "dilatedcontract": 81, "injectdummybiasaddoptim": 82, "expanddimsoptim": 83, "expanddim": 83, "fetchweightfromreshapeoptim": 84, "fetch": [84, 195, 224, 476], "reshap": [84, 93, 245], "foldbatchnormnodesoptim": 85, "scale_after_norm": 85, "batchnormwithglobalnorm": 85, "nodedef": [85, 90, 91, 93, 129, 148, 423], "normal": [85, 93, 217, 226, 444, 474, 476, 498, 510], "fold": [85, 86, 486], "convolut": [85, 479, 501, 502], "That": [85, 473, 476], "opportun": 85, "expens": [85, 479, 511], "bake": 85, "identifi": [85, 90, 91, 93, 224, 261], "simpler": 85, "form": [85, 93, 104, 224, 226, 438, 473, 479], "spot": 85, "fusedbatchnorm": [85, 104], "fusedbatchnormv3": 85, "_fusedbatchnormex": 85, "newer": 85, "badli": [85, 93, 104], "duplic": [85, 93, 122, 276], "graphfoldconstantoptim": 86, "check_all_fold": 86, "check_const_input": 86, "node_nam": [86, 90, 91, 93, 129, 148, 154, 261, 263, 329, 423], "supported_op_typ": 86, "fusebiasaddandaddoptim": 87, "fusecolumnwisemuloptim": 88, "depthwiseconv2dn": [88, 486], "fuseconvwithmathoptim": 89, "elimin": [89, 488], "math": [89, 504], "realdiv": [89, 92], "node_name_from_input": [90, 91, 93, 129, 148], "strip": [90, 91, 93, 154, 509], "port": [90, 91, 93, 148, 457, 461, 473], "underli": [90, 91, 93, 234], "node_from_map": [90, 91, 93], "node_map": [90, 91, 93], "pull": [90, 91, 93, 438], "entri": [90, 91, 93, 188, 219, 255, 354, 357, 437, 444, 493], "index": [90, 91, 93, 178, 182, 195, 200, 204, 208, 213, 220, 240, 265, 296, 461, 476, 494], "isn": [90, 91, 93, 129], "present": [90, 91, 93, 473, 502], "values_from_const": [90, 91, 93, 129], "node_def": [90, 91, 93, 129], "extract": [90, 91, 93, 129, 204, 463, 477], "ndarrai": [90, 91, 93, 129, 217, 233, 235, 264, 276, 287, 290, 485, 510], "access": [90, 91, 93, 129, 165, 166, 429, 444, 457, 461, 473], "get_const_dim_count": [90, 91], "dimens": [90, 91, 194, 217, 236, 246, 276, 477, 479, 501, 510], "fusegeluoptim": 92, "sqrt": 92, "erf": 92, "gelu": 92, "fuselayernormoptim": 93, "remap": 93, "smaller": [93, 217, 479, 501, 510], "layernorm": 93, "fusedbatcnormv3": 93, "And": [93, 191, 220], "restrict": [93, 501, 508], "2d": 93, "3d": [93, 502, 513], "contraint": 93, "fusedop": 93, "fill": [93, 316, 318, 319, 321, 323, 326, 327, 331, 473, 508, 510], "gamma": 93, "beta": 93, "h": [93, 217, 481, 510], "_mkllayernorm": 93, "fusepadwithconv2doptim": 94, "excluded_op_nam": [94, 95], "cfg": [94, 95, 165], "new_api": [94, 95, 100, 116, 123, 140, 145, 149], "itex_qdq_mod": [94, 95], "fusepadwithfp32conv2doptim": 95, "fusetransposereshapeoptim": 96, "graphcseoptim": 97, "cse": 97, "child": [97, 509], "b1": 97, "c1c2": 97, "d1": [97, 296], "c1": 97, "c2": 97, "bound": [97, 182, 217, 220, 224, 233, 276, 494, 510], "elim": 97, "grappleroptim": 98, "input_output_nam": 98, "opt_cfg": 98, "wrapper": [98, 178, 183, 184, 185, 186, 187, 201, 213, 215, 217, 224, 228, 461, 469, 505], "grappler": [98, 486], "insertprintminmaxnod": 100, "pre_node_nam": 100, "post_node_nam": 100, "movesqueezeafterreluoptim": 101, "removetrainingnodesoptim": 103, "protected_nod": [103, 148], "types_to_splic": [103, 148], "checknumer": [103, 148], "stopgradi": 103, "renamebatchnormoptim": 104, "fusedbatchnormv2": 104, "due": [104, 501, 504, 509], "histor": 104, "latter": 104, "former": 104, "platform": [104, 433, 482, 487, 488, 491, 502, 504, 508, 513], "vnni_bf16": 104, "amx": 104, "instruct": [104, 473, 479, 482, 487, 492, 495, 502, 503, 504], "splitsharedinputoptim": 105, "stripequivalentnodesoptim": 106, "output_node_nam": [106, 107, 140, 141, 145, 148, 154], "stripunusednodesoptim": 107, "input_node_nam": [107, 140, 145, 148, 154], "switchoptim": 108, "condit": [108, 202, 203, 204, 217, 477, 493, 510, 511], "enter": [108, 109], "updateenteroptim": 109, "workaround": 109, "freezefakequantopoptim": 112, "fake_qu": [112, 126, 140, 145], "freezevaluetransform": 113, "max_min_data": [113, 114], "postfix": [113, 114], "tensor_data": 113, "th": [113, 114], "gpu": [113, 114, 126, 129, 148, 491, 501, 503, 504, 514], "itex_mod": [113, 126, 140, 145], "generate_output_graph": [113, 114], "max_name_valu": [113, 114], "freeze_max": [113, 114], "freeze_min": [113, 114], "generate_output_graph_rang": [113, 114], "freezevaluewithoutcalibtransform": 114, "95": [114, 224, 228, 494, 513], "fuseconvredundantdequantizetransform": 115, "_quantizedconv": 115, "_quantizeddeconv": 115, "successor": [115, 116, 117, 118], "fuseconvrequantizetransform": 116, "requant": [116, 118, 509], "stage": [116, 438, 479, 509], "fuse_pattern": 116, "sum_pattern": 116, "fusematmulredundantdequantizetransform": 117, "_quantizedmatmul": [117, 118], "fusematmulrequantizedequantizetransform": 118, "quantizedmatmul": 118, "quantizedmatmulwithbiasanddequant": 118, "fusematmulrequantizetransform": 118, "rtype": [118, 276, 439], "fusematmulrequantizedequantizenewapitransform": 118, "fusematmulrequantizenewapitransform": 118, "newapi": 118, "metainfochangingmemopoptim": 120, "metaop": 120, "posthostconstconvert": 121, "hostconst": 121, "postcseoptim": 122, "share": [122, 148, 485, 486, 511], "quantizev2": [122, 137], "quantizedrnnconvert": 123, "calibration_data": [123, 126], "rnn_detail": 123, "scalepropagationtransform": 124, "direct": [124, 249, 398], "generategraphwithqdqpattern": 126, "op_wise_config": [126, 140, 145], "quantized_nod": 126, "dq": 126, "befor": [126, 191, 202, 218, 220, 242, 249, 251, 252, 253, 279, 334, 473, 475, 476, 477, 479, 481, 485, 486, 488, 498, 501, 504, 508, 509, 511, 514], "mergeduplicatedqdqoptim": 127, "shareqdqforitexypatternoptim": 128, "graphanalyz": 129, "extend_engin": 129, "singleton": [129, 256, 426, 434], "getter": [129, 191, 218, 220, 239, 242, 255, 261, 264, 378], "_graph": 129, "has_positive_input": 129, "retrun": 129, "neg": 129, "get_graph_input_output": 129, "clearli": 129, "similar": [129, 488, 503, 511, 512], "summarize_graph": 129, "writtern": 129, "googl": [129, 495, 502], "query_fusion_pattern_nod": 129, "aggreg": [129, 439], "_search_pattern": 129, "remove_node_with_single_input_output": 129, "rebuild": 129, "except": [129, 256, 296, 426, 434, 435, 444, 459, 469, 513], "remove_nod": 129, "replace_const_nod": 129, "new_const_nod": 129, "target_nod": 129, "old_constant_node_nam": 129, "replace_al": 129, "outdat": 129, "replace_constant_graph_with_constant_nod": 129, "new_nod": 129, "old_end_node_nam": 129, "replace_single_nod": 129, "old_output_node_nam": 129, "old_output_nam": 129, "old_input_node_nam": 129, "old_input_nam": 129, "bottom": [129, 274, 275, 473], "replace_nod": 129, "old_node_nam": 129, "output_nodes_nam": 129, "node_name_detail": 129, "parent": [129, 246, 251, 253, 509], "add_nod": [129, 362], "start_node_nam": 129, "end_node_nam": 129, "dump_graph": 129, "parse_graph": 129, "graphrewriterhelp": 129, "encapsul": [129, 172, 173, 273, 274, 275, 276, 277, 279, 280, 285, 496], "compare_node_attr": 129, "node_a": 129, "node_b": 129, "compar": [129, 228, 279, 473, 476, 480, 488, 494, 504, 508, 509, 511], "create_nod": [129, 148], "create_constant_nod": [129, 148], "datatyp": [129, 148, 505, 511], "set_attr_dtyp": [129, 148], "set_attr_tensor": [129, 148], "set_attr_type_list": [129, 148], "attr": [129, 148, 154], "set_attr_string_list": [129, 148], "set_attr_str": [129, 148], "set_attr_int_list": 129, "set_attr_int": [129, 148], "set_attr_float": [129, 148], "set_attr_bool": [129, 148], "fusenodestartwithfusedbatchnormv3": [132, 142], "quantize_graph_bas": [132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147], "quantizenodebas": [132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147], "get_longest_fus": [132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147], "virtual": [132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 487], "apply_the_transform": [132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147], "fusenodestartwithconcatv2": [133, 143], "fusenodestartwithconv2d": [134, 144], "fusenodestartwithdeconv2d": 135, "fusenodestartwithfusedinstancenorm": 136, "fusenodestartwithmatmul": [137, 146], "apply_matmul_biasadd_relu_fus": 137, "match_node_nam": [137, 144], "apply_matmul_biasadd_fus": 137, "apply_batchmatmulv2_fus": 137, "batchmatmul": 137, "batchmatmulv2": 137, "apply_batchmatmulv2_mul_add_fus": 137, "fusenodestartwithpool": [138, 147], "optimizeqdqgraph": 140, "op_wise_sequ": [140, 145], "quantizegraphbas": [140, 141, 145], "remove_dead_nod": 141, "output_nam": 141, "longer": [141, 202, 217, 477, 510], "add_output_graph_nod": 141, "output_nod": [141, 324], "create_nodes_map": 141, "apply_conv_biasadd_relu_fus": 144, "quantizegraphforintel": 145, "quantizegraphhelp": 148, "staticmethod": 148, "get_sorted_graph": 148, "sort": [148, 357, 511], "reorder": 148, "easier": [148, 473, 502], "split_shared_input": 148, "in_graph": [148, 154], "ouput": 148, "remove_training_nod": 148, "aren": 148, "uncondition": 148, "copy_attr": 148, "attr_valu": 148, "copi": [148, 250], "unique_node_name_from_input": 148, "ensure_tensor_name_has_port": 148, "biascorrect": 149, "fp32_graph": 149, "weight_empir": 149, "graph_transform_bas": [149, 152, 153], "graphtransformbas": [149, 152, 153], "Will": [149, 174, 175, 178, 457, 479, 491], "task": [149, 202, 209, 228, 477, 479, 491, 494], "w_int8": [149, 163], "w_fp32": [149, 163], "ratio": [149, 163, 214, 217, 249, 251, 252, 253, 477, 487, 501, 506, 510, 513], "equal": [149, 163, 494], "scale_c": [149, 163], "shift": [149, 163, 214, 510], "notic": [149, 163, 182, 220, 493], "empir": [149, 163], "insertlog": 152, "input_pb": [152, 153], "node_name_list": 152, "show_nam": 152, "show_op": 152, "first_n": 152, "summar": [152, 479], "1024": [152, 204], "messag": [152, 444, 456, 461, 511], "dump_fp32": 152, "rerangequantizedconcat": 153, "rerange_quant": 153, "concat": [153, 430], "disable_random": 154, "read_graph": 154, "in_graph_is_binari": 154, "read": [154, 204, 207, 217, 250, 252, 363, 367, 368, 477, 482, 505, 508], "write_graph": 154, "out_graph_def": 154, "out_graph_fil": 154, "write": [154, 178, 211, 212, 213, 224, 296, 481, 489, 508, 509], "is_ckpt_format": 154, "model_path": [154, 363, 378, 383, 444], "is_saved_model_format": 154, "saved_model": [154, 220, 230, 369, 376, 386, 497], "get_tensor_by_nam": 154, "try_cnt": 154, "scope": [154, 191, 220], "tensor_nam": [154, 264], "suffix": 154, "iterator_sess_run": 154, "sess": 154, "iter_op": 154, "feed_dict": [154, 201], "output_tensor": [154, 261], "makeiter": 154, "strip_unused_nod": 154, "strip_unused_lib": 154, "r1": 154, "15": [154, 235, 486, 487, 488, 513, 514], "branch": 154, "strip_equivalent_nod": 154, "get_tensor_val_from_graph_nod": 154, "tensor_v": 154, "get_embedding_contigu": 159, "embed": 159, "contigu": [159, 501], "append_attr": 159, "fx_model": 159, "algorithm_registri": [160, 162], "algorithm_typ": [160, 162], "registr": [160, 162, 178, 188, 204, 208, 211, 212, 213, 215, 217, 245], "algorithmschedul": [160, 162], "fastbiascorrect": 161, "channel_axi": [161, 163], "weightcorrect": 163, "ep": 163, "1e": [163, 512], "05": [163, 224, 228, 438, 487, 488, 494, 513], "benchmark_conf": [164, 165, 256], "prefer": [164, 219, 220, 254, 256, 273], "cfg_fname": 165, "parser": [165, 256, 308, 426, 430, 434, 463], "quantization_conf": [165, 256, 273], "dotdict": 165, "pruning_conf": [165, 256, 272], "graph_optimization_conf": [165, 219, 220, 488], "mixedprecision_conf": 165, "distillation_conf": [165, 218, 220], "defaultconf": 165, "notat": [165, 166], "deep_get": 166, "dot": [166, 444, 495, 504], "nest": 166, "eg": [166, 178, 204, 208, 213, 477, 503], "john": 166, "deep_set": 166, "male": 166, "distillationconfig": [169, 256], "teacher_model": [169, 183, 218, 220, 256, 479], "learning_r": [169, 256, 503, 512], "altern": [169, 256], "sigopttunestrategi": 172, "q_dataload": [172, 173, 274, 275, 276, 277, 279, 280, 285, 489, 511], "q_hook": [172, 173, 274, 275, 276, 277, 279, 280, 285], "tunestrategi": [172, 173, 274, 275, 276, 277, 279, 280, 285, 511], "hpo": 172, "mandatori": [172, 173, 273, 275, 276, 277, 279, 280, 285, 483, 512], "tuner": [172, 173, 219, 220, 254, 256, 273, 274, 275, 276, 277, 279, 280, 285], "pseudo": [172, 173, 273, 274, 275, 276, 277, 279, 280, 285, 509], "next_tune_cfg": [172, 274, 275, 276, 277, 279, 280, 285, 511], "travers": [172, 173, 274, 275, 276, 277, 279, 280, 285, 511], "concret": [172, 274, 275, 276, 277, 279, 280, 285], "logic": [172, 173, 274, 285, 456, 511, 512], "overrid": [172, 191, 220, 274, 285, 296, 435], "constraint": [172, 219, 220, 254, 256, 273, 476, 508, 511, 512], "tpetunestrategi": 173, "stop": [173, 285, 414, 438, 483, 511, 512], "trials_count": [173, 285], "reach": [173, 249, 253, 285, 475, 501, 511], "entranc": [174, 175, 178], "dispatch": [174, 175, 178, 491], "tensorflowimagenetdataset": 176, "iterabledataset": [176, 178, 200, 203, 204, 206, 208, 213], "onnxrtimagenetdataset": 176, "root": [176, 202, 203, 204, 228, 234, 259, 260, 261, 263, 264, 286, 461, 474, 476, 477, 481, 494, 511, 512], "subset": [176, 204, 477], "num_cor": [176, 202, 203, 477], "28": [176, 202, 203, 477, 487, 488, 506, 513], "tensorflow_itex": [178, 204, 207, 208, 209, 211, 212, 213, 503], "onnxrt_qdq": [178, 204, 208, 211, 212, 213, 503], "onnxrt_qlinearop": [178, 204, 208, 211, 212, 213, 217, 503], "onnxrt_integerop": [178, 204, 208, 211, 212, 213, 217, 483, 503], "pytorch_ipex": [178, 204, 208, 211, 212, 213, 503, 512], "onnxrt_qoper": [178, 204, 208, 211, 212, 213, 503], "overwrit": [178, 204, 208, 213], "__len__": [178, 200, 204, 208, 213, 476, 477], "__iter__": [178, 200, 204, 208, 213, 474, 476], "inter": [178, 200, 204, 208, 213], "dataset_registri": [178, 204, 208, 213], "dataset_typ": [178, 204, 208, 213, 219, 220, 230, 254, 317], "dataset_format": [178, 204, 208, 213], "data_format": [178, 180, 204, 208, 213], "raw_imag": [178, 204, 208, 213], "tfrecord": [178, 202, 203, 204, 208, 213, 477], "transform_cl": [178, 213, 215, 217], "basetransform": [178, 179, 180, 213, 214, 215, 217], "transform_registri": [178, 213, 215, 217], "transform_typ": [178, 213, 215, 217], "filter_registri": [178, 211, 212, 213], "filter_typ": [178, 211, 212, 213], "parsedecodecocotransform": 179, "parsedecodeimagenettransform": 180, "tensorflowresizecropimagenettransform": 180, "height": [180, 217, 236, 249, 481, 501, 510, 512], "random_crop": [180, 510], "resize_sid": [180, 510], "resize_method": 180, "bilinear": [180, 217, 510], "random_flip_left_right": [180, 510], "mean_valu": [180, 510], "channels_last": 180, "subpixel": 180, "rgb": 180, "applic": [180, 429, 457, 459, 461, 473, 502, 509, 510], "crop": [180, 217, 477, 510], "desir": [180, 214, 217, 510], "resiz": [180, 202, 203, 217, 474, 476, 477, 510, 511], "flip": [180, 217, 510], "left": [180, 217, 473, 510], "std": [180, 217, 236, 474, 476, 510], "bilinearimagenettransform": 180, "central_fract": [180, 510], "875": [180, 510], "fraction": [180, 510], "onnxbilinearimagenettransform": 180, "onnxresizecropimagenettransform": 180, "std_valu": 180, "229": [180, 474, 476], "225": [180, 474, 476], "resizewithaspectratio": 180, "87": [180, 487, 506, 513], "inter_pol": 180, "cv2": 180, "inter_area": 180, "set_env_var": 182, "env_var": 182, "overwrite_exist": 182, "env": [182, 430, 438], "set_all_env_var": 182, "core": [182, 220, 235, 314, 473, 493, 500, 506, 513], "get_architectur": 182, "system": [182, 296, 433, 459, 460, 482, 501], "get_threads_per_cor": 182, "thread": [182, 460, 473, 476, 500], "get_thread": 182, "get_physical_id": 182, "socket": [182, 433, 461, 500, 506, 513], "get_core_id": 182, "get_bounded_thread": 182, "core_id": 182, "bind": 182, "command": [182, 220, 314, 325, 328, 334, 340, 342, 343, 410, 430, 438, 457, 473, 481, 488], "possibl": [182, 220, 233, 312, 377, 473, 483, 488, 499, 505, 511], "unnecessari": [182, 220], "b_func": [182, 220], "Not": [182, 191, 220, 242, 429], "summary_benchmark": [182, 220], "config_inst": [182, 220], "trigger": [182, 220, 251, 488], "generate_prefix": [182, 220], "core_list": [182, 220], "numactl": [182, 220], "run_inst": [182, 220], "critet": 183, "tensorflowcrossentropyloss": 183, "pytorchcrossentropyloss": 183, "tensorflowknowledgedistillationloss": 183, "pytorchknowledgedistillationloss": [183, 479], "pytorchintermediatelayersknowledgedistillationloss": 183, "tensorflowcriterion": 183, "pytorchcriterion": 183, "criterion_cl": 183, "criterion_registri": 183, "criterion_typ": 183, "registry_criterion": 183, "param_dict": [183, 188, 233], "crossentropyloss": 183, "tensorflowsparsecategoricalcrossentropi": 183, "sparsecategoricalcrossentropyloss": 183, "knowledgedistillationframework": 183, "student_model": [183, 218, 220, 479], "knowledgedistillationloss": [183, 512], "temperatur": [183, 512], "loss_typ": [183, 512], "ce": [183, 512], "loss_weight": [183, 512], "teacher_model_forward": 183, "notimplementederror": [183, 227, 228, 257], "teacher_student_loss_c": 183, "student_output": [183, 191, 220, 479], "teacher_output": [183, 191, 218, 220], "student_targets_loss_c": 183, "groud": 183, "truth": [183, 225, 226], "loss_cal": 183, "loss_cal_sloss": 183, "student_loss": [183, 191, 220, 479], "softcrossentropi": 183, "logit": [183, 479], "ground": [183, 225, 226], "kullbackleiblerdiverg": 183, "pytorchknowledgedistillationlosswrapp": 183, "tensorflowknowledgedistillationlosswrapp": 183, "tensorflowknowledgedistillationlossextern": 183, "intermediatelayersknowledgedistillationloss": 183, "layer_map": 183, "add_origin_loss": 183, "init_loss_func": 183, "init_feature_match": 183, "student_featur": 183, "teacher_featur": 183, "matcher": 183, "clear_featur": 183, "clean": [183, 216, 314, 325, 328, 334, 335, 340, 342, 343, 344, 428, 443, 475], "register_hooks_for_model": 183, "attributeerror": 183, "remove_all_hook": 183, "pytorch_linear_feature_match": 183, "pytorchintermediatelayersknowledgedistillationlosswrapp": 183, "selfknowledgedistillationloss": 183, "selfknowledg": 183, "pytorchselfknowledgedistillationloss": 183, "l2diverg": 183, "feature1": 183, "feature2": 183, "pytorchselfknowledgedistillationlosswrapp": 183, "collate_fn": [184, 185, 192, 194, 195, 197, 198, 199, 201, 477], "last_batch": [184, 185, 192, 194, 197, 198, 199, 201], "rollov": [184, 185, 192, 194, 197, 198, 199, 201], "sampler": [184, 185, 192, 194, 196, 197, 198, 199, 201, 213, 220, 481], "batch_sampl": [184, 185, 192, 194, 197, 198, 199, 201], "num_work": [184, 185, 192, 194, 197, 198, 199, 201, 504], "pin_memori": [184, 185, 192, 194, 197, 198, 199, 201], "shuffl": [184, 185, 192, 194, 197, 198, 199, 201, 476, 504], "torch_util": [185, 220, 256], "postprocess_cl": [185, 189, 474], "metric_cl": [185, 186, 227, 228, 257, 474], "user_metr": [185, 186], "alwai": [185, 186, 224, 474, 494, 501], "tensorflowoptim": 188, "pytorchoptim": 188, "optimizer_cl": 188, "optimizer_registri": 188, "optimizer_typ": 188, "tensorflowsgd": 188, "tensorflowadamw": 188, "tensorflow_addon": 188, "adamw": 188, "tensorflowadam": 188, "adam": [188, 512], "pytorchsgd": 188, "util": [190, 222, 250, 256, 301, 302, 303, 305, 307, 310, 314, 325, 328, 334, 335, 340, 342, 343, 345, 353, 354, 359, 361, 362, 365, 369, 375, 376, 384, 386, 410, 413, 417, 422, 426, 458, 481, 482, 501, 504], "record_output": 190, "output_process": 190, "get_activ": 190, "mainli": [191, 220, 253, 504], "train_func": [191, 220, 255, 479, 481, 501], "train_dataload": [191, 220, 479, 501], "pre_process": [191, 218, 220, 231, 238, 242, 254, 481], "post_process": [191, 220], "on_train_begin": [191, 220, 242, 251, 252, 286, 479], "Be": [191, 220, 224], "on_train_end": [191, 220, 242, 251, 252, 286], "pre_epoch_begin": [191, 220, 242], "post_epoch_end": [191, 220, 242], "on_batch_begin": [191, 220, 242], "on_after_compute_loss": [191, 220, 242, 286, 479], "on_before_optimizer_step": [191, 220, 251, 252, 286, 501], "on_post_grad": [191, 220], "on_batch_end": [191, 220, 242], "register_hook": [191, 220], "input_arg": [191, 220], "input_kwarg": [191, 220], "basedatalod": 192, "basedataload": [192, 194, 197, 198, 199, 201], "_generate_dataload": 192, "drop": [192, 224, 250, 495, 501, 513], "incomplet": 192, "discard": 192, "default_col": 194, "merg": [194, 509, 511], "outer": 194, "defaultdataload": [194, 198, 201], "base_dataload": [194, 196, 197, 198, 199, 201, 213, 220], "drop_last": [195, 200], "iterablefetch": 195, "indexfetch": 195, "indic": [195, 200, 202, 218, 220, 224, 240, 241, 473, 474, 485, 509], "default_dataload": [196, 198, 201, 213, 220], "fetcher": [196, 213, 220], "mxnet_dataload": [196, 213, 220], "onnxrt_dataload": [196, 213, 220], "pytorch_dataload": [196, 213, 220], "tensorflow_dataload": [196, 213, 220, 423], "mxnetdataload": 197, "onnxrtbertdataload": 198, "bert": [198, 201, 202, 217, 477, 479, 483, 494, 501, 510, 513], "varient": 198, "onnxrtdataload": 198, "pytorchdataload": 199, "data_sourc": 200, "matter": [200, 505], "iterablesampl": 200, "squential": 200, "indexdataset": 200, "retriev": [200, 439], "sequentialsampl": 200, "batchsampl": 200, "tfdatadataload": 201, "tensorflow1": 201, "coupl": 201, "satisfi": [201, 487, 492], "tf1": [201, 496], "although": [201, 508], "tensorflowbertdataload": 201, "tensorflowmodelzoobertdataload": 201, "zoo": [201, 217, 513], "tensorflowdataload": [201, 423], "pytorchbertdataset": 202, "model_typ": [202, 348, 378, 477], "tensordataset": [202, 477], "link": [202, 473, 477, 513], "huggingfac": [202, 477], "easi": [202, 220, 254, 473, 476, 502, 504, 508], "squad": [202, 217, 225, 226, 228, 477, 487, 494, 510, 513], "distilbert": [202, 477, 513], "xlnet": [202, 477], "xlm": [202, 477, 513], "101": [202, 228, 494, 513], "2043": 202, "2001": 202, "onnxrtbertdataset": 202, "data_dir": [202, 477], "model_name_or_path": [202, 477], "max_seq_length": [202, 217, 477, 510], "128": [202, 205, 206, 217, 477, 504, 510, 513], "do_lower_cas": [202, 216, 217, 477, 510], "mrpc": [202, 228, 477, 487, 494, 513], "dynamic_length": [202, 477], "shortcut": [202, 477], "truncat": [202, 217, 477, 510], "shorter": [202, 217, 477, 510], "lowercas": [202, 477], "qqp": [202, 477, 494, 513], "qnli": [202, 477, 487, 494, 513], "rte": [202, 477, 487, 494, 513], "st": [202, 477, 487, 494], "cola": [202, 477, 487, 494, 513], "mnli": [202, 477, 494, 513], "wnli": [202, 477, 494, 513], "mobilebert": [202, 477, 479, 513], "roberta": [202, 477, 513], "fix": [202, 251, 475, 477, 482, 511], "uncas": [202, 217, 477, 510, 513], "load_and_cache_exampl": 202, "convert_examples_to_featur": [202, 217], "max_length": 202, "label_list": [202, 228], "output_mod": 202, "pad_token": 202, "pad_token_segment_id": 202, "mask_padding_with_zero": 202, "inputfeatur": [202, 217], "input_id": [202, 217, 479, 501], "vocabulari": [202, 216, 217, 510], "attention_mask": [202, 501], "mask": [202, 224, 246, 249, 251, 253, 264, 501, 513], "NOT": [202, 486], "token_type_id": [202, 501], "segment": [202, 222, 224], "portion": 202, "problem": [202, 228, 235, 494, 495], "regress": [202, 475], "seq_length": 202, "to_json_str": 202, "serial": [202, 346, 353, 354, 384, 433, 435, 446, 447, 451, 452, 476], "json": [202, 203, 217, 306, 418, 420, 428, 435, 444, 477, 496, 510], "tensorflowbertdataset": 202, "label_fil": [202, 217, 477, 510], "parsedecodebert": 202, "tensorflowmodelzoobertdataset": [202, 203], "coco": [203, 210, 224, 228, 487, 494], "parsedecodecoco": 203, "cocorecorddataset": 203, "directori": [203, 204, 261, 295, 296, 357, 410, 428, 444, 457, 477, 481, 485, 509], "interleav": [203, 477], "parallel": [203, 477, 501], "cocoraw": [203, 477], "img_dir": [203, 477], "val2017": [203, 477], "anno_dir": [203, 477], "annot": [203, 224, 477, 494], "instances_val2017": [203, 477], "arrang": [203, 204, 207, 477, 501], "jpg": [203, 207, 209, 477], "coconpi": [203, 477], "npy_dir": [203, 477], "npy": [203, 477], "tensorflowdataset": 204, "pytorchdataset": 204, "mxnetdataset": 204, "onnxrtqldataset": 204, "onnxrtitdataset": 204, "IT": [204, 211], "pytorchmxnetwrapdataset": 204, "datafunc": 204, "pytorchmxnetwrapfunct": [204, 217], "framework_dataset": 204, "convent": [204, 224, 479], "imageclassifi": 204, "choos": [204, 473, 487, 491, 507, 511, 512], "download_url": 204, "filenam": [204, 234, 296, 297, 394, 410, 414, 420, 430, 438, 477], "md5": 204, "download": [204, 369, 392, 393, 395, 396, 426, 473, 477, 487, 488, 492, 507, 514], "gen_bar_updat": 204, "progress": [204, 253], "bar": [204, 473], "check_integr": 204, "fpath": 204, "checksum": 204, "calculate_md5": 204, "chunk_siz": 204, "cifar10": [204, 477], "cifar100": [204, 477], "toronto": [204, 477], "edu": [204, 477], "kriz": [204, 477], "cifar": [204, 477, 513], "tar": [204, 477], "gz": [204, 477], "manual": [204, 477], "internet": [204, 473, 477], "put": [204, 477, 479, 501], "again": [204, 477, 488, 505], "load_meta": 204, "meta": 204, "pytorchcifar10": 204, "mxnetcifar10": 204, "tensorflowcifar10": 204, "pytorchcifar100": 204, "mxnetcifar100": 204, "tensorflowcifar100": 204, "mnist": [204, 477, 481], "institut": 204, "standard": [204, 217, 494, 510, 511], "fashionmnist": [204, 477], "npz": [204, 477], "idx1": [204, 477], "ubyt": [204, 477], "idx3": [204, 477], "t10k": [204, 477], "class_to_idx": 204, "read_data": 204, "pytorchmnist": 204, "mxnetmnist": 204, "tensorflowmnist": 204, "pytorchfashionmnist": 204, "mxnetfashionmnist": 204, "tensorflowfashionmnist": 204, "imagefold": [204, 474, 476, 477, 481], "subfold": 204, "belong": [204, 261, 504], "class_1": [204, 477], "xxx": [204, 477, 479], "png": [204, 477], "xxy": [204, 477], "xxz": [204, 477], "class_n": [204, 477], "123": [204, 477, 510], "nsdf3": [204, 477], "asd932_": [204, 477], "mxnetimagefold": 204, "tensorflowimagefold": 204, "tensorflowtfrecorddataset": 204, "tensorflowimagerecord": 204, "000": [204, 477], "001": [204, 477, 481, 512], "099": [204, 477], "tensorflowvocrecord": 204, "pascal": 204, "voc": [204, 228], "2012": 204, "00000": 204, "00004": 204, "00001": 204, "00003": 204, "dummydataset": [205, 206], "127": [205, 206, 477, 504, 513], "stand_norm": [205, 206, 477], "dummy_v2": [206, 477], "sparse_dummy_v2": [206, 477], "input_shap": [206, 377, 380, 389, 477], "label_shap": [206, 477], "sparsedummydataset": 206, "dense_shap": [206, 477], "sparse_ratio": [206, 477], "imagenetraw": [207, 477], "data_path": [207, 477], "image_list": [207, 477], "img1": [207, 477], "img2": [207, 477], "imgx": [207, 477], "val_map": [207, 477], "pytorchimagenetraw": 207, "mxnetimagenetraw": 207, "tensorflowimagenetraw": 207, "inteltensorflow": [207, 209], "bert_dataset": [208, 213, 220], "coco_dataset": [208, 213, 220], "dummy_dataset": [208, 213, 220], "dummy_dataset_v2": [208, 213, 220], "imagenet_dataset": [208, 213, 220], "style_transfer_dataset": [208, 213, 220], "transfer": [209, 218, 220, 477, 479, 480], "styletransferdataset": 209, "content_fold": [209, 477], "style_fold": [209, 477], "crop_ratio": [209, 477], "resize_shap": [209, 477], "image_format": [209, 477], "holder": [209, 477], "labelbalancecocorecordfilt": 210, "balanc": [210, 500], "labelbalancecocorawfilt": 210, "tensorflowfilt": 211, "onnxrtqlfilt": 211, "onnxrtitfilt": 211, "pytorchfilt": 211, "mxnetfilt": 211, "coco_filt": [212, 213, 220], "imagenet_transform": [213, 215, 220], "quantizedinput": [214, 510], "labelshift": [214, 510], "label_shift": [214, 510], "parsedecodeimagenet": [214, 510], "proto": [214, 217, 510], "convert_to_unicod": 216, "unicod": [216, 221], "utf": 216, "load_vocab": 216, "vocab_fil": [216, 217, 510], "convert_by_vocab": 216, "vocab": 216, "whitespace_token": 216, "whitespac": [216, 226], "fulltoken": 216, "tokenzi": 216, "convert_tokens_to_id": 216, "convert_ids_to_token": 216, "basictoken": 216, "punctuat": [216, 221, 226], "wordpiecetoken": 216, "unk_token": 216, "unk": 216, "max_input_chars_per_word": 216, "wordpiec": [216, 217, 510], "greedi": 216, "longest": [216, 217, 510], "unaff": 216, "un": 216, "aff": 216, "concat_gener": 217, "tensorflowtransform": 217, "mxnettransform": 217, "pytorchtransform": 217, "onnxrtqltransform": 217, "onnxrtittransform": 217, "tensorflowwrapfunct": 217, "transform_func": 217, "pytorchmxnettransform": 217, "get_torchvision_map": 217, "interpol": [217, 494, 510], "torchvis": [217, 236], "composetransform": 217, "transform_list": [217, 510], "togeth": [217, 249, 255, 476, 479, 487, 492, 509, 510], "croptoboundingbox": [217, 510], "offset_height": [217, 510], "offset_width": [217, 510], "target_height": [217, 510], "target_width": [217, 510], "vertic": [217, 249, 510], "coordin": [217, 276, 510], "horizont": [217, 510], "mxnetcroptoboundingbox": 217, "onnxrtcroptoboundingbox": 217, "tensorflowcroptoboundingbox": 217, "resizewithratio": [217, 510], "min_dim": [217, 510], "800": [217, 510], "max_dim": [217, 510], "1365": [217, 510], "constant_valu": 217, "aspect": [217, 510], "side": [217, 473, 477, 510], "exce": [217, 510], "tensorflowresizewithratio": 217, "transpos": [217, 249, 510], "perm": [217, 510], "permut": [217, 510], "tensorflowtranspos": 217, "mxnettranspos": 217, "pytorchtranspos": 217, "randomverticalflip": [217, 510], "tensorflowrandomverticalflip": 217, "randomhorizontalflip": [217, 476, 510], "tensorflowrandomhorizontalflip": 217, "toarrai": [217, 510], "pil": [217, 510], "casttftransform": 217, "castonnxtransform": 217, "castpytorchtransform": 217, "centercroptftransform": 217, "paddedcentercroptransform": 217, "crop_pad": 217, "resizetftransform": 217, "nearest": [217, 510], "bicub": [217, 510], "resizepytorchtransform": 217, "randomcroptftransform": 217, "randomresizedcroppytorchtransform": 217, "randomresizedcropmxnettransform": 217, "randomresizedcroptftransform": 217, "get_param": 217, "pramet": 217, "normalizetftransform": 217, "rescal": [217, 510], "deviat": [217, 510], "broadcast": [217, 481, 510], "rescalekeraspretraintransform": 217, "rescaletftransform": 217, "rescaletransform": 217, "alignimagechanneltransform": 217, "dim": [217, 245, 276, 510], "w": [217, 236, 501, 510], "pytorchalignimagechannel": 217, "tondarraytransform": 217, "resizemxnettransform": 217, "resizetransform": 217, "cropresizetftransform": 217, "y": [217, 276, 510], "boundari": [217, 346, 510], "area": [217, 224, 494, 510], "pytorchcropresizetransform": 217, "mxnetcropresizetransform": 217, "cropresizetransform": 217, "centercroptransform": 217, "mxnetnormalizetransform": 217, "pytorchnormalizetransform": 217, "normalizetransform": 217, "randomcroptransform": 217, "randomresizedcroptransform": 217, "get_final_text": 217, "pred_text": 217, "orig_text": 217, "squadexampl": 217, "qas_id": 217, "question_text": 217, "doc_token": 217, "orig_answer_text": 217, "start_posit": 217, "end_posit": 217, "is_imposs": 217, "unique_id": 217, "example_index": 217, "doc_span_index": 217, "token_to_orig_map": 217, "token_is_max_context": 217, "input_mask": [217, 479], "segment_id": [217, 479], "read_squad_exampl": 217, "input_fil": 217, "doc_strid": [217, 510], "max_query_length": [217, 510], "output_fn": 217, "inputbatch": 217, "collecttransform": 217, "10833": 217, "tfsquadv1posttransform": 217, "n_best_siz": [217, 510], "384": [217, 510], "max_answer_length": [217, 510], "total": [217, 228, 251, 253, 261, 264, 265, 477, 510], "nbest_predict": [217, 510], "long": [217, 485, 510], "document": [217, 472, 481, 483, 495, 507, 510], "chunk": [217, 510], "much": [217, 218, 220, 479, 483, 488, 501, 510], "process_result": 217, "get_postprocess_result": 217, "tfmodelzoocollecttransform": 217, "tfsquadv1modelzooposttransform": 217, "squadv1": [217, 510], "parsedecodevoctransform": 217, "_epoch_ran": [218, 220], "ran": [218, 220], "eval_frequ": [218, 220], "frequenc": [218, 220, 251, 500, 512], "term": [218, 220, 479, 493, 494, 498, 499, 511], "best_scor": [218, 220], "best_model": [218, 220], "train_cfg": [218, 220, 289], "evaluation_distribut": [218, 220, 242], "train_distribut": [218, 220, 242], "on_post_forward": [218, 220], "init_train_cfg": [218, 220], "create_criterion": [218, 220], "create_optim": [218, 220], "disil": [218, 220], "generate_hook": [218, 220, 242], "variou": [219, 220, 229, 254, 256, 273, 487, 491, 503], "bring": [219, 220, 254, 256, 273, 475, 504], "vari": [219, 220, 242, 254, 256, 272, 273, 500, 513], "roc": [219, 220, 228, 242, 254, 256, 272, 273], "footprint": [219, 220, 242, 254, 256, 265, 272, 273, 480, 498, 501, 503, 511], "flexibl": [219, 220, 242, 254, 256, 272, 273, 474, 479, 501], "set_config_by_model": [219, 220, 229], "model_obj": [219, 220, 229], "bleu": [220, 222, 227, 256, 494], "bleu_util": [220, 227, 256], "coco_label_map": [220, 227, 256], "coco_tool": [220, 227, 256], "evaluate_squad": [220, 227, 256], "dynast": [220, 238, 256], "dynas_manag": [220, 236, 237, 238], "dynas_predictor": [220, 236, 237, 238], "dynas_search": [220, 237, 238], "dynas_util": [220, 235, 237, 238], "nas_util": [220, 238, 256], "pruning_recip": [220, 256], "tile_pattern": [220, 243, 244], "pytorch_prun": [220, 256], "logger": [220, 247, 256, 287, 290, 426, 430, 434], "prune_util": [220, 247, 256], "pruner": [220, 242, 247, 249, 252, 256, 455, 512], "graph_optim": [220, 229, 256, 303, 369, 404, 408, 409, 426, 434, 449, 488], "mixed_precis": [220, 256, 305, 369, 404, 426, 434, 449], "model_convers": [220, 256, 482], "quantconf": [220, 254, 273], "qfunc": [220, 254], "routinu": [220, 254], "pruningconf": [220, 242], "pruning_func": [220, 242, 501], "generate_prun": [220, 242], "dens": [220, 242, 253, 501, 513], "spars": [220, 242, 251, 477, 501, 502], "graphoptim": [220, 229, 303, 401, 448], "unicoderegex": 221, "hoc": 221, "hack": 221, "recogn": 221, "nondigit_punct_r": 221, "compil": [221, 500], "regular": [221, 250, 501], "preced": 221, "digit": [221, 502], "punct_nondigit_r": 221, "symbol_r": 221, "property_char": 221, "join": 221, "bleu_token": 221, "mose": 221, "smt": 221, "mosesdecod": 221, "mteval": 221, "v14": 221, "pl": 221, "l954": 221, "l983": 221, "tensor2tensor": 222, "bleu_hook": 222, "compute_bleu": 222, "reference_corpu": 222, "translation_corpu": 222, "max_ord": 222, "use_bp": 222, "against": 222, "gram": 222, "flag": [222, 286, 454], "third": [224, 476], "parti": [224, 504], "pycocotool": [224, 485, 492], "object_detect": 224, "noth": [224, 438], "jonathanhuang": 224, "image_id": [224, 494], "encod": [224, 233, 510], "groundtruth": 224, "groundtruth_dict": 224, "exportgroundtruthtococo": 224, "groundtruth_boxes_list": 224, "groundtruth_classes_list": 224, "max_num_class": 224, "output_path": [224, 263, 438, 495], "detections_list": 224, "exportdetectionstococo": 224, "detection_boxes_list": 224, "detection_scores_list": 224, "detection_classes_list": 224, "cocowrapp": 224, "loadannot": 224, "cocoevalwrapp": 224, "agnostic_mod": 224, "computemetr": 224, "detection_typ": 224, "hold": [224, 276, 476], "being": [224, 236, 255, 290, 291, 365], "datastructur": 224, "mscoco": 224, "replic": 224, "extern": [224, 263, 473], "category_id": 224, "iou_typ": 224, "iou_thr": [224, 228, 494], "map_point": [224, 228, 494], "cocoev": 224, "getcategori": 224, "getagnosticmod": 224, "agnost": [224, 479], "getcategoryidlist": 224, "accumul": 224, "include_metrics_per_categori": 224, "all_metrics_per_categori": 224, "summeri": 224, "per_category_ap": 224, "care": 224, "pollut": 224, "mldash": 224, "summary_metr": 224, "iou": [224, 228], "increment": [224, 274, 275, 511], "50iou": 224, "75iou": 224, "75": [224, 487, 513], "pixel": [224, 510], "medium": 224, "larg": [224, 476, 479, 513], "10000": [224, 276], "recal": [224, 226, 228], "bycategori": 224, "supercategori": 224, "performancebycategori": 224, "category_stat": 224, "exportsingleimagegroundtruthtococo": 224, "next_annotation_id": 224, "category_id_set": 224, "groundtruth_box": 224, "groundtruth_class": 224, "groundtruth_mask": 224, "groundtruth_is_crowd": 224, "export": [224, 259, 260, 264, 286, 444, 509], "ingest": 224, "ones": 224, "exportsingleimagedetectionstococo": 224, "uniqu": [224, 236, 255, 276, 335, 336, 504], "assign": [224, 296, 334, 335, 340, 341, 342, 343, 473, 481, 495, 503], "num_gt_box": 224, "num_detect": [224, 228, 494, 512], "image_height": 224, "image_width": 224, "detection_mask": 224, "crowd": 224, "insid": [224, 479, 501], "exportsingleimagedetectionboxestococo": 224, "detection_box": [224, 512], "detection_scor": [224, 512], "detection_class": [224, 512], "exporsingleimagedetectionboxestococo": 224, "exportsingleimagedetectionmaskstococo": 224, "allenai": [225, 226], "bi": [225, 226], "att": [225, 226], "f1_score": [225, 226], "ground_truth": [225, 226], "metric_max_over_ground_truth": [225, 226], "metric_fn": [225, 226], "exact_match_scor": 225, "exact": 225, "articl": [225, 226], "paragraph": [225, 226], "qa": [225, 226], "cantain": [225, 226], "normalize_answ": 226, "extra": 226, "newlin": 226, "tab": [226, 337, 340, 346, 460, 509], "harmon": [226, 228], "answer_start": 226, "177": 226, "denver": 226, "bronco": 226, "nfl": 226, "afc": 226, "bowl": 226, "56be4db0acb8001400a502ec": 226, "percentag": [226, 234, 512], "basemetr": [227, 228, 257], "single_output": [227, 228, 257], "hvd": [227, 228, 257, 481], "sample_weight": [227, 228, 257], "state": [227, 228, 257, 501], "metric_registri": [227, 228, 257], "metric_typ": [227, 228, 257], "decorator_metr": [227, 228, 257], "tensorflowmetr": 228, "pytorchmetr": 228, "mxnetmetr": 228, "onnxrtqlmetr": 228, "onnxrtitmetr": 228, "wrappytorchmetr": 228, "wrapmxnetmetr": 228, "wraponnxrtmetr": 228, "proport": 228, "were": 228, "pred_list": 228, "pytorchloss": 228, "There": [228, 255, 473, 479, 486, 491, 494, 495, 512], "least": [228, 252, 439, 501, 511], "mae": [228, 494], "absolut": [228, 234, 438, 483, 494, 500, 501, 504, 511], "rmse": [228, 234, 494, 511], "squar": [228, 234, 494, 511], "mse": [228, 348, 354, 473, 494, 503, 507], "tensorflowtopk": 228, "among": 228, "outcom": 228, "num_correct": 228, "num_sampl": 228, "generaltopk": 228, "cocomapv2": [228, 494], "anno_path": [228, 494], "map_kei": 228, "detectionboxes_precis": 228, "output_index_map": [228, 494], "tensorflowmap": 228, "tensorflowcocomap": 228, "tensorflowvocmap": 228, "squadf1": [228, 494], "miou": 228, "21": [228, 487, 513], "hist": [228, 290, 291], "onnxrtglu": 228, "dlrm": [228, 513], "conf_fnam": [231, 238], "init_by_cfg": [231, 238], "init_for_search": [232, 238], "init_cfg": [232, 238], "parametermanag": [233, 236], "verbos": [233, 234, 235], "hot": 233, "pymoo": [233, 235, 236], "process_param_dict": 233, "upper": [233, 235], "vector": [233, 239, 241], "onehot_gener": 233, "in_arrai": 233, "onehot": 233, "unus": 233, "depth": [233, 479, 505], "input_arrai": 233, "elast": 233, "supernetwork": [233, 236], "mapper": [233, 334, 397, 398], "random_sampl": [233, 276], "subnetwork": [233, 236], "trial_limit": 233, "100000": 233, "translate2param": 233, "pymoo_vector": 233, "translate2pymoo": 233, "import_csv": 233, "filepath": 233, "column_nam": 233, "drop_dupl": 233, "panda": 233, "datafram": [233, 261, 264], "purpos": [233, 482, 486, 495, 503, 511], "subnet": [233, 236], "column": [233, 473, 501], "df": [233, 261, 264], "set_se": 233, "create_training_set": 233, "train_with_al": 233, "33": [233, 487, 506, 513], "sklearn": 233, "alpha": 234, "default_alpha": 234, "cost_factor": 234, "default_cost_factor": 234, "max_iter": 234, "default_max_iter": 234, "regressor": 234, "get_paramet": 234, "get_metr": [234, 312], "mape": 234, "kendal": 234, "rank": [234, 481], "correl": 234, "spearman": 234, "searcher": [234, 241], "searchalgomanag": 235, "optuna": 235, "configure_nsga2": 235, "warm_pop": 235, "crossover_prob": 235, "crossover_eta": 235, "mutation_prob": 235, "02": [235, 513], "mutation_eta": 235, "configure_ag": 235, "run_search": 235, "save_histori": 235, "previous": [235, 476], "problemmultiobject": 235, "evaluation_interfac": 235, "evaluationinterfac": [235, 236], "param_count": 235, "param_upperbound": 235, "ofa": [235, 236], "mani": [235, 236, 265, 476, 487, 492, 511, 512], "get_mac": 236, "input_s": 236, "measure_lat": 236, "warmup_step": 236, "measure_step": 236, "resolut": 236, "warm": [236, 265], "runner": 236, "ofarunn": 236, "acc_predictor": 236, "macs_predictor": 236, "latency_predictor": 236, "imagenetpath": 236, "w1": 236, "estimate_accuracy_top1": 236, "subnet_cfg": 236, "estimate_mac": 236, "estimate_lat": 236, "validate_top1": 236, "validate_mac": 236, "flop": 236, "fvcore": 236, "get_subnet": 236, "predictor_mod": 236, "csv_path": 236, "written": 236, "eval_subnet": 236, "clear_csv": 236, "evaluationinterfaceresnet50": 236, "evaluationinterfacemobilenetv3": 236, "get_torchvision_model": 236, "model_nam": [236, 324, 330, 444], "torchvisionrefer": 236, "baselin": [236, 487, 508, 509], "builder": 239, "count_model_paramet": 239, "previou": [239, 473, 507, 509, 511], "params_vec2params_dict": [239, 241], "paras_vec": 239, "metrics_convers": 239, "init_search_cfg": 239, "nas_method": 240, "create_search_space_pool": 240, "find_pareto_front": 240, "n_point": 240, "n_metric": 240, "n_pareto_point": 240, "get_feedback": 241, "feedback": 241, "para_vec": 241, "gridsearch": 241, "whole": [241, 459, 473, 483, 504, 513], "exhaust": [241, 503], "randomsearch": 241, "bayesianoptimizationsearch": 241, "indices2params_vec": 241, "tfpruningcallback": 242, "input_model": [242, 496, 509], "callback": [242, 287, 289, 290, 460], "pure": 242, "s_output": 242, "s_loss": 242, "t_output": 242, "classmethod": [243, 244, 245, 432, 465, 467, 470], "support_pattern": [243, 244, 245], "pattern_registri": 245, "pattern_typ": 245, "patternbas": [245, 246], "mask_shap": [245, 246], "is_contigu": 245, "compute_spars": [245, 246], "abs_sum": 245, "abs_max": 245, "tile": 246, "tilepatternbas": 246, "nxm": [246, 249], "matrix": 246, "repeat_mask": 246, "ori_shap": 246, "tilepattern_1x1": 246, "1x1": [246, 479], "unstructur": [246, 491, 501, 513], "tilepattern_2x2": 246, "2x2": 246, "tilepattern_1x16": 246, "1x16": 246, "tilepattern_4x1": 246, "4x1": [246, 513], "tilepattern_1x2": 246, "1x2": 246, "register_pattern": 249, "registri": [249, 251, 253], "get_pattern": 249, "assertionerror": [249, 250, 251], "unit": [249, 437, 444, 475], "is_glob": 249, "contrast": [249, 510], "get_mask": 249, "target_sparsity_ratio": [249, 251], "pre_mask": 249, "max_sparsity_ratio_per_lay": [249, 251, 503], "layer_nam": 249, "get_masks_glob": 249, "get_mask_singl": 249, "exact_sparsity_ratio": 249, "obtain": [249, 250, 253, 508, 511], "get_block_size_dict": 249, "get_masks_loc": 249, "get_sparsity_ratio": [249, 252], "calul": 249, "ration": 249, "get_pattern_lock_mask": 249, "lock": [249, 491, 499, 501], "patternnxm": 249, "kept": 249, "block_siz": 249, "block_size_1": 249, "block_size_2": 249, "keep_pre_mask": 249, "unchang": 249, "patternninm": 249, "doc": [249, 494, 501], "md": [249, 481], "check_config": 250, "prune_config": 250, "everyth": 250, "reset_non_value_to_default": 250, "undefin": 250, "process_and_check_config": 250, "obejct": 250, "process_config": 250, "parse_to_prun": 250, "parse_not_to_prun": 250, "register_prun": 251, "get_prun": 251, "module_nam": [251, 253, 296, 444], "cuurent": 251, "current_sparsity_ratio": 251, "global_step": 251, "start_step": [251, 503], "end_step": [251, 503], "update_frequency_on_step": [251, 503], "mask_weight": 251, "formal": 251, "local_step": [251, 252], "judg": 251, "on_after_optimizer_step": [251, 252], "on_before_ev": [251, 252], "on_after_ev": [251, 252], "check_is_pruned_step": 251, "update_scor": 251, "magnitudeprun": 251, "snipprun": 251, "snip": [251, 491, 501, 513], "sensit": [251, 491, 501], "arxiv": 251, "1810": 251, "02340": 251, "gradient": [251, 264, 491, 501, 513], "snipmomentumprun": 251, "moreoev": 251, "patternlockprun": 251, "tree": 252, "nlp": [252, 483, 501, 504], "huggingface_model": 252, "eager": [252, 298, 403, 407, 412, 481, 491, 504, 505, 509, 513], "config_file_path": 252, "pruner_info": 252, "update_items_for_all_prun": 252, "howev": [252, 501], "analys": 252, "elementwise_over_matmul_gemm_conv": 252, "elementwise_over_al": 252, "blockwise_over_matmul_gemm_conv": 252, "register_schedul": 253, "get_schedul": 253, "gradual": [253, 501], "update_sparsity_ratio": 253, "aggressive_ratio": 253, "current_prune_step": 253, "total_prune_step": 253, "oneshotschedul": 253, "aggress": 253, "iterativeschedul": 253, "target_ratio": 253, "server": [255, 256, 369, 376, 425, 426, 433, 434, 441, 444, 455, 457, 459, 473], "seper": [255, 279], "opt_model": [255, 499], "fulli": [255, 504, 511], "saniti": 255, "illeg": 255, "sync": 255, "accordingli": [255, 511], "ux": [256, 482], "config_gener": [256, 369, 426], "configuration_wizard": [256, 369, 426], "db_manag": [256, 369, 426, 463], "diagnosi": [256, 337, 340, 346, 369, 426, 454, 460], "file_brows": [256, 369, 426], "jobs_manag": [256, 369, 426], "model_zoo": [256, 369, 426], "names_mapp": [256, 369, 426], "profil": [256, 306, 322, 329, 340, 343, 345, 346, 369, 377, 385, 426, 427, 437, 442, 459, 464], "manage_workspac": [256, 369, 426], "workload": [256, 301, 302, 303, 305, 307, 310, 335, 340, 400, 414, 421, 426, 428, 434, 443, 444, 459, 462, 464, 465, 466, 467, 502], "executor": [256, 299, 426, 434], "expiring_dict": [256, 426, 434], "github_info": [256, 426, 434], "hw_info": [256, 426, 434], "json_seri": [256, 302, 353, 354, 359, 361, 362, 365, 375, 384, 410, 413, 426, 433, 434, 442, 445, 446, 447, 448, 450, 451, 452, 453, 454], "proc": [256, 426, 434], "yaml_util": [256, 426, 434], "web": [256, 425, 426, 473, 482, 509], "servic": [256, 426, 458, 459, 500], "router": [256, 426, 459], "basemodel": [259, 260, 261, 263, 264], "plai": [259, 260, 263, 264, 501, 502], "role": [259, 260, 263, 264, 501], "itself": [259, 260, 261, 263], "node_typ": [259, 260, 261, 263, 264], "conv0": [259, 260, 261, 263, 264, 509], "get_model_typ": [261, 378], "get_model_fwk_nam": 261, "fwk": 261, "validate_graph_nod": 261, "validate_and_inference_input_output": 261, "input_tensor_nam": 261, "output_tensor_nam": 261, "graph_sess": 261, "graph_def_sess": 261, "frozen_pb_sess": 261, "load_saved_model": 261, "saved_model_tag": 261, "serv": [261, 461, 469], "signatur": 261, "tag": [261, 432, 444, 509], "metagraphdef": 261, "input_tensor": [261, 264], "keras_sess": 261, "slim_sess": 261, "checkpoint_sess": 261, "estimator_sess": 261, "input_fn": 261, "saved_model_sess": 261, "base_model": [261, 263, 264], "tensorflowsavedmodelmodel": 261, "report_spars": [261, 264], "total_spars": [261, 264], "tensorflowcheckpointmodel": 261, "onnxmodel": [263, 380], "find_node_by_nam": 263, "new_nodes_list": 263, "find_nodes_by_initi": 263, "get_scale_zero": 263, "save_model_to_fil": 263, "use_external_data_format": 263, "2gb": 263, "pytorchbasemodel": 264, "get_all_weight_nam": 264, "get_weight": 264, "update_weight": 264, "new_tensor": 264, "update_gradi": 264, "grad_nam": 264, "new_grad": 264, "grad": 264, "prune_weights_": 264, "place": [264, 487, 492, 509], "get_input": 264, "input_nam": 264, "get_gradi": 264, "pytorchmodel": 264, "pytorchfxmodel": 264, "pytorchipexmodel": 264, "objective_registri": 265, "sart": 265, "result_list": 265, "models": [265, 498, 503, 511], "pruner_registri": 271, "calib_func": 273, "eval_metr": 273, "paramt": 273, "automixedprecisiontunestrategi": 274, "tunabl": 274, "fallback": [274, 275, 488, 495, 505, 511], "prioriti": [274, 275, 279], "biggest": [274, 275], "impact": [274, 275, 279, 507, 511], "tune_config": [274, 275, 277, 279, 285], "basictunestrategi": 275, "bayesiantunestrategi": 276, "acq_max": 276, "ac": 276, "gp": 276, "y_max": 276, "random_se": [276, 286, 332, 454, 483, 508, 511, 512], "n_warmup": 276, "n_iter": 276, "acquisit": 276, "gaussian": [276, 511], "relev": 276, "acq": 276, "random_st": 276, "randomst": 276, "scipi": 276, "x_max": 276, "targetspac": 276, "pbound": 276, "9527": [276, 483, 508, 511, 512], "keyerror": 276, "amort": 276, "get_target": 276, "num": [276, 296, 494], "_kei": 276, "exhaustivetunestrategi": 277, "msetunestrategi": 279, "distanc": [279, 348, 479], "tuningspac": 279, "mse_metric_gap": [279, 348], "fp32_tensor": [279, 348], "dequantize_tensor": [279, 348], "euclidean": [279, 348, 479], "mse_impact_lst": 279, "best_qmodel": 279, "_summary_": [279, 286], "current_best_model": 279, "randomtunestrategi": 280, "strategy_registri": [285, 511], "compressionmanag": 286, "uesd": 286, "deal": 286, "commpon": 286, "prepare_compress": 286, "compression_manag": 286, "train_loop": 286, "path_to_sav": 286, "target_model_typ": 286, "quant_mod": 286, "opset_vers": 286, "workspac": [286, 295, 334, 335, 340, 342, 343, 344, 374, 443, 445, 454, 496], "layerhistogramcollector": [287, 290], "layer_tensor": [287, 290], "include_lay": [287, 290], "diverg": [287, 290, 291, 479], "create_eval_func": 289, "postprocess_cfg": 289, "create_train_func": 289, "Their": 289, "kl_diverg": 290, "expand_quantized_bin": [290, 291], "quantized_bin": [290, 291], "reference_bin": [290, 291], "expand": [290, 291], "bin": [290, 291], "safe_entropi": [290, 291], "reference_distr_p": [290, 291], "p_sum": [290, 291], "candidate_distr_q": [290, 291], "q_sum": [290, 291], "safe": [290, 291, 475], "entropi": [290, 291, 511], "get_threshold": [290, 291], "hist_edg": [290, 291], "quantized_typ": [290, 291], "num_quantized_bin": [290, 291], "255": [290, 291, 504], "historgram": [290, 291], "number_bin": [290, 291], "checkpoint_dir": 295, "history_cfg": 295, "best_configur": 295, "best_model_weight": 295, "pt": [295, 496, 502, 505], "histori": [295, 333, 340, 342, 346, 399, 414, 463, 511], "snapshot": [295, 346, 463], "cfg_from_fil": 296, "yaml_fil": [296, 477, 481, 494, 498], "lazyimport": 296, "lazi": 296, "till": [296, 511], "later": [296, 488, 509], "get_siz": [296, 444], "equal_dict": 296, "d2": 296, "compare_kei": 296, "ignore_kei": 296, "ignor": [296, 477], "customized_msg": 296, "elaps": 296, "combine_histogram": 296, "old_hist": 296, "arr": 296, "old": [296, 507], "get_tuning_histori": 296, "tuning_history_path": [296, 414], "load_data_from_pkl": 296, "pkl": 296, "dump_data_to_loc": 296, "project_data": [297, 400, 401, 406, 410, 413, 420], "benchmark_data": 297, "workdir": [297, 410, 420, 426, 430, 434, 441], "config_filenam": [297, 410, 420], "configuration_data": [297, 401, 406, 410, 413], "generate_config": [297, 401, 406, 410, 413, 420], "dataloaderinterfac": [297, 410, 420], "dataloader_data": [297, 308, 335, 340, 410, 420], "parse_arg": [298, 403, 407, 412, 418], "benchmark_mod": [298, 437], "set_eager_execut": [298, 403, 407, 412], "request_id": [299, 399, 414, 415, 430, 438], "asd": [299, 415], "benchmark_id": [299, 314, 315, 325], "benchmark_result_upd": 299, "benchmark_result_update_pytorch_script": 299, "neural_coder_perform": 299, "neural_coder_tim": 299, "pytorch_script_bench_optim": 299, "command_line_of_script": 299, "pytorch_script_bench_original_model": 299, "execute_real_benchmark": 299, "project_detail": [299, 330, 399, 415], "benchmark_detail": 299, "benchmark_model": [300, 369, 426], "execute_benchmark": [300, 369, 426], "benchmarkconfiggener": 301, "configgener": [301, 302, 303, 305, 306, 307], "generate_evaluation_config": [301, 303, 305, 307], "generate_accuracy_config": 301, "generate_performance_config": 301, "workload_directori": 302, "configuration_path": 302, "jsonseri": [302, 353, 354, 359, 361, 362, 365, 375, 384, 410, 413, 433, 435, 442, 445, 446, 447, 448, 450, 451, 452, 453, 454], "get_predefined_config_path": [302, 444], "generate_model_config": 302, "generate_dataloader_config": 302, "graphoptimizationconfiggener": 303, "generate_graph_optimization_config": 303, "benchmark_config_gener": [304, 369, 426], "graph_optimization_config_gener": [304, 369, 426], "mixed_precision_config_gener": [304, 369, 426], "profiling_config_gener": [304, 369, 426], "quantization_config_gener": [304, 369, 426], "mixedprecisionconfiggener": 305, "generate_mixed_precision_config": 305, "profilingconfiggener": 306, "quantizationconfiggener": 307, "generate_tuning_config": 307, "generate_quantization_config": 307, "configurationpars": 308, "input_data": 308, "parse_evaluation_data": 308, "evaluation_data": 308, "parse_transform": 308, "transforms_data": [308, 335, 340], "parse_dataload": 308, "parse_metr": 308, "metric_data": 308, "get_param_typ": 308, "param_group": 308, "parse_valu": 308, "required_typ": 308, "parse_list_valu": 308, "parse_multidim_list": 308, "dimension": 308, "normalize_string_list": 308, "string_list": 308, "bracket": 308, "miss": [308, 504], "get_predefined_configur": 310, "update_config_to_machine_specif": 310, "configuration_pars": [311, 369, 426], "get_boundary_nod": [311, 369, 426], "get_configur": [311, 369, 426], "params_feed": [311, 369, 426], "feeder": 312, "get_framework": [312, 383], "get_domain": 312, "domain": [312, 319, 322, 338, 340, 345, 369, 376, 377, 380, 398, 426, 427, 429, 444, 456, 461, 473, 501, 511], "get_model": [312, 383, 465], "get_dataload": 312, "get_transform": 312, "get_object": 312, "get_strategi": 312, "get_quantization_approach": 312, "get_possible_valu": 312, "bench": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 399, 425], "dbmanag": [313, 345], "database_loc": [313, 345], "log_level": [313, 345, 436], "initialize_databas": [313, 345], "create_sqlalchemy_engin": [313, 345], "create_al": [313, 345], "tabl": [313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 345], "project_id": [314, 317, 324, 325, 328, 330, 335, 339, 340], "model_id": [314, 324, 325, 328], "dataset_id": [314, 317, 325, 328, 335, 339, 340], "warmup_iter": 314, "number_of_inst": 314, "cores_per_inst": [314, 445, 474, 476, 488, 503], "execution_command": [314, 325, 328], "benchark": 314, "delete_benchmark": [314, 334, 340], "benchmark_nam": 314, "update_statu": [314, 325, 328], "execution_statu": [314, 325, 328], "executionstatu": [314, 325, 328, 334, 340, 342, 343, 427, 443], "update_dur": [314, 325, 328], "durat": [314, 325, 328, 334, 340, 342, 343, 430, 498, 508], "update_execution_command": [314, 325, 328, 334, 340, 342, 343], "update_log_path": [314, 325, 328, 340, 343], "update_config_path": [314, 325], "update_dataset": [314, 325, 328], "update_batch_s": [314, 325], "update_mod": 314, "update_cores_per_inst": 314, "update_number_of_inst": 314, "clean_statu": [314, 325, 328, 334, 340, 342, 343, 443], "status_to_clean": [314, 325, 328, 334, 340, 342, 343, 443], "build_info": [314, 315, 317, 324, 325, 328, 329, 333], "benchmark_result": [314, 322, 345, 369], "benchmarkresult": [314, 315], "update_accuraci": 315, "update_perform": 315, "list_by_framework": [316, 323, 331], "framework_id": [316, 323, 324, 331, 347], "query_to_list": [316, 323, 331], "dataloaders_queri": 316, "update_param": 316, "dataloader_id": 316, "fill_dictionari": [316, 318, 319, 321, 323, 326, 327, 331], "dataset_nam": [317, 335, 340], "template_path": 317, "delete_dataset": [317, 335, 340], "update_template_path": 317, "get_domain_id": 318, "domain_nam": 318, "domainflavour": [319, 427], "db": [319, 326, 327, 346, 347], "get_domain_flavour_id": 319, "domain_flavour_nam": 319, "flavour": [319, 338, 340, 398, 427], "get_framework_id": 321, "framework_nam": [321, 396, 433], "domain_flavour": [322, 345, 369, 375, 444], "optimization_typ": [322, 325, 345, 369], "profiling_result": [322, 328, 345, 369], "tuning_detail": [322, 325, 345, 369], "tuning_histori": [322, 325, 340, 342, 345, 369, 404, 426], "metrics_queri": 323, "input_nod": 324, "precision_id": [324, 325, 326, 327], "domain_id": [324, 331], "domain_flavour_id": 324, "supports_profil": [324, 377, 385], "supports_graph": [324, 377], "delete_model": [324, 340, 341], "optimization_type_id": 325, "sampling_s": [325, 445, 476, 511, 512], "tuning_details_id": [325, 332], "diagnosis_config": 325, "delete_optim": [325, 340, 342], "optimization_id": [325, 326, 340, 342, 399], "optimization_nam": [325, 326, 339, 340], "update_optimized_model": [325, 340, 342], "optimized_model_id": 325, "update_sampling_s": 325, "update_precis": 325, "update_tuning_detail": 325, "pin_accuracy_benchmark": [325, 340, 342], "pin": [325, 340, 342], "pin_performance_benchmark": [325, 340, 342], "get_optimization_by_project_and_model": 325, "unpin_benchmark": 325, "db_connect": 325, "unpin": 325, "optimizationtyp": [325, 326, 427], "tuningdetail": [325, 332, 413], "tuninghistori": [325, 333, 414], "optimized_model": [325, 488], "get_pinned_benchmark": 325, "list_for_precis": 326, "precision_nam": [326, 327], "get_optimization_type_for_precis": 326, "get_optimization_type_id": 326, "get_optimization_type_by_nam": 326, "get_optimization_type_by_id": 326, "get_precision_id": 327, "get_precision_by_nam": 327, "get_precision_by_id": 327, "num_thread": 328, "delete_profil": [328, 340, 343], "profiling_id": [328, 329, 340, 343, 415], "profiling_nam": 328, "update_num_thread": 328, "profilingresult": [328, 329], "total_execution_tim": 329, "accelerator_execution_tim": 329, "cpu_execution_tim": 329, "op_run": 329, "op_defin": 329, "get_result": 329, "bulk_add": 329, "params_interfac": [329, 334, 335, 337, 339, 340, 341, 342, 343, 345, 369, 426, 463], "profilingresultaddparamsinterfac": [329, 340, 343, 346], "bulk": [329, 340, 343], "delete_result": 329, "delet": [329, 334, 335, 340, 341, 342, 343, 344, 501], "create_project": [330, 339, 340, 344], "delete_project": [330, 340, 344], "project_nam": [330, 335, 340], "get_model_by_nam": 330, "list_project": [330, 340, 344], "update_not": 330, "list_by_domain": 331, "transforms_queri": 331, "accuracy_criterion_typ": 332, "accuracy_criterion_threshold": 332, "exit_polici": [332, 483, 508, 511, 512], "tuning_details_data": 332, "delete_tuning_detail": 332, "update_tuning_histori": 332, "tuning_history_id": 332, "minimal_accuraci": 333, "baseline_accuraci": 333, "baseline_perform": 333, "last_tune_accuraci": 333, "last_tune_perform": 333, "best_tune_accuraci": 333, "best_tune_perform": 333, "benchmarkapiinterfac": [334, 340], "get_benchmark_detail": [334, 340], "list_benchmark": [334, 340], "update_benchmark_accuraci": [334, 340], "update_benchmark_perform": [334, 340], "update_benchmark_statu": [334, 340], "update_benchmark_dur": [334, 340], "update_path": [334, 340, 342], "add_benchmark": [334, 340], "add_result": [334, 340, 343], "edit_benchmark": [334, 340], "parse_benchmark_data": [334, 340], "benchmarkaddparamsinterfac": [334, 340, 346], "parse_benchmark_edit_data": [334, 340], "benchmarkeditparamsinterfac": [334, 340, 346], "before_delete_benchmark_entri": 334, "sqlite3": 334, "db_model": [334, 345, 369, 426], "datasetapiinterfac": [335, 340], "get_dataset_detail": [335, 340], "list_dataset": [335, 340], "add_dataset": [335, 340], "set_template_path": [335, 340], "parsed_dataset_data": [335, 340], "datasetaddparamsinterfac": [335, 340, 346], "check_if_custom_metric_or_dataload": [335, 340], "dataset_data": [335, 340, 400, 401, 406, 410, 413, 446], "generate_custom_templ": [335, 340], "dataloader_path": [335, 340], "generate_templ": [335, 340], "template_typ": [335, 340], "parse_dataset_data": [335, 340], "get_predefined_dataset": [335, 340], "prepare_predefined_dataload": [335, 340], "prepare_predefined_transform": [335, 340], "ordereddict": [335, 340, 445], "set_database_vers": [335, 336], "version_num": [335, 336], "alembic_vers": [335, 336], "initialize_associ": [335, 336], "initialize_precision_optimization_types_associ": [335, 336], "search_in_list_of_dict_for_unique_valu": [335, 336], "list_of_dict": [335, 336], "search_in_list_of_dict": [335, 336], "diagnosisapiinterfac": [337, 340], "get_op_list": [337, 340, 348], "get_op_detail": [337, 340, 348], "generate_optim": [337, 340], "model_wise_param": [337, 340], "parse_optimization_data": [337, 340, 342], "diagnosisoptimizationparamsinterfac": [337, 340, 346], "parse_op_wise_config": [337, 340], "op_wise_param": [337, 340], "parse_wise_paramet": [337, 340], "params_per_typ": [337, 340], "set_op_wise_pattern_precis": [337, 340], "parse_model_wise_config": [337, 340], "dictionariesapiinterfac": [338, 340], "dictonari": [338, 340], "list_domain": [338, 340], "list_domain_flavour": [338, 340], "list_optimization_typ": [338, 340], "list_optimization_types_for_precis": [338, 340], "list_precis": [338, 340], "list_dataload": [338, 340], "list_dataloaders_by_framework": [338, 340], "list_transform": [338, 340], "list_transforms_by_framework": [338, 340], "list_transforms_by_domain": [338, 340], "list_metr": [338, 340], "list_metrics_by_framework": [338, 340], "examplesapiinterfac": [339, 340], "get_optimization_data": [339, 340], "optimizationaddparamsinterfac": [339, 340, 342, 346], "benchmark_api_interfac": [340, 345, 369], "dataset_api_interfac": [340, 345, 369], "diagnosis_api_interfac": [340, 345, 369], "dictionaries_api_interfac": [340, 345, 369], "examples_api_interfac": [340, 345, 369], "model_api_interfac": [340, 345, 369], "optimization_api_interfac": [340, 345, 369], "profiling_api_interfac": [340, 345, 369], "project_api_interfac": [340, 345, 369], "modelapiinterfac": [340, 341], "add_model": [340, 341, 344], "get_model_detail": [340, 341], "list_model": [340, 341, 369, 395, 426], "parse_model_data": [340, 341], "modeladdparamsinterfac": [340, 341, 346], "optimizationapiinterfac": [340, 342], "get_optimization_detail": [340, 342], "list_optim": [340, 342], "update_optimization_statu": [340, 342], "update_optimization_dur": [340, 342], "add_optim": [340, 342], "add_quantization_optim": [340, 342], "optimization_data": [340, 342, 400, 401, 406, 410, 413], "add_standard_optim": [340, 342], "edit_optim": [340, 342], "add_tuning_histori": [340, 342], "parse_tuning_histori": [340, 342], "tuninghistoryinterfac": [340, 342, 346, 463], "parse_optimization_edit_data": [340, 342], "optimizationeditparamsinterfac": [340, 342, 346], "profilingapiinterfac": [340, 343], "get_profiling_detail": [340, 343], "list_profil": [340, 343], "update_profiling_statu": [340, 343], "update_profiling_dur": [340, 343], "add_profil": [340, 343], "edit_profil": [340, 343], "bulk_add_result": [340, 343], "parse_profiling_data": [340, 343], "profilingaddparamsinterfac": [340, 343, 346], "parse_profiling_result_data": [340, 343], "parse_profiling_edit_data": [340, 343], "profilingeditparamsinterfac": [340, 343, 346], "projectapiinterfac": [340, 344], "get_project_detail": [340, 344], "add_dummy_dataset": [340, 344], "update_project_not": [340, 344], "db_oper": [345, 369, 426], "parse_nod": 346, "tuninghistoryiteminterfac": [346, 463], "update_dataloaders_param": 347, "dataloaders_to_upd": 347, "framework_dataloaders_config": 347, "get_framework_dataloaders_config": 347, "get_framework_transforms_config": 347, "get_tensors_info": [348, 377], "load_quantization_config": 348, "calculate_ms": 348, "input_model_tensor": 348, "optimized_model_tensor": 348, "op_detail": [348, 350, 369, 426], "opdetail": [348, 353], "get_histogram_data": 348, "draw": [348, 508, 511], "diagnosisfactori": 349, "get_diagnosi": 349, "onnx_diagnosi": [350, 369, 426], "onnxrt_diagnosi": [350, 351, 369], "tensorflow_diagnosi": [350, 369, 426], "factori": [350, 369, 404, 417, 422, 426, 437], "op_entri": [350, 369, 426], "onnxrtdiagnosi": 352, "onnxrtmodel": [352, 380], "serialization_typ": [353, 354, 384, 433, 435, 446, 447, 451, 452], "oppattern": 353, "pattern_data": 353, "opweight": 353, "weights_data": 353, "opactiv": 353, "op_activ": 353, "opentri": 354, "activation_min": 354, "activation_max": 354, "tensorflowdiagnosi": 356, "tensorflowmodel": [356, 385, 387, 388, 389, 390], "browser": [357, 473], "get_directory_entri": 357, "get_requested_path": 357, "request": [357, 369, 370, 371, 392, 393, 396, 414, 426, 430, 456, 458, 460, 461, 465, 467, 468, 470, 473, 476, 504], "get_non_hidden_directory_entri": 357, "create_dir_entri": 357, "direntri": 357, "create_file_entri": 357, "create_entri": 357, "is_directori": 357, "sort_entri": 357, "should_show_fil": 357, "should_show_only_model_fil": 357, "get_setting_valu": 357, "get_filter_valu": 357, "filter_requested_entri": 357, "filter_nam": 357, "is_directory_entri": 357, "is_model_or_directory_entri": 357, "is_dataset_or_directory_entri": 357, "brows": 358, "filesystem": [358, 444, 469], "attribute_typ": 359, "expanded_group": [360, 363], "edg": [362, 364, 369, 426, 510], "add_edg": 362, "source_id": 362, "target_id": 362, "get_nod": 362, "highlight_pattern": 362, "highlight": [362, 365, 473], "get_target_nod": 362, "reader": [363, 364, 369, 426], "graphread": 363, "find_pattern_in_graph": [363, 460], "displai": [364, 377], "onnxrt_read": [364, 366, 369], "tensorflow_read": [364, 366, 369], "collaps": [364, 369, 426, 473], "graph_read": [364, 369, 426], "groupnod": 365, "group_nam": 365, "onnxrtread": 367, "tensorflowread": 368, "jobs_control_queu": [369, 370, 426], "frozen_pb": [369, 376, 386], "meta_graph": [369, 376, 386], "model_type_gett": [369, 376, 426], "repositori": [369, 374, 376, 426, 432, 490], "download_config": [369, 394, 395, 426], "download_model": [369, 394, 395, 426], "optimize_model": [369, 402, 404, 405, 408], "neural_coder_optim": [369, 404, 426], "tune_model": [369, 404, 411], "execute_optim": [369, 404, 426], "tensorflow_profil": [369, 417, 426], "execute_profil": [369, 417, 426], "profile_model": [369, 417, 419, 423, 426], "job": 370, "_jobscontrolqueu": 371, "queu": 371, "jobsmanag": 371, "_jobsmmanag": 372, "_job": 372, "get_default_path": 374, "shape_elements_ord": [377, 380, 389, 444], "get_input_nod": [377, 387, 388, 389], "get_output_nod": [377, 387, 388, 389], "ensure_supported_path": 377, "get_model_graph": [377, 380, 388, 389, 460], "get_framework_nam": [377, 380, 382, 389], "supports_path": [377, 380, 382, 385, 387, 388, 390], "guard_requirements_instal": [377, 380, 382, 389], "instal": [377, 380, 382, 389, 396, 482, 485, 500, 514], "nc_model_inst": [380, 389], "onnx_model": 380, "filtered_input_nod": 380, "remove_number_of_samples_from_shap": 380, "pytorchscriptmodel": 382, "modelrepositori": 383, "get_framework_from_path": [383, 444], "get_supported_framework": 383, "is_model_path": 383, "trust": [384, 473], "frozenpbmodel": 385, "kerasmodel": 387, "metagraphmodel": 388, "metagraph": 388, "savedmodelmodel": 390, "get_input_shap": 391, "fix_dynamic_shap": 391, "resourc": [394, 479, 487, 501], "download_yaml_config": 394, "model_info": 394, "download_fil": 394, "download_path": 394, "header": [394, 469, 485], "report_progress": 394, "unpack_arch": 394, "archive_path": 394, "unpack": 394, "archiv": 394, "get_yaml_url": 394, "model_src_dir": 394, "yaml_relative_loc": 394, "get_available_model": 396, "check_vers": 396, "framework_vers": 396, "supported_vers": 396, "validate_model_list": 396, "model_list": 396, "get_framework_module_nam": 396, "get_installed_framework": 396, "mappingdirect": 398, "namesmapp": 398, "framework_map": 398, "domain_map": 398, "domain_flavour_map": 398, "precision_map": 398, "map_nam": 398, "parameter_typ": 398, "execute_optimization_pytorch_script": 399, "execute_optimization_regular": 399, "parse_model_data_to_bench_nam": 399, "parse_log": 399, "optimization_detail": 399, "check_if_collect_tuning_histori": 399, "optimizationfactori": 400, "get_optim": 400, "optimization_script": [401, 406, 410, 413], "optimize_graph": [403, 407], "output_graph": [403, 407, 412, 488], "optimize_graph_config": [403, 407], "optimize_pt_script": 409, "output_model_nam": 410, "output_model_dir": 410, "optimizationinterfac": 410, "accuracycriterion": 413, "optimization_workdir": 414, "watcher": 414, "process_succeed": 414, "signal": [414, 444, 483], "was_history_file_chang": 414, "history_file_modification_tim": 414, "send_history_snapshot": 414, "execute_real_profil": 415, "profiling_detail": 415, "profilerfactori": [416, 421], "get_profil": [416, 421], "profiling_data": [416, 420, 421, 423, 442], "load_profiling_detail": 418, "json_path": 418, "config_path": 420, "initialize_graph": 423, "tf_modul": 423, "create_tf_config": 423, "num_warmup": 423, "get_node_by_nam": 423, "convert_nodes_to_list": 423, "build_dataload": 423, "delete_assign": 424, "wsgi": 425, "prepare_environ": 425, "app": [426, 459, 482], "history_snapshot_pars": [426, 459, 464], "request_data_processor": [426, 459, 464], "response_gener": [426, 459, 464, 465, 467, 470], "status": [427, 439, 443], "ensure_workdir_exists_and_writ": 428, "clean_workloads_wip_statu": 428, "wip": 428, "workloads_list": 428, "migrate_databas": 428, "latest": [428, 438, 487, 492, 502, 507], "alemb": [428, 485, 492], "notfoundexcept": [429, 457, 458], "accessdeniedexcept": 429, "deni": 429, "clienterrorexcept": 429, "internalexcept": 429, "workspace_path": [430, 444], "subject": [430, 456, 493], "send_respons": 430, "log_nam": 430, "additional_log_nam": [430, 438], "shell": [430, 438, 509], "process_dur": 430, "call_on": 430, "cwd": [430, 438], "universal_newlin": [430, 438], "startupinfo": [430, 438], "creationflag": [430, 438], "ignore_exit_cod": [430, 438], "pid": [430, 438], "env_arg": 430, "ncprocess": [430, 439], "refresh_workdir": 430, "is_multi_command": 430, "expir": 431, "expiringdictitem": 431, "expires_at": 431, "is_expir": 431, "expiringdict": 431, "initial_valu": 431, "ttl": 431, "120": 431, "userdict": 431, "githubinfo": 432, "hw": 433, "hwinfo": 433, "get_number_of_socket": 433, "get_distribut": 433, "distibut": 433, "get_bios_vers": 433, "bio": [433, 500], "is_turbo_boost_en": 433, "turbo": [433, 500], "boost": [433, 495, 502], "get_kernel_vers": 433, "get_framework_info": 433, "get_framework_dependency_info": 433, "subdepend": 433, "serializ": 435, "serialize_item": 435, "datetim": 435, "throw": 435, "typeerror": 435, "2016": 435, "84913": 435, "08t11": 435, "084913": 435, "change_log_level": 436, "optimizationpars": 437, "performancepars": 437, "update_parti": 437, "parsed_result": 437, "summarize_parti": 437, "summarize_valu": 437, "accuracypars": 437, "benchmarkparserfactori": 437, "get_pars": 437, "profilingpars": 437, "unify_tim": 437, "string_valu": 437, "micro": 437, "125": [437, 513], "6m": 437, "microsecond": 437, "output_dir": 438, "cmd": [438, 488], "docker": 438, "hub": 438, "aibt_tensorflow": 438, "7_3_mkldnn_tensorflow": 438, "111224": 438, "pull_imag": 438, "0c750a01": 438, "90e0": 438, "4aa8": 438, "99fe": 438, "a194d55a2046": 438, "time_start": 438, "2018": 438, "17t14": 438, "47": [438, 513], "352502": 438, "time_stop": 438, "25": [438, 506, 513], "110410": 438, "info_path": 438, "tail": 438, "along": [438, 487, 492], "is_ok": [438, 439], "subprocess": [438, 460], "popen": 438, "remove_log": 438, "properli": 439, "return_code_al": 439, "remove_successful_log": 439, "success": [439, 456, 487, 492], "sent": 442, "throughput": [442, 488], "acc_input_model": 442, "acc_optimized_model": 442, "size_input_model": 442, "size_optimized_model": 442, "path_optimized_model": 442, "optimization_tim": 442, "insert_data": 442, "calculate_throughput": 442, "readi": 442, "ensure_working_path_exist": 443, "clean_log": 443, "workdir_path": 443, "is_hidden": 444, "get_dataset_path": 444, "get_file_extens": 444, "lead": [444, 479, 495, 501], "is_dataset_fil": 444, "normalize_domain": 444, "underscor": 444, "normalize_framework": 444, "normalize_str": 444, "string_to_norm": 444, "get_model_zoo_config_path": 444, "model_dict": 444, "get_model_zoo_model_path": 444, "check_modul": 444, "get_module_vers": 444, "add_unit": 444, "load_model_config": 444, "load_dataloader_config": 444, "load_transforms_config": 444, "load_transforms_filter_config": 444, "meaning": [444, 499], "load_precisions_config": 444, "load_model_wise_param": 444, "load_metrics_config": 444, "get_metrics_dict": 444, "load_help_nc_param": 444, "replace_with_valu": 444, "file_path": 444, "verify_file_path": 444, "determine_ip": 444, "ip": 444, "is_development_env": 444, "nc_mode": 444, "filter_transform": 444, "parse_bool_valu": 444, "release_tag": 444, "get_shape_from_transform": 444, "get_height_width_from_s": 444, "parse_to_string_list": 444, "parse_to_float_list": 444, "export_to_csv": 444, "parse_vers": 444, "string_vers": 444, "remove_dataload": 445, "datalad": 445, "remove_accuracy_metr": 445, "set_evaluation_dataload": 445, "udpat": 445, "set_evaluation_dataset_path": 445, "get_performance_config": 445, "set_performance_cores_per_inst": 445, "get_performance_cores_per_inst": 445, "set_performance_num_of_inst": 445, "num_of_inst": [445, 474, 476, 488, 503], "get_performance_num_of_inst": 445, "set_accuracy_and_performance_batch_s": 445, "set_quantization_dataload": 445, "set_quantization_dataset_path": 445, "set_quantization_batch_s": 445, "set_workspac": [445, 454], "set_accuracy_go": 445, "accuracy_go": 445, "set_accuracy_metr": 445, "set_transform": 445, "process_transform": 445, "set_quantization_approach": 445, "set_input": 445, "set_output": 445, "set_quantization_sampling_s": 445, "set_performance_warmup": 445, "warmup": [445, 503], "set_performance_iter": 445, "set_optimization_precis": 445, "yaml_path": 445, "is_dummi": 446, "labelbal": 446, "set_transforms_from_list": 446, "transforms_list": 446, "set_dataset": 446, "postprocessschema": 447, "set_accuracy_postprocess_transform": 447, "set_precis": [448, 450], "sgdoptim": 452, "adamwoptim": 452, "adamoptim": 452, "crossentropylosscriterion": 452, "sparsecategoricalcrossentropycriterion": 452, "knowledgedistillationlosscriterion": 452, "weightcompressionapproach": 452, "parse_dict_value_to_float": 452, "parse_dict_value_to_int": 452, "wiseconfigdetail": 453, "wiseconfig": 453, "multiobject": 454, "acccriterion": 454, "exitpolici": 454, "set_timeout": 454, "set_max_tri": 454, "max_trial": [454, 483, 511], "trial": [454, 511], "set_performance_onli": 454, "set_random_se": 454, "float_represent": 455, "dumper": 455, "pruner_represent": 455, "outsid": 456, "create_simple_respons": 456, "gui": [456, 457, 461, 473, 491, 492], "messagequeu": 456, "queue": [456, 461], "post_failur": 456, "post_success": 456, "post_error": 456, "wait": 456, "global_config_directori": 457, "set_up": 457, "determine_values_from_environ": 457, "get_command_line_arg": 457, "determine_server_port": 457, "tri": [457, 511], "max_ports_tri": 457, "port_default": 457, "determine_gui_port": 457, "client": [457, 473], "server_port": 457, "unless": [457, 486], "is_port_taken": 457, "determine_log_level": 457, "determine_url_prefix": 457, "get_url": 457, "dump_token_to_fil": 457, "servicenotfoundexcept": 458, "unknown": 458, "connector": 460, "routingdefinit": 460, "rout": 460, "realtimeroutingdefinit": 460, "realtim": [460, 487], "deferredroutingdefinit": 460, "deferredsubprocessroutingdefinit": 460, "spawn": 460, "get_system_info": 460, "endpoint": 461, "run_serv": 461, "webserv": 461, "get_tls_arg": 461, "tl": [461, 473], "block_ifram": 461, "werkzeug": [461, 469], "ifram": 461, "csp": 461, "block_snif": 461, "mime": 461, "snif": 461, "require_api_token": 461, "author": [461, 493], "j": 461, "handle_api_cal": 461, "subpath": 461, "allow_api_cal": 461, "page_not_found": 461, "disable_cach": 461, "build_paramet": 461, "flask": [461, 473], "web_socket_publish": 461, "web_socket": 461, "flask_socketio": 461, "socketio": [461, 473], "benchmarkservic": 462, "workloadservic": [462, 466, 467, 470], "historysnapshotpars": 463, "history_snapshot": 463, "provide_perform": 463, "parse_history_snapshot": 463, "parse_history_item": 463, "history_item": 463, "extract_accuraci": 463, "extract_perform": 463, "modelservic": 465, "optimizationservic": 466, "profilingservic": 467, "generate_csv": 467, "processor": [468, 487, 488, 495, 500, 502, 504, 505, 506, 513], "requestdataprocessor": 468, "get_string_valu": 468, "responsegener": 469, "serve_from_filesystem": 469, "mimetyp": 469, "as_attach": 469, "add_refresh": 469, "refresh_tim": 469, "refresh": 469, "from_except": 469, "get_status_code_for_except": 469, "get_config": 470, "get_code_templ": 470, "get_output": 470, "symmetr": [472, 504, 510], "asymmetr": [472, 504], "conda": [473, 485, 487, 492, 507], "forg": [473, 485, 487, 492], "setup": [473, 486, 487, 492], "sign": [473, 504, 508], "certif": 473, "ui": 473, "5000": 473, "338174d13706855fc6924cec7b3a8ae8": 473, "listen": 473, "firewal": 473, "8080": 473, "cert": 473, "path_to_cert": 473, "crt": 473, "path_to_private_kei": 473, "encrypt": 473, "insecur": 473, "expos": 473, "forfeit": 473, "threat": 473, "button": [473, 491], "pop": 473, "recognit": [473, 481, 509], "finish": [473, 511], "synthet": 473, "plu": 473, "icon": 473, "unfold": 473, "On": [473, 504], "panel": 473, "navig": 473, "trash": 473, "visibl": 473, "cursor": 473, "prompt": [473, 481], "confirm": 473, "revers": 473, "exit": [473, 483, 488, 495, 511, 512], "pencil": 473, "light": [473, 480], "blue": 473, "color": 473, "row": [473, 501], "arrow": 473, "checkbox": 473, "chart": [473, 504, 508, 509], "offer": [473, 477], "conveni": 473, "variat": 473, "yellow": 473, "warn": 473, "remind": 473, "dialog": 473, "cryptographi": 473, "centercrop": [474, 476, 510, 511], "totensor": [474, 476, 510], "485": [474, 476, 513], "456": [474, 476], "406": [474, 476], "enough": [474, 504], "benchmarkconf": 474, "lpot": [474, 488, 502, 507], "pylint": 475, "flake8": 475, "autopep8": 475, "motiv": 475, "explan": 475, "bug": 475, "reproduc": 475, "submit": 475, "page": 475, "collabor": 475, "adher": 475, "often": [476, 479, 499, 501], "encount": 476, "consum": 476, "lack": 476, "faster": [476, 478, 502, 513], "dataloadermodul": 476, "hard": 476, "treat": 476, "eas": [476, 487, 492, 502], "advantag": [476, 503], "life": 476, "launch": [476, 495], "__next__": 476, "randomresizedcrop": [476, 510], "imagerecordit": 476, "path_imgrec": 476, "label_width": 476, "preprocess_thread": 476, "data_nthread": 476, "data_shap": 476, "label_nam": 476, "rand_crop": 476, "rand_mirror": 476, "shuffle_dataset": 476, "shuffle_chunk_se": 476, "shuffle_se": 476, "data_layer_typ": 476, "combine_mean_std": 476, "industri": [477, 494], "ensp": [477, 494, 510], "imagerecord": [477, 481, 512], "image_nam": 477, "cocorecord": 477, "gt": [477, 510], "lt": [477, 500], "float16": 477, "int64": 477, "style_transf": 477, "content": 477, "tfrecorddataset": [477, 511], "aid": 478, "deploy": 478, "infrastructur": 478, "power": [479, 500], "mobil": [479, 513], "workflow": [479, 487, 492, 495, 509, 514], "produc": 479, "softmax": 479, "l": [479, 509, 511], "kd": 479, "kullback": 479, "leibler": 479, "patient": 479, "compact": [479, 501], "ia": 479, "attach": 479, "shallow": 479, "deepest": 479, "deeper": 479, "paper": [479, 501], "10006": 479, "distillationconf": 479, "blendcnn": [479, 513], "loss_sum": 479, "iter_bar": 479, "tqdm": 479, "desc": [479, 501], "teacher_logit": 479, "promis": [480, 487, 501], "huge": 480, "bit": [480, 495, 502, 504], "heavi": 480, "booster": 480, "degrad": 480, "retrain": 480, "incorpor": [480, 511], "novel": 480, "builtin": 481, "program": [481, 488, 495], "addition": [481, 511], "enable_eager_execut": 481, "yaml_file_path": 481, "evaluation_result": 481, "evaluation_time_cost": 481, "partit": 481, "distributedsampl": 481, "train_sampl": 481, "train_dataset": 481, "num_replica": 481, "train_kwarg": 481, "adadelta": 481, "distributedoptim": 481, "named_paramet": 481, "broadcast_paramet": 481, "root_rank": 481, "broadcast_optimizer_st": 481, "set_epoch": 481, "batch_idx": 481, "nll_loss": 481, "log_interv": 481, "0f": 481, "tloss": 481, "6f": 481, "dry_run": 481, "test_func": 481, "host": 481, "num_of_process": 481, "002": 481, "ssh": 481, "readm": 481, "exactli": 481, "resnet50_v1": [481, 488], "resizecropimagenet": [481, 510], "realiz": [481, 494, 498, 505, 508], "tow": 481, "situat": 481, "node1": 481, "node2": 481, "TO": 481, "your_node1_nam": 481, "your_node2_nam": 481, "resnet50_fp32_pretrained_model": [481, 488], "nc_resnet50_v1": 481, "materi": 482, "explain": 482, "kit": 482, "bfp16": 482, "factor": [483, 500, 513], "oppos": 483, "entail": 483, "preserv": 483, "post_training_dynamic_qu": [483, 503], "post_training_static_qu": [483, 503, 511], "rel": [483, 503, 508, 511, 512, 513], "earli": [483, 504, 511, 512], "determinist": [483, 511], "wide": [484, 495, 504], "varieti": [484, 503, 511], "demonstr": [484, 487, 488, 497, 501, 509], "incompat": 485, "88": [485, 487, 506, 508, 513], "80": [485, 487, 506, 509, 513], "pyobject": 485, "reinstal": 485, "importerror": 485, "libgl": 485, "apt": [485, 487, 492], "yum": [485, 487, 492], "opencv": 485, "conflict": 485, "pend": 485, "27": [485, 487, 492, 513], "quick": [486, 512], "friendli": [486, 512], "let": [486, 503, 512], "up1": [486, 487, 514], "up2": [486, 487, 514], "valid_mixed_precis": 486, "concatv2": 486, "maxpool": 486, "avgpool": 486, "per_channel": [486, 511, 512], "per_tensor": [486, 511, 512], "addn": 486, "grappler_optim": 486, "constfold": 486, "debug_stripp": 486, "consolid": [487, 492], "streamlin": [487, 492], "scienc": [487, 492], "anaconda": [487, 492], "suit": [487, 492, 509], "prerequisit": 487, "nc": [487, 508, 511], "hello": 487, "world": 487, "lakecoop": 487, "lakeskylakeic": 487, "3ubuntu": 487, "18": [487, 513], "63": [487, 513], "73": [487, 513], "83": [487, 506, 508, 513], "up3": [487, 514], "gain": [487, 499, 502], "resnet50v1": 487, "70": [487, 506, 513], "26": [487, 506, 513], "23x": [487, 513], "resnet101": [487, 513], "77": [487, 506, 513], "40": [487, 500, 512, 513], "42x": [487, 506], "inception_v1": 487, "69": [487, 513], "57": [487, 506, 513], "88x": [487, 513], "inception_v2": 487, "00": [487, 506, 513], "96x": 487, "inception_v3": [487, 509], "65": [487, 506, 513], "36x": [487, 513], "inception_v4": 487, "37": [487, 506, 513], "59x": [487, 506, 513], "inception_resnet_v2": 487, "97x": 487, "mobilenetv1": 487, "ssd_resnet50_v1": 487, "90": [487, 506, 512, 513], "38": [487, 506, 513], "mask_rcnn_inception_v2": 487, "66x": [487, 513], "vgg16": [487, 513], "72": [487, 513], "75x": [487, 513], "vgg19": [487, 513], "97": [487, 506, 513], "79x": 487, "23": [487, 506, 513], "63x": 487, "resnext101_32x8d": [487, 513], "79": [487, 509, 513], "61x": [487, 513], "0a0": 487, "24aac32": 487, "bert_base_mrpc": 487, "19": [487, 506, 512, 513], "98x": [487, 513], "bert_base_cola": 487, "59": [487, 506, 513], "06": [487, 512, 513], "58": [487, 506, 513], "84": [487, 506, 513], "19x": [487, 513], "bert_base_st": 487, "89": [487, 506, 513], "28x": [487, 513], "bert_base_sst": 487, "sst": [487, 513], "91": [487, 513], "51": [487, 513], "86": [487, 506, 513], "30x": [487, 513], "bert_base_rt": 487, "68": [487, 506, 510, 513], "15x": [487, 513], "bert_large_mrpc": 487, "99": [487, 488, 506, 513], "73x": [487, 513], "bert_large_squad": 487, "92": [487, 506, 513], "85": [487, 508, 513], "93": [487, 506, 513], "01x": [487, 513], "bert_large_qnli": 487, "82": [487, 506, 513], "69x": [487, 513], "primarili": 488, "subexpress": 488, "bfloat16": [488, 495, 505], "explicitli": [488, 489], "op_to_stor": 488, "cpx": 488, "clx": 488, "force_bf16": 488, "executable_nc_wrapp": 488, "consequ": [488, 495], "resnet50_measur": 488, "8280": 488, "2021": 488, "165": 488, "139": 488, "567": [488, 513], "sec": [488, 513], "fp32_optimized_model": 488, "3x": 488, "325": 488, "56": [488, 506, 513], "068": 488, "992": 488, "broad": 491, "snippet": 491, "upload": 491, "qlinearop": [491, 504], "qintegerop": [491, 504], "lasso": [491, 501], "plan": [491, 495], "frequent": 492, "ask": 492, "esri": 492, "apach": [493, 514], "softwar": [493, 495, 500, 502, 507], "copyright": 493, "mit": 493, "accompani": 493, "wish": 493, "bibtex": 493, "misc": 493, "feng": 493, "tian": 493, "chuanqi": 493, "wang": 493, "guom": 493, "zhang": 493, "penghui": 493, "cheng": 493, "pengxin": 493, "yuan": 493, "haihao": 493, "shen": 493, "jiong": 493, "gong": 493, "titl": 493, "howpublish": 493, "year": 493, "2020": 493, "logo": [493, 500], "atom": 493, "phi": 493, "pentium": 493, "vtune": 493, "corpor": [493, 500], "subsidiari": [493, 500], "brand": [493, 500], "claim": [493, 500], "popularli": 494, "label_map": 494, "decis": 494, "ap": 494, "pr": 494, "curv": 494, "target_boxes_num": 494, "str_label": 494, "int_label": 494, "inturn": 494, "cocomap": 494, "vocmap": 494, "categor": 494, "multiclass": 494, "multilabel": 494, "multi_metr": 494, "newmetr": 494, "reflect": [494, 500, 510], "recent": 495, "growth": 495, "complex": 495, "fp16": [495, 504], "ieee": 495, "half": 495, "sixteen": 495, "bandwidth": 495, "3rd": [495, 502, 504, 505], "gen": [495, 502, 505], "codenam": 495, "avx512": [495, 504], "vcvtne2ps2bf16": 495, "vcvtneps2bf16": 495, "vdpbf16p": 495, "forc": [495, 505], "user_defined_funct": 495, "converted_model": 495, "avx512_bf16": 495, "persist": 496, "gap": 496, "brought": [496, 504], "tf2": 496, "h5": 496, "onnx_ml_pb2": 496, "hybridblock": 496, "0000": 496, "inc_model": 496, "saved_result": 496, "tflite": 497, "multi_object": 498, "peak": 498, "start_tim": 498, "_result_list": 498, "customobj": 498, "simultan": [499, 503], "arbitrari": 499, "benefit": [499, 501], "Of": 499, "cours": 499, "prune_conf": 499, "post_training_quantization_conf": 499, "quantization_aware_training_conf": 499, "configurationintel": 500, "platinum": [500, 506, 513], "8380": [500, 506, 513], "manufactur": 500, "m50cyp2sbstd": 500, "se5c6200": 500, "86b": 500, "0022": 500, "d64": 500, "2105220049": 500, "microcod": 500, "0xd0002b1": 500, "30ghz": 500, "3ghz": 500, "perf": 500, "256gb": 500, "16x16gb": 500, "ddr4": 500, "3200mt": 500, "nic": 500, "ethernet": 500, "10g": 500, "x550t": 500, "drive": 500, "1x": 500, "intel_ssdsc2kw01": 500, "953": 500, "9g": 500, "ct1000mx500ssd1": 500, "931": 500, "5g": 500, "publicli": 500, "degre": 500, "mark": 500, "trademark": 500, "briefli": 501, "maxim": [501, 511], "art": 501, "increasingli": 501, "crucial": 501, "rule": 501, "salient": 501, "nonzero": 501, "irregular": 501, "anywher": 501, "2in4": 501, "amper": 501, "gemm": 501, "ic": [501, 502], "oc": 501, "kh": 501, "kw": 501, "examin": 501, "lowest": 501, "head": 501, "fastform": 501, "formula": 501, "caus": 501, "num_train_epoch": 501, "pbar": 501, "progressbar": 501, "n_total": 501, "n_gpu": 501, "gradient_accumulation_step": 501, "clip_grad_norm_": 501, "max_grad_norm": 501, "rate": [501, 504], "cv": 501, "pat": 502, "keynot": 502, "intelon": 502, "sep": 502, "alibaba": 502, "cloud": 502, "chines": 502, "grain": 502, "aug": 502, "purif": 502, "sacrif": 502, "jun": 502, "partner": 502, "democrat": 502, "apr": 502, "ecosystem": 502, "mar": 502, "feb": 502, "sigopt": 502, "jan": 502, "tutori": [502, 514], "bilibili": 502, "dec": 502, "ml": 502, "doubl": 502, "mlperf": 502, "reconstruct": 502, "abound": 502, "cern": 502, "gan": 502, "3dgan": 502, "4th": 502, "iml": 502, "workshop": 502, "highli": 502, "intelcaff": 502, "aris": 503, "tell": 503, "henc": 503, "quant_aware_train": 503, "op_type_list": 503, "use_bf16": [503, 505], "weight_compress": [503, 512], "initial_spars": [503, 512], "target_spars": [503, 512], "98": [503, 506, 513], "prune_typ": [503, 512], "basic_magnitud": [503, 512], "start_epoch": [503, 512], "end_epoch": [503, 512], "update_frequ": 503, "prune_domain": 503, "tile_pattern_1x1": 503, "inter_num_of_thread": 503, "intra_num_of_thread": 503, "graph_optimization_level": 503, "disable_al": 503, "veri": [504, 511], "invent": 504, "int4": 504, "cost": 504, "theoret": 504, "affin": 504, "zeropoint": 504, "overflow": 504, "solv": [504, 507], "unseen": 504, "peopl": 504, "emul": 504, "pain": 504, "lossi": 504, "philosophi": 504, "val_dataset": 504, "val_dataload": 504, "worker": 504, "ping_memori": 504, "enhanc": 505, "cast": [505, 510], "bf16wrapper": 505, "retrac": 505, "bert_large_squad_stat": 506, "78": [506, 510, 513], "49": [506, 513], "48": [506, 513], "64x": 506, "bert_base_mrpc_stat": 506, "35": [506, 513], "09": [506, 513], "497": 506, "151": [506, 513], "29x": [506, 513], "bert_base_nli_mean_tokens_stsb_stat": 506, "55": [506, 513], "36": [506, 513], "546": 506, "60x": 506, "bert_base_sparse_mrpc_stat": 506, "551": 506, "153": [506, 513], "bert_mini_mrpc_stat": 506, "6962": 506, "3252": 506, "14x": [506, 513], "bert_mini_sst2_stat": 506, "6850": 506, "3218": 506, "13x": [506, 513], "distilbert_base_uncased_sst2_stat": 506, "1086": 506, "306": 506, "54x": [506, 513], "distilbert_base_uncased_mrpc_stat": 506, "1091": 506, "303": 506, "distilbert_base_uncased_emotion_stat": 506, "94": [506, 510, 513], "1081": 506, "53x": [506, 513], "minilm_l6_h384_uncased_sst2_stat": 506, "2594": 506, "1083": 506, "39x": 506, "roberta_base_mrpc_stat": 506, "508": 506, "31x": [506, 513], "distilroberta_base_wnli_stat": 506, "1097": 506, "315": 506, "47x": [506, 513], "paraphrase_xlm_r_multilingual_v1_stsb_stat": 506, "66": [506, 513], "552": 506, "44": [506, 513], "finbert_financial_phrasebank_stat": 506, "999": [506, 512], "292": 506, "site": 507, "assist": 507, "comparison": [507, 509], "sed": 507, "your_script": 507, "backbon": 508, "interact": 508, "mechan": 508, "sigopt_api_token": [508, 511], "sigopt_project_id": [508, 511], "sigopt_experiment_id": 508, "login": 508, "certain": 508, "suffici": 508, "ordinari": 508, "capac": 508, "sigopt_experiment_nam": [508, 511], "receiv": 508, "analysi": 508, "8266": 508, "8372": 508, "2132": 508, "7495": 508, "8299": 508, "8294": 508, "0837": 508, "8291": 508, "4469": 508, "visual": [509, 511], "discov": 509, "why": 509, "valuabl": 509, "instrument": 509, "writer": 509, "_pre_eval_hook": 509, "submodul": 509, "whitelist": 509, "_recordingobserv": 509, "output_tensors_dict": 509, "current_it": 509, "get_tensor_valu": 509, "_observer_forward_hook": 509, "_add_observer_": 509, "named_children": 509, "leaf": 509, "add_modul": 509, "register_forward_hook": 509, "dump_tim": 509, "summarywrit": 509, "_acc": 509, "tune_": 509, "add_graph": 509, "get_observer_dict": 509, "observer_dict": 509, "is_quant": 509, "add_histogram": 509, "bind_al": 509, "logdir_spec": 509, "tune_0_acc0": 509, "tune_1": 509, "tune_1_acc0": 509, "image_recognit": 509, "run_tuning_dump_tensor": 509, "sh": 509, "four": 509, "baseline_acc_0": 509, "776": 509, "tune_1_acc_0": 509, "095": 509, "runs_v3": 509, "inceptionv3": 509, "v0": 509, "cg": 509, "op_wis": [509, 511, 512], "bash": 509, "run_tun": 509, "topologi": 509, "dataset_loc": 509, "inceptionv3_fp32_pretrained_model": 509, "output_model": 509, "nc_inceptionv3": 509, "inceptionv3_dump_tensor": 509, "poor": 509, "disappear": 509, "randomcrop": 510, "cropres": 510, "decodeimag": 510, "jpeg": 510, "encodejp": 510, "alignimagechannel": 510, "116": 510, "103": 510, "017": 510, "bilinearimagenet": [510, 512], "topilimag": 510, "padding_mod": 510, "border": 510, "colorjitt": 510, "bright": 510, "satur": 510, "hue": 510, "jitter": 510, "tondarrai": 510, "max_trail": 511, "scale_propagation_max_pool": 511, "scale_propagation_concat": 511, "first_conv_or_matmul_quant": 511, "2000": 511, "tf_record": 511, "model_wis": [511, 512], "conv1": [511, 512], "pool1": 511, "conv2": 511, "guarante": 511, "classic": 511, "black": 511, "come": 511, "discret": 511, "compli": 511, "posterior": 511, "focu": 511, "short": 511, "never": 511, "loglevel": 511, "endlessli": 511, "idea": 511, "primari": 511, "smbo": 511, "hyperparamet": 511, "appl": 511, "surrog": 511, "quantil": 511, "x1": 511, "x2": 511, "densiti": 511, "parzen": 511, "greatest": 511, "hour": 511, "dai": 511, "perspect": 511, "abctunestrategi": 511, "mobilenet_v1": 512, "onnxrt_integ": 512, "onnxrt_qlinear": 512, "image_tensor": 512, "subsect": 512, "beta_1": 512, "beta_2": 512, "epsilon": 512, "sparsecategoricalcrossentropi": 512, "reduct": 512, "sum_over_batch_s": 512, "from_logit": 512, "54": [512, 513], "nesterov": 512, "weight_decai": 512, "overal": 512, "ye": 513, "rnn": 513, "unet": 513, "performancethroughput": 513, "efficientnet": 513, "43": 513, "32x": 513, "cnn": 513, "incept": 513, "53": 513, "57x": 513, "46": 513, "61": 513, "58x": 513, "39": 513, "11x": 513, "51x": 513, "06x": 513, "25x": 513, "163": 513, "133": 513, "22x": 513, "111": 513, "20x": 513, "v3": 513, "43x": 513, "v4": 513, "33x": 513, "44x": 513, "374": 513, "226": 513, "41x": 513, "fashion": 513, "359": 513, "244": 513, "172": 513, "76x": 513, "112": 513, "35x": 513, "26x": 513, "56x": 513, "93x": 513, "178": 513, "156": 513, "18x": 513, "albert": 513, "barthez": 513, "81": 513, "82x": 513, "203": 513, "216": 513, "102": 513, "10x": 513, "sst2": 513, "218": 513, "stsb": 513, "49x": 513, "70x": 513, "50x": 513, "40x": 513, "3878": 513, "3717": 513, "04x": 513, "camembert": 513, "188": 513, "91x": 513, "ctrl": 513, "deberta": 513, "124": 513, "81x": 513, "347": 513, "382": 513, "198": 513, "flaubert": 513, "561": 513, "370": 513, "52x": 513, "hubert": 513, "409": 513, "181": 513, "longform": 513, "mbart": 513, "16x": 513, "639": 513, "490": 513, "lvwerra": 513, "pegasu": 513, "samsum": 513, "peleenet": 513, "419": 513, "316": 513, "resnet18": 513, "686": 513, "332": 513, "07x": 513, "611": 513, "333": 513, "83x": 513, "327": 513, "162": 513, "175": 513, "197": 513, "99x": 513, "se_resnext50_32x4d": 513, "308": 513, "144": 513, "squeezebert": 513, "186": 513, "155": 513, "78x": 513, "transfo": 513, "xl": 513, "37x": 513, "wave2vec2": 513, "60": 513, "21x": 513, "114": 513, "yolo": 513, "690": 513, "330": 513, "09x": 513, "614": 513, "334": 513, "84x": 513, "410": 513, "168": 513, "finetun": 513, "resnext101_32x16d_wsl": 513, "1189": 513, "680": 513, "677": 513, "381": 513, "alexnet": 513, "960": 513, "469": 513, "17": 513, "05x": 513, "962": 513, "466": 513, "arcfac": 513, "235": 513, "130": 513, "294": 513, "34x": 513, "604": 513, "80x": 513, "caffenet": 513, "1501": 513, "536": 513, "1493": 513, "533": 513, "1372": 513, "541": 513, "480": 513, "1250": 513, "753": 513, "1130": 513, "748": 513, "emot": 513, "ferplu": 513, "336": 513, "65x": 513, "fcn": 513, "googlenet": 513, "740": 513, "587": 513, "770": 513, "824": 513, "601": 513, "819": 513, "597": 513, "45x": 513, "613": 513, "506": 513, "2454": 513, "1543": 513, "2164": 513, "1564": 513, "38x": 513, "2147": 513, "1046": 513, "1877": 513, "1054": 513, "mobilenetv2": 513, "2751": 513, "1797": 513, "2656": 513, "1835": 513, "7615": 513, "7646": 513, "764": 513, "901": 513, "434": 513, "141": 513, "7614": 513, "575": 513, "952": 513, "433": 513, "7226": 513, "7229": 513, "761": 513, "432": 513, "615": 513, "722": 513, "032": 513, "894": 513, "885": 513, "454": 513, "95x": 513, "603": 513, "455": 513, "644": 513, "636": 513, "254": 513, "791": 513, "shufflenet": 513, "2298": 513, "1480": 513, "55x": 513, "1951": 513, "1490": 513, "squeezenet": 513, "2588": 513, "1605": 513, "2566": 513, "1936": 513, "725": 513, "570": 513, "27x": 513, "666": 513, "539": 513, "641": 513, "519": 513, "633": 513, "492": 513, "542": 513, "401": 513, "68x": 513, "tini": 513, "yolov3": 513, "648": 513, "518": 513, "221": 513, "319": 513, "307": 513, "yolov4": 513, "zfnet": 513, "459": 513, "261": 513, "460": 513, "264": 513, "74x": 513, "441": 513, "337": 513, "272": 513, "211": 513, "152": 513, "423": 513, "180": 513, "311": 513, "taskdataset": 513, "accuracyspars": 513, "ratiospars": 513, "commentsbalanc": 513, "unbalanc": 513, "classificationimagenet": 513, "76top": 513, "13top": 513, "magnitudepost": 513, "magnitudequant": 513, "answeringsquad": 513, "34f1": 513, "2x1": 513, "lassounbalanc": 513, "classificationmnli": 513, "mm": 513, "lockbalanc": 513, "classificationsst": 513, "32accuraci": 513, "sensitivitybalanc": 513, "classificationqqp": 513, "classificationqnli": 513, "54accuraci": 513, "em": 513, "87f1": 513, "momentumunbalanc": 513, "momentumbalanc": 513, "classificationmrpc": 513, "52f1": 513, "61accuraci": 513, "7965": 513, "wideresnet40": 513, "9522": 513, "8178": 513, "0213": 513, "5494": 513, "7153": 513, "5540": 513, "0046": 513, "vgg": 513, "7022": 513, "7415": 513, "7025": 513, "0003": 513, "6739": 513, "7399": 513, "6845": 513, "0106": 513, "7034": 513, "8382": 513, "bilstm": 513, "8314": 513, "9403": 513, "9048": 513, "0734": 513, "7323": 513, "8256": 513, "8084": 513, "8814": 513, "7442": 513, "8371": 513, "0119": 513, "0115": 513, "tinybert": 513, "8018": 513, "8044": 513, "8363": 513, "8411": 513, "8025": 513, "8074": 513, "0007": 513, "0030": 513, "8626": 513, "8213": 513, "9091": 513, "8782": 513, "8684": 513, "8259": 513, "0058": 513, "distilroberta": 513, "6057": 513, "6455": 513, "6187": 513, "0130": 513, "c6i": 513, "2xlarg": 513, "c6a": 513, "c6g": 513, "a100cuda": 513, "mkl": 514, "nativ": 514, "upstream": 514, "opt": 514}, "objects": {"": [[33, 0, 0, "-", "6ece06672ed3_v1_14"], [34, 0, 0, "-", "6f0d0f71d92e_v1_13"], [35, 0, 0, "-", "9e89549a08c8_v1_11"], [36, 0, 0, "-", "block_mask"], [37, 0, 0, "-", "env"], [256, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[33, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [33, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[37, 1, 1, "", "run_migrations_offline"], [37, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[256, 2, 1, "", "Benchmark"], [256, 2, 1, "", "DistillationConfig"], [256, 2, 1, "", "Pruning"], [256, 2, 1, "", "Quantization"], [39, 0, 0, "-", "adaptor"], [162, 0, 0, "-", "algorithm"], [164, 0, 0, "-", "benchmark"], [167, 0, 0, "-", "conf"], [169, 0, 0, "-", "config"], [170, 0, 0, "-", "contrib"], [178, 0, 0, "-", "data"], [220, 0, 0, "-", "experimental"], [257, 0, 0, "-", "metric"], [258, 0, 0, "-", "mix_precision"], [260, 0, 0, "-", "model"], [265, 0, 0, "-", "objective"], [268, 0, 0, "-", "pruners"], [272, 0, 0, "-", "pruning"], [273, 0, 0, "-", "quantization"], [278, 0, 0, "-", "strategy"], [286, 0, 0, "-", "training"], [290, 0, 0, "-", "utils"], [426, 0, 0, "-", "ux"], [471, 0, 0, "-", "version"]], "neural_compressor.Pruning": [[256, 3, 1, "", "on_epoch_begin"], [256, 3, 1, "", "on_epoch_end"], [256, 3, 1, "", "on_step_begin"], [256, 3, 1, "", "on_step_end"]], "neural_compressor.adaptor": [[38, 0, 0, "-", "adaptor"], [40, 0, 0, "-", "mxnet"], [41, 0, 0, "-", "mxnet_utils"], [43, 0, 0, "-", "onnxrt"], [45, 0, 0, "-", "ox_utils"], [68, 0, 0, "-", "pytorch"], [69, 0, 0, "-", "query"], [70, 0, 0, "-", "tensorflow"], [130, 0, 0, "-", "tf_utils"], [156, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[38, 2, 1, "", "Adaptor"], [38, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[38, 3, 1, "", "convert"], [38, 3, 1, "", "evaluate"], [38, 3, 1, "", "inspect_tensor"], [38, 3, 1, "", "quantize"], [38, 3, 1, "", "quantize_input"], [38, 3, 1, "", "query_fused_patterns"], [38, 3, 1, "", "query_fw_capability"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet": [[40, 2, 1, "", "MXNetQuery"], [40, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[40, 3, 1, "", "get_fuse_patterns"], [40, 3, 1, "", "get_mixed_precision_combination"], [40, 3, 1, "", "get_op_types"], [40, 3, 1, "", "get_precisions"], [40, 3, 1, "", "get_quantization_capability"], [40, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[40, 3, 1, "", "evaluate"], [40, 3, 1, "", "inspect_tensor"], [40, 3, 1, "", "quantize"], [40, 3, 1, "", "query_fw_capability"], [40, 3, 1, "", "recover_tuned_model"], [40, 3, 1, "", "save"], [40, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[42, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[42, 2, 1, "", "CalibCollector"], [42, 2, 1, "", "OpType"], [42, 2, 1, "", "TensorCollector"], [42, 1, 1, "", "calib_model"], [42, 1, 1, "", "check_mx_version"], [42, 1, 1, "", "distribute_calib_tensors"], [42, 1, 1, "", "ensure_list"], [42, 1, 1, "", "fuse"], [42, 1, 1, "", "is_model_quantized"], [42, 1, 1, "", "isiterable"], [42, 1, 1, "", "make_module"], [42, 1, 1, "", "make_nc_model"], [42, 1, 1, "", "make_symbol_block"], [42, 1, 1, "", "parse_tune_config"], [42, 1, 1, "", "prepare_model_data"], [42, 1, 1, "", "quantize_sym_model"], [42, 1, 1, "", "query_quantizable_nodes"], [42, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[43, 2, 1, "", "ONNXRTAdaptor"], [43, 2, 1, "", "ONNXRTQuery"], [43, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [43, 2, 1, "", "ONNXRT_QDQAdaptor"], [43, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [43, 2, 1, "", "ONNXRT_QOperatorAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor": [[43, 3, 1, "", "evaluate"], [43, 3, 1, "", "inspect_tensor"], [43, 3, 1, "", "quantize"], [43, 3, 1, "", "query_fw_capability"], [43, 3, 1, "", "recover"], [43, 3, 1, "", "save"], [43, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[43, 3, 1, "", "get_graph_optimization"], [43, 3, 1, "", "get_op_types"], [43, 3, 1, "", "get_op_types_by_precision"], [43, 3, 1, "", "get_precisions"], [43, 3, 1, "", "get_quantization_capability"], [43, 3, 1, "", "get_version"]], "neural_compressor.adaptor.ox_utils": [[44, 0, 0, "-", "calibration"], [57, 0, 0, "-", "operators"], [66, 0, 0, "-", "quantizer"], [67, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[44, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[44, 3, 1, "", "augment_graph"], [44, 3, 1, "", "calculate_quantization_params"], [44, 3, 1, "", "calculate_scale_zeropoint"], [44, 3, 1, "", "dump_calibration"], [44, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[46, 0, 0, "-", "activation"], [47, 0, 0, "-", "argmax"], [48, 0, 0, "-", "attention"], [49, 0, 0, "-", "binary_op"], [50, 0, 0, "-", "concat"], [51, 0, 0, "-", "conv"], [52, 0, 0, "-", "direct_q8"], [53, 0, 0, "-", "embed_layernorm"], [54, 0, 0, "-", "gather"], [55, 0, 0, "-", "gavgpool"], [56, 0, 0, "-", "gemm"], [58, 0, 0, "-", "lstm"], [59, 0, 0, "-", "matmul"], [60, 0, 0, "-", "maxpool"], [61, 0, 0, "-", "ops"], [62, 0, 0, "-", "pad"], [63, 0, 0, "-", "pooling"], [64, 0, 0, "-", "resize"], [65, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[61, 1, 1, "", "op_registry"]], "neural_compressor.adaptor.ox_utils.util": [[67, 2, 1, "", "QuantFormat"], [67, 2, 1, "", "QuantType"], [67, 2, 1, "", "QuantizationMode"], [67, 2, 1, "", "QuantizedInitializer"], [67, 2, 1, "", "QuantizedValue"], [67, 2, 1, "", "QuantizedValueType"], [67, 1, 1, "", "attribute_to_kwarg"], [67, 1, 1, "", "cast_tensor"], [67, 1, 1, "", "find_by_name"], [67, 1, 1, "", "quantize_data"], [67, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[68, 2, 1, "", "PyTorchAdaptor"], [68, 2, 1, "", "PyTorchQuery"], [68, 2, 1, "", "PyTorch_FXAdaptor"], [68, 2, 1, "", "PyTorch_IPEXAdaptor"], [68, 2, 1, "", "TemplateAdaptor"], [68, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[68, 3, 1, "", "evaluate"], [68, 3, 1, "", "get_non_quant_modules"], [68, 3, 1, "", "inspect_tensor"], [68, 3, 1, "", "is_fused_child"], [68, 3, 1, "", "is_fused_op"], [68, 3, 1, "", "is_last_fused_child"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "query_fw_capability"], [68, 3, 1, "", "save"], [68, 3, 1, "", "set_tensor"], [68, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[68, 3, 1, "", "get_op_types"], [68, 3, 1, "", "get_op_types_by_precision"], [68, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[68, 3, 1, "", "convert_sub_graph"], [68, 3, 1, "", "evaluate"], [68, 3, 1, "", "fuse_fx_model"], [68, 3, 1, "", "prepare_sub_graph"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "query_fw_capability"], [68, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[68, 3, 1, "", "evaluate"], [68, 3, 1, "", "inspect_tensor"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "query_fw_capability"], [68, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[68, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[69, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[69, 3, 1, "", "get_fuse_patterns"], [69, 3, 1, "", "get_mixed_precision_combination"], [69, 3, 1, "", "get_op_types"], [69, 3, 1, "", "get_precisions"], [69, 3, 1, "", "get_quantization_capability"], [69, 3, 1, "", "get_version"], [69, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[70, 2, 1, "", "TensorFlowAdaptor"], [70, 2, 1, "", "TensorflowQuery"], [70, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[70, 3, 1, "", "convert"], [70, 3, 1, "", "evaluate"], [70, 3, 1, "", "fused_node_mapping"], [70, 3, 1, "", "get_optype_wise_ability"], [70, 3, 1, "", "inspect_activation"], [70, 3, 1, "", "inspect_tensor"], [70, 3, 1, "", "inspect_weight_and_bias"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "quantize_input"], [70, 3, 1, "", "query_fw_capability"], [70, 3, 1, "", "recover_tuned_model"], [70, 3, 1, "", "save"], [70, 3, 1, "", "set_tensor"], [70, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[70, 3, 1, "", "generate_internal_patterns"], [70, 3, 1, "", "get_eightbit_patterns"], [70, 3, 1, "", "get_fuse_patterns"], [70, 3, 1, "", "get_mixed_precision_combination"], [70, 3, 1, "", "get_op_types"], [70, 3, 1, "", "get_op_types_by_precision"], [70, 3, 1, "", "get_precisions"], [70, 3, 1, "", "get_quantization_capability"], [70, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[70, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[71, 0, 0, "-", "graph_converter"], [72, 0, 0, "-", "graph_converter_without_calib"], [111, 0, 0, "-", "graph_rewriter"], [129, 0, 0, "-", "graph_util"], [131, 0, 0, "-", "quantize_graph"], [148, 0, 0, "-", "quantize_graph_common"], [151, 0, 0, "-", "transform_graph"], [154, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[74, 0, 0, "-", "bf16"], [99, 0, 0, "-", "generic"], [110, 0, 0, "-", "graph_base"], [119, 0, 0, "-", "int8"], [125, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[73, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[73, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[73, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, 0, 0, "-", "convert_add_to_biasadd"], [76, 0, 0, "-", "convert_layout"], [77, 0, 0, "-", "convert_leakyrelu"], [78, 0, 0, "-", "convert_nan_to_random"], [79, 0, 0, "-", "convert_placeholder_to_const"], [80, 0, 0, "-", "dequantize_cast_optimizer"], [81, 0, 0, "-", "dilated_contraction"], [82, 0, 0, "-", "dummy_biasadd"], [83, 0, 0, "-", "expanddims_optimizer"], [84, 0, 0, "-", "fetch_weight_from_reshape"], [85, 0, 0, "-", "fold_batch_norm"], [86, 0, 0, "-", "fold_constant"], [87, 0, 0, "-", "fuse_biasadd_add"], [88, 0, 0, "-", "fuse_column_wise_mul"], [89, 0, 0, "-", "fuse_conv_with_math"], [90, 0, 0, "-", "fuse_decomposed_bn"], [91, 0, 0, "-", "fuse_decomposed_in"], [92, 0, 0, "-", "fuse_gelu"], [93, 0, 0, "-", "fuse_layer_norm"], [94, 0, 0, "-", "fuse_pad_with_conv"], [95, 0, 0, "-", "fuse_pad_with_fp32_conv"], [96, 0, 0, "-", "fuse_reshape_transpose"], [97, 0, 0, "-", "graph_cse_optimizer"], [98, 0, 0, "-", "grappler_pass"], [100, 0, 0, "-", "insert_print_node"], [101, 0, 0, "-", "move_squeeze_after_relu"], [102, 0, 0, "-", "pre_optimize"], [103, 0, 0, "-", "remove_training_nodes"], [104, 0, 0, "-", "rename_batch_norm"], [105, 0, 0, "-", "split_shared_input"], [106, 0, 0, "-", "strip_equivalent_nodes"], [107, 0, 0, "-", "strip_unused_nodes"], [108, 0, 0, "-", "switch_optimizer"], [109, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[75, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[76, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[77, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[78, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[79, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[79, 3, 1, "", "do_transformation"], [79, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[80, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[81, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[82, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[83, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[84, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[85, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[85, 3, 1, "", "do_transformation"], [85, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[86, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[86, 3, 1, "", "check_all_folded"], [86, 3, 1, "", "check_const_inputs"], [86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[87, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[88, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[89, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[90, 1, 1, "", "get_const_dim_count"], [90, 1, 1, "", "node_from_map"], [90, 1, 1, "", "node_name_from_input"], [90, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[91, 1, 1, "", "get_const_dim_count"], [91, 1, 1, "", "node_from_map"], [91, 1, 1, "", "node_name_from_input"], [91, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[92, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[93, 2, 1, "", "FuseLayerNormOptimizer"], [93, 1, 1, "", "node_from_map"], [93, 1, 1, "", "node_name_from_input"], [93, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[94, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[95, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[96, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[97, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[98, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[100, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[101, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[103, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[104, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[105, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[106, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[107, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[108, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[109, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[110, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[112, 0, 0, "-", "freeze_fake_quant"], [113, 0, 0, "-", "freeze_value"], [114, 0, 0, "-", "freeze_value_without_calib"], [115, 0, 0, "-", "fuse_conv_redundant_dequantize"], [116, 0, 0, "-", "fuse_conv_requantize"], [117, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [118, 0, 0, "-", "fuse_matmul_requantize"], [120, 0, 0, "-", "meta_op_optimizer"], [121, 0, 0, "-", "post_hostconst_converter"], [122, 0, 0, "-", "post_quantized_op_cse"], [123, 0, 0, "-", "rnn_convert"], [124, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[112, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[113, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[113, 3, 1, "", "do_transformation"], [113, 3, 1, "", "generate_output_graph"], [113, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[114, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[114, 3, 1, "", "generate_output_graph"], [114, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[115, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[116, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[117, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[118, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [118, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [118, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [118, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[120, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[121, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[122, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[123, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[124, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[126, 0, 0, "-", "insert_qdq_pattern"], [127, 0, 0, "-", "merge_duplicated_qdq"], [128, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[126, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[127, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[128, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[129, 2, 1, "", "GraphAnalyzer"], [129, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[129, 3, 1, "", "add_node"], [129, 3, 1, "", "dump_graph"], [129, 3, 1, "", "get_graph_input_output"], [129, 4, 1, "", "graph"], [129, 3, 1, "", "has_positive_input"], [129, 3, 1, "", "parse_graph"], [129, 3, 1, "", "query_fusion_pattern_nodes"], [129, 3, 1, "", "remove_node"], [129, 3, 1, "", "remove_node_with_single_input_output"], [129, 3, 1, "", "replace_const_node"], [129, 3, 1, "", "replace_constant_graph_with_constant_node"], [129, 3, 1, "", "replace_node"], [129, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[129, 3, 1, "", "compare_node_attr"], [129, 3, 1, "", "create_constant_node"], [129, 3, 1, "", "create_node"], [129, 3, 1, "", "node_name_from_input"], [129, 3, 1, "", "set_attr_bool"], [129, 3, 1, "", "set_attr_dtype"], [129, 3, 1, "", "set_attr_float"], [129, 3, 1, "", "set_attr_int"], [129, 3, 1, "", "set_attr_int_list"], [129, 3, 1, "", "set_attr_string"], [129, 3, 1, "", "set_attr_string_list"], [129, 3, 1, "", "set_attr_tensor"], [129, 3, 1, "", "set_attr_type_list"], [129, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[139, 0, 0, "-", "qdq"], [141, 0, 0, "-", "quantize_graph_base"], [142, 0, 0, "-", "quantize_graph_bn"], [143, 0, 0, "-", "quantize_graph_concatv2"], [144, 0, 0, "-", "quantize_graph_conv"], [145, 0, 0, "-", "quantize_graph_for_intel_cpu"], [146, 0, 0, "-", "quantize_graph_matmul"], [147, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[132, 0, 0, "-", "fuse_qdq_bn"], [133, 0, 0, "-", "fuse_qdq_concatv2"], [134, 0, 0, "-", "fuse_qdq_conv"], [135, 0, 0, "-", "fuse_qdq_deconv"], [136, 0, 0, "-", "fuse_qdq_in"], [137, 0, 0, "-", "fuse_qdq_matmul"], [138, 0, 0, "-", "fuse_qdq_pooling"], [140, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[132, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[132, 3, 1, "", "apply_the_transform"], [132, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[133, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[133, 3, 1, "", "apply_the_transform"], [133, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[134, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[134, 3, 1, "", "apply_the_transform"], [134, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[135, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[135, 3, 1, "", "apply_the_transform"], [135, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[136, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[136, 3, 1, "", "apply_the_transform"], [136, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[137, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[137, 3, 1, "", "apply_batchmatmulv2_fusion"], [137, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [137, 3, 1, "", "apply_matmul_biasadd_fusion"], [137, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [137, 3, 1, "", "apply_the_transform"], [137, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[138, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[138, 3, 1, "", "apply_the_transform"], [138, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[140, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[140, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[141, 2, 1, "", "QuantizeGraphBase"], [141, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[141, 3, 1, "", "do_transform"], [141, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[141, 3, 1, "", "add_output_graph_node"], [141, 3, 1, "", "apply_the_transform"], [141, 3, 1, "", "create_nodes_map"], [141, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[142, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[142, 3, 1, "", "apply_the_transform"], [142, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[143, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[143, 3, 1, "", "apply_the_transform"], [143, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[144, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[144, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [144, 3, 1, "", "apply_the_transform"], [144, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[145, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[145, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[146, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[147, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[148, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[148, 3, 1, "", "copy_attr"], [148, 3, 1, "", "create_constant_node"], [148, 3, 1, "", "create_node"], [148, 3, 1, "", "ensure_tensor_name_has_port"], [148, 3, 1, "", "get_sorted_graph"], [148, 3, 1, "", "node_name_from_input"], [148, 3, 1, "", "remove_training_nodes"], [148, 3, 1, "", "set_attr_bool"], [148, 3, 1, "", "set_attr_dtype"], [148, 3, 1, "", "set_attr_float"], [148, 3, 1, "", "set_attr_int"], [148, 3, 1, "", "set_attr_string"], [148, 3, 1, "", "set_attr_string_list"], [148, 3, 1, "", "set_attr_tensor"], [148, 3, 1, "", "set_attr_type_list"], [148, 3, 1, "", "split_shared_inputs"], [148, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[149, 0, 0, "-", "bias_correction"], [150, 0, 0, "-", "graph_transform_base"], [152, 0, 0, "-", "insert_logging"], [153, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[149, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[149, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[152, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[152, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[153, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[153, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[154, 1, 1, "", "disable_random"], [154, 1, 1, "", "get_tensor_by_name"], [154, 1, 1, "", "get_tensor_val_from_graph_node"], [154, 1, 1, "", "is_ckpt_format"], [154, 1, 1, "", "is_saved_model_format"], [154, 1, 1, "", "iterator_sess_run"], [154, 1, 1, "", "read_graph"], [154, 1, 1, "", "strip_equivalent_nodes"], [154, 1, 1, "", "strip_unused_nodes"], [154, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[155, 0, 0, "-", "bf16_convert"], [157, 0, 0, "-", "onnx"], [158, 0, 0, "-", "symbolic_trace"], [159, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.util": [[159, 1, 1, "", "append_attr"], [159, 1, 1, "", "get_embedding_contiguous"]], "neural_compressor.algorithm": [[162, 2, 1, "", "Algorithm"], [162, 2, 1, "", "AlgorithmScheduler"], [160, 0, 0, "-", "algorithm"], [162, 1, 1, "", "algorithm_registry"], [161, 0, 0, "-", "fast_bias_correction"], [163, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[160, 2, 1, "", "Algorithm"], [160, 2, 1, "", "AlgorithmScheduler"], [160, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[161, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[163, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[164, 2, 1, "", "Benchmark"]], "neural_compressor.conf": [[165, 0, 0, "-", "config"], [166, 0, 0, "-", "dotdict"], [168, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[165, 2, 1, "", "Benchmark_Conf"], [165, 2, 1, "", "Conf"], [165, 2, 1, "", "DefaultConf"], [165, 2, 1, "", "Distillation_Conf"], [165, 2, 1, "", "Graph_Optimization_Conf"], [165, 2, 1, "", "MixedPrecision_Conf"], [165, 2, 1, "", "NASConfig"], [165, 2, 1, "", "Pruning_Conf"], [165, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[166, 2, 1, "", "DotDict"], [166, 1, 1, "", "deep_get"], [166, 1, 1, "", "deep_set"]], "neural_compressor.config": [[169, 2, 1, "", "DistillationConfig"]], "neural_compressor.contrib": [[171, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[172, 0, 0, "-", "sigopt"], [173, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[172, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[172, 3, 1, "", "next_tune_cfg"], [172, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[173, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[173, 3, 1, "", "stop"], [173, 3, 1, "", "traverse"]], "neural_compressor.data": [[178, 2, 1, "", "BaseTransform"], [178, 2, 1, "", "DATASETS"], [178, 2, 1, "", "DataLoader"], [178, 2, 1, "", "Dataset"], [178, 2, 1, "", "FILTERS"], [178, 2, 1, "", "Filter"], [178, 2, 1, "", "IterableDataset"], [178, 2, 1, "", "TRANSFORMS"], [175, 0, 0, "-", "dataloaders"], [178, 1, 1, "", "dataset_registry"], [177, 0, 0, "-", "datasets"], [178, 1, 1, "", "filter_registry"], [178, 1, 1, "", "transform_registry"], [181, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[178, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[175, 2, 1, "", "DataLoader"], [174, 0, 0, "-", "dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[174, 2, 1, "", "DataLoader"]], "neural_compressor.data.datasets": [[176, 0, 0, "-", "imagenet_dataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[176, 2, 1, "", "ONNXRTImagenetDataset"], [176, 2, 1, "", "TensorflowImagenetDataset"]], "neural_compressor.data.transforms": [[179, 0, 0, "-", "coco_transform"], [180, 0, 0, "-", "imagenet_transform"]], "neural_compressor.data.transforms.coco_transform": [[179, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, 2, 1, "", "BilinearImagenetTransform"], [180, 2, 1, "", "ONNXResizeCropImagenetTransform"], [180, 2, 1, "", "OnnxBilinearImagenetTransform"], [180, 2, 1, "", "ParseDecodeImagenetTransform"], [180, 2, 1, "", "ResizeWithAspectRatio"], [180, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental": [[220, 2, 1, "", "Benchmark"], [220, 2, 1, "", "Component"], [220, 2, 1, "", "Distillation"], [220, 2, 1, "", "Graph_Optimization"], [220, 2, 1, "", "MixedPrecision"], [220, 2, 1, "", "ModelConversion"], [220, 2, 1, "", "NAS"], [220, 2, 1, "", "Pruning"], [220, 2, 1, "", "Quantization"], [182, 0, 0, "-", "benchmark"], [185, 0, 0, "-", "common"], [191, 0, 0, "-", "component"], [213, 0, 0, "-", "data"], [218, 0, 0, "-", "distillation"], [219, 0, 0, "-", "graph_optimization"], [227, 0, 0, "-", "metric"], [229, 0, 0, "-", "mixed_precision"], [230, 0, 0, "-", "model_conversion"], [238, 0, 0, "-", "nas"], [242, 0, 0, "-", "pruning"], [243, 0, 0, "-", "pruning_recipes"], [247, 0, 0, "-", "pytorch_pruner"], [254, 0, 0, "-", "quantization"], [255, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[220, 4, 1, "", "b_dataloader"], [220, 4, 1, "", "b_func"], [220, 3, 1, "", "config_instance"], [220, 3, 1, "", "generate_prefix"], [220, 4, 1, "", "metric"], [220, 4, 1, "", "model"], [220, 4, 1, "", "postprocess"], [220, 4, 1, "", "results"], [220, 3, 1, "", "run_instance"], [220, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[220, 4, 1, "", "eval_dataloader"], [220, 4, 1, "", "eval_func"], [220, 3, 1, "", "execute"], [220, 4, 1, "", "model"], [220, 3, 1, "", "on_after_compute_loss"], [220, 3, 1, "", "on_batch_begin"], [220, 3, 1, "", "on_batch_end"], [220, 3, 1, "", "on_before_optimizer_step"], [220, 3, 1, "", "on_epoch_begin"], [220, 3, 1, "", "on_epoch_end"], [220, 3, 1, "", "on_post_grad"], [220, 3, 1, "", "on_step_begin"], [220, 3, 1, "", "on_step_end"], [220, 3, 1, "", "on_train_begin"], [220, 3, 1, "", "on_train_end"], [220, 3, 1, "", "post_epoch_end"], [220, 3, 1, "", "post_process"], [220, 3, 1, "", "pre_epoch_begin"], [220, 3, 1, "", "pre_process"], [220, 3, 1, "", "prepare"], [220, 3, 1, "", "prepare_qat"], [220, 3, 1, "", "register_hook"], [220, 4, 1, "", "train_dataloader"], [220, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[220, 5, 1, "", "_epoch_ran"], [220, 5, 1, "", "best_model"], [220, 5, 1, "", "best_score"], [220, 3, 1, "", "create_criterion"], [220, 3, 1, "", "create_optimizer"], [220, 4, 1, "", "criterion"], [220, 5, 1, "", "eval_frequency"], [220, 4, 1, "", "evaluation_distributed"], [220, 3, 1, "", "execute"], [220, 3, 1, "", "generate_hooks"], [220, 3, 1, "", "init_train_cfg"], [220, 3, 1, "", "on_post_forward"], [220, 4, 1, "", "optimizer"], [220, 3, 1, "", "pre_process"], [220, 3, 1, "", "prepare"], [220, 4, 1, "", "student_model"], [220, 4, 1, "", "teacher_model"], [220, 4, 1, "", "train_cfg"], [220, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[220, 3, 1, "", "dataset"], [220, 4, 1, "", "eval_dataloader"], [220, 4, 1, "", "eval_func"], [220, 4, 1, "", "input"], [220, 4, 1, "", "metric"], [220, 4, 1, "", "model"], [220, 4, 1, "", "output"], [220, 4, 1, "", "postprocess"], [220, 4, 1, "", "precisions"], [220, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[220, 4, 1, "", "precisions"], [220, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[220, 3, 1, "", "dataset"], [220, 4, 1, "", "destination"], [220, 4, 1, "", "eval_dataloader"], [220, 4, 1, "", "eval_func"], [220, 4, 1, "", "metric"], [220, 4, 1, "", "model"], [220, 4, 1, "", "postprocess"], [220, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[220, 5, 1, "", "conf"], [220, 4, 1, "", "evaluation_distributed"], [220, 3, 1, "", "execute"], [220, 3, 1, "", "generate_hooks"], [220, 3, 1, "", "generate_pruners"], [220, 3, 1, "", "pre_process"], [220, 3, 1, "", "prepare"], [220, 5, 1, "", "pruners"], [220, 4, 1, "", "pruning_func"], [220, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Quantization": [[220, 4, 1, "", "calib_dataloader"], [220, 3, 1, "", "dataset"], [220, 3, 1, "", "execute"], [220, 4, 1, "", "metric"], [220, 4, 1, "", "objective"], [220, 4, 1, "", "postprocess"], [220, 3, 1, "", "pre_process"], [220, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[182, 2, 1, "", "Benchmark"], [182, 1, 1, "", "get_architecture"], [182, 1, 1, "", "get_bounded_threads"], [182, 1, 1, "", "get_core_ids"], [182, 1, 1, "", "get_physical_ids"], [182, 1, 1, "", "get_threads"], [182, 1, 1, "", "get_threads_per_core"], [182, 1, 1, "", "set_all_env_var"], [182, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[182, 4, 1, "", "b_dataloader"], [182, 4, 1, "", "b_func"], [182, 3, 1, "", "config_instance"], [182, 3, 1, "", "generate_prefix"], [182, 4, 1, "", "metric"], [182, 4, 1, "", "model"], [182, 4, 1, "", "postprocess"], [182, 4, 1, "", "results"], [182, 3, 1, "", "run_instance"], [182, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[185, 2, 1, "", "DataLoader"], [185, 2, 1, "", "Metric"], [185, 2, 1, "", "Model"], [185, 2, 1, "", "Postprocess"], [183, 0, 0, "-", "criterion"], [184, 0, 0, "-", "dataloader"], [186, 0, 0, "-", "metric"], [187, 0, 0, "-", "model"], [188, 0, 0, "-", "optimizer"], [189, 0, 0, "-", "postprocess"], [190, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[183, 2, 1, "", "Criterions"], [183, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [183, 2, 1, "", "KnowledgeDistillationFramework"], [183, 2, 1, "", "KnowledgeDistillationLoss"], [183, 2, 1, "", "PyTorchCriterions"], [183, 2, 1, "", "PyTorchCrossEntropyLoss"], [183, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [183, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [183, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [183, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [183, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [183, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [183, 2, 1, "", "SelfKnowledgeDistillationLoss"], [183, 2, 1, "", "TensorFlowCrossEntropyLoss"], [183, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [183, 2, 1, "", "TensorflowCriterions"], [183, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [183, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [183, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [183, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[183, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[183, 3, 1, "", "clear_features"], [183, 3, 1, "", "init_feature_matcher"], [183, 3, 1, "", "init_loss_funcs"], [183, 3, 1, "", "loss_cal"], [183, 3, 1, "", "loss_cal_sloss"], [183, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[183, 4, 1, "", "student_model"], [183, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[183, 3, 1, "", "loss_cal"], [183, 3, 1, "", "loss_cal_sloss"], [183, 3, 1, "", "student_targets_loss_cal"], [183, 3, 1, "", "teacher_model_forward"], [183, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[183, 3, 1, "", "init_feature_matcher"], [183, 3, 1, "", "init_loss_funcs"], [183, 3, 1, "", "loss_cal"], [183, 3, 1, "", "loss_cal_sloss"], [183, 3, 1, "", "register_hooks_for_models"], [183, 3, 1, "", "remove_all_hooks"], [183, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[183, 3, 1, "", "KullbackLeiblerDivergence"], [183, 3, 1, "", "SoftCrossEntropy"], [183, 3, 1, "", "student_targets_loss_cal"], [183, 3, 1, "", "teacher_model_forward"], [183, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[183, 3, 1, "", "KullbackLeiblerDivergence"], [183, 3, 1, "", "L2Divergence"], [183, 3, 1, "", "SoftCrossEntropy"], [183, 3, 1, "", "init_loss_funcs"], [183, 3, 1, "", "loss_cal"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[183, 3, 1, "", "init_loss_funcs"], [183, 3, 1, "", "loss_cal"], [183, 3, 1, "", "loss_cal_sloss"], [183, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[183, 3, 1, "", "SoftCrossEntropy"], [183, 3, 1, "", "student_targets_loss_cal"], [183, 3, 1, "", "teacher_model_forward"], [183, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[183, 3, 1, "", "student_targets_loss_cal"], [183, 3, 1, "", "teacher_model_forward"], [183, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[184, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[186, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[187, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[188, 2, 1, "", "Optimizers"], [188, 2, 1, "", "PyTorchOptimizers"], [188, 2, 1, "", "PyTorchSGD"], [188, 2, 1, "", "TensorFlowAdam"], [188, 2, 1, "", "TensorFlowAdamW"], [188, 2, 1, "", "TensorFlowSGD"], [188, 2, 1, "", "TensorflowOptimizers"], [188, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[188, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[189, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[190, 1, 1, "", "get_activation"], [190, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[191, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[191, 4, 1, "", "eval_dataloader"], [191, 4, 1, "", "eval_func"], [191, 3, 1, "", "execute"], [191, 4, 1, "", "model"], [191, 3, 1, "", "on_after_compute_loss"], [191, 3, 1, "", "on_batch_begin"], [191, 3, 1, "", "on_batch_end"], [191, 3, 1, "", "on_before_optimizer_step"], [191, 3, 1, "", "on_epoch_begin"], [191, 3, 1, "", "on_epoch_end"], [191, 3, 1, "", "on_post_grad"], [191, 3, 1, "", "on_step_begin"], [191, 3, 1, "", "on_step_end"], [191, 3, 1, "", "on_train_begin"], [191, 3, 1, "", "on_train_end"], [191, 3, 1, "", "post_epoch_end"], [191, 3, 1, "", "post_process"], [191, 3, 1, "", "pre_epoch_begin"], [191, 3, 1, "", "pre_process"], [191, 3, 1, "", "prepare"], [191, 3, 1, "", "prepare_qat"], [191, 3, 1, "", "register_hook"], [191, 4, 1, "", "train_dataloader"], [191, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[213, 2, 1, "", "BaseTransform"], [213, 2, 1, "", "DATASETS"], [213, 2, 1, "", "Dataset"], [213, 2, 1, "", "FILTERS"], [213, 2, 1, "", "Filter"], [213, 2, 1, "", "IterableDataset"], [213, 2, 1, "", "TRANSFORMS"], [196, 0, 0, "-", "dataloaders"], [213, 1, 1, "", "dataset_registry"], [208, 0, 0, "-", "datasets"], [213, 1, 1, "", "filter_registry"], [212, 0, 0, "-", "filters"], [213, 1, 1, "", "transform_registry"], [215, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[213, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[192, 0, 0, "-", "base_dataloader"], [193, 0, 0, "-", "dataloader"], [194, 0, 0, "-", "default_dataloader"], [195, 0, 0, "-", "fetcher"], [197, 0, 0, "-", "mxnet_dataloader"], [198, 0, 0, "-", "onnxrt_dataloader"], [199, 0, 0, "-", "pytorch_dataloader"], [200, 0, 0, "-", "sampler"], [201, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[192, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[192, 3, 1, "", "batch"], [192, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[194, 2, 1, "", "DefaultDataLoader"], [194, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[194, 3, 1, "", "batch"], [194, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[195, 2, 1, "", "Fetcher"], [195, 2, 1, "", "IndexFetcher"], [195, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[197, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[198, 2, 1, "", "ONNXRTBertDataLoader"], [198, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[199, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[200, 2, 1, "", "BatchSampler"], [200, 2, 1, "", "IterableSampler"], [200, 2, 1, "", "Sampler"], [200, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[201, 2, 1, "", "TFDataDataLoader"], [201, 2, 1, "", "TensorflowBertDataLoader"], [201, 2, 1, "", "TensorflowDataLoader"], [201, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[201, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[208, 2, 1, "", "DATASETS"], [208, 2, 1, "", "Dataset"], [208, 2, 1, "", "IterableDataset"], [202, 0, 0, "-", "bert_dataset"], [203, 0, 0, "-", "coco_dataset"], [204, 0, 0, "-", "dataset"], [208, 1, 1, "", "dataset_registry"], [205, 0, 0, "-", "dummy_dataset"], [206, 0, 0, "-", "dummy_dataset_v2"], [207, 0, 0, "-", "imagenet_dataset"], [209, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[202, 2, 1, "", "InputFeatures"], [202, 2, 1, "", "ONNXRTBertDataset"], [202, 2, 1, "", "ParseDecodeBert"], [202, 2, 1, "", "PytorchBertDataset"], [202, 2, 1, "", "TensorflowBertDataset"], [202, 2, 1, "", "TensorflowModelZooBertDataset"], [202, 1, 1, "", "convert_examples_to_features"], [202, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[202, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[203, 2, 1, "", "COCONpy"], [203, 2, 1, "", "COCORaw"], [203, 2, 1, "", "COCORecordDataset"], [203, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[204, 2, 1, "", "CIFAR10"], [204, 2, 1, "", "CIFAR100"], [204, 2, 1, "", "DATASETS"], [204, 2, 1, "", "Dataset"], [204, 2, 1, "", "FashionMNIST"], [204, 2, 1, "", "ImageFolder"], [204, 2, 1, "", "IterableDataset"], [204, 2, 1, "", "MNIST"], [204, 2, 1, "", "MXNetCIFAR10"], [204, 2, 1, "", "MXNetCIFAR100"], [204, 2, 1, "", "MXNetDatasets"], [204, 2, 1, "", "MXNetFashionMNIST"], [204, 2, 1, "", "MXNetImageFolder"], [204, 2, 1, "", "MXNetMNIST"], [204, 2, 1, "", "ONNXRTITDatasets"], [204, 2, 1, "", "ONNXRTQLDatasets"], [204, 2, 1, "", "PyTorchDatasets"], [204, 2, 1, "", "PytorchCIFAR10"], [204, 2, 1, "", "PytorchCIFAR100"], [204, 2, 1, "", "PytorchFashionMNIST"], [204, 2, 1, "", "PytorchMNIST"], [204, 2, 1, "", "PytorchMxnetWrapDataset"], [204, 2, 1, "", "PytorchMxnetWrapFunction"], [204, 2, 1, "", "TensorflowCIFAR10"], [204, 2, 1, "", "TensorflowCIFAR100"], [204, 2, 1, "", "TensorflowDatasets"], [204, 2, 1, "", "TensorflowFashionMNIST"], [204, 2, 1, "", "TensorflowImageFolder"], [204, 2, 1, "", "TensorflowImageRecord"], [204, 2, 1, "", "TensorflowMNIST"], [204, 2, 1, "", "TensorflowTFRecordDataset"], [204, 2, 1, "", "TensorflowVOCRecord"], [204, 1, 1, "", "calculate_md5"], [204, 1, 1, "", "check_integrity"], [204, 1, 1, "", "dataset_registry"], [204, 1, 1, "", "download_url"], [204, 6, 1, "", "framework_datasets"], [204, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[204, 3, 1, "", "download"], [204, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[204, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[204, 4, 1, "", "class_to_idx"], [204, 3, 1, "", "download"], [204, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[205, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[206, 2, 1, "", "DummyDataset"], [206, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[207, 2, 1, "", "ImagenetRaw"], [207, 2, 1, "", "MXNetImagenetRaw"], [207, 2, 1, "", "PytorchImagenetRaw"], [207, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[209, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[212, 2, 1, "", "FILTERS"], [212, 2, 1, "", "Filter"], [210, 0, 0, "-", "coco_filter"], [211, 0, 0, "-", "filter"], [212, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[210, 2, 1, "", "LabelBalanceCOCORawFilter"], [210, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[211, 2, 1, "", "FILTERS"], [211, 2, 1, "", "Filter"], [211, 2, 1, "", "MXNetFilters"], [211, 2, 1, "", "ONNXRTITFilters"], [211, 2, 1, "", "ONNXRTQLFilters"], [211, 2, 1, "", "PyTorchFilters"], [211, 2, 1, "", "TensorflowFilters"], [211, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[215, 2, 1, "", "BaseTransform"], [215, 2, 1, "", "TRANSFORMS"], [214, 0, 0, "-", "imagenet_transform"], [216, 0, 0, "-", "tokenization"], [217, 0, 0, "-", "transform"], [215, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[215, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[214, 2, 1, "", "LabelShift"], [214, 2, 1, "", "ParseDecodeImagenet"], [214, 2, 1, "", "QuantizedInput"]], "neural_compressor.experimental.data.transforms.tokenization": [[216, 2, 1, "", "BasicTokenizer"], [216, 2, 1, "", "FullTokenizer"], [216, 2, 1, "", "WordpieceTokenizer"], [216, 1, 1, "", "convert_by_vocab"], [216, 1, 1, "", "convert_to_unicode"], [216, 1, 1, "", "load_vocab"], [216, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[216, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[216, 3, 1, "", "convert_ids_to_tokens"], [216, 3, 1, "", "convert_tokens_to_ids"], [216, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[216, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[217, 2, 1, "", "AlignImageChannelTransform"], [217, 2, 1, "", "BaseTransform"], [217, 2, 1, "", "CastONNXTransform"], [217, 2, 1, "", "CastPyTorchTransform"], [217, 2, 1, "", "CastTFTransform"], [217, 2, 1, "", "CenterCropTFTransform"], [217, 2, 1, "", "CenterCropTransform"], [217, 2, 1, "", "CollectTransform"], [217, 2, 1, "", "ComposeTransform"], [217, 2, 1, "", "CropResizeTFTransform"], [217, 2, 1, "", "CropResizeTransform"], [217, 2, 1, "", "CropToBoundingBox"], [217, 2, 1, "", "InputFeatures"], [217, 2, 1, "", "MXNetCropResizeTransform"], [217, 2, 1, "", "MXNetCropToBoundingBox"], [217, 2, 1, "", "MXNetNormalizeTransform"], [217, 2, 1, "", "MXNetTransforms"], [217, 2, 1, "", "MXNetTranspose"], [217, 2, 1, "", "NormalizeTFTransform"], [217, 2, 1, "", "NormalizeTransform"], [217, 2, 1, "", "ONNXRTCropToBoundingBox"], [217, 2, 1, "", "ONNXRTITTransforms"], [217, 2, 1, "", "ONNXRTQLTransforms"], [217, 2, 1, "", "PaddedCenterCropTransform"], [217, 2, 1, "", "ParseDecodeVocTransform"], [217, 2, 1, "", "PyTorchAlignImageChannel"], [217, 2, 1, "", "PyTorchCropResizeTransform"], [217, 2, 1, "", "PyTorchNormalizeTransform"], [217, 2, 1, "", "PyTorchTransforms"], [217, 2, 1, "", "PyTorchTranspose"], [217, 2, 1, "", "PytorchMxnetTransform"], [217, 2, 1, "", "PytorchMxnetWrapFunction"], [217, 2, 1, "", "RandomCropTFTransform"], [217, 2, 1, "", "RandomCropTransform"], [217, 2, 1, "", "RandomHorizontalFlip"], [217, 2, 1, "", "RandomResizedCropMXNetTransform"], [217, 2, 1, "", "RandomResizedCropPytorchTransform"], [217, 2, 1, "", "RandomResizedCropTFTransform"], [217, 2, 1, "", "RandomResizedCropTransform"], [217, 2, 1, "", "RandomVerticalFlip"], [217, 2, 1, "", "RescaleKerasPretrainTransform"], [217, 2, 1, "", "RescaleTFTransform"], [217, 2, 1, "", "RescaleTransform"], [217, 2, 1, "", "ResizeMXNetTransform"], [217, 2, 1, "", "ResizePytorchTransform"], [217, 2, 1, "", "ResizeTFTransform"], [217, 2, 1, "", "ResizeTransform"], [217, 2, 1, "", "ResizeWithRatio"], [217, 2, 1, "", "SquadExample"], [217, 2, 1, "", "TFModelZooCollectTransform"], [217, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [217, 2, 1, "", "TFSquadV1PostTransform"], [217, 2, 1, "", "TRANSFORMS"], [217, 2, 1, "", "TensorflowCropToBoundingBox"], [217, 2, 1, "", "TensorflowRandomHorizontalFlip"], [217, 2, 1, "", "TensorflowRandomVerticalFlip"], [217, 2, 1, "", "TensorflowResizeWithRatio"], [217, 2, 1, "", "TensorflowTransform"], [217, 2, 1, "", "TensorflowTransforms"], [217, 2, 1, "", "TensorflowTranspose"], [217, 2, 1, "", "TensorflowWrapFunction"], [217, 2, 1, "", "ToArray"], [217, 2, 1, "", "ToNDArrayTransform"], [217, 2, 1, "", "Transforms"], [217, 2, 1, "", "Transpose"], [217, 1, 1, "", "convert_examples_to_features"], [217, 1, 1, "", "get_final_text"], [217, 1, 1, "", "get_torchvision_map"], [217, 1, 1, "", "read_squad_examples"], [217, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[217, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[217, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[217, 3, 1, "", "get_postprocess_result"], [217, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[217, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[218, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[218, 5, 1, "", "_epoch_ran"], [218, 5, 1, "", "best_model"], [218, 5, 1, "", "best_score"], [218, 3, 1, "", "create_criterion"], [218, 3, 1, "", "create_optimizer"], [218, 4, 1, "", "criterion"], [218, 5, 1, "", "eval_frequency"], [218, 4, 1, "", "evaluation_distributed"], [218, 3, 1, "", "execute"], [218, 3, 1, "", "generate_hooks"], [218, 3, 1, "", "init_train_cfg"], [218, 3, 1, "", "on_post_forward"], [218, 4, 1, "", "optimizer"], [218, 3, 1, "", "pre_process"], [218, 3, 1, "", "prepare"], [218, 4, 1, "", "student_model"], [218, 4, 1, "", "teacher_model"], [218, 4, 1, "", "train_cfg"], [218, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.graph_optimization": [[219, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[219, 3, 1, "", "dataset"], [219, 4, 1, "", "eval_dataloader"], [219, 4, 1, "", "eval_func"], [219, 4, 1, "", "input"], [219, 4, 1, "", "metric"], [219, 4, 1, "", "model"], [219, 4, 1, "", "output"], [219, 4, 1, "", "postprocess"], [219, 4, 1, "", "precisions"], [219, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[227, 2, 1, "", "BaseMetric"], [227, 2, 1, "", "METRICS"], [221, 0, 0, "-", "bleu"], [222, 0, 0, "-", "bleu_util"], [223, 0, 0, "-", "coco_label_map"], [224, 0, 0, "-", "coco_tools"], [225, 0, 0, "-", "evaluate_squad"], [226, 0, 0, "-", "f1"], [228, 0, 0, "-", "metric"], [227, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[227, 4, 1, "", "hvd"], [227, 4, 1, "", "metric"], [227, 3, 1, "", "reset"], [227, 3, 1, "", "result"], [227, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[227, 5, 1, "", "metrics"], [227, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[221, 2, 1, "", "BLEU"], [221, 2, 1, "", "UnicodeRegex"], [221, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[221, 5, 1, "", "labels"], [221, 5, 1, "", "predictions"], [221, 3, 1, "", "reset"], [221, 3, 1, "", "result"], [221, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[221, 5, 1, "", "nondigit_punct_re"], [221, 3, 1, "", "property_chars"], [221, 5, 1, "", "punct_nondigit_re"], [221, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[222, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[224, 2, 1, "", "COCOEvalWrapper"], [224, 2, 1, "", "COCOWrapper"], [224, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [224, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [224, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[224, 3, 1, "", "ComputeMetrics"], [224, 3, 1, "", "GetAgnosticMode"], [224, 3, 1, "", "GetCategory"], [224, 3, 1, "", "GetCategoryIdList"], [224, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[224, 3, 1, "", "LoadAnnotations"], [224, 5, 1, "", "dataset"], [224, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[225, 1, 1, "", "evaluate"], [225, 1, 1, "", "exact_match_score"], [225, 1, 1, "", "f1_score"], [225, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[226, 1, 1, "", "evaluate"], [226, 1, 1, "", "f1_score"], [226, 1, 1, "", "metric_max_over_ground_truths"], [226, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[228, 2, 1, "", "Accuracy"], [228, 2, 1, "", "BaseMetric"], [228, 2, 1, "", "COCOmAPv2"], [228, 2, 1, "", "F1"], [228, 2, 1, "", "GeneralTopK"], [228, 2, 1, "", "Loss"], [228, 2, 1, "", "MAE"], [228, 2, 1, "", "METRICS"], [228, 2, 1, "", "MSE"], [228, 2, 1, "", "MXNetMetrics"], [228, 2, 1, "", "ONNXRTGLUE"], [228, 2, 1, "", "ONNXRTITMetrics"], [228, 2, 1, "", "ONNXRTQLMetrics"], [228, 2, 1, "", "PyTorchLoss"], [228, 2, 1, "", "PyTorchMetrics"], [228, 2, 1, "", "RMSE"], [228, 2, 1, "", "ROC"], [228, 2, 1, "", "SquadF1"], [228, 2, 1, "", "TensorflowCOCOMAP"], [228, 2, 1, "", "TensorflowMAP"], [228, 2, 1, "", "TensorflowMetrics"], [228, 2, 1, "", "TensorflowTopK"], [228, 2, 1, "", "TensorflowVOCMAP"], [228, 2, 1, "", "WrapMXNetMetric"], [228, 2, 1, "", "WrapONNXRTMetric"], [228, 2, 1, "", "WrapPyTorchMetric"], [228, 2, 1, "", "mIOU"], [228, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[228, 5, 1, "", "label_list"], [228, 5, 1, "", "pred_list"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 5, 1, "", "sample"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[228, 4, 1, "", "hvd"], [228, 4, 1, "", "metric"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[228, 5, 1, "", "k"], [228, 5, 1, "", "num_correct"], [228, 5, 1, "", "num_sample"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 5, 1, "", "sample"], [228, 5, 1, "", "sum"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[228, 5, 1, "", "compare_label"], [228, 5, 1, "", "label_list"], [228, 5, 1, "", "pred_list"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[228, 5, 1, "", "metrics"], [228, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[228, 5, 1, "", "compare_label"], [228, 5, 1, "", "label_list"], [228, 5, 1, "", "pred_list"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[228, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[228, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[228, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[228, 3, 1, "", "compute"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[228, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[228, 5, 1, "", "mse"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[228, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[228, 5, 1, "", "k"], [228, 5, 1, "", "num_correct"], [228, 5, 1, "", "num_sample"], [228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[228, 3, 1, "", "reset"], [228, 3, 1, "", "result"], [228, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[229, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[229, 4, 1, "", "precisions"], [229, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[230, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[230, 3, 1, "", "dataset"], [230, 4, 1, "", "destination"], [230, 4, 1, "", "eval_dataloader"], [230, 4, 1, "", "eval_func"], [230, 4, 1, "", "metric"], [230, 4, 1, "", "model"], [230, 4, 1, "", "postprocess"], [230, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[238, 2, 1, "", "BasicNAS"], [238, 2, 1, "", "DyNAS"], [238, 2, 1, "", "NAS"], [231, 0, 0, "-", "basic_nas"], [232, 0, 0, "-", "dynas"], [237, 0, 0, "-", "dynast"], [239, 0, 0, "-", "nas"], [240, 0, 0, "-", "nas_utils"], [241, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[238, 3, 1, "", "estimate"], [238, 3, 1, "", "execute"], [238, 3, 1, "", "init_by_cfg"], [238, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[238, 3, 1, "", "create_acc_predictor"], [238, 3, 1, "", "create_latency_predictor"], [238, 3, 1, "", "create_macs_predictor"], [238, 3, 1, "", "estimate"], [238, 3, 1, "", "init_cfg"], [238, 3, 1, "", "init_for_search"], [238, 3, 1, "", "search"], [238, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[231, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[231, 3, 1, "", "estimate"], [231, 3, 1, "", "execute"], [231, 3, 1, "", "init_by_cfg"], [231, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[232, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[232, 3, 1, "", "create_acc_predictor"], [232, 3, 1, "", "create_latency_predictor"], [232, 3, 1, "", "create_macs_predictor"], [232, 3, 1, "", "estimate"], [232, 3, 1, "", "init_cfg"], [232, 3, 1, "", "init_for_search"], [232, 3, 1, "", "search"], [232, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[233, 0, 0, "-", "dynas_manager"], [234, 0, 0, "-", "dynas_predictor"], [235, 0, 0, "-", "dynas_search"], [236, 0, 0, "-", "dynas_utils"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[233, 2, 1, "", "ParameterManager"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[233, 3, 1, "", "create_training_set"], [233, 3, 1, "", "import_csv"], [233, 3, 1, "", "onehot_generic"], [233, 3, 1, "", "process_param_dict"], [233, 3, 1, "", "random_sample"], [233, 3, 1, "", "random_samples"], [233, 3, 1, "", "set_seed"], [233, 3, 1, "", "translate2param"], [233, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[234, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[234, 3, 1, "", "get_metrics"], [234, 3, 1, "", "get_parameters"], [234, 3, 1, "", "load"], [234, 3, 1, "", "predict"], [234, 3, 1, "", "save"], [234, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[235, 2, 1, "", "ProblemMultiObjective"], [235, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[235, 3, 1, "", "configure_age"], [235, 3, 1, "", "configure_nsga2"], [235, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[236, 2, 1, "", "EvaluationInterface"], [236, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [236, 2, 1, "", "EvaluationInterfaceResNet50"], [236, 2, 1, "", "OFARunner"], [236, 2, 1, "", "Runner"], [236, 2, 1, "", "TorchVisionReference"], [236, 1, 1, "", "get_macs"], [236, 1, 1, "", "get_torchvision_model"], [236, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[236, 3, 1, "", "clear_csv"], [236, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[236, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[236, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[236, 3, 1, "", "estimate_accuracy_top1"], [236, 3, 1, "", "estimate_latency"], [236, 3, 1, "", "estimate_macs"], [236, 3, 1, "", "get_subnet"], [236, 3, 1, "", "measure_latency"], [236, 3, 1, "", "validate_macs"], [236, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[236, 3, 1, "", "measure_latency"], [236, 3, 1, "", "validate_macs"], [236, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.nas": [[239, 2, 1, "", "NAS"], [239, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[239, 3, 1, "", "count_model_parameters"], [239, 3, 1, "", "dump_search_results"], [239, 3, 1, "", "estimate"], [239, 3, 1, "", "find_best_model_archs"], [239, 3, 1, "", "init_search_cfg"], [239, 3, 1, "", "load_search_results"], [239, 3, 1, "", "metrics_conversion"], [239, 4, 1, "", "model_builder"], [239, 3, 1, "", "params_vec2params_dict"], [239, 3, 1, "", "search"], [239, 4, 1, "", "search_algorithm"], [239, 4, 1, "", "search_space"], [239, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[240, 1, 1, "", "create_search_space_pool"], [240, 1, 1, "", "find_pareto_front"], [240, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[241, 2, 1, "", "BayesianOptimizationSearcher"], [241, 2, 1, "", "GridSearcher"], [241, 2, 1, "", "RandomSearcher"], [241, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[241, 3, 1, "", "get_feedback"], [241, 3, 1, "", "indices2params_vec"], [241, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[241, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[241, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[241, 3, 1, "", "get_feedback"], [241, 3, 1, "", "params_vec2params_dict"], [241, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[242, 2, 1, "", "Pruning"], [242, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[242, 5, 1, "", "conf"], [242, 4, 1, "", "evaluation_distributed"], [242, 3, 1, "", "execute"], [242, 3, 1, "", "generate_hooks"], [242, 3, 1, "", "generate_pruners"], [242, 3, 1, "", "pre_process"], [242, 3, 1, "", "prepare"], [242, 5, 1, "", "pruners"], [242, 4, 1, "", "pruning_func"], [242, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[242, 3, 1, "", "on_after_compute_loss"], [242, 3, 1, "", "on_batch_begin"], [242, 3, 1, "", "on_batch_end"], [242, 3, 1, "", "on_epoch_begin"], [242, 3, 1, "", "on_epoch_end"], [242, 3, 1, "", "on_step_begin"], [242, 3, 1, "", "on_step_end"], [242, 3, 1, "", "on_train_begin"], [242, 3, 1, "", "on_train_end"], [242, 3, 1, "", "post_epoch_end"], [242, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[243, 2, 1, "", "PATTERNS"], [244, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[243, 5, 1, "", "patterns"], [243, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[244, 2, 1, "", "PATTERNS"], [245, 0, 0, "-", "pattern"], [246, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[244, 5, 1, "", "patterns"], [244, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[245, 2, 1, "", "PATTERNS"], [245, 2, 1, "", "PatternBase"], [245, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[245, 5, 1, "", "patterns"], [245, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[245, 3, 1, "", "compute_sparsity"], [245, 3, 1, "", "reduce"], [245, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[246, 2, 1, "", "TilePatternBase"], [246, 2, 1, "", "TilePattern_1x1"], [246, 2, 1, "", "TilePattern_1x16"], [246, 2, 1, "", "TilePattern_1x2"], [246, 2, 1, "", "TilePattern_2x2"], [246, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[246, 3, 1, "", "compute_sparsity"], [246, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[248, 0, 0, "-", "logger"], [249, 0, 0, "-", "patterns"], [250, 0, 0, "-", "prune_utils"], [251, 0, 0, "-", "pruner"], [252, 0, 0, "-", "pruning"], [253, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[249, 2, 1, "", "Pattern"], [249, 2, 1, "", "PatternNInM"], [249, 2, 1, "", "PatternNxM"], [249, 1, 1, "", "get_pattern"], [249, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[249, 3, 1, "", "get_block_size_dict"], [249, 3, 1, "", "get_mask_single"], [249, 3, 1, "", "get_masks"], [249, 3, 1, "", "get_masks_global"], [249, 3, 1, "", "get_masks_local"], [249, 3, 1, "", "get_pattern_lock_masks"], [249, 3, 1, "", "get_sparsity_ratio"], [249, 5, 1, "", "is_global"], [249, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[249, 5, 1, "", "M"], [249, 5, 1, "", "N"], [249, 3, 1, "", "get_masks_global"], [249, 3, 1, "", "get_pattern_lock_masks"], [249, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[249, 5, 1, "", "block_size"], [249, 3, 1, "", "get_block_size_dict"], [249, 3, 1, "", "get_masks_global"], [249, 3, 1, "", "get_pattern_lock_masks"], [249, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[250, 1, 1, "", "check_config"], [250, 1, 1, "", "parse_not_to_prune"], [250, 1, 1, "", "parse_to_prune"], [250, 1, 1, "", "process_and_check_config"], [250, 1, 1, "", "process_config"], [250, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[251, 2, 1, "", "MagnitudePruner"], [251, 2, 1, "", "PatternLockPruner"], [251, 2, 1, "", "Pruner"], [251, 2, 1, "", "SnipMomentumPruner"], [251, 2, 1, "", "SnipPruner"], [251, 1, 1, "", "get_pruner"], [251, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[251, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[251, 3, 1, "", "on_after_optimizer_step"], [251, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[251, 3, 1, "", "check_is_pruned_step"], [251, 5, 1, "", "config"], [251, 5, 1, "", "current_sparsity_ratio"], [251, 5, 1, "", "end_step"], [251, 5, 1, "", "global_step"], [251, 3, 1, "", "mask_weights"], [251, 5, 1, "", "masks"], [251, 5, 1, "", "max_sparsity_ratio_per_layer"], [251, 5, 1, "", "modules"], [251, 3, 1, "", "on_after_eval"], [251, 3, 1, "", "on_after_optimizer_step"], [251, 3, 1, "", "on_before_eval"], [251, 3, 1, "", "on_before_optimizer_step"], [251, 3, 1, "", "on_epoch_begin"], [251, 3, 1, "", "on_epoch_end"], [251, 3, 1, "", "on_step_begin"], [251, 3, 1, "", "on_step_end"], [251, 3, 1, "", "on_train_begin"], [251, 3, 1, "", "on_train_end"], [251, 5, 1, "", "pattern"], [251, 5, 1, "", "scheduler"], [251, 5, 1, "", "scores"], [251, 5, 1, "", "start_step"], [251, 5, 1, "", "target_sparsity_ratio"], [251, 5, 1, "", "update_frequency_on_step"], [251, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[251, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[251, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[252, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[252, 5, 1, "", "config_file_path"], [252, 3, 1, "", "get_sparsity_ratio"], [252, 5, 1, "", "model"], [252, 3, 1, "", "on_after_eval"], [252, 3, 1, "", "on_after_optimizer_step"], [252, 3, 1, "", "on_before_eval"], [252, 3, 1, "", "on_before_optimizer_step"], [252, 3, 1, "", "on_epoch_begin"], [252, 3, 1, "", "on_epoch_end"], [252, 3, 1, "", "on_step_begin"], [252, 3, 1, "", "on_step_end"], [252, 3, 1, "", "on_train_begin"], [252, 3, 1, "", "on_train_end"], [252, 5, 1, "", "pruner_info"], [252, 5, 1, "", "pruners"], [252, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[253, 2, 1, "", "IterativeScheduler"], [253, 2, 1, "", "OneshotScheduler"], [253, 2, 1, "", "Scheduler"], [253, 1, 1, "", "get_scheduler"], [253, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[253, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[253, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[253, 5, 1, "", "config"], [253, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[254, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[254, 4, 1, "", "calib_dataloader"], [254, 3, 1, "", "dataset"], [254, 3, 1, "", "execute"], [254, 4, 1, "", "metric"], [254, 4, 1, "", "objective"], [254, 4, 1, "", "postprocess"], [254, 3, 1, "", "pre_process"], [254, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[255, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[255, 3, 1, "", "append"], [255, 3, 1, "", "combine"], [255, 4, 1, "", "eval_func"], [255, 4, 1, "", "model"], [255, 4, 1, "", "train_func"]], "neural_compressor.metric": [[257, 2, 1, "", "BaseMetric"], [257, 2, 1, "", "METRICS"], [257, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[257, 4, 1, "", "hvd"], [257, 4, 1, "", "metric"], [257, 3, 1, "", "reset"], [257, 3, 1, "", "result"], [257, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[257, 5, 1, "", "metrics"], [257, 3, 1, "", "register"]], "neural_compressor.model": [[260, 2, 1, "", "BaseModel"], [259, 0, 0, "-", "base_model"], [261, 0, 0, "-", "model"], [262, 0, 0, "-", "nets_factory"], [263, 0, 0, "-", "onnx_model"], [264, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[260, 3, 1, "", "export"], [260, 3, 1, "", "framework"], [260, 4, 1, "", "graph_info"], [260, 4, 1, "", "model"], [260, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[259, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[259, 3, 1, "", "export"], [259, 3, 1, "", "framework"], [259, 4, 1, "", "graph_info"], [259, 4, 1, "", "model"], [259, 3, 1, "", "save"]], "neural_compressor.model.model": [[261, 2, 1, "", "MXNetModel"], [261, 2, 1, "", "TensorflowBaseModel"], [261, 2, 1, "", "TensorflowCheckpointModel"], [261, 2, 1, "", "TensorflowSavedModelModel"], [261, 1, 1, "", "checkpoint_session"], [261, 1, 1, "", "estimator_session"], [261, 1, 1, "", "frozen_pb_session"], [261, 1, 1, "", "get_model_fwk_name"], [261, 1, 1, "", "get_model_type"], [261, 1, 1, "", "graph_def_session"], [261, 1, 1, "", "graph_session"], [261, 1, 1, "", "keras_session"], [261, 1, 1, "", "load_saved_model"], [261, 1, 1, "", "saved_model_session"], [261, 1, 1, "", "slim_session"], [261, 1, 1, "", "validate_and_inference_input_output"], [261, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.model.MXNetModel": [[261, 3, 1, "", "framework"], [261, 4, 1, "", "model"], [261, 3, 1, "", "save"]], "neural_compressor.model.model.TensorflowBaseModel": [[261, 3, 1, "", "framework"], [261, 4, 1, "", "graph_info"], [261, 4, 1, "", "model"], [261, 3, 1, "", "save"], [261, 4, 1, "", "weights"]], "neural_compressor.model.model.TensorflowSavedModelModel": [[261, 4, 1, "", "model"], [261, 3, 1, "", "report_sparsity"], [261, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[263, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[263, 3, 1, "", "find_node_by_name"], [263, 3, 1, "", "find_nodes_by_initializer"], [263, 3, 1, "", "framework"], [263, 3, 1, "", "get_scale_zero"], [263, 4, 1, "", "graph_info"], [263, 4, 1, "", "model"], [263, 3, 1, "", "save"], [263, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.torch_model": [[264, 2, 1, "", "PyTorchBaseModel"], [264, 2, 1, "", "PyTorchFXModel"], [264, 2, 1, "", "PyTorchIpexModel"], [264, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[264, 3, 1, "", "framework"], [264, 3, 1, "", "get_all_weight_names"], [264, 3, 1, "", "get_gradient"], [264, 3, 1, "", "get_inputs"], [264, 3, 1, "", "get_weight"], [264, 4, 1, "", "model"], [264, 3, 1, "", "prune_weights_"], [264, 3, 1, "", "report_sparsity"], [264, 3, 1, "", "update_gradient"], [264, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchIpexModel": [[264, 4, 1, "", "graph_info"], [264, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchModel": [[264, 3, 1, "", "export"], [264, 4, 1, "", "graph_info"], [264, 3, 1, "", "save"]], "neural_compressor.objective": [[265, 2, 1, "", "Accuracy"], [265, 2, 1, "", "Footprint"], [265, 2, 1, "", "ModelSize"], [265, 2, 1, "", "Objective"], [265, 2, 1, "", "Performance"], [265, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[265, 3, 1, "", "end"], [265, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[265, 3, 1, "", "end"], [265, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[265, 3, 1, "", "end"], [265, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[265, 3, 1, "", "end"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "result_list"], [265, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[265, 3, 1, "", "end"], [265, 3, 1, "", "start"]], "neural_compressor.pruners": [[266, 0, 0, "-", "gradient_sensitivity"], [267, 0, 0, "-", "group_lasso"], [269, 0, 0, "-", "magnitude"], [270, 0, 0, "-", "pattern_lock"], [271, 0, 0, "-", "pruner"]], "neural_compressor.pruners.pruner": [[271, 1, 1, "", "pruner_registry"]], "neural_compressor.pruning": [[272, 2, 1, "", "Pruning"]], "neural_compressor.pruning.Pruning": [[272, 3, 1, "", "on_epoch_begin"], [272, 3, 1, "", "on_epoch_end"], [272, 3, 1, "", "on_step_begin"], [272, 3, 1, "", "on_step_end"]], "neural_compressor.quantization": [[273, 2, 1, "", "Quantization"], [273, 1, 1, "", "fit"]], "neural_compressor.strategy": [[274, 0, 0, "-", "auto_mixed_precision"], [275, 0, 0, "-", "basic"], [276, 0, 0, "-", "bayesian"], [277, 0, 0, "-", "exhaustive"], [279, 0, 0, "-", "mse"], [280, 0, 0, "-", "random"], [281, 0, 0, "-", "st_utils"], [285, 0, 0, "-", "strategy"]], "neural_compressor.strategy.auto_mixed_precision": [[274, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[274, 3, 1, "", "next_tune_cfg"], [274, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[275, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[275, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[276, 2, 1, "", "BayesianTuneStrategy"], [276, 2, 1, "", "TargetSpace"], [276, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[276, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[276, 3, 1, "", "get_target"], [276, 3, 1, "", "max"], [276, 3, 1, "", "random_sample"], [276, 3, 1, "", "register"], [276, 3, 1, "", "res"]], "neural_compressor.strategy.exhaustive": [[277, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[277, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[279, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[279, 3, 1, "", "mse_impact_lst"], [279, 3, 1, "", "mse_metric_gap"], [279, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[280, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[280, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[282, 0, 0, "-", "tuning_sampler"], [283, 0, 0, "-", "tuning_space"], [284, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.strategy": [[285, 2, 1, "", "TuneStrategy"], [285, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[285, 3, 1, "", "next_tune_cfg"], [285, 3, 1, "", "stop"], [285, 3, 1, "", "traverse"]], "neural_compressor.training": [[286, 2, 1, "", "CompressionManager"], [286, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[286, 3, 1, "", "export"], [286, 3, 1, "", "save"]], "neural_compressor.utils": [[290, 2, 1, "", "KL_Divergence"], [290, 2, 1, "", "LayerHistogramCollector"], [287, 0, 0, "-", "collect_layer_histogram"], [288, 0, 0, "-", "constant"], [289, 0, 0, "-", "create_obj_from_config"], [291, 0, 0, "-", "kl_divergence"], [292, 0, 0, "-", "load_huggingface"], [293, 0, 0, "-", "logger"], [294, 0, 0, "-", "options"], [295, 0, 0, "-", "pytorch"], [296, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[290, 3, 1, "", "expand_quantized_bins"], [290, 3, 1, "", "get_threshold"], [290, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[290, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[287, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[287, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[289, 1, 1, "", "create_eval_func"], [289, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[291, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[291, 3, 1, "", "expand_quantized_bins"], [291, 3, 1, "", "get_threshold"], [291, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[295, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[296, 2, 1, "", "LazyImport"], [296, 2, 1, "", "MODE"], [296, 1, 1, "", "combine_histogram"], [296, 1, 1, "", "dump_data_to_local"], [296, 1, 1, "", "dump_elapsed_time"], [296, 1, 1, "", "equal_dicts"], [296, 1, 1, "", "get_size"], [296, 1, 1, "", "get_tuning_history"], [296, 1, 1, "", "load_data_from_pkl"], [296, 1, 1, "", "recover"]], "neural_compressor.ux": [[369, 0, 0, "-", "components"], [425, 0, 0, "-", "inc_bench"], [434, 0, 0, "-", "utils"], [459, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[300, 0, 0, "-", "benchmark"], [304, 0, 0, "-", "config_generator"], [311, 0, 0, "-", "configuration_wizard"], [345, 0, 0, "-", "db_manager"], [350, 0, 0, "-", "diagnosis"], [358, 0, 0, "-", "file_browser"], [364, 0, 0, "-", "graph"], [370, 0, 0, "-", "jobs_management"], [374, 0, 0, "-", "manage_workspace"], [376, 0, 0, "-", "model"], [395, 0, 0, "-", "model_zoo"], [397, 0, 0, "-", "names_mapper"], [404, 0, 0, "-", "optimization"], [417, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[300, 2, 1, "", "Benchmarks"], [297, 0, 0, "-", "benchmark"], [298, 0, 0, "-", "benchmark_model"], [299, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[297, 2, 1, "", "Benchmark"], [297, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[297, 4, 1, "", "config_filename"], [297, 4, 1, "", "configuration_data"], [297, 3, 1, "", "execute"], [297, 3, 1, "", "generate_config"], [297, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[298, 1, 1, "", "benchmark_model"], [298, 1, 1, "", "parse_args"], [298, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[299, 1, 1, "", "benchmark_result_update"], [299, 1, 1, "", "benchmark_result_update_pytorch_script"], [299, 1, 1, "", "execute_benchmark"], [299, 1, 1, "", "execute_real_benchmark"], [299, 1, 1, "", "pytorch_script_bench_optimizations"], [299, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[301, 0, 0, "-", "benchmark_config_generator"], [302, 0, 0, "-", "config_generator"], [303, 0, 0, "-", "graph_optimization_config_generator"], [305, 0, 0, "-", "mixed_precision_config_generator"], [306, 0, 0, "-", "profiling_config_generator"], [307, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[301, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[301, 3, 1, "", "generate"], [301, 3, 1, "", "generate_accuracy_config"], [301, 3, 1, "", "generate_evaluation_config"], [301, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[302, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[302, 3, 1, "", "generate"], [302, 3, 1, "", "generate_dataloader_config"], [302, 3, 1, "", "generate_model_config"], [302, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[303, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[303, 3, 1, "", "generate"], [303, 3, 1, "", "generate_evaluation_config"], [303, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[305, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[305, 3, 1, "", "generate"], [305, 3, 1, "", "generate_evaluation_config"], [305, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[306, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[306, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[307, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[307, 3, 1, "", "generate"], [307, 3, 1, "", "generate_evaluation_config"], [307, 3, 1, "", "generate_quantization_config"], [307, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[308, 0, 0, "-", "configuration_parser"], [309, 0, 0, "-", "get_boundary_nodes"], [310, 0, 0, "-", "get_configuration"], [312, 0, 0, "-", "params_feeder"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[308, 2, 1, "", "ConfigurationParser"], [308, 1, 1, "", "normalize_string_list"], [308, 1, 1, "", "parse_list_value"], [308, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[308, 3, 1, "", "get_param_type"], [308, 3, 1, "", "parse"], [308, 3, 1, "", "parse_dataloader"], [308, 3, 1, "", "parse_evaluation_data"], [308, 3, 1, "", "parse_metric"], [308, 3, 1, "", "parse_transforms"], [308, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[309, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[310, 1, 1, "", "get_predefined_configuration"], [310, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[312, 2, 1, "", "Feeder"], [312, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[312, 3, 1, "", "feed"], [312, 3, 1, "", "get_dataloaders"], [312, 3, 1, "", "get_domains"], [312, 3, 1, "", "get_frameworks"], [312, 3, 1, "", "get_metrics"], [312, 3, 1, "", "get_models"], [312, 3, 1, "", "get_objectives"], [312, 3, 1, "", "get_precisions"], [312, 3, 1, "", "get_quantization_approaches"], [312, 3, 1, "", "get_strategies"], [312, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.db_manager": [[345, 2, 1, "", "DBManager"], [313, 0, 0, "-", "db_manager"], [322, 0, 0, "-", "db_models"], [340, 0, 0, "-", "db_operations"], [346, 0, 0, "-", "params_interfaces"], [347, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[345, 3, 1, "", "create_all"], [345, 3, 1, "", "create_sqlalchemy_engine"], [345, 4, 1, "", "engine"], [345, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[313, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[313, 3, 1, "", "create_all"], [313, 3, 1, "", "create_sqlalchemy_engine"], [313, 4, 1, "", "engine"], [313, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[314, 0, 0, "-", "benchmark"], [315, 0, 0, "-", "benchmark_result"], [316, 0, 0, "-", "dataloader"], [317, 0, 0, "-", "dataset"], [318, 0, 0, "-", "domain"], [319, 0, 0, "-", "domain_flavour"], [320, 0, 0, "-", "example"], [321, 0, 0, "-", "framework"], [323, 0, 0, "-", "metric"], [324, 0, 0, "-", "model"], [325, 0, 0, "-", "optimization"], [326, 0, 0, "-", "optimization_type"], [327, 0, 0, "-", "precision"], [328, 0, 0, "-", "profiling"], [329, 0, 0, "-", "profiling_result"], [330, 0, 0, "-", "project"], [331, 0, 0, "-", "transform"], [332, 0, 0, "-", "tuning_details"], [333, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[314, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[314, 3, 1, "", "add"], [314, 3, 1, "", "build_info"], [314, 3, 1, "", "clean_status"], [314, 3, 1, "", "delete_benchmark"], [314, 3, 1, "", "details"], [314, 3, 1, "", "list"], [314, 3, 1, "", "update_batch_size"], [314, 3, 1, "", "update_config_path"], [314, 3, 1, "", "update_cores_per_instance"], [314, 3, 1, "", "update_dataset"], [314, 3, 1, "", "update_duration"], [314, 3, 1, "", "update_execution_command"], [314, 3, 1, "", "update_log_path"], [314, 3, 1, "", "update_mode"], [314, 3, 1, "", "update_number_of_instance"], [314, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[315, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[315, 3, 1, "", "add"], [315, 3, 1, "", "build_info"], [315, 3, 1, "", "update_accuracy"], [315, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[316, 2, 1, "", "Dataloader"], [316, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[316, 3, 1, "", "list"], [316, 3, 1, "", "list_by_framework"], [316, 3, 1, "", "query_to_list"], [316, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[317, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[317, 3, 1, "", "add"], [317, 3, 1, "", "build_info"], [317, 3, 1, "", "delete_dataset"], [317, 3, 1, "", "details"], [317, 3, 1, "", "list"], [317, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[318, 2, 1, "", "Domain"], [318, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[318, 3, 1, "", "get_domain_id"], [318, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[319, 2, 1, "", "DomainFlavour"], [319, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[319, 3, 1, "", "get_domain_flavour_id"], [319, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[320, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[321, 2, 1, "", "Framework"], [321, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[321, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[323, 2, 1, "", "Metric"], [323, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[323, 3, 1, "", "list"], [323, 3, 1, "", "list_by_framework"], [323, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[324, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[324, 3, 1, "", "add"], [324, 3, 1, "", "build_info"], [324, 3, 1, "", "delete_model"], [324, 3, 1, "", "details"], [324, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[325, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[325, 3, 1, "", "add"], [325, 3, 1, "", "build_info"], [325, 3, 1, "", "clean_status"], [325, 3, 1, "", "delete_optimization"], [325, 3, 1, "", "details"], [325, 3, 1, "", "get_optimization_by_project_and_model"], [325, 3, 1, "", "get_pinned_benchmarks"], [325, 3, 1, "", "list"], [325, 3, 1, "", "pin_accuracy_benchmark"], [325, 3, 1, "", "pin_performance_benchmark"], [325, 3, 1, "", "unpin_benchmark"], [325, 3, 1, "", "update_batch_size"], [325, 3, 1, "", "update_config_path"], [325, 3, 1, "", "update_dataset"], [325, 3, 1, "", "update_duration"], [325, 3, 1, "", "update_execution_command"], [325, 3, 1, "", "update_log_path"], [325, 3, 1, "", "update_optimized_model"], [325, 3, 1, "", "update_precision"], [325, 3, 1, "", "update_sampling_size"], [325, 3, 1, "", "update_status"], [325, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[326, 2, 1, "", "OptimizationType"], [326, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[326, 3, 1, "", "add"], [326, 3, 1, "", "get_optimization_type_by_id"], [326, 3, 1, "", "get_optimization_type_by_name"], [326, 3, 1, "", "get_optimization_type_for_precision"], [326, 3, 1, "", "get_optimization_type_id"], [326, 3, 1, "", "list"], [326, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[327, 2, 1, "", "Precision"], [327, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[327, 3, 1, "", "add"], [327, 3, 1, "", "get_precision_by_id"], [327, 3, 1, "", "get_precision_by_name"], [327, 3, 1, "", "get_precision_id"], [327, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[328, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[328, 3, 1, "", "add"], [328, 3, 1, "", "build_info"], [328, 3, 1, "", "clean_status"], [328, 3, 1, "", "delete_profiling"], [328, 3, 1, "", "details"], [328, 3, 1, "", "list"], [328, 3, 1, "", "update_dataset"], [328, 3, 1, "", "update_duration"], [328, 3, 1, "", "update_execution_command"], [328, 3, 1, "", "update_log_path"], [328, 3, 1, "", "update_num_threads"], [328, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[329, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[329, 3, 1, "", "add"], [329, 3, 1, "", "build_info"], [329, 3, 1, "", "bulk_add"], [329, 3, 1, "", "delete_results"], [329, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[330, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[330, 3, 1, "", "create_project"], [330, 3, 1, "", "delete_project"], [330, 3, 1, "", "get_model_by_name"], [330, 3, 1, "", "list_projects"], [330, 3, 1, "", "project_details"], [330, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[331, 2, 1, "", "Transform"], [331, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[331, 3, 1, "", "list"], [331, 3, 1, "", "list_by_domain"], [331, 3, 1, "", "list_by_framework"], [331, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[332, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[332, 3, 1, "", "add"], [332, 3, 1, "", "delete_tuning_details"], [332, 3, 1, "", "update"], [332, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[333, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[333, 3, 1, "", "add"], [333, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[340, 2, 1, "", "BenchmarkAPIInterface"], [340, 2, 1, "", "DatasetAPIInterface"], [340, 2, 1, "", "DiagnosisAPIInterface"], [340, 2, 1, "", "DictionariesAPIInterface"], [340, 2, 1, "", "ExamplesAPIInterface"], [340, 2, 1, "", "ModelAPIInterface"], [340, 2, 1, "", "OptimizationAPIInterface"], [340, 2, 1, "", "ProfilingAPIInterface"], [340, 2, 1, "", "ProjectAPIInterface"], [334, 0, 0, "-", "benchmark_api_interface"], [335, 0, 0, "-", "dataset_api_interface"], [336, 0, 0, "-", "db_operations"], [337, 0, 0, "-", "diagnosis_api_interface"], [338, 0, 0, "-", "dictionaries_api_interface"], [339, 0, 0, "-", "examples_api_interface"], [341, 0, 0, "-", "model_api_interface"], [342, 0, 0, "-", "optimization_api_interface"], [343, 0, 0, "-", "profiling_api_interface"], [344, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[340, 3, 1, "", "add_benchmark"], [340, 3, 1, "", "add_result"], [340, 3, 1, "", "clean_status"], [340, 3, 1, "", "delete_benchmark"], [340, 3, 1, "", "edit_benchmark"], [340, 3, 1, "", "get_benchmark_details"], [340, 3, 1, "", "list_benchmarks"], [340, 3, 1, "", "parse_benchmark_data"], [340, 3, 1, "", "parse_benchmark_edit_data"], [340, 3, 1, "", "update_benchmark_accuracy"], [340, 3, 1, "", "update_benchmark_duration"], [340, 3, 1, "", "update_benchmark_performance"], [340, 3, 1, "", "update_benchmark_status"], [340, 3, 1, "", "update_execution_command"], [340, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[340, 3, 1, "", "add_dataset"], [340, 3, 1, "", "check_if_custom_metric_or_dataloader"], [340, 3, 1, "", "dataloader_path"], [340, 3, 1, "", "delete_dataset"], [340, 3, 1, "", "generate_custom_template"], [340, 3, 1, "", "generate_template"], [340, 3, 1, "", "get_dataset_details"], [340, 3, 1, "", "get_predefined_dataset"], [340, 3, 1, "", "list_datasets"], [340, 3, 1, "", "parse_dataset_data"], [340, 3, 1, "", "prepare_predefined_dataloader"], [340, 3, 1, "", "prepare_predefined_transform"], [340, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[340, 3, 1, "", "generate_optimization"], [340, 3, 1, "", "get_op_details"], [340, 3, 1, "", "get_op_list"], [340, 3, 1, "", "histogram"], [340, 3, 1, "", "model_wise_params"], [340, 3, 1, "", "parse_model_wise_config"], [340, 3, 1, "", "parse_op_wise_config"], [340, 3, 1, "", "parse_optimization_data"], [340, 3, 1, "", "parse_wise_parameters"], [340, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[340, 3, 1, "", "list_dataloaders"], [340, 3, 1, "", "list_dataloaders_by_framework"], [340, 3, 1, "", "list_domain_flavours"], [340, 3, 1, "", "list_domains"], [340, 3, 1, "", "list_metrics"], [340, 3, 1, "", "list_metrics_by_framework"], [340, 3, 1, "", "list_optimization_types"], [340, 3, 1, "", "list_optimization_types_for_precision"], [340, 3, 1, "", "list_precisions"], [340, 3, 1, "", "list_transforms"], [340, 3, 1, "", "list_transforms_by_domain"], [340, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[340, 3, 1, "", "create_project"], [340, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[340, 3, 1, "", "add_model"], [340, 3, 1, "", "delete_model"], [340, 3, 1, "", "get_model_details"], [340, 3, 1, "", "list_models"], [340, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[340, 3, 1, "", "add_optimization"], [340, 3, 1, "", "add_quantization_optimization"], [340, 3, 1, "", "add_standard_optimization"], [340, 3, 1, "", "add_tuning_history"], [340, 3, 1, "", "clean_status"], [340, 3, 1, "", "delete_optimization"], [340, 3, 1, "", "edit_optimization"], [340, 3, 1, "", "get_optimization_details"], [340, 3, 1, "", "list_optimizations"], [340, 3, 1, "", "parse_optimization_data"], [340, 3, 1, "", "parse_optimization_edit_data"], [340, 3, 1, "", "parse_tuning_history"], [340, 3, 1, "", "pin_accuracy_benchmark"], [340, 3, 1, "", "pin_performance_benchmark"], [340, 3, 1, "", "update_execution_command"], [340, 3, 1, "", "update_optimization_duration"], [340, 3, 1, "", "update_optimization_status"], [340, 3, 1, "", "update_optimized_model"], [340, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[340, 3, 1, "", "add_profiling"], [340, 3, 1, "", "add_result"], [340, 3, 1, "", "bulk_add_results"], [340, 3, 1, "", "clean_status"], [340, 3, 1, "", "delete_profiling"], [340, 3, 1, "", "edit_profiling"], [340, 3, 1, "", "get_profiling_details"], [340, 3, 1, "", "list_profilings"], [340, 3, 1, "", "parse_profiling_data"], [340, 3, 1, "", "parse_profiling_edit_data"], [340, 3, 1, "", "parse_profiling_result_data"], [340, 3, 1, "", "update_execution_command"], [340, 3, 1, "", "update_log_path"], [340, 3, 1, "", "update_profiling_duration"], [340, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[340, 3, 1, "", "add_dummy_dataset"], [340, 3, 1, "", "add_model"], [340, 3, 1, "", "create_project"], [340, 3, 1, "", "delete_project"], [340, 3, 1, "", "get_project_details"], [340, 3, 1, "", "list_projects"], [340, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[334, 2, 1, "", "BenchmarkAPIInterface"], [334, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[334, 3, 1, "", "add_benchmark"], [334, 3, 1, "", "add_result"], [334, 3, 1, "", "clean_status"], [334, 3, 1, "", "delete_benchmark"], [334, 3, 1, "", "edit_benchmark"], [334, 3, 1, "", "get_benchmark_details"], [334, 3, 1, "", "list_benchmarks"], [334, 3, 1, "", "parse_benchmark_data"], [334, 3, 1, "", "parse_benchmark_edit_data"], [334, 3, 1, "", "update_benchmark_accuracy"], [334, 3, 1, "", "update_benchmark_duration"], [334, 3, 1, "", "update_benchmark_performance"], [334, 3, 1, "", "update_benchmark_status"], [334, 3, 1, "", "update_execution_command"], [334, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[335, 2, 1, "", "DatasetAPIInterface"], [335, 1, 1, "", "initialize_associations"], [335, 1, 1, "", "initialize_precision_optimization_types_association"], [335, 1, 1, "", "search_in_list_of_dict"], [335, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [335, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[335, 3, 1, "", "add_dataset"], [335, 3, 1, "", "check_if_custom_metric_or_dataloader"], [335, 3, 1, "", "dataloader_path"], [335, 3, 1, "", "delete_dataset"], [335, 3, 1, "", "generate_custom_template"], [335, 3, 1, "", "generate_template"], [335, 3, 1, "", "get_dataset_details"], [335, 3, 1, "", "get_predefined_dataset"], [335, 3, 1, "", "list_datasets"], [335, 3, 1, "", "parse_dataset_data"], [335, 3, 1, "", "prepare_predefined_dataloader"], [335, 3, 1, "", "prepare_predefined_transform"], [335, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[336, 1, 1, "", "initialize_associations"], [336, 1, 1, "", "initialize_precision_optimization_types_association"], [336, 1, 1, "", "search_in_list_of_dict"], [336, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [336, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[337, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[337, 3, 1, "", "generate_optimization"], [337, 3, 1, "", "get_op_details"], [337, 3, 1, "", "get_op_list"], [337, 3, 1, "", "histogram"], [337, 3, 1, "", "model_wise_params"], [337, 3, 1, "", "parse_model_wise_config"], [337, 3, 1, "", "parse_op_wise_config"], [337, 3, 1, "", "parse_optimization_data"], [337, 3, 1, "", "parse_wise_parameters"], [337, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[338, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[338, 3, 1, "", "list_dataloaders"], [338, 3, 1, "", "list_dataloaders_by_framework"], [338, 3, 1, "", "list_domain_flavours"], [338, 3, 1, "", "list_domains"], [338, 3, 1, "", "list_metrics"], [338, 3, 1, "", "list_metrics_by_framework"], [338, 3, 1, "", "list_optimization_types"], [338, 3, 1, "", "list_optimization_types_for_precision"], [338, 3, 1, "", "list_precisions"], [338, 3, 1, "", "list_transforms"], [338, 3, 1, "", "list_transforms_by_domain"], [338, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[339, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[339, 3, 1, "", "create_project"], [339, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[341, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[341, 3, 1, "", "add_model"], [341, 3, 1, "", "delete_model"], [341, 3, 1, "", "get_model_details"], [341, 3, 1, "", "list_models"], [341, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[342, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[342, 3, 1, "", "add_optimization"], [342, 3, 1, "", "add_quantization_optimization"], [342, 3, 1, "", "add_standard_optimization"], [342, 3, 1, "", "add_tuning_history"], [342, 3, 1, "", "clean_status"], [342, 3, 1, "", "delete_optimization"], [342, 3, 1, "", "edit_optimization"], [342, 3, 1, "", "get_optimization_details"], [342, 3, 1, "", "list_optimizations"], [342, 3, 1, "", "parse_optimization_data"], [342, 3, 1, "", "parse_optimization_edit_data"], [342, 3, 1, "", "parse_tuning_history"], [342, 3, 1, "", "pin_accuracy_benchmark"], [342, 3, 1, "", "pin_performance_benchmark"], [342, 3, 1, "", "update_execution_command"], [342, 3, 1, "", "update_optimization_duration"], [342, 3, 1, "", "update_optimization_status"], [342, 3, 1, "", "update_optimized_model"], [342, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[343, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[343, 3, 1, "", "add_profiling"], [343, 3, 1, "", "add_result"], [343, 3, 1, "", "bulk_add_results"], [343, 3, 1, "", "clean_status"], [343, 3, 1, "", "delete_profiling"], [343, 3, 1, "", "edit_profiling"], [343, 3, 1, "", "get_profiling_details"], [343, 3, 1, "", "list_profilings"], [343, 3, 1, "", "parse_profiling_data"], [343, 3, 1, "", "parse_profiling_edit_data"], [343, 3, 1, "", "parse_profiling_result_data"], [343, 3, 1, "", "update_execution_command"], [343, 3, 1, "", "update_log_path"], [343, 3, 1, "", "update_profiling_duration"], [343, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[344, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[344, 3, 1, "", "add_dummy_dataset"], [344, 3, 1, "", "add_model"], [344, 3, 1, "", "create_project"], [344, 3, 1, "", "delete_project"], [344, 3, 1, "", "get_project_details"], [344, 3, 1, "", "list_projects"], [344, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[346, 2, 1, "", "BenchmarkAddParamsInterface"], [346, 2, 1, "", "BenchmarkEditParamsInterface"], [346, 2, 1, "", "DatasetAddParamsInterface"], [346, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [346, 2, 1, "", "ModelAddParamsInterface"], [346, 2, 1, "", "OptimizationAddParamsInterface"], [346, 2, 1, "", "OptimizationEditParamsInterface"], [346, 2, 1, "", "ProfilingAddParamsInterface"], [346, 2, 1, "", "ProfilingEditParamsInterface"], [346, 2, 1, "", "ProfilingResultAddParamsInterface"], [346, 2, 1, "", "TuningHistoryInterface"], [346, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[346, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[346, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[346, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[347, 1, 1, "", "get_framework_dataloaders_config"], [347, 1, 1, "", "get_framework_transforms_config"], [347, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[348, 0, 0, "-", "diagnosis"], [349, 0, 0, "-", "factory"], [351, 0, 0, "-", "onnx_diagnosis"], [353, 0, 0, "-", "op_details"], [354, 0, 0, "-", "op_entry"], [355, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[348, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[348, 3, 1, "", "calculate_mse"], [348, 3, 1, "", "get_histogram_data"], [348, 3, 1, "", "get_op_details"], [348, 3, 1, "", "get_op_list"], [348, 3, 1, "", "get_tensors_info"], [348, 3, 1, "", "load_quantization_config"], [348, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[349, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[349, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[352, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[352, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[352, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[353, 2, 1, "", "OpActivation"], [353, 2, 1, "", "OpDetails"], [353, 2, 1, "", "OpPattern"], [353, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[353, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[354, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[354, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[356, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[356, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[356, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[357, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[357, 1, 1, "", "create_dir_entry"], [357, 1, 1, "", "create_entry"], [357, 1, 1, "", "create_file_entry"], [357, 1, 1, "", "filter_requested_entries"], [357, 1, 1, "", "get_directory_entries"], [357, 1, 1, "", "get_filter_value"], [357, 1, 1, "", "get_non_hidden_directory_entries"], [357, 1, 1, "", "get_requested_path"], [357, 1, 1, "", "get_setting_value"], [357, 1, 1, "", "is_dataset_or_directory_entry"], [357, 1, 1, "", "is_directory_entry"], [357, 1, 1, "", "is_model_or_directory_entry"], [357, 1, 1, "", "should_show_files"], [357, 1, 1, "", "should_show_only_model_files"], [357, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[359, 0, 0, "-", "attribute"], [360, 0, 0, "-", "collapser"], [361, 0, 0, "-", "edge"], [362, 0, 0, "-", "graph"], [363, 0, 0, "-", "graph_reader"], [365, 0, 0, "-", "node"], [366, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[359, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[360, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[360, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[361, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[361, 4, 1, "", "source"], [361, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[362, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[362, 3, 1, "", "add_edge"], [362, 3, 1, "", "add_node"], [362, 4, 1, "", "edges"], [362, 3, 1, "", "get_node"], [362, 3, 1, "", "get_target_nodes"], [362, 3, 1, "", "highlight_pattern"], [362, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[363, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[363, 3, 1, "", "find_pattern_in_graph"], [363, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[365, 2, 1, "", "GroupNode"], [365, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[367, 0, 0, "-", "onnxrt_reader"], [368, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[367, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[367, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[368, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[368, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[371, 0, 0, "-", "jobs_control_queue"], [372, 0, 0, "-", "jobs_manager"], [373, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[374, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[375, 0, 0, "-", "domain"], [377, 0, 0, "-", "model"], [378, 0, 0, "-", "model_type_getter"], [379, 0, 0, "-", "onnxrt"], [381, 0, 0, "-", "pytorch"], [383, 0, 0, "-", "repository"], [384, 0, 0, "-", "shape"], [386, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[375, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[377, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[377, 4, 1, "", "domain"], [377, 3, 1, "", "ensure_supported_path"], [377, 3, 1, "", "get_framework_name"], [377, 3, 1, "", "get_input_nodes"], [377, 3, 1, "", "get_model_graph"], [377, 3, 1, "", "get_output_nodes"], [377, 3, 1, "", "get_tensors_info"], [377, 3, 1, "", "guard_requirements_installed"], [377, 4, 1, "", "input_shape"], [377, 4, 1, "", "shape_elements_order"], [377, 4, 1, "", "supports_graph"], [377, 3, 1, "", "supports_path"], [377, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.model_type_getter": [[378, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[380, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[380, 2, 1, "", "OnnxrtModel"], [380, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[380, 4, 1, "", "domain"], [380, 4, 1, "", "filtered_input_nodes"], [380, 3, 1, "", "get_framework_name"], [380, 3, 1, "", "get_model_graph"], [380, 3, 1, "", "guard_requirements_installed"], [380, 4, 1, "", "input_shape"], [380, 4, 1, "", "nc_model_instance"], [380, 4, 1, "", "shape_elements_order"], [380, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[382, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[382, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[382, 3, 1, "", "get_framework_name"], [382, 3, 1, "", "guard_requirements_installed"], [382, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[383, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[383, 3, 1, "", "get_framework_from_path"], [383, 3, 1, "", "get_frameworks"], [383, 3, 1, "", "get_model"], [383, 3, 1, "", "get_supported_frameworks"], [383, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[384, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[384, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[385, 0, 0, "-", "frozen_pb"], [387, 0, 0, "-", "keras"], [388, 0, 0, "-", "meta_graph"], [389, 0, 0, "-", "model"], [390, 0, 0, "-", "saved_model"], [391, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[385, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[385, 3, 1, "", "supports_path"], [385, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[387, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[387, 3, 1, "", "get_input_nodes"], [387, 3, 1, "", "get_output_nodes"], [387, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[388, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[388, 3, 1, "", "get_input_nodes"], [388, 3, 1, "", "get_model_graph"], [388, 3, 1, "", "get_output_nodes"], [388, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[389, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[389, 3, 1, "", "get_framework_name"], [389, 3, 1, "", "get_input_nodes"], [389, 3, 1, "", "get_model_graph"], [389, 3, 1, "", "get_output_nodes"], [389, 3, 1, "", "guard_requirements_installed"], [389, 4, 1, "", "input_shape"], [389, 4, 1, "", "nc_model_instance"], [389, 4, 1, "", "shape_elements_order"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[390, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[390, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[391, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[392, 0, 0, "-", "download_config"], [393, 0, 0, "-", "download_model"], [394, 0, 0, "-", "downloader"], [396, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[392, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[393, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[394, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[394, 3, 1, "", "download"], [394, 3, 1, "", "download_config"], [394, 3, 1, "", "download_file"], [394, 3, 1, "", "download_model"], [394, 3, 1, "", "download_yaml_config"], [394, 3, 1, "", "get_yaml_url"], [394, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[396, 1, 1, "", "check_version"], [396, 1, 1, "", "get_available_models"], [396, 1, 1, "", "get_framework_module_name"], [396, 1, 1, "", "get_installed_frameworks"], [396, 1, 1, "", "list_models"], [396, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[398, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[398, 2, 1, "", "MappingDirection"], [398, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[398, 4, 1, "", "domain_flavour_mappings"], [398, 4, 1, "", "domain_mappings"], [398, 4, 1, "", "framework_mappings"], [398, 3, 1, "", "map_name"], [398, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[404, 2, 1, "", "Optimizations"], [399, 0, 0, "-", "execute_optimization"], [400, 0, 0, "-", "factory"], [402, 0, 0, "-", "graph_optimizer"], [405, 0, 0, "-", "mixed_precision"], [408, 0, 0, "-", "neural_coder_optimization"], [410, 0, 0, "-", "optimization"], [411, 0, 0, "-", "tune"], [414, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[399, 1, 1, "", "check_if_collect_tuning_history"], [399, 1, 1, "", "execute_optimization"], [399, 1, 1, "", "execute_optimization_pytorch_script"], [399, 1, 1, "", "execute_optimization_regular"], [399, 1, 1, "", "parse_logs"], [399, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[400, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[400, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[401, 0, 0, "-", "graph_optimization"], [403, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[401, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[401, 4, 1, "", "configuration_data"], [401, 3, 1, "", "execute"], [401, 3, 1, "", "generate_config"], [401, 4, 1, "", "optimization_script"], [401, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[403, 1, 1, "", "optimize_graph"], [403, 1, 1, "", "optimize_graph_config"], [403, 1, 1, "", "parse_args"], [403, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[406, 0, 0, "-", "mixed_precision"], [407, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[406, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[406, 4, 1, "", "configuration_data"], [406, 3, 1, "", "execute"], [406, 3, 1, "", "generate_config"], [406, 4, 1, "", "optimization_script"], [406, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[407, 1, 1, "", "optimize_graph"], [407, 1, 1, "", "optimize_graph_config"], [407, 1, 1, "", "parse_args"], [407, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[409, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[409, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[410, 2, 1, "", "DataloaderInterface"], [410, 2, 1, "", "Optimization"], [410, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[410, 4, 1, "", "command"], [410, 4, 1, "", "config_filename"], [410, 4, 1, "", "configuration_data"], [410, 3, 1, "", "execute"], [410, 3, 1, "", "generate_config"], [410, 4, 1, "", "optimization_script"], [410, 4, 1, "", "output_model_dir"], [410, 4, 1, "", "output_model_name"], [410, 4, 1, "", "parameters"], [410, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.tune": [[412, 0, 0, "-", "tune_model"], [413, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[412, 1, 1, "", "parse_args"], [412, 1, 1, "", "set_eager_execution"], [412, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[413, 2, 1, "", "AccuracyCriterion"], [413, 2, 1, "", "Tuning"], [413, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[413, 4, 1, "", "configuration_data"], [413, 3, 1, "", "execute"], [413, 3, 1, "", "generate_config"], [413, 4, 1, "", "optimization_script"], [413, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[414, 2, 1, "", "TuningHistory"], [414, 2, 1, "", "Watcher"], [414, 1, 1, "", "tuning_history"], [414, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[414, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[414, 3, 1, "", "history_file_modification_time"], [414, 3, 1, "", "stop"], [414, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[415, 0, 0, "-", "execute_profiling"], [416, 0, 0, "-", "factory"], [418, 0, 0, "-", "profile_model"], [419, 0, 0, "-", "profiler"], [420, 0, 0, "-", "profiling"], [422, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[415, 1, 1, "", "execute_profiling"], [415, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[416, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[416, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[418, 1, 1, "", "load_profiling_details"], [418, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[419, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[419, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[420, 2, 1, "", "DataloaderInterface"], [420, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[420, 4, 1, "", "config_filename"], [420, 4, 1, "", "config_path"], [420, 3, 1, "", "execute"], [420, 3, 1, "", "generate_config"], [420, 4, 1, "", "profiling_data"], [420, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[421, 0, 0, "-", "factory"], [423, 0, 0, "-", "profiler"], [424, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[421, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[421, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[423, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[423, 3, 1, "", "build_dataloader"], [423, 3, 1, "", "convert_nodes_to_list"], [423, 3, 1, "", "create_tf_config"], [423, 3, 1, "", "get_node_by_name"], [423, 3, 1, "", "initialize_graph"], [423, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[424, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[425, 1, 1, "", "main"], [425, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[427, 0, 0, "-", "consts"], [428, 0, 0, "-", "environment"], [429, 0, 0, "-", "exceptions"], [430, 0, 0, "-", "executor"], [431, 0, 0, "-", "expiring_dict"], [432, 0, 0, "-", "github_info"], [433, 0, 0, "-", "hw_info"], [435, 0, 0, "-", "json_serializer"], [436, 0, 0, "-", "logger"], [437, 0, 0, "-", "parser"], [438, 0, 0, "-", "proc"], [439, 0, 0, "-", "processes"], [440, 0, 0, "-", "singleton"], [441, 0, 0, "-", "templates"], [444, 0, 0, "-", "utils"], [449, 0, 0, "-", "workload"], [455, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[427, 2, 1, "", "DomainFlavours"], [427, 2, 1, "", "Domains"], [427, 2, 1, "", "ExecutionStatus"], [427, 2, 1, "", "Frameworks"], [427, 2, 1, "", "OptimizationTypes"], [427, 2, 1, "", "Precisions"], [427, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[428, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[428, 3, 1, "", "clean_workloads_wip_status"], [428, 3, 1, "", "ensure_workdir_exists_and_writeable"], [428, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[429, 7, 1, "", "AccessDeniedException"], [429, 7, 1, "", "ClientErrorException"], [429, 7, 1, "", "InternalException"], [429, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[430, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[430, 4, 1, "", "additional_log_names"], [430, 3, 1, "", "call"], [430, 3, 1, "", "call_one"], [430, 3, 1, "", "is_multi_commands"], [430, 4, 1, "", "log_name"], [430, 4, 1, "", "process_duration"], [430, 3, 1, "", "refresh_workdir"], [430, 4, 1, "", "request_id"], [430, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[431, 2, 1, "", "ExpiringDict"], [431, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[431, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[432, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[432, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[433, 2, 1, "", "HWInfo"], [433, 1, 1, "", "get_bios_version"], [433, 1, 1, "", "get_distribution"], [433, 1, 1, "", "get_framework_dependency_info"], [433, 1, 1, "", "get_framework_info"], [433, 1, 1, "", "get_kernel_version"], [433, 1, 1, "", "get_number_of_sockets"], [433, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[433, 3, 1, "", "initialize"], [433, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[435, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[435, 3, 1, "", "serialize"], [435, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[436, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[437, 2, 1, "", "AccuracyParser"], [437, 2, 1, "", "BenchmarkParserFactory"], [437, 2, 1, "", "OptimizationParser"], [437, 2, 1, "", "Parser"], [437, 2, 1, "", "PerformanceParser"], [437, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[437, 4, 1, "", "patterns"], [437, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[437, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[437, 4, 1, "", "patterns"], [437, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[437, 4, 1, "", "patterns"], [437, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[437, 4, 1, "", "patterns"], [437, 3, 1, "", "process"], [437, 3, 1, "", "summarize_partial"], [437, 3, 1, "", "summarize_value"], [437, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[437, 4, 1, "", "patterns"], [437, 3, 1, "", "process"], [437, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[438, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[438, 4, 1, "", "info"], [438, 4, 1, "", "info_path"], [438, 4, 1, "", "is_ok"], [438, 4, 1, "", "output"], [438, 4, 1, "", "output_path"], [438, 3, 1, "", "remove_logs"], [438, 3, 1, "", "run"], [438, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[439, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[439, 4, 1, "", "is_ok"], [439, 3, 1, "", "remove_successful_logs"], [439, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[440, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.templates": [[442, 0, 0, "-", "metric"], [443, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[442, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[442, 4, 1, "", "acc_input_model"], [442, 4, 1, "", "acc_optimized_model"], [442, 4, 1, "", "accuracy"], [442, 3, 1, "", "calculate_throughput"], [442, 3, 1, "", "insert_data"], [442, 4, 1, "", "latency"], [442, 4, 1, "", "optimization_time"], [442, 4, 1, "", "path_optimized_model"], [442, 4, 1, "", "profiling_data"], [442, 4, 1, "", "size_input_model"], [442, 4, 1, "", "size_optimized_model"], [442, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[443, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[443, 3, 1, "", "clean_logs"], [443, 3, 1, "", "clean_status"], [443, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[444, 1, 1, "", "check_module"], [444, 1, 1, "", "deprecated"], [444, 1, 1, "", "determine_ip"], [444, 1, 1, "", "export_to_csv"], [444, 1, 1, "", "filter_transforms"], [444, 1, 1, "", "get_dataset_path"], [444, 1, 1, "", "get_file_extension"], [444, 1, 1, "", "get_framework_from_path"], [444, 1, 1, "", "get_height_width_from_size"], [444, 1, 1, "", "get_metrics_dict"], [444, 1, 1, "", "get_model_zoo_config_path"], [444, 1, 1, "", "get_model_zoo_model_path"], [444, 1, 1, "", "get_module_version"], [444, 1, 1, "", "get_predefined_config_path"], [444, 1, 1, "", "get_shape_from_transforms"], [444, 1, 1, "", "get_size"], [444, 1, 1, "", "is_dataset_file"], [444, 1, 1, "", "is_development_env"], [444, 1, 1, "", "is_hidden"], [444, 1, 1, "", "load_dataloader_config"], [444, 1, 1, "", "load_help_nc_params"], [444, 1, 1, "", "load_metrics_config"], [444, 1, 1, "", "load_model_config"], [444, 1, 1, "", "load_model_wise_params"], [444, 1, 1, "", "load_precisions_config"], [444, 1, 1, "", "load_transforms_config"], [444, 1, 1, "", "load_transforms_filter_config"], [444, 1, 1, "", "normalize_domain"], [444, 1, 1, "", "normalize_framework"], [444, 1, 1, "", "normalize_string"], [444, 1, 1, "", "parse_bool_value"], [444, 1, 1, "", "parse_to_float_list"], [444, 1, 1, "", "parse_to_string_list"], [444, 1, 1, "", "parse_version"], [444, 1, 1, "", "release_tag"], [444, 1, 1, "", "replace_with_values"], [444, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[445, 0, 0, "-", "config"], [446, 0, 0, "-", "dataloader"], [447, 0, 0, "-", "evaluation"], [448, 0, 0, "-", "graph_optimization"], [450, 0, 0, "-", "mixed_precision"], [451, 0, 0, "-", "model"], [452, 0, 0, "-", "pruning"], [453, 0, 0, "-", "quantization"], [454, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[445, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[445, 3, 1, "", "dump"], [445, 3, 1, "", "get_performance_configs"], [445, 3, 1, "", "get_performance_cores_per_instance"], [445, 3, 1, "", "get_performance_num_of_instance"], [445, 3, 1, "", "initialize"], [445, 3, 1, "", "load"], [445, 3, 1, "", "process_transform"], [445, 3, 1, "", "remove_accuracy_metric"], [445, 3, 1, "", "remove_dataloader"], [445, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [445, 3, 1, "", "set_accuracy_goal"], [445, 3, 1, "", "set_accuracy_metric"], [445, 3, 1, "", "set_evaluation_dataloader"], [445, 3, 1, "", "set_evaluation_dataset_path"], [445, 3, 1, "", "set_inputs"], [445, 3, 1, "", "set_optimization_precision"], [445, 3, 1, "", "set_outputs"], [445, 3, 1, "", "set_performance_cores_per_instance"], [445, 3, 1, "", "set_performance_iterations"], [445, 3, 1, "", "set_performance_num_of_instance"], [445, 3, 1, "", "set_performance_warmup"], [445, 3, 1, "", "set_quantization_approach"], [445, 3, 1, "", "set_quantization_batch_size"], [445, 3, 1, "", "set_quantization_dataloader"], [445, 3, 1, "", "set_quantization_dataset_path"], [445, 3, 1, "", "set_quantization_sampling_size"], [445, 3, 1, "", "set_transform"], [445, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[446, 2, 1, "", "Dataloader"], [446, 2, 1, "", "Dataset"], [446, 2, 1, "", "Filter"], [446, 2, 1, "", "LabelBalance"], [446, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[446, 3, 1, "", "serialize"], [446, 3, 1, "", "set_dataset"], [446, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[446, 3, 1, "", "is_dummy"], [446, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[446, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[447, 2, 1, "", "Accuracy"], [447, 2, 1, "", "Configs"], [447, 2, 1, "", "Evaluation"], [447, 2, 1, "", "Metric"], [447, 2, 1, "", "Performance"], [447, 2, 1, "", "Postprocess"], [447, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[447, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[447, 4, 1, "", "name"], [447, 4, 1, "", "param"], [447, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.graph_optimization": [[448, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[448, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[450, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[450, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[451, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[451, 4, 1, "", "inputs"], [451, 4, 1, "", "outputs"], [451, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[452, 2, 1, "", "AdamOptimizer"], [452, 2, 1, "", "AdamWOptimizer"], [452, 2, 1, "", "Approach"], [452, 2, 1, "", "Criterion"], [452, 2, 1, "", "CrossEntropyLossCriterion"], [452, 2, 1, "", "KnowledgeDistillationLossCriterion"], [452, 2, 1, "", "Optimizer"], [452, 2, 1, "", "Pruning"], [452, 2, 1, "", "SGDOptimizer"], [452, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [452, 2, 1, "", "Train"], [452, 2, 1, "", "WeightCompressionApproach"], [452, 1, 1, "", "parse_dict_value_to_float"], [452, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[452, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.quantization": [[453, 2, 1, "", "Advance"], [453, 2, 1, "", "Calibration"], [453, 2, 1, "", "Quantization"], [453, 2, 1, "", "WiseConfig"], [453, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[454, 2, 1, "", "AccCriterion"], [454, 2, 1, "", "Diagnosis"], [454, 2, 1, "", "ExitPolicy"], [454, 2, 1, "", "MultiObjectives"], [454, 2, 1, "", "Strategy"], [454, 2, 1, "", "Tuning"], [454, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[454, 4, 1, "", "objective"], [454, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[454, 3, 1, "", "set_max_trials"], [454, 3, 1, "", "set_performance_only"], [454, 3, 1, "", "set_random_seed"], [454, 3, 1, "", "set_timeout"], [454, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[455, 1, 1, "", "float_representer"], [455, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[456, 0, 0, "-", "communication"], [457, 0, 0, "-", "configuration"], [458, 0, 0, "-", "exceptions"], [460, 0, 0, "-", "router"], [461, 0, 0, "-", "server"], [464, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[456, 2, 1, "", "Message"], [456, 2, 1, "", "MessageQueue"], [456, 2, 1, "", "Request"], [456, 2, 1, "", "Response"], [456, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[456, 4, 1, "", "data"], [456, 4, 1, "", "status"], [456, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[456, 3, 1, "", "get"], [456, 3, 1, "", "post_error"], [456, 3, 1, "", "post_failure"], [456, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[457, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[457, 3, 1, "", "determine_gui_port"], [457, 3, 1, "", "determine_log_level"], [457, 3, 1, "", "determine_server_port"], [457, 3, 1, "", "determine_url_prefix"], [457, 3, 1, "", "determine_values_from_environment"], [457, 3, 1, "", "dump_token_to_file"], [457, 3, 1, "", "get_command_line_args"], [457, 3, 1, "", "get_url"], [457, 4, 1, "", "global_config_directory"], [457, 3, 1, "", "is_port_taken"], [457, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[458, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[460, 2, 1, "", "DeferredRoutingDefinition"], [460, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [460, 2, 1, "", "RealtimeRoutingDefinition"], [460, 2, 1, "", "Router"], [460, 2, 1, "", "RoutingDefinition"], [460, 1, 1, "", "find_pattern_in_graph"], [460, 1, 1, "", "get_model_graph"], [460, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[460, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[461, 1, 1, "", "allow_api_call"], [461, 1, 1, "", "block_iframe"], [461, 1, 1, "", "block_sniffing"], [461, 1, 1, "", "build_parameters"], [461, 1, 1, "", "disable_cache"], [461, 1, 1, "", "get_tls_args"], [461, 1, 1, "", "handle_api_call"], [461, 1, 1, "", "page_not_found"], [461, 1, 1, "", "require_api_token"], [461, 1, 1, "", "root"], [461, 1, 1, "", "run_server"], [461, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[462, 0, 0, "-", "benchmark"], [463, 0, 0, "-", "history_snapshot_parser"], [465, 0, 0, "-", "model"], [466, 0, 0, "-", "optimization"], [467, 0, 0, "-", "profiling"], [468, 0, 0, "-", "request_data_processor"], [469, 0, 0, "-", "response_generator"], [470, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[462, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[463, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[463, 3, 1, "", "extract_accuracy"], [463, 3, 1, "", "extract_performance"], [463, 3, 1, "", "parse_history_item"], [463, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[465, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[465, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[466, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[467, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[467, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[468, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[468, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[469, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[469, 3, 1, "", "add_refresh"], [469, 3, 1, "", "from_exception"], [469, 3, 1, "", "get_status_code_for_exception"], [469, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[470, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[470, 3, 1, "", "get_code_template"], [470, 3, 1, "", "get_config"], [470, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 475], "coven": [0, 475], "code": [0, 2, 475], "conduct": [0, 475], "our": [0, 475], "pledg": [0, 475], "standard": [0, 475], "respons": [0, 475], "scope": [0, 475], "enforc": [0, 475], "attribut": [0, 178, 204, 213, 220, 243, 260, 359, 475], "fx": 1, "overview": 1, "usag": [1, 2, 3, 4, 509, 511], "note": 1, "detail": [1, 473], "common": [1, 11, 183, 184, 185, 186, 187, 188, 189, 190, 485], "problem": 1, "dynam": [1, 2, 483, 504], "quantiz": [1, 4, 5, 9, 28, 32, 66, 254, 273, 453, 472, 480, 483, 503, 504, 505, 513], "static": [1, 504], "awar": [1, 4, 504], "train": [1, 4, 286, 481, 504], "neural": [2, 5, 26, 473, 490, 491, 501, 508, 514], "architectur": [2, 3, 5, 26, 478, 491], "search": [2, 26], "introduct": [2, 7, 9, 32, 473, 479, 480, 481, 486, 488, 491, 494, 495, 496, 497, 498, 499, 501, 503, 504, 508, 509, 511, 512, 514], "na": [2, 26, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 503], "api": [2, 5, 7, 9, 10, 22, 32, 479, 489, 494, 495, 498, 499, 501, 503], "basic": [2, 275, 511], "1": [2, 473, 481, 485, 489, 492, 513], "python": [2, 5, 30, 494, 503], "yaml": [2, 474, 476, 480, 481, 486, 512], "2": [2, 22, 473, 485, 489, 492, 513], "onli": 2, "advanc": [2, 482], "custom": [2, 473, 494, 498, 511], "exampl": [2, 3, 4, 7, 320, 474, 479, 480, 481, 484, 487, 488, 495, 496, 498, 499, 501, 504, 506, 509, 513], "ptq": [3, 513], "design": [3, 4, 478, 509, 511], "pytorch": [3, 68, 295, 381, 382, 472, 477, 494, 505, 509, 510, 513], "mobilenetv2": 3, "model": [3, 5, 20, 187, 259, 260, 261, 262, 263, 264, 324, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 451, 465, 473, 487, 496, 497, 506, 511, 513], "helper": 3, "function": [3, 33, 37, 38, 42, 61, 67, 68, 90, 91, 93, 154, 159, 160, 162, 166, 178, 182, 183, 185, 188, 190, 194, 202, 204, 208, 211, 212, 213, 215, 216, 217, 221, 222, 224, 225, 226, 227, 228, 236, 240, 245, 249, 250, 251, 253, 257, 261, 265, 271, 273, 276, 285, 286, 289, 295, 296, 298, 299, 308, 309, 310, 312, 316, 318, 319, 321, 323, 326, 327, 331, 334, 335, 336, 347, 357, 374, 378, 380, 391, 392, 393, 396, 399, 403, 407, 409, 412, 414, 415, 418, 424, 425, 433, 436, 444, 452, 455, 456, 460, 461, 481], "intel": [5, 473, 490, 491, 513, 514], "compressor": [5, 473, 490, 491, 508, 514], "instal": [5, 473, 481, 487, 492], "prerequisit": [5, 492], "linux": [5, 487, 492], "get": [5, 7, 276, 479, 482, 486, 487, 494, 495, 498, 499, 501, 503, 504, 512], "start": [5, 7, 473, 479, 482, 486, 487, 494, 495, 498, 499, 501, 503, 504, 512], "jupyterlab": 5, "extens": [5, 513], "gui": 5, "system": [5, 473, 487, 500], "requir": [5, 487], "valid": [5, 487, 506, 513], "hardwar": [5, 487, 513], "environ": [5, 428, 487], "support": [5, 7, 472, 475, 477, 479, 481, 486, 491, 494, 495, 496, 498, 499, 501, 503, 504, 510, 512], "cpu": [5, 513], "base": 5, "64": 5, "compat": 5, "processor": 5, "gpu": 5, "built": [5, 477, 489, 494], "": 5, "xe": 5, "onnx": [5, 157, 472, 513], "multipl": [5, 498, 513], "vendor": 5, "through": [5, 513], "runtim": [5, 472, 513], "softwar": [5, 487], "document": [5, 9, 32, 482, 487, 490], "select": 5, "public": [5, 502], "event": [5, 502], "addit": 5, "content": [5, 13, 26, 33, 37, 38, 39, 40, 42, 43, 44, 57, 61, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 285, 286, 287, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 374, 375, 377, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473], "hire": 5, "secur": [6, 473, 481], "polici": 6, "report": 6, "vulner": 6, "adaptor": [7, 8, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "matrix": [7, 472, 479, 486, 491, 494, 495, 496, 498, 499, 501, 503, 504, 512], "work": [7, 504], "flow": [7, 504], "queri": [7, 69], "background": 7, "ad": 7, "new": [7, 473, 511], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 13, 26, 38, 40, 42, 43, 44, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 290, 291, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 352, 353, 354, 356, 359, 360, 361, 362, 363, 365, 367, 368, 375, 377, 380, 382, 383, 384, 385, 387, 388, 389, 390, 394, 398, 400, 401, 404, 406, 410, 413, 414, 416, 419, 420, 421, 423, 427, 428, 430, 431, 432, 433, 435, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 460, 462, 463, 465, 466, 467, 468, 469, 470], "user": [9, 32, 474, 476, 477, 480, 481, 489, 503, 512], "face": [9, 32, 489], "experiment": [9, 32, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "relat": [9, 32, 511], "prune": [9, 27, 32, 242, 252, 272, 452, 501, 503, 513], "poc": [9, 32], "benchmark": [9, 12, 32, 164, 182, 297, 298, 299, 300, 314, 462, 473, 474, 503], "default": [9, 32, 488], "bleu": [13, 221], "modul": [13, 33, 37, 38, 40, 42, 43, 44, 61, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 159, 160, 161, 163, 164, 165, 166, 169, 172, 173, 174, 176, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 255, 259, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 277, 279, 280, 285, 286, 287, 289, 291, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 374, 375, 377, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 403, 406, 407, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470], "criterion": [14, 183], "data": [15, 174, 175, 176, 177, 178, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "dataload": [16, 174, 175, 184, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 316, 446, 474, 476], "basedataload": 16, "dataset": [17, 176, 177, 202, 203, 204, 205, 206, 207, 208, 209, 317, 473, 477, 489], "transform": [18, 179, 180, 181, 214, 215, 216, 217, 331, 489, 510], "metric": [19, 186, 221, 222, 223, 224, 225, 226, 227, 228, 257, 323, 442, 489, 494], "optim": [21, 188, 325, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 466, 473, 488, 499], "compon": [22, 191, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "experiement": 22, "deprec": 22, "0": [22, 513], "distil": [23, 218, 479, 480, 503, 513], "mixedprecis": 24, "modelconvers": 25, "packag": [26, 39, 57, 162, 175, 178, 185, 196, 208, 212, 213, 215, 220, 227, 238, 243, 244, 256, 257, 260, 268, 278, 290, 300, 340, 345, 404], "schedul": [29, 253, 255, 501], "strategi": [31, 171, 172, 173, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 508, 511], "6ece06672ed3_v1_14": 33, "6f0d0f71d92e_v1_13": 34, "9e89549a08c8_v1_11": 35, "block_mask": 36, "env": 37, "neural_compressor": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "mxnet": [40, 472, 477, 494, 510, 513], "mxnet_util": [41, 42], "util": [42, 67, 154, 159, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 347, 391, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "onnxrt": [43, 379, 380, 477, 494, 510], "ox_util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "calibr": 44, "oper": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "activ": 46, "argmax": 47, "attent": 48, "binary_op": 49, "concat": 50, "conv": 51, "direct_q8": 52, "embed_layernorm": 53, "gather": 54, "gavgpool": 55, "gemm": 56, "lstm": 58, "matmul": 59, "maxpool": 60, "op": 61, "pad": 62, "pool": 63, "resiz": 64, "split": 65, "tensorflow": [70, 385, 386, 387, 388, 389, 390, 391, 472, 477, 494, 505, 509, 510, 513], "tf_util": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "graph_convert": 71, "graph_converter_without_calib": 72, "graph_rewrit": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "bf16": [73, 74], "bf16_convert": [73, 155], "gener": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "convert_add_to_biasadd": 75, "convert_layout": 76, "convert_leakyrelu": 77, "convert_nan_to_random": 78, "convert_placeholder_to_const": 79, "dequantize_cast_optim": 80, "dilated_contract": 81, "dummy_biasadd": 82, "expanddims_optim": 83, "fetch_weight_from_reshap": 84, "fold_batch_norm": 85, "fold_const": 86, "fuse_biasadd_add": 87, "fuse_column_wise_mul": 88, "fuse_conv_with_math": 89, "fuse_decomposed_bn": 90, "fuse_decomposed_in": 91, "fuse_gelu": 92, "fuse_layer_norm": 93, "fuse_pad_with_conv": 94, "fuse_pad_with_fp32_conv": 95, "fuse_reshape_transpos": 96, "graph_cse_optim": 97, "grappler_pass": 98, "insert_print_nod": 100, "move_squeeze_after_relu": 101, "pre_optim": 102, "remove_training_nod": 103, "rename_batch_norm": 104, "split_shared_input": 105, "strip_equivalent_nod": 106, "strip_unused_nod": 107, "switch_optim": 108, "update_ent": 109, "graph_bas": 110, "int8": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 513], "freeze_fake_qu": 112, "freeze_valu": 113, "freeze_value_without_calib": 114, "fuse_conv_redundant_dequant": 115, "fuse_conv_requant": 116, "fuse_matmul_redundant_dequant": 117, "fuse_matmul_requant": 118, "meta_op_optim": 120, "post_hostconst_convert": 121, "post_quantized_op_cs": 122, "rnn_convert": 123, "scale_propag": 124, "qdq": [125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 513], "insert_qdq_pattern": 126, "merge_duplicated_qdq": 127, "share_qdq_y_pattern": 128, "graph_util": 129, "quantize_graph": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "fuse_qdq_bn": 132, "fuse_qdq_concatv2": 133, "fuse_qdq_conv": 134, "fuse_qdq_deconv": 135, "fuse_qdq_in": 136, "fuse_qdq_matmul": 137, "fuse_qdq_pool": 138, "optimize_qdq": 140, "quantize_graph_bas": 141, "quantize_graph_bn": 142, "quantize_graph_concatv2": 143, "quantize_graph_conv": 144, "quantize_graph_for_intel_cpu": 145, "quantize_graph_matmul": 146, "quantize_graph_pool": 147, "quantize_graph_common": 148, "transform_graph": [149, 150, 151, 152, 153], "bias_correct": 149, "graph_transform_bas": 150, "insert_log": 152, "rerange_quantized_concat": 153, "torch_util": [155, 156, 157, 158, 159, 190], "symbolic_trac": 158, "algorithm": [160, 161, 162, 163], "fast_bias_correct": 161, "weight_correct": 163, "conf": [165, 166, 167, 168], "config": [165, 169, 445, 474, 476, 498], "dotdict": 166, "pythonic_config": 168, "contrib": [170, 171, 172, 173], "sigopt": [172, 508, 511], "tpe": [173, 511], "imagenet_dataset": [176, 207], "coco_transform": 179, "imagenet_transform": [180, 214], "submodul": [185, 196, 208, 212, 215, 220, 227, 237, 238, 244, 247, 290, 300, 304, 311, 322, 340, 345, 350, 351, 355, 358, 364, 366, 369, 370, 376, 379, 381, 386, 395, 397, 402, 404, 405, 408, 411, 417, 422, 426, 434, 441, 449, 459, 464], "postprocess": 189, "base_dataload": 192, "default_dataload": 194, "fetcher": 195, "mxnet_dataload": 197, "onnxrt_dataload": 198, "pytorch_dataload": 199, "sampler": 200, "tensorflow_dataload": 201, "bert_dataset": 202, "coco_dataset": 203, "dummy_dataset": 205, "dummy_dataset_v2": 206, "style_transfer_dataset": 209, "filter": [210, 211, 212], "coco_filt": 210, "subpackag": [213, 220, 238, 243, 256, 345, 350, 364, 369, 376, 404, 417, 426, 434, 459], "token": 216, "graph_optim": [219, 401, 402, 403, 448], "bleu_util": 222, "coco_label_map": 223, "coco_tool": 224, "evaluate_squad": 225, "f1": 226, "mixed_precis": [229, 405, 406, 407, 450], "model_convers": 230, "basic_na": 231, "dyna": 232, "dynast": [233, 234, 235, 236, 237], "dynas_manag": 233, "dynas_predictor": 234, "dynas_search": 235, "dynas_util": 236, "nas_util": 240, "search_algorithm": 241, "pruning_recip": [243, 244, 245, 246], "pattern": [244, 245, 246, 249, 501], "tile_pattern": 246, "pytorch_prun": [247, 248, 249, 250, 251, 252, 253], "logger": [248, 293, 436], "prune_util": 250, "pruner": [251, 266, 267, 268, 269, 270, 271], "mix_precis": 258, "base_model": 259, "nets_factori": 262, "onnx_model": 263, "torch_model": 264, "object": [265, 498], "gradient_sensit": 266, "group_lasso": 267, "magnitud": 269, "pattern_lock": 270, "auto_mixed_precis": 274, "bayesian": [276, 511], "target": 276, "valu": 276, "param": 276, "exhaust": [277, 511], "mse": [279, 511], "random": [280, 511], "st_util": [281, 282, 283, 284], "tuning_sampl": 282, "tuning_spac": 283, "tuning_struct": 284, "collect_layer_histogram": 287, "constant": 288, "create_obj_from_config": 289, "kl_diverg": 291, "load_huggingfac": 292, "option": [294, 473, 481, 492], "ux": [297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "benchmark_model": 298, "execute_benchmark": 299, "config_gener": [301, 302, 303, 304, 305, 306, 307], "benchmark_config_gener": 301, "graph_optimization_config_gener": 303, "mixed_precision_config_gener": 305, "profiling_config_gener": 306, "quantization_config_gener": 307, "configuration_wizard": [308, 309, 310, 311, 312], "configuration_pars": 308, "get_boundary_nod": 309, "get_configur": 310, "params_feed": 312, "db_manag": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "db_model": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "benchmark_result": 315, "domain": [318, 375], "domain_flavour": 319, "framework": [321, 486, 496, 503], "optimization_typ": 326, "precis": [327, 488, 495, 505], "profil": [328, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 467, 473], "profiling_result": 329, "project": [330, 473], "tuning_detail": 332, "tuning_histori": [333, 414], "db_oper": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "benchmark_api_interfac": 334, "dataset_api_interfac": 335, "diagnosis_api_interfac": 337, "dictionaries_api_interfac": 338, "examples_api_interfac": 339, "model_api_interfac": 341, "optimization_api_interfac": 342, "profiling_api_interfac": 343, "project_api_interfac": 344, "params_interfac": 346, "diagnosi": [348, 349, 350, 351, 352, 353, 354, 355, 356, 473], "factori": [349, 400, 416, 421], "onnx_diagnosi": [351, 352], "onnxrt_diagnosi": 352, "op_detail": 353, "op_entri": 354, "tensorflow_diagnosi": [355, 356], "file_brows": [357, 358], "graph": [359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 473, 488], "collaps": 360, "edg": 361, "graph_read": 363, "node": 365, "reader": [366, 367, 368], "onnxrt_read": 367, "tensorflow_read": 368, "jobs_manag": [370, 371, 372, 373], "jobs_control_queu": 371, "request": [373, 475], "manage_workspac": 374, "model_type_gett": 378, "repositori": 383, "shape": 384, "frozen_pb": 385, "kera": 387, "meta_graph": 388, "saved_model": 390, "model_zoo": [392, 393, 394, 395, 396], "download_config": 392, "download_model": 393, "download": 394, "list_model": 396, "names_mapp": [397, 398], "execute_optim": 399, "optimize_model": [403, 407, 409], "neural_coder_optim": [408, 409], "tune": [411, 412, 413, 454, 488, 504, 511], "tune_model": 412, "execute_profil": 415, "profile_model": 418, "tensorflow_profil": [421, 422, 423, 424], "inc_bench": 425, "const": 427, "except": [429, 458], "executor": 430, "expiring_dict": 431, "github_info": 432, "hw_info": 433, "json_seri": 435, "parser": 437, "proc": 438, "process": 439, "singleton": 440, "templat": [441, 442, 443, 475], "workdir": 443, "workload": [445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 470], "evalu": [447, 474, 481], "yaml_util": 455, "web": [456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "commun": 456, "configur": [457, 481, 486, 500, 503, 508, 511, 512], "router": 460, "server": 461, "servic": [462, 463, 464, 465, 466, 467, 468, 469, 470], "history_snapshot_pars": 463, "request_data_processor": 468, "response_gener": 469, "version": 471, "ipex": 472, "refer": [472, 506], "bench": 473, "tabl": 473, "from": [473, 487, 492], "binari": [473, 487, 492], "sourc": [473, 487, 492], "home": 473, "screen": 473, "creat": [473, 476], "predefin": 473, "displai": 473, "list": [473, 477, 510], "remov": 473, "develop": [473, 482, 487], "tab": 473, "wizard": 473, "edit": 473, "entri": 473, "inform": [473, 493], "file": [474, 476, 486, 512], "us": [474, 476, 488, 497], "specif": [474, 476, 477, 511], "run": 474, "contribut": 475, "guidelin": 475, "pull": 475, "checklist": 475, "how": [476, 488, 497], "workflow": 478, "knowledg": [479, 513], "intermedi": 479, "layer": 479, "self": 479, "defin": [480, 481], "distribut": 481, "infer": 481, "horovod": 481, "pure": 481, "option2": 481, "horovodrun": 481, "follow": 481, "ar": 481, "deep": 482, "dive": 482, "topic": 482, "frequent": 485, "ask": 485, "question": 485, "build": [485, 494], "issu": [485, 507], "3": [485, 492], "featur": [486, 491, 503, 504, 512], "ai": [487, 492], "kit": [487, 492], "window": [487, 492], "fp32": 488, "auto": [488, 505], "mix": [488, 495, 505], "incompat": [489, 507], "chang": [489, 507], "between": 489, "v1": 489, "section": 490, "infrastructur": 491, "legal": 493, "licens": 493, "citat": 493, "trademark": 493, "singl": [494, 498], "multi": [494, 499], "convers": 497, "orchestr": 499, "One": 499, "shot": 499, "network": 501, "criteria": 501, "full": 502, "45": 502, "2022": 502, "27": 502, "2021": 502, "14": 502, "2018": 502, "2020": 502, "4": 502, "style": 503, "access": 503, "fundament": 504, "approach": 504, "post": 504, "accuraci": 504, "turn": 505, "ON": 505, "dure": 505, "releas": 507, "known": 507, "prepar": 508, "perform": 508, "benefit": 508, "comparison": 508, "differ": 508, "tensorboard": 509, "part": 511, "mlperf": 513, "10": 513, "torch": 513, "12": 513, "mode": 513, "qat": 513, "11": 513, "7": 513}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [475, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [475, "our-pledge"]], "Our Standards": [[0, "our-standards"], [475, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [475, "our-responsibilities"]], "Scope": [[0, "scope"], [475, "scope"]], "Enforcement": [[0, "enforcement"], [475, "enforcement"]], "Attribution": [[0, "attribution"], [475, "attribution"]], "FX": [[1, "fx"]], "Overview": [[1, "overview"]], "Usage": [[1, "usage"], [4, "usage"], [509, "usage"], [509, "id2"], [511, "usage"], [511, "id2"], [511, "id4"], [511, "id6"], [511, "id8"], [511, "id10"], [511, "id12"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [483, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Introduction": [[2, "introduction"], [7, "introduction"], [9, "introduction"], [32, "introduction"], [473, "introduction"], [479, "introduction"], [480, "introduction"], [481, "introduction"], [486, "introduction"], [488, "introduction"], [491, "introduction"], [494, "introduction"], [495, "introduction"], [496, "introduction"], [497, "introduction"], [498, "introduction"], [499, "introduction"], [501, "introduction"], [503, "introduction"], [509, "introduction"], [511, "introduction"], [512, "introduction"]], "NAS API": [[2, "nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "Examples": [[2, "examples"], [4, "examples"], [474, "examples"], [479, "examples"], [480, "examples"], [484, "examples"], [487, "examples"], [488, "examples"], [495, "examples"], [496, "examples"], [499, "examples"], [501, "examples"], [504, "examples"], [509, "examples"], [509, "id3"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [478, "design"], [509, "design"], [509, "id1"], [511, "design"], [511, "id1"], [511, "id3"], [511, "id5"], [511, "id7"], [511, "id9"], [511, "id11"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [498, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Intel\u00ae Neural Compressor": [[5, "intel-neural-compressor"]], "Installation": [[5, "installation"], [487, "installation"], [492, "installation"]], "Prerequisites": [[5, "prerequisites"], [492, "prerequisites"], [492, "id1"]], "Install on Linux": [[5, "install-on-linux"]], "Getting Started": [[5, "getting-started"], [487, "getting-started"]], "Quantization with Python API": [[5, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[5, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[5, "quantization-with-gui"]], "System Requirements": [[5, "system-requirements"], [487, "system-requirements"]], "Validated Hardware Environment": [[5, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[5, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[5, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[5, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[5, "validated-software-environment"]], "Validated Models": [[5, "validated-models"], [487, "validated-models"], [506, "validated-models"], [513, "validated-models"]], "Documentation": [[5, "documentation"]], "Selected Publications/Events": [[5, "selected-publications-events"]], "Additional Content": [[5, "additional-content"]], "Hiring": [[5, "hiring"]], "Security Policy": [[6, "security-policy"]], "Report a Vulnerability": [[6, "report-a-vulnerability"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [504, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "API Documentation": [[9, "api-documentation"], [32, "api-documentation"]], "User-facing APIs": [[9, "user-facing-apis"], [32, "user-facing-apis"], [489, "user-facing-apis"]], "Experimental user-facing APIs": [[9, "experimental-user-facing-apis"], [32, "experimental-user-facing-apis"]], "Quantization-related APIs": [[9, "quantization-related-apis"], [32, "quantization-related-apis"]], "Pruning-related APIs (POC)": [[9, "pruning-related-apis-poc"], [32, "pruning-related-apis-poc"]], "Benchmarking-related APIs": [[9, "benchmarking-related-apis"], [32, "benchmarking-related-apis"]], "Default user-facing APIs": [[9, "default-user-facing-apis"], [32, "default-user-facing-apis"]], "APIs": [[10, "apis"]], "Common": [[11, "common"]], "Benchmark": [[12, "benchmark"], [503, "benchmark"]], "BLEU": [[13, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[13, "module-contents"], [33, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [61, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [169, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [245, "module-contents"], [246, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [259, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [289, "module-contents"], [291, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [403, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"]], "Classes": [[13, "classes"], [26, "classes"], [38, "classes"], [40, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [152, "classes"], [153, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [192, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [224, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [238, "classes"], [239, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [249, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [290, "classes"], [291, "classes"], [296, "classes"], [297, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [348, "classes"], [349, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [375, "classes"], [377, "classes"], [380, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [394, "classes"], [398, "classes"], [400, "classes"], [401, "classes"], [404, "classes"], [406, "classes"], [410, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [427, "classes"], [428, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [435, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [442, "classes"], [443, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [456, "classes"], [457, "classes"], [460, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"]], "Criterion": [[14, "criterion"]], "Data": [[15, "data"]], "Dataloader": [[16, "dataloader"]], "BaseDataLoader": [[16, "basedataloader"]], "dataloaders": [[16, "dataloaders"]], "Datasets": [[17, "datasets"]], "Transforms": [[18, "transforms"]], "Metric": [[19, "metric"]], "Model": [[20, "model"], [496, "model"]], "Optimizer": [[21, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[22, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[23, "distillation"], [479, "distillation"], [503, "distillation"]], "MixedPrecision": [[24, "mixedprecision"]], "ModelConversion": [[25, "modelconversion"]], "Neural architecture search (NAS)": [[26, "neural-architecture-search-nas"]], "Package Contents": [[26, "package-contents"], [39, "package-contents"], [57, "package-contents"], [162, "package-contents"], [175, "package-contents"], [178, "package-contents"], [185, "package-contents"], [196, "package-contents"], [208, "package-contents"], [212, "package-contents"], [213, "package-contents"], [215, "package-contents"], [220, "package-contents"], [227, "package-contents"], [238, "package-contents"], [243, "package-contents"], [244, "package-contents"], [256, "package-contents"], [257, "package-contents"], [260, "package-contents"], [268, "package-contents"], [278, "package-contents"], [290, "package-contents"], [300, "package-contents"], [340, "package-contents"], [345, "package-contents"], [404, "package-contents"]], "Pruning": [[27, "pruning"], [501, "pruning"], [503, "pruning"]], "Quantization": [[28, "quantization"], [503, "quantization"], [504, "quantization"]], "Scheduler": [[29, "scheduler"]], "Pythonic": [[30, "pythonic"]], "Strategy": [[31, "strategy"]], "6ece06672ed3_v1_14": [[33, "module-6ece06672ed3_v1_14"]], "Functions": [[33, "functions"], [37, "functions"], [38, "functions"], [42, "functions"], [61, "functions"], [67, "functions"], [68, "functions"], [90, "functions"], [91, "functions"], [93, "functions"], [154, "functions"], [159, "functions"], [160, "functions"], [162, "functions"], [166, "functions"], [178, "functions"], [182, "functions"], [183, "functions"], [185, "functions"], [188, "functions"], [190, "functions"], [194, "functions"], [202, "functions"], [204, "functions"], [208, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [221, "functions"], [222, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [228, "functions"], [236, "functions"], [240, "functions"], [245, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [253, "functions"], [257, "functions"], [261, "functions"], [265, "functions"], [271, "functions"], [273, "functions"], [276, "functions"], [285, "functions"], [286, "functions"], [289, "functions"], [295, "functions"], [296, "functions"], [298, "functions"], [299, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [312, "functions"], [316, "functions"], [318, "functions"], [319, "functions"], [321, "functions"], [323, "functions"], [326, "functions"], [327, "functions"], [331, "functions"], [334, "functions"], [335, "functions"], [336, "functions"], [347, "functions"], [357, "functions"], [374, "functions"], [378, "functions"], [380, "functions"], [391, "functions"], [392, "functions"], [393, "functions"], [396, "functions"], [399, "functions"], [403, "functions"], [407, "functions"], [409, "functions"], [412, "functions"], [414, "functions"], [415, "functions"], [418, "functions"], [424, "functions"], [425, "functions"], [433, "functions"], [436, "functions"], [444, "functions"], [452, "functions"], [455, "functions"], [456, "functions"], [460, "functions"], [461, "functions"]], "6f0d0f71d92e_v1_13": [[34, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[35, "module-9e89549a08c8_v1_11"]], "block_mask": [[36, "module-block_mask"]], "env": [[37, "module-env"]], "neural_compressor.adaptor.adaptor": [[38, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[39, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.mxnet": [[40, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[41, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[42, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[43, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[44, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[45, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[46, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[47, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[48, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[49, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[50, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[51, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[52, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[53, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[57, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[59, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[60, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[61, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[62, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[64, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[65, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[66, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[67, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[68, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[69, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[70, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[71, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[129, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[130, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[149, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[150, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[151, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[152, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[153, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[154, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[157, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[158, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[159, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[163, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[164, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[165, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[166, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[167, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[168, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[169, "module-neural_compressor.config"]], "neural_compressor.contrib": [[170, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[171, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[172, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[173, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.dataloader": [[174, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders": [[175, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.datasets.imagenet_dataset": [[176, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[177, "module-neural_compressor.data.datasets"]], "neural_compressor.data": [[178, "module-neural_compressor.data"]], "Attributes": [[178, "attributes"], [204, "attributes"], [213, "attributes"], [220, "attributes"], [243, "attributes"], [260, "attributes"]], "neural_compressor.data.transforms.coco_transform": [[179, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[181, "module-neural_compressor.data.transforms"]], "neural_compressor.experimental.benchmark": [[182, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[183, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[184, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[185, "module-neural_compressor.experimental.common"]], "Submodules": [[185, "submodules"], [196, "submodules"], [208, "submodules"], [212, "submodules"], [215, "submodules"], [220, "submodules"], [227, "submodules"], [237, "submodules"], [238, "submodules"], [244, "submodules"], [247, "submodules"], [290, "submodules"], [300, "submodules"], [304, "submodules"], [311, "submodules"], [322, "submodules"], [340, "submodules"], [345, "submodules"], [350, "submodules"], [351, "submodules"], [355, "submodules"], [358, "submodules"], [364, "submodules"], [366, "submodules"], [369, "submodules"], [370, "submodules"], [376, "submodules"], [379, "submodules"], [381, "submodules"], [386, "submodules"], [395, "submodules"], [397, "submodules"], [402, "submodules"], [404, "submodules"], [405, "submodules"], [408, "submodules"], [411, "submodules"], [417, "submodules"], [422, "submodules"], [426, "submodules"], [434, "submodules"], [441, "submodules"], [449, "submodules"], [459, "submodules"], [464, "submodules"]], "neural_compressor.experimental.common.metric": [[186, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[187, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[188, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[189, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[190, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[191, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[192, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[193, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[194, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[195, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[196, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[200, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[202, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[203, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[204, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[205, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[208, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[210, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[211, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[212, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[213, "module-neural_compressor.experimental.data"]], "Subpackages": [[213, "subpackages"], [220, "subpackages"], [238, "subpackages"], [243, "subpackages"], [256, "subpackages"], [345, "subpackages"], [350, "subpackages"], [364, "subpackages"], [369, "subpackages"], [376, "subpackages"], [404, "subpackages"], [417, "subpackages"], [426, "subpackages"], [434, "subpackages"], [459, "subpackages"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[214, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[215, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[216, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[217, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[218, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.graph_optimization": [[219, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[220, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[221, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[222, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[223, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[224, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[225, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[226, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[227, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[228, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[229, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[230, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[231, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[232, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[233, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[234, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[235, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[236, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[237, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas": [[238, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[239, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[240, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[241, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[242, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[243, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[244, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[245, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[246, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pytorch_pruner": [[247, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[248, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[249, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[250, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[251, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[252, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[253, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[254, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[255, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[256, "module-neural_compressor"]], "neural_compressor.metric": [[257, "module-neural_compressor.metric"]], "neural_compressor.mix_precision": [[258, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[259, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[260, "module-neural_compressor.model"]], "neural_compressor.model.model": [[261, "module-neural_compressor.model.model"]], "neural_compressor.model.nets_factory": [[262, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[263, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.torch_model": [[264, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[265, "module-neural_compressor.objective"]], "neural_compressor.pruners.gradient_sensitivity": [[266, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[267, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[268, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[269, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[270, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[271, "module-neural_compressor.pruners.pruner"]], "neural_compressor.pruning": [[272, "module-neural_compressor.pruning"]], "neural_compressor.quantization": [[273, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[274, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[275, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[276, "module-neural_compressor.strategy.bayesian"]], "Get the target value of params": [[276, "get-the-target-value-of-params"]], "neural_compressor.strategy.exhaustive": [[277, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy": [[278, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[279, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.random": [[280, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.st_utils": [[281, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[282, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[283, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[284, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "neural_compressor.strategy.strategy": [[285, "module-neural_compressor.strategy.strategy"]], "neural_compressor.training": [[286, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[287, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[288, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[289, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[290, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[291, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[292, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[293, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[294, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[295, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[296, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[297, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[298, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[299, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[300, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[301, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[302, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[303, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[304, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[305, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[306, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[307, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[308, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[309, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[310, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[311, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[312, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.db_manager.db_manager": [[313, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[314, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[316, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[317, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[318, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[319, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[320, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[321, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[322, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[323, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[324, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[325, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[326, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[327, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[328, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[329, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[330, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[331, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[332, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[334, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[335, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[336, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[337, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[338, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[339, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[340, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[341, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[342, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[343, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[344, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[345, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[346, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[347, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[348, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[349, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[350, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[351, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[353, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[354, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[355, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[357, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[358, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[359, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[360, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[361, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[362, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[363, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[364, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[365, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[366, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[367, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[368, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[369, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[370, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[371, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[372, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[373, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[374, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[375, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[376, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[377, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[378, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[379, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[380, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[381, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[382, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[383, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[384, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[385, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[386, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[387, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[388, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[389, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[390, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[391, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[392, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[393, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[394, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[395, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[396, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[397, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[398, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[399, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[400, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[401, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[402, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[403, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[404, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[405, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[406, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[407, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[408, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[410, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.tune": [[411, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[412, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[413, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[414, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[415, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[416, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[417, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[418, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[419, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[420, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[421, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[425, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[426, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[427, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[428, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[429, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[430, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[431, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[432, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[433, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[434, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[435, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[436, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[437, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[438, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[439, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[440, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[441, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[442, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[443, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[444, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[445, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[446, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[447, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[448, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[449, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[450, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[451, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[452, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[453, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[454, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[455, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[456, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[457, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[458, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[459, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[460, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[461, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[462, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[463, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[464, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[465, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[466, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[467, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[468, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[469, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[470, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[471, "module-neural_compressor.version"]], "Quantization Support Matrix": [[472, "quantization-support-matrix"]], "TensorFlow": [[472, "tensorflow"], [477, "tensorflow"], [494, "tensorflow"], [510, "tensorflow"]], "PyTorch": [[472, "pytorch"], [477, "pytorch"], [494, "pytorch"], [505, "pytorch"]], "PyTorch IPEX": [[472, "pytorch-ipex"]], "MXNet": [[472, "mxnet"], [477, "mxnet"], [494, "mxnet"], [510, "mxnet"]], "ONNX Runtime": [[472, "onnx-runtime"]], "Reference": [[472, "reference"]], "Intel\u00ae Neural Compressor Bench": [[473, "intel-neural-compressor-bench"]], "Table of Contents": [[473, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[473, "install-intel-neural-compressor-with-bench"]], "Option 1 Install from binary": [[473, "option-1-install-from-binary"], [492, "option-1-install-from-binary"], [492, "id2"]], "Option 2 Install from source": [[473, "option-2-install-from-source"], [492, "option-2-install-from-source"], [492, "id3"]], "Start the Intel\u00ae Neural Compressor Bench": [[473, "start-the-intel-neural-compressor-bench"]], "Home screen": [[473, "home-screen"]], "Create new project": [[473, "create-new-project"]], "Predefined model": [[473, "predefined-model"]], "Custom model": [[473, "custom-model"]], "Display model graph": [[473, "display-model-graph"]], "Project list": [[473, "project-list"]], "Remove project": [[473, "remove-project"]], "Develop the project": [[473, "develop-the-project"]], "Optimization tab": [[473, "optimization-tab"]], "Optimization table": [[473, "optimization-table"]], "Optimization wizard": [[473, "optimization-wizard"]], "Editing optimization entries": [[473, "editing-optimization-entries"]], "Optimization details": [[473, "optimization-details"]], "Benchmark tab": [[473, "benchmark-tab"]], "Benchmark table": [[473, "benchmark-table"]], "Benchmark wizard": [[473, "benchmark-wizard"]], "Editing benchmark entries": [[473, "editing-benchmark-entries"]], "Benchmark details": [[473, "benchmark-details"]], "Profiling tab": [[473, "profiling-tab"]], "Profiling table": [[473, "profiling-table"]], "Profiling wizard": [[473, "profiling-wizard"]], "Editing profiling entries": [[473, "editing-profiling-entries"]], "Profiling details": [[473, "profiling-details"]], "Diagnosis tab": [[473, "diagnosis-tab"]], "Dataset tab": [[473, "dataset-tab"]], "Dataset list": [[473, "dataset-list"]], "Dataset wizard": [[473, "dataset-wizard"]], "Dataset details": [[473, "dataset-details"]], "Custom dataset": [[473, "custom-dataset"]], "Project information": [[473, "project-information"]], "System information": [[473, "system-information"]], "Security": [[473, "security"]], "Benchmarking": [[474, "benchmarking"]], "Config evaluation filed in a yaml file": [[474, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[474, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[475, "contribution-guidelines"]], "Pull Request Checklist": [[475, "pull-request-checklist"]], "Pull Request Template": [[475, "pull-request-template"]], "Support": [[475, "support"]], "DataLoader": [[476, "dataloader"]], "How to use it": [[476, "how-to-use-it"], [488, "how-to-use-it"], [497, "how-to-use-it"]], "Config dataloader in a yaml file": [[476, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[476, "create-a-user-specific-dataloader"]], "Dataset": [[477, "dataset"]], "Built-in dataset support list": [[477, "built-in-dataset-support-list"]], "ONNXRT": [[477, "onnxrt"], [494, "onnxrt"], [510, "onnxrt"]], "User-specific dataset": [[477, "user-specific-dataset"]], "Architecture": [[478, "architecture"], [491, "architecture"]], "Workflow": [[478, "workflow"]], "Knowledge Distillation": [[479, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[479, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[479, "self-distillation"]], "Distillation Support Matrix": [[479, "distillation-support-matrix"]], "Get Started with Distillation API": [[479, "get-started-with-distillation-api"]], "Distillation for Quantization": [[480, "distillation-for-quantization"]], "User-defined yaml": [[480, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[481, "distributed-training-and-inference-evaluation"]], "horovod installation": [[481, "horovod-installation"]], "Distributed training and inference (evaluation)": [[481, "id1"]], "Option 1: pure yaml configuration": [[481, "option-1-pure-yaml-configuration"]], "Option2: user defined training function": [[481, "option2-user-defined-training-function"]], "horovodrun": [[481, "horovodrun"]], "security": [[481, "security"]], "Following examples are supported": [[481, "following-examples-are-supported"]], "Developer Documentation": [[482, "developer-documentation"], [487, "developer-documentation"]], "Get Started": [[482, "get-started"], [504, "get-started"]], "Deep Dive": [[482, "deep-dive"]], "Advanced Topics": [[482, "advanced-topics"]], "Frequently Asked Questions": [[485, "frequently-asked-questions"]], "Common Build Issues": [[485, "common-build-issues"]], "Issue 1:": [[485, "issue-1"]], "Issue 2:": [[485, "issue-2"]], "Issue 3:": [[485, "issue-3"]], "Framework YAML Configuration Files": [[486, "framework-yaml-configuration-files"]], "Supported Feature Matrix": [[486, "supported-feature-matrix"], [491, "supported-feature-matrix"], [503, "supported-feature-matrix"], [504, "supported-feature-matrix"], [512, "supported-feature-matrix"]], "Get started with Framework YAML Files": [[486, "get-started-with-framework-yaml-files"]], "Linux Installation": [[487, "linux-installation"], [492, "linux-installation"]], "Install from binary": [[487, "install-from-binary"], [487, "id1"]], "Install from source": [[487, "install-from-source"], [487, "id2"]], "Install from AI Kit": [[487, "install-from-ai-kit"]], "Windows Installation": [[487, "windows-installation"], [492, "windows-installation"]], "Validated Hardware/Software Environment": [[487, "validated-hardware-software-environment"]], "Graph Optimization": [[488, "graph-optimization"]], "FP32 Optimization": [[488, "fp32-optimization"]], "Auto-mixed Precision Optimization": [[488, "auto-mixed-precision-optimization"]], "Default auto-mixed precision": [[488, "default-auto-mixed-precision"]], "Auto-mixed precision with auto-tuning": [[488, "auto-mixed-precision-with-auto-tuning"]], "FP32 optimization": [[488, "id1"]], "Incompatible changes between v1.2 and v1.1": [[489, "incompatible-changes-between-v1-2-and-v1-1"]], "Built-in transform/dataset/metric APIs": [[489, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[490, "intel-neural-compressor-documentation"]], "Sections": [[490, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[491, "infrastructure-of-intel-neural-compressor"]], "Option 3 Install from AI Kit": [[492, "option-3-install-from-ai-kit"]], "Legal Information": [[493, "legal-information"]], "License": [[493, "license"]], "Citation": [[493, "citation"]], "Trademarks": [[493, "trademarks"]], "Metrics": [[494, "metrics"]], "Supported Built-in Metric Matrix": [[494, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[494, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[494, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[494, "build-custom-metric-with-python-api"]], "Mixed Precision": [[495, "mixed-precision"]], "Mixed Precision Support Matrix": [[495, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[495, "get-start-with-mixed-precision-api"]], "Supported Framework Model Matrix": [[496, "supported-framework-model-matrix"]], "Model Conversion": [[497, "model-conversion"]], "Objective": [[498, "objective"]], "Single Objective": [[498, "single-objective"]], "Multiple Objectives": [[498, "multiple-objectives"]], "Objective Support Matrix": [[498, "objective-support-matrix"]], "Get Start with Objective API": [[498, "get-start-with-objective-api"]], "Config Single Objective": [[498, "config-single-objective"]], "Config Multiple Objectives": [[498, "config-multiple-objectives"]], "Config Custom Objective": [[498, "config-custom-objective"]], "Optimization Orchestration": [[499, "optimization-orchestration"]], "One-shot": [[499, "one-shot"]], "Multi-shot": [[499, "multi-shot"]], "Orchestration Support Matrix": [[499, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[499, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[500, "system-configuration"]], "Neural Network Pruning": [[501, "neural-network-pruning"]], "Pruning Patterns": [[501, "pruning-patterns"]], "Pruning Criteria": [[501, "pruning-criteria"]], "Pruning Schedule": [[501, "pruning-schedule"]], "Pruning Support Matrix": [[501, "pruning-support-matrix"]], "Get Started with Pruning API": [[501, "get-started-with-pruning-api"]], "Full Publications/Events (45)": [[502, "full-publications-events-45"]], "2022 (27)": [[502, "id1"]], "2021 (14)": [[502, "id2"]], "2018 - 2020 (4)": [[502, "id3"]], "Pythonic Style Access for Configurations": [[503, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[503, "pythonic-api-for-user-configurations"], [503, "id1"]], "Pythonic API for Framework Configurations": [[503, "pythonic-api-for-framework-configurations"], [503, "id2"]], "Get Started with Pythonic API for Configurations": [[503, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[503, "nas"]], "Quantization Introduction": [[504, "quantization-introduction"]], "Quantization Fundamentals": [[504, "quantization-fundamentals"]], "Quantization Approaches": [[504, "quantization-approaches"]], "Post Training Dynamic Quantization": [[504, "post-training-dynamic-quantization"]], "Post Training Static Quantization": [[504, "post-training-static-quantization"]], "Quantization Aware Training": [[504, "quantization-aware-training"]], "Accuracy Aware Tuning": [[504, "accuracy-aware-tuning"]], "Turn ON Auto Mixed Precision during Quantization": [[505, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[505, "tensorflow"]], "Reference Examples": [[506, "reference-examples"]], "Release": [[507, "release"]], "Known Issues": [[507, "known-issues"]], "Incompatible Changes": [[507, "incompatible-changes"]], "SigOpt Strategy": [[508, "sigopt-strategy"]], "Preparation": [[508, "preparation"]], "SigOpt introduction": [[508, "sigopt-introduction"]], "Neural Compressor configuration": [[508, "neural-compressor-configuration"]], "Performance": [[508, "performance"]], "Benefit for Sigopt strategy": [[508, "benefit-for-sigopt-strategy"]], "Performance comparison of different strategies": [[508, "performance-comparison-of-different-strategies"]], "TensorBoard": [[509, "tensorboard"]], "PyTorch TensorBoard": [[509, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[509, "tensorflow-tensorboard"]], "Transform": [[510, "transform"]], "Transform support list": [[510, "transform-support-list"]], "Pytorch": [[510, "pytorch"]], "Tuning Strategies": [[511, "tuning-strategies"]], "Strategy Design": [[511, "strategy-design"]], "Configurations": [[511, "configurations"]], "Model-specific configurations": [[511, "model-specific-configurations"]], "Strategy tuning part-related configurations": [[511, "strategy-tuning-part-related-configurations"]], "Basic": [[511, "basic"]], "Bayesian": [[511, "bayesian"]], "MSE": [[511, "mse"]], "TPE": [[511, "tpe"]], "Exhaustive": [[511, "exhaustive"]], "Random": [[511, "random"]], "SigOpt": [[511, "sigopt"]], "Customize a New Tuning Strategy": [[511, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[512, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[512, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[513, "validated-mlperf-models"]], "Validated Quantization Examples": [[513, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[513, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[513, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[513, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[513, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[513, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[513, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[513, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[513, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[513, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]], "Introduction to Intel\u00ae Neural Compressor": [[514, "introduction-to-intel-neural-compressor"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[13, "neural_compressor.experimental.metric.bleu.BLEU"], [221, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [221, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[13, "module-neural_compressor.experimental.metric.bleu"], [33, "module-6ece06672ed3_v1_14"], [34, "module-6f0d0f71d92e_v1_13"], [35, "module-9e89549a08c8_v1_11"], [36, "module-block_mask"], [37, "module-env"], [38, "module-neural_compressor.adaptor.adaptor"], [39, "module-neural_compressor.adaptor"], [40, "module-neural_compressor.adaptor.mxnet"], [41, "module-neural_compressor.adaptor.mxnet_utils"], [42, "module-neural_compressor.adaptor.mxnet_utils.util"], [43, "module-neural_compressor.adaptor.onnxrt"], [44, "module-neural_compressor.adaptor.ox_utils.calibration"], [45, "module-neural_compressor.adaptor.ox_utils"], [46, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [47, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [48, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [49, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [50, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [51, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [52, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [53, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [54, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [55, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [56, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [57, "module-neural_compressor.adaptor.ox_utils.operators"], [58, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [59, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [60, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [61, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [62, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [63, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [64, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [65, "module-neural_compressor.adaptor.ox_utils.operators.split"], [66, "module-neural_compressor.adaptor.ox_utils.quantizer"], [67, "module-neural_compressor.adaptor.ox_utils.util"], [68, "module-neural_compressor.adaptor.pytorch"], [69, "module-neural_compressor.adaptor.query"], [70, "module-neural_compressor.adaptor.tensorflow"], [71, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [72, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [129, "module-neural_compressor.adaptor.tf_utils.graph_util"], [130, "module-neural_compressor.adaptor.tf_utils"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [149, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [150, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [151, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [152, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [153, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [154, "module-neural_compressor.adaptor.tf_utils.util"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils"], [157, "module-neural_compressor.adaptor.torch_utils.onnx"], [158, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [159, "module-neural_compressor.adaptor.torch_utils.util"], [160, "module-neural_compressor.algorithm.algorithm"], [161, "module-neural_compressor.algorithm.fast_bias_correction"], [162, "module-neural_compressor.algorithm"], [163, "module-neural_compressor.algorithm.weight_correction"], [164, "module-neural_compressor.benchmark"], [165, "module-neural_compressor.conf.config"], [166, "module-neural_compressor.conf.dotdict"], [167, "module-neural_compressor.conf"], [168, "module-neural_compressor.conf.pythonic_config"], [169, "module-neural_compressor.config"], [170, "module-neural_compressor.contrib"], [171, "module-neural_compressor.contrib.strategy"], [172, "module-neural_compressor.contrib.strategy.sigopt"], [173, "module-neural_compressor.contrib.strategy.tpe"], [174, "module-neural_compressor.data.dataloaders.dataloader"], [175, "module-neural_compressor.data.dataloaders"], [176, "module-neural_compressor.data.datasets.imagenet_dataset"], [177, "module-neural_compressor.data.datasets"], [178, "module-neural_compressor.data"], [179, "module-neural_compressor.data.transforms.coco_transform"], [180, "module-neural_compressor.data.transforms.imagenet_transform"], [181, "module-neural_compressor.data.transforms"], [182, "module-neural_compressor.experimental.benchmark"], [183, "module-neural_compressor.experimental.common.criterion"], [184, "module-neural_compressor.experimental.common.dataloader"], [185, "module-neural_compressor.experimental.common"], [186, "module-neural_compressor.experimental.common.metric"], [187, "module-neural_compressor.experimental.common.model"], [188, "module-neural_compressor.experimental.common.optimizer"], [189, "module-neural_compressor.experimental.common.postprocess"], [190, "module-neural_compressor.experimental.common.torch_utils"], [191, "module-neural_compressor.experimental.component"], [192, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [193, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [194, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [195, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [196, "module-neural_compressor.experimental.data.dataloaders"], [197, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [198, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [199, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [200, "module-neural_compressor.experimental.data.dataloaders.sampler"], [201, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [202, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [203, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [204, "module-neural_compressor.experimental.data.datasets.dataset"], [205, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [206, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [207, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [208, "module-neural_compressor.experimental.data.datasets"], [209, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [210, "module-neural_compressor.experimental.data.filters.coco_filter"], [211, "module-neural_compressor.experimental.data.filters.filter"], [212, "module-neural_compressor.experimental.data.filters"], [213, "module-neural_compressor.experimental.data"], [214, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [215, "module-neural_compressor.experimental.data.transforms"], [216, "module-neural_compressor.experimental.data.transforms.tokenization"], [217, "module-neural_compressor.experimental.data.transforms.transform"], [218, "module-neural_compressor.experimental.distillation"], [219, "module-neural_compressor.experimental.graph_optimization"], [220, "module-neural_compressor.experimental"], [221, "module-neural_compressor.experimental.metric.bleu"], [222, "module-neural_compressor.experimental.metric.bleu_util"], [223, "module-neural_compressor.experimental.metric.coco_label_map"], [224, "module-neural_compressor.experimental.metric.coco_tools"], [225, "module-neural_compressor.experimental.metric.evaluate_squad"], [226, "module-neural_compressor.experimental.metric.f1"], [227, "module-neural_compressor.experimental.metric"], [228, "module-neural_compressor.experimental.metric.metric"], [229, "module-neural_compressor.experimental.mixed_precision"], [230, "module-neural_compressor.experimental.model_conversion"], [231, "module-neural_compressor.experimental.nas.basic_nas"], [232, "module-neural_compressor.experimental.nas.dynas"], [233, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [234, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [235, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [236, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [237, "module-neural_compressor.experimental.nas.dynast"], [238, "module-neural_compressor.experimental.nas"], [239, "module-neural_compressor.experimental.nas.nas"], [240, "module-neural_compressor.experimental.nas.nas_utils"], [241, "module-neural_compressor.experimental.nas.search_algorithms"], [242, "module-neural_compressor.experimental.pruning"], [243, "module-neural_compressor.experimental.pruning_recipes"], [244, "module-neural_compressor.experimental.pruning_recipes.patterns"], [245, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [246, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [247, "module-neural_compressor.experimental.pytorch_pruner"], [248, "module-neural_compressor.experimental.pytorch_pruner.logger"], [249, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [250, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [251, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [252, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [253, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [254, "module-neural_compressor.experimental.quantization"], [255, "module-neural_compressor.experimental.scheduler"], [256, "module-neural_compressor"], [257, "module-neural_compressor.metric"], [258, "module-neural_compressor.mix_precision"], [259, "module-neural_compressor.model.base_model"], [260, "module-neural_compressor.model"], [261, "module-neural_compressor.model.model"], [262, "module-neural_compressor.model.nets_factory"], [263, "module-neural_compressor.model.onnx_model"], [264, "module-neural_compressor.model.torch_model"], [265, "module-neural_compressor.objective"], [266, "module-neural_compressor.pruners.gradient_sensitivity"], [267, "module-neural_compressor.pruners.group_lasso"], [268, "module-neural_compressor.pruners"], [269, "module-neural_compressor.pruners.magnitude"], [270, "module-neural_compressor.pruners.pattern_lock"], [271, "module-neural_compressor.pruners.pruner"], [272, "module-neural_compressor.pruning"], [273, "module-neural_compressor.quantization"], [274, "module-neural_compressor.strategy.auto_mixed_precision"], [275, "module-neural_compressor.strategy.basic"], [276, "module-neural_compressor.strategy.bayesian"], [277, "module-neural_compressor.strategy.exhaustive"], [278, "module-neural_compressor.strategy"], [279, "module-neural_compressor.strategy.mse"], [280, "module-neural_compressor.strategy.random"], [281, "module-neural_compressor.strategy.st_utils"], [282, "module-neural_compressor.strategy.st_utils.tuning_sampler"], [283, "module-neural_compressor.strategy.st_utils.tuning_space"], [284, "module-neural_compressor.strategy.st_utils.tuning_structs"], [285, "module-neural_compressor.strategy.strategy"], [286, "module-neural_compressor.training"], [287, "module-neural_compressor.utils.collect_layer_histogram"], [288, "module-neural_compressor.utils.constant"], [289, "module-neural_compressor.utils.create_obj_from_config"], [290, "module-neural_compressor.utils"], [291, "module-neural_compressor.utils.kl_divergence"], [292, "module-neural_compressor.utils.load_huggingface"], [293, "module-neural_compressor.utils.logger"], [294, "module-neural_compressor.utils.options"], [295, "module-neural_compressor.utils.pytorch"], [296, "module-neural_compressor.utils.utility"], [297, "module-neural_compressor.ux.components.benchmark.benchmark"], [298, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [299, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [300, "module-neural_compressor.ux.components.benchmark"], [301, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [302, "module-neural_compressor.ux.components.config_generator.config_generator"], [303, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [304, "module-neural_compressor.ux.components.config_generator"], [305, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [306, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [307, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [308, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [309, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [310, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [311, "module-neural_compressor.ux.components.configuration_wizard"], [312, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [313, "module-neural_compressor.ux.components.db_manager.db_manager"], [314, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [316, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [317, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [318, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [319, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [320, "module-neural_compressor.ux.components.db_manager.db_models.example"], [321, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [322, "module-neural_compressor.ux.components.db_manager.db_models"], [323, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [324, "module-neural_compressor.ux.components.db_manager.db_models.model"], [325, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [326, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [327, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [328, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [329, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [330, "module-neural_compressor.ux.components.db_manager.db_models.project"], [331, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [332, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [334, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [335, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [336, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [337, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [338, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [339, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [340, "module-neural_compressor.ux.components.db_manager.db_operations"], [341, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [342, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [343, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [344, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [345, "module-neural_compressor.ux.components.db_manager"], [346, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [347, "module-neural_compressor.ux.components.db_manager.utils"], [348, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [349, "module-neural_compressor.ux.components.diagnosis.factory"], [350, "module-neural_compressor.ux.components.diagnosis"], [351, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [353, "module-neural_compressor.ux.components.diagnosis.op_details"], [354, "module-neural_compressor.ux.components.diagnosis.op_entry"], [355, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [357, "module-neural_compressor.ux.components.file_browser.file_browser"], [358, "module-neural_compressor.ux.components.file_browser"], [359, "module-neural_compressor.ux.components.graph.attribute"], [360, "module-neural_compressor.ux.components.graph.collapser"], [361, "module-neural_compressor.ux.components.graph.edge"], [362, "module-neural_compressor.ux.components.graph.graph"], [363, "module-neural_compressor.ux.components.graph.graph_reader"], [364, "module-neural_compressor.ux.components.graph"], [365, "module-neural_compressor.ux.components.graph.node"], [366, "module-neural_compressor.ux.components.graph.reader"], [367, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [368, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [369, "module-neural_compressor.ux.components"], [370, "module-neural_compressor.ux.components.jobs_management"], [371, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [372, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [373, "module-neural_compressor.ux.components.jobs_management.request"], [374, "module-neural_compressor.ux.components.manage_workspace"], [375, "module-neural_compressor.ux.components.model.domain"], [376, "module-neural_compressor.ux.components.model"], [377, "module-neural_compressor.ux.components.model.model"], [378, "module-neural_compressor.ux.components.model.model_type_getter"], [379, "module-neural_compressor.ux.components.model.onnxrt"], [380, "module-neural_compressor.ux.components.model.onnxrt.model"], [381, "module-neural_compressor.ux.components.model.pytorch"], [382, "module-neural_compressor.ux.components.model.pytorch.model"], [383, "module-neural_compressor.ux.components.model.repository"], [384, "module-neural_compressor.ux.components.model.shape"], [385, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [386, "module-neural_compressor.ux.components.model.tensorflow"], [387, "module-neural_compressor.ux.components.model.tensorflow.keras"], [388, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [389, "module-neural_compressor.ux.components.model.tensorflow.model"], [390, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [391, "module-neural_compressor.ux.components.model.tensorflow.utils"], [392, "module-neural_compressor.ux.components.model_zoo.download_config"], [393, "module-neural_compressor.ux.components.model_zoo.download_model"], [394, "module-neural_compressor.ux.components.model_zoo.downloader"], [395, "module-neural_compressor.ux.components.model_zoo"], [396, "module-neural_compressor.ux.components.model_zoo.list_models"], [397, "module-neural_compressor.ux.components.names_mapper"], [398, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [399, "module-neural_compressor.ux.components.optimization.execute_optimization"], [400, "module-neural_compressor.ux.components.optimization.factory"], [401, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [402, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [403, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [404, "module-neural_compressor.ux.components.optimization"], [405, "module-neural_compressor.ux.components.optimization.mixed_precision"], [406, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [407, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [408, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [410, "module-neural_compressor.ux.components.optimization.optimization"], [411, "module-neural_compressor.ux.components.optimization.tune"], [412, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [413, "module-neural_compressor.ux.components.optimization.tune.tuning"], [414, "module-neural_compressor.ux.components.optimization.tuning_history"], [415, "module-neural_compressor.ux.components.profiling.execute_profiling"], [416, "module-neural_compressor.ux.components.profiling.factory"], [417, "module-neural_compressor.ux.components.profiling"], [418, "module-neural_compressor.ux.components.profiling.profile_model"], [419, "module-neural_compressor.ux.components.profiling.profiler"], [420, "module-neural_compressor.ux.components.profiling.profiling"], [421, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [425, "module-neural_compressor.ux.inc_bench"], [426, "module-neural_compressor.ux"], [427, "module-neural_compressor.ux.utils.consts"], [428, "module-neural_compressor.ux.utils.environment"], [429, "module-neural_compressor.ux.utils.exceptions"], [430, "module-neural_compressor.ux.utils.executor"], [431, "module-neural_compressor.ux.utils.expiring_dict"], [432, "module-neural_compressor.ux.utils.github_info"], [433, "module-neural_compressor.ux.utils.hw_info"], [434, "module-neural_compressor.ux.utils"], [435, "module-neural_compressor.ux.utils.json_serializer"], [436, "module-neural_compressor.ux.utils.logger"], [437, "module-neural_compressor.ux.utils.parser"], [438, "module-neural_compressor.ux.utils.proc"], [439, "module-neural_compressor.ux.utils.processes"], [440, "module-neural_compressor.ux.utils.singleton"], [441, "module-neural_compressor.ux.utils.templates"], [442, "module-neural_compressor.ux.utils.templates.metric"], [443, "module-neural_compressor.ux.utils.templates.workdir"], [444, "module-neural_compressor.ux.utils.utils"], [445, "module-neural_compressor.ux.utils.workload.config"], [446, "module-neural_compressor.ux.utils.workload.dataloader"], [447, "module-neural_compressor.ux.utils.workload.evaluation"], [448, "module-neural_compressor.ux.utils.workload.graph_optimization"], [449, "module-neural_compressor.ux.utils.workload"], [450, "module-neural_compressor.ux.utils.workload.mixed_precision"], [451, "module-neural_compressor.ux.utils.workload.model"], [452, "module-neural_compressor.ux.utils.workload.pruning"], [453, "module-neural_compressor.ux.utils.workload.quantization"], [454, "module-neural_compressor.ux.utils.workload.tuning"], [455, "module-neural_compressor.ux.utils.yaml_utils"], [456, "module-neural_compressor.ux.web.communication"], [457, "module-neural_compressor.ux.web.configuration"], [458, "module-neural_compressor.ux.web.exceptions"], [459, "module-neural_compressor.ux.web"], [460, "module-neural_compressor.ux.web.router"], [461, "module-neural_compressor.ux.web.server"], [462, "module-neural_compressor.ux.web.service.benchmark"], [463, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [464, "module-neural_compressor.ux.web.service"], [465, "module-neural_compressor.ux.web.service.model"], [466, "module-neural_compressor.ux.web.service.optimization"], [467, "module-neural_compressor.ux.web.service.profiling"], [468, "module-neural_compressor.ux.web.service.request_data_processor"], [469, "module-neural_compressor.ux.web.service.response_generator"], [470, "module-neural_compressor.ux.web.service.workload"], [471, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[13, "module-neural_compressor.experimental.metric.bleu"], [221, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [221, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [221, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.result"], [221, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.update"], [221, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "6ece06672ed3_v1_14": [[33, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[33, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[33, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[34, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[35, "module-9e89549a08c8_v1_11"]], "block_mask": [[36, "module-block_mask"]], "env": [[37, "module-env"]], "run_migrations_offline() (in module env)": [[37, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[37, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[38, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[38, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[38, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[39, "module-neural_compressor.adaptor"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[40, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[40, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[40, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[41, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[42, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[42, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtadaptor (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_qoperatoradaptor (class in neural_compressor.adaptor.onnxrt)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRT_QOperatorAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[43, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxrtadaptor method)": [[43, "neural_compressor.adaptor.onnxrt.ONNXRTAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[44, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[44, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[45, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[46, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[47, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[48, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[49, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[50, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[51, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[52, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[53, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[54, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[55, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[57, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[59, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[60, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[61, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[61, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[62, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[63, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[64, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[65, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[66, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[67, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[67, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[68, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[68, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[68, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[68, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[69, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[69, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[70, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[70, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[70, "module-neural_compressor.adaptor.tensorflow"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[70, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[71, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[72, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[129, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[129, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[130, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[149, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[149, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[149, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[150, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[151, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[152, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[152, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[152, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[153, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[153, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[153, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[154, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[154, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[157, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[158, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[159, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[159, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "neural_compressor.adaptor.torch_utils.util": [[159, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[161, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[162, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[162, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[162, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[163, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[163, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.Benchmark"]], "neural_compressor.benchmark": [[164, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.NASConfig"]], "pruning_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[165, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[166, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[167, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[168, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.DistillationConfig"]], "neural_compressor.config": [[169, "module-neural_compressor.config"]], "neural_compressor.contrib": [[170, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[171, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[172, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[173, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[174, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[174, "module-neural_compressor.data.dataloaders.dataloader"]], "dataloader (class in neural_compressor.data.dataloaders)": [[175, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[175, "module-neural_compressor.data.dataloaders"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[176, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[176, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[176, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[177, "module-neural_compressor.data.datasets"]], "basetransform (class in neural_compressor.data)": [[178, "neural_compressor.data.BaseTransform"]], "datasets (class in neural_compressor.data)": [[178, "neural_compressor.data.DATASETS"]], "dataloader (class in neural_compressor.data)": [[178, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[178, "neural_compressor.data.Dataset"]], "filters (class in neural_compressor.data)": [[178, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[178, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[178, "neural_compressor.data.IterableDataset"]], "transforms (class in neural_compressor.data)": [[178, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[178, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[178, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[179, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[179, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[181, "module-neural_compressor.data.transforms"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[182, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[182, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[182, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[182, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[182, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[182, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[182, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[183, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[183, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[183, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[183, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[184, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[184, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[185, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[185, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[185, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[185, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[185, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[186, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[186, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[187, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[187, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[188, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[188, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[188, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[189, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[189, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[190, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[190, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[190, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[191, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[191, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[191, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[191, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[191, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[191, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[191, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[191, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[192, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[192, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[192, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[192, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[193, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[194, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[194, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[194, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[194, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[194, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[195, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[195, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[195, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[195, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[196, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[197, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[199, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[200, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[200, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[200, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[200, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[200, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[201, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[202, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[202, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[203, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[203, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[203, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[203, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[203, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[204, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[204, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[204, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[204, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[204, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[204, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[204, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[204, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[205, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[205, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[207, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[207, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[207, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[207, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[208, "neural_compressor.experimental.data.datasets.DATASETS"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[208, "neural_compressor.experimental.data.datasets.Dataset"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[208, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[208, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[208, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[209, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[210, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[210, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[210, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[211, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[211, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[212, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[212, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[212, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[212, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.BaseTransform"]], "datasets (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.DATASETS"]], "dataset (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.Dataset"]], "filters (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[213, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[213, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[213, "neural_compressor.experimental.data.transform_registry"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[214, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[214, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[214, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[214, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[215, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[215, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[215, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[215, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[215, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[216, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[216, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[216, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[216, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [217, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[217, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[217, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[217, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[217, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[217, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[217, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[218, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[218, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[218, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[218, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[218, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[218, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[218, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[218, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[219, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[219, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[220, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[220, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[220, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[220, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[220, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[220, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[220, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[220, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[220, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[220, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[220, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[220, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[220, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[220, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[220, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[220, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[220, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[220, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[220, "neural_compressor.experimental.Pruning.generate_pruners"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[220, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[220, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.model"]], "neural_compressor.experimental": [[220, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[220, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[220, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[220, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[220, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[220, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[220, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[220, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[220, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[220, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[220, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[220, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[220, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[220, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[220, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[220, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[220, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[220, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[220, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[220, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[220, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[220, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[220, "neural_compressor.experimental.Component.train_func"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[221, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[221, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[221, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[221, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[221, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[221, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[222, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[222, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[223, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[224, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[224, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[224, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[224, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[224, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[225, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[225, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[225, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[225, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[225, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[226, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[226, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[226, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[226, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[226, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[227, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[227, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[227, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[227, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[227, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[227, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[227, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[227, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[227, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[227, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[227, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[228, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[228, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[228, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[228, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[228, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[228, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[228, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[228, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[228, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[228, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[228, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[228, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[228, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[228, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[228, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[228, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[228, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[228, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[228, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[228, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[228, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[228, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[228, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[228, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[228, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[228, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[228, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[228, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[228, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[228, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[228, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[228, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[228, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[228, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[228, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[228, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[228, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[228, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[228, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[228, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[228, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[228, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[228, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[228, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[228, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[228, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[228, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[228, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[228, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[228, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[228, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[229, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[229, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[229, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[229, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[230, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[230, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[231, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[231, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[231, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[231, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[231, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[231, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[232, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[232, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[233, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[233, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[234, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[234, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[235, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[235, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[235, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[235, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[236, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[236, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[237, "module-neural_compressor.experimental.nas.dynast"]], "basicnas (class in neural_compressor.experimental.nas)": [[238, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[238, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[238, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[238, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[238, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[238, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[238, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[238, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[238, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[239, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[239, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[239, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[239, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[239, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[239, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[239, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[240, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[240, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[240, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[240, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[241, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[241, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[241, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[241, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[241, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[241, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[242, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[242, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[242, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[242, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[242, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[242, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "neural_compressor.experimental.pruning": [[242, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[242, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[242, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[242, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[242, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[242, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[242, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[243, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[243, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[243, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[243, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[244, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[244, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[244, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[244, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[245, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[245, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[246, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[246, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "neural_compressor.experimental.pytorch_pruner": [[247, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[248, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[249, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[249, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[250, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[250, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[251, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[251, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[252, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[252, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[253, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[253, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[254, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[254, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[254, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[254, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[254, "neural_compressor.experimental.quantization.Quantization.metric"]], "neural_compressor.experimental.quantization": [[254, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[254, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[254, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[254, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[254, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[255, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[255, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[255, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[255, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[255, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[255, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[255, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[256, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[256, "neural_compressor.DistillationConfig"]], "pruning (class in neural_compressor)": [[256, "neural_compressor.Pruning"]], "quantization (class in neural_compressor)": [[256, "neural_compressor.Quantization"]], "neural_compressor": [[256, "module-neural_compressor"]], "on_epoch_begin() (neural_compressor.pruning method)": [[256, "neural_compressor.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning method)": [[256, "neural_compressor.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning method)": [[256, "neural_compressor.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning method)": [[256, "neural_compressor.Pruning.on_step_end"]], "basemetric (class in neural_compressor.metric)": [[257, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[257, "neural_compressor.metric.METRICS"]], "hvd (neural_compressor.metric.basemetric property)": [[257, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[257, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[257, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[257, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[257, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[257, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[257, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[257, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[257, "neural_compressor.metric.BaseMetric.update"]], "neural_compressor.mix_precision": [[258, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[259, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[259, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[259, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[259, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[259, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[259, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[259, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[260, "neural_compressor.model.BaseModel"]], "export() (neural_compressor.model.basemodel method)": [[260, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[260, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[260, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[260, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[260, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[260, "neural_compressor.model.BaseModel.save"]], "mxnetmodel (class in neural_compressor.model.model)": [[261, "neural_compressor.model.model.MXNetModel"]], "tensorflowbasemodel (class in neural_compressor.model.model)": [[261, "neural_compressor.model.model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.model)": [[261, "neural_compressor.model.model.TensorflowCheckpointModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.model)": [[261, "neural_compressor.model.model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.estimator_session"]], "framework() (neural_compressor.model.model.mxnetmodel method)": [[261, "neural_compressor.model.model.MXNetModel.framework"]], "framework() (neural_compressor.model.model.tensorflowbasemodel method)": [[261, "neural_compressor.model.model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.frozen_pb_session"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.get_model_fwk_name"]], "get_model_type() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.graph_def_session"]], "graph_info (neural_compressor.model.model.tensorflowbasemodel property)": [[261, "neural_compressor.model.model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.graph_session"]], "keras_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.keras_session"]], "load_saved_model() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.load_saved_model"]], "model (neural_compressor.model.model.mxnetmodel property)": [[261, "neural_compressor.model.model.MXNetModel.model"]], "model (neural_compressor.model.model.tensorflowbasemodel property)": [[261, "neural_compressor.model.model.TensorflowBaseModel.model"]], "model (neural_compressor.model.model.tensorflowsavedmodelmodel property)": [[261, "neural_compressor.model.model.TensorflowSavedModelModel.model"]], "neural_compressor.model.model": [[261, "module-neural_compressor.model.model"]], "report_sparsity() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[261, "neural_compressor.model.model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.model.mxnetmodel method)": [[261, "neural_compressor.model.model.MXNetModel.save"]], "save() (neural_compressor.model.model.tensorflowbasemodel method)": [[261, "neural_compressor.model.model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.model.tensorflowsavedmodelmodel method)": [[261, "neural_compressor.model.model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.saved_model_session"]], "slim_session() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.model)": [[261, "neural_compressor.model.model.validate_graph_node"]], "weights (neural_compressor.model.model.tensorflowbasemodel property)": [[261, "neural_compressor.model.model.TensorflowBaseModel.weights"]], "neural_compressor.model.nets_factory": [[262, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[263, "neural_compressor.model.onnx_model.ONNXModel"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[263, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[263, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[263, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[263, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[264, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchipexmodel (class in neural_compressor.model.torch_model)": [[264, "neural_compressor.model.torch_model.PyTorchIpexModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[264, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[264, "neural_compressor.model.torch_model.PyTorchModel.export"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchipexmodel property)": [[264, "neural_compressor.model.torch_model.PyTorchIpexModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[264, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[264, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.pytorchipexmodel method)": [[264, "neural_compressor.model.torch_model.PyTorchIpexModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[264, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[264, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[265, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[265, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[265, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[265, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[265, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[265, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[265, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[265, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[265, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[265, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[265, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[265, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[265, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[265, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[265, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[265, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[265, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[265, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[265, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[265, "neural_compressor.objective.Performance.start"]], "neural_compressor.pruners.gradient_sensitivity": [[266, "module-neural_compressor.pruners.gradient_sensitivity"]], "neural_compressor.pruners.group_lasso": [[267, "module-neural_compressor.pruners.group_lasso"]], "neural_compressor.pruners": [[268, "module-neural_compressor.pruners"]], "neural_compressor.pruners.magnitude": [[269, "module-neural_compressor.pruners.magnitude"]], "neural_compressor.pruners.pattern_lock": [[270, "module-neural_compressor.pruners.pattern_lock"]], "neural_compressor.pruners.pruner": [[271, "module-neural_compressor.pruners.pruner"]], "pruner_registry() (in module neural_compressor.pruners.pruner)": [[271, "neural_compressor.pruners.pruner.pruner_registry"]], "pruning (class in neural_compressor.pruning)": [[272, "neural_compressor.pruning.Pruning"]], "neural_compressor.pruning": [[272, "module-neural_compressor.pruning"]], "on_epoch_begin() (neural_compressor.pruning.pruning method)": [[272, "neural_compressor.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruning.pruning method)": [[272, "neural_compressor.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruning.pruning method)": [[272, "neural_compressor.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruning.pruning method)": [[272, "neural_compressor.pruning.Pruning.on_step_end"]], "quantization (class in neural_compressor.quantization)": [[273, "neural_compressor.quantization.Quantization"]], "fit() (in module neural_compressor.quantization)": [[273, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[273, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[274, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[274, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[274, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[274, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[275, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[275, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[275, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[276, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[276, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[276, "neural_compressor.strategy.bayesian.acq_max"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[276, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[276, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[276, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[276, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[276, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[276, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[276, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[277, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[277, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[277, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[278, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[279, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[279, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "mse_metric_gap() (neural_compressor.strategy.mse.msetunestrategy method)": [[279, "neural_compressor.strategy.mse.MSETuneStrategy.mse_metric_gap"]], "neural_compressor.strategy.mse": [[279, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[279, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[280, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[280, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[280, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "neural_compressor.strategy.st_utils": [[281, "module-neural_compressor.strategy.st_utils"]], "neural_compressor.strategy.st_utils.tuning_sampler": [[282, "module-neural_compressor.strategy.st_utils.tuning_sampler"]], "neural_compressor.strategy.st_utils.tuning_space": [[283, "module-neural_compressor.strategy.st_utils.tuning_space"]], "neural_compressor.strategy.st_utils.tuning_structs": [[284, "module-neural_compressor.strategy.st_utils.tuning_structs"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[285, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[285, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[285, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[285, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[285, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[285, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "compressionmanager (class in neural_compressor.training)": [[286, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[286, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[286, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[286, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[286, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[287, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[287, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[287, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[288, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[289, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[289, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[289, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[290, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[290, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[290, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[290, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[290, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[290, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[290, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[291, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[291, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[291, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[291, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[291, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[292, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[293, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[294, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[295, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[295, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[296, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[296, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[297, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[297, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[297, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[298, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[298, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[298, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[298, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[299, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[299, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[300, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[300, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[301, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[301, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[301, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[301, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[301, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[301, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[302, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[302, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[302, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[302, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[302, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[302, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[303, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[303, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[303, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[303, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[303, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[304, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[305, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[305, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[305, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[305, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[305, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[306, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[306, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[306, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[307, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[307, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[307, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[307, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[307, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[307, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[308, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[308, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[309, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[309, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[310, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[310, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[310, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[311, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[312, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[312, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[313, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[313, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[313, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[313, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[313, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[313, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[314, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[314, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[315, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[315, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[316, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[316, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[317, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[317, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[318, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[318, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[318, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[318, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[319, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[319, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[320, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[320, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[321, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[321, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[321, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[321, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[322, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[323, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[323, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[323, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[323, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[323, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[323, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[324, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[324, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[325, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[325, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[326, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[326, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[327, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[327, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[328, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[328, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[329, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[329, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[330, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[330, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[331, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[331, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[332, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[332, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[332, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[333, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[333, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[334, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[334, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[335, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[335, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[336, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[336, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[336, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[336, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[336, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[336, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[337, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[337, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[338, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[338, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[339, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[339, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[339, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[340, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[340, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[341, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[341, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[342, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[342, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[343, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[343, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[344, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[344, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[345, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[345, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[345, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[345, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[345, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[345, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[346, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[346, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[347, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[347, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[347, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[347, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[348, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[348, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[349, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[349, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[349, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[350, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[351, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[352, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[352, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[352, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[353, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[353, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[353, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[353, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[353, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[353, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[354, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[354, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[354, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[355, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[356, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[356, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[356, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[357, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[357, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[358, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[359, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[359, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[360, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[360, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[360, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[361, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[361, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[361, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[361, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[362, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[362, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[362, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[362, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[362, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[362, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[362, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[362, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[362, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[363, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[363, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[363, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[363, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[364, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[365, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[365, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[365, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[366, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[367, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[367, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[367, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[368, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[368, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[368, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[369, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[370, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[371, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[372, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[373, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[374, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[374, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[375, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[375, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[376, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[377, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[377, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[377, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[377, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[377, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[377, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[377, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[377, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[377, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[377, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[378, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[378, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[379, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[380, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[380, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[380, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[381, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[382, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[382, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[382, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[382, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[382, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[383, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[383, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[384, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[384, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[384, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[385, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[385, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[385, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[385, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[386, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[387, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[387, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[387, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[387, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[387, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[388, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[388, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[388, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[388, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[388, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[388, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[389, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[389, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[390, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[390, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[390, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[391, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[391, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[392, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[392, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[393, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[393, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[394, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[394, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[395, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[396, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[396, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[397, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[398, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[398, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[399, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[399, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[400, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[400, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[400, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[401, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[401, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[402, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[403, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[403, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[403, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[403, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[403, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[404, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[404, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[405, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[406, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[406, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[407, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[407, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[408, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[409, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[409, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[410, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[410, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[410, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[410, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.tune": [[411, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[412, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[412, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[412, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[412, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[413, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[413, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[414, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[414, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[414, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[414, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[414, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[414, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[414, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[414, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[414, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[415, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[415, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[415, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[416, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[416, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[416, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[417, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[418, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[418, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[418, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[419, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[419, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[419, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[420, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[420, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[420, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[421, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[421, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[421, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[422, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[423, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[423, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[424, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[424, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[425, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[425, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[425, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[426, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[427, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[427, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[428, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[428, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[428, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[428, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[428, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[429, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[429, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[429, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[429, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[429, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[430, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[430, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[430, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[430, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[430, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[430, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[430, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[430, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[430, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[430, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[430, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[431, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[431, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[431, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[431, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[432, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[432, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[432, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[433, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[433, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[433, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[433, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[434, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[435, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[435, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[435, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[435, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[436, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[436, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[437, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[437, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[437, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[437, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[437, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[437, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[437, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[437, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[437, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[437, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[437, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[437, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[437, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[438, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[438, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[438, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[438, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[438, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[439, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[439, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[439, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[439, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[439, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[440, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[440, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.templates": [[441, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[442, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[442, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[442, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[443, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[443, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[443, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[443, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[443, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[444, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[444, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[445, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[445, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[445, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[445, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[446, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[446, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[446, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[446, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[446, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[447, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[447, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[447, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[447, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[447, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[447, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[448, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[448, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[448, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[449, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[450, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[450, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[450, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[451, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[451, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[451, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[451, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[451, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[452, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[452, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[452, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[453, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[453, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[453, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[453, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[453, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[453, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[454, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[454, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[454, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[454, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[454, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[455, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[455, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[455, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[456, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[456, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[456, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[456, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[456, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[456, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[456, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[456, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[456, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[456, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[456, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[456, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[456, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[457, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[457, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[457, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[457, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[457, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[458, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[458, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[459, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[460, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[460, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[460, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[461, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[461, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[462, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[462, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[463, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[463, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[463, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[463, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[463, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[463, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[464, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[465, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[465, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[465, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[466, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[466, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[467, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[467, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[467, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[468, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[468, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[468, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[469, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[469, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[469, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[469, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[469, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[469, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[470, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[470, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[470, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[470, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[470, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[471, "module-neural_compressor.version"]]}})